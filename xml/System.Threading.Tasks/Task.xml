<Type Name="Task" FullName="System.Threading.Tasks.Task">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7eb4e73011dcc6387d4b3dac6d38b797fd4d76cd" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53395845" /></Metadata><TypeSignature Language="C#" Value="public class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task extends System.Object implements class System.IAsyncResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task" />
  <TypeSignature Language="VB.NET" Value="Public Class Task&#xA;Implements IAsyncResult, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="F#" Value="type Task = class&#xA;    interface IAsyncResult&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fea4f-101">Representa uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="fea4f-101">Represents an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
   
## Remarks  
 <span data-ttu-id="fea4f-102">O <xref:System.Threading.Tasks.Task> classe representa uma única operação que não retorna um valor e que geralmente executa de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="fea4f-102">The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously.</span></span> <span data-ttu-id="fea4f-103"><xref:System.Threading.Tasks.Task> os objetos são um dos componentes da centrais de [padrão assíncrono baseado em tarefa](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) introduzido pela primeira vez no .NET Framework 4.</span><span class="sxs-lookup"><span data-stu-id="fea4f-103"><xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="fea4f-104">Porque o trabalho executado por um <xref:System.Threading.Tasks.Task> objeto normalmente executa de forma assíncrona em um thread do pool em vez de forma síncrona no thread principal do aplicativo, você pode usar o <xref:System.Threading.Tasks.Task.Status%2A> propriedade, bem como o <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, e <xref:System.Threading.Tasks.Task.IsFaulted%2A> propriedades para determinar o estado de uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-104">Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="fea4f-105">Normalmente, uma expressão lambda é usada para especificar o trabalho que a tarefa é executar.</span><span class="sxs-lookup"><span data-stu-id="fea4f-105">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="fea4f-106">Para operações que retornam valores, você deve usar o <xref:System.Threading.Tasks.Task%601> classe.</span><span class="sxs-lookup"><span data-stu-id="fea4f-106">For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.</span></span>  
  
 <span data-ttu-id="fea4f-107">Nesta seção:</span><span class="sxs-lookup"><span data-stu-id="fea4f-107">In this section:</span></span>  
  
 <span data-ttu-id="fea4f-108">[Exemplos de instanciação de tarefa](#Instant) </span><span class="sxs-lookup"><span data-stu-id="fea4f-108">[Task instantiation examples](#Instant) </span></span>  
 <span data-ttu-id="fea4f-109">[Criar e executar uma tarefa](#Creating) </span><span class="sxs-lookup"><span data-stu-id="fea4f-109">[Creating and executing a task](#Creating) </span></span>  
 <span data-ttu-id="fea4f-110">[Separação de execução e criação de tarefas](#Separating) </span><span class="sxs-lookup"><span data-stu-id="fea4f-110">[Separating task creation and execution](#Separating) </span></span>  
 <span data-ttu-id="fea4f-111">[Aguardando a conclusão de tarefas um ou mais](#WaitingForOne) </span><span class="sxs-lookup"><span data-stu-id="fea4f-111">[Waiting for one or more tasks to complete](#WaitingForOne) </span></span>  
 <span data-ttu-id="fea4f-112">[Cultura e tarefas](#Culture) </span><span class="sxs-lookup"><span data-stu-id="fea4f-112">[Tasks and culture](#Culture) </span></span>  
 [<span data-ttu-id="fea4f-113">Para desenvolvedores do depurador</span><span class="sxs-lookup"><span data-stu-id="fea4f-113">For debugger developers</span></span>](#Debugger)  

 <a name="Instant"></a>     
## <a name="task-instantiation"></a><span data-ttu-id="fea4f-114">Instanciação de tarefa</span><span class="sxs-lookup"><span data-stu-id="fea4f-114">Task instantiation</span></span>  
 <span data-ttu-id="fea4f-115">O exemplo a seguir cria e executa quatro tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-115">The following example creates and executes four tasks.</span></span> <span data-ttu-id="fea4f-116">As três tarefas são executadas uma <xref:System.Action%601> delegado chamado `action`, que aceita um argumento do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-116">Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>.</span></span> <span data-ttu-id="fea4f-117">Uma quarta tarefa executa uma expressão lambda (um <xref:System.Action> delegar) que é definido embutido na chamada para o método de criação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-117">A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method.</span></span> <span data-ttu-id="fea4f-118">Cada tarefa é instanciada e executada de forma diferente:</span><span class="sxs-lookup"><span data-stu-id="fea4f-118">Each task is instantiated and run in a different way:</span></span>  
  
-   <span data-ttu-id="fea4f-119">Tarefa `t1` é instanciado chamando um construtor de classe de tarefa, mas é iniciado ao chamar seu <xref:System.Threading.Tasks.Task.Start> método somente após a tarefa `t2` foi iniciada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-119">Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.</span></span>  
  
-   <span data-ttu-id="fea4f-120">Tarefa `t2` é instanciado e iniciada em uma única chamada de método chamando o <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-120">Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="fea4f-121">Tarefa `t3` é instanciado e iniciada em uma única chamada de método chamando o <xref:System.Threading.Tasks.Task.Run%28System.Action%29> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-121">Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
-   <span data-ttu-id="fea4f-122">Tarefa `t4` é executadas de forma síncrona no thread principal chamando o <xref:System.Threading.Tasks.Task.RunSynchronously> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-122">Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.</span></span>  
  
 <span data-ttu-id="fea4f-123">Porque tarefa `t4` executa de forma síncrona, ele executa no thread principal do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-123">Because task `t4` executes synchronously, it executes on the main application thread.</span></span> <span data-ttu-id="fea4f-124">As tarefas restantes executado de forma assíncrona normalmente em um ou mais threads do pool.</span><span class="sxs-lookup"><span data-stu-id="fea4f-124">The remaining tasks execute asynchronously typically on one or more thread pool threads.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]
 [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)] 
    
<a name="Creating"></a>   
## <a name="creating-and-executing-a-task"></a><span data-ttu-id="fea4f-125">Criar e executar uma tarefa</span><span class="sxs-lookup"><span data-stu-id="fea4f-125">Creating and executing a task</span></span>  
 <span data-ttu-id="fea4f-126"><xref:System.Threading.Tasks.Task> instâncias podem ser criadas em uma variedade de formas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-126"><xref:System.Threading.Tasks.Task> instances may be created in a variety of ways.</span></span> <span data-ttu-id="fea4f-127">A abordagem mais comum, que está disponível começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], deverá chamar estático <xref:System.Threading.Tasks.Task.Run%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-127">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method.</span></span> <span data-ttu-id="fea4f-128">O <xref:System.Threading.Tasks.Task.Run%2A> método fornece uma maneira simples para iniciar uma tarefa usando valores padrão e sem a necessidade de parâmetros adicionais.</span><span class="sxs-lookup"><span data-stu-id="fea4f-128">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters.</span></span> <span data-ttu-id="fea4f-129">O exemplo a seguir usa o <xref:System.Threading.Tasks.Task.Run%28System.Action%29> método para iniciar uma tarefa que executa um loop e, em seguida, exibe o número de iterações de loop:</span><span class="sxs-lookup"><span data-stu-id="fea4f-129">The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  
  
 <span data-ttu-id="fea4f-130">Uma alternativa e o método mais comum para iniciar uma tarefa em [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], é estático <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-130">An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-131">O <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> propriedade retorna um <xref:System.Threading.Tasks.TaskFactory> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-131">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="fea4f-132">Sobrecargas do <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método permitem que você especifique parâmetros a serem passados para as opções de criação de tarefa e um agendador de tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-132">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method let you specify parameters to pass to the task creation options and a task scheduler.</span></span> <span data-ttu-id="fea4f-133">O exemplo a seguir usa o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método para iniciar uma tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="fea4f-134">É funcionalmente equivalente ao código no exemplo anterior.</span><span class="sxs-lookup"><span data-stu-id="fea4f-134">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="fea4f-135">Para obter exemplos mais completos, consulte [programação assíncrona baseado em tarefa](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-135">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
<a name="Separating"></a>   
## <a name="separating-task-creation-and-execution"></a><span data-ttu-id="fea4f-136">Separação de execução e criação de tarefas</span><span class="sxs-lookup"><span data-stu-id="fea4f-136">Separating task creation and execution</span></span>  
 <span data-ttu-id="fea4f-137">O <xref:System.Threading.Tasks.Task> classe também fornece construtores que inicializam a tarefa, mas que não agendá-lo para execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-137">The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="fea4f-138">Por motivos de desempenho, o <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método é o mecanismo preferido para criar e agendar tarefas de computação, mas para cenários em que a criação e o agendamento devem ser separados, você pode usar os construtores e, em seguida, chamar o <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> método para agendar a tarefa para execução em um momento posterior.</span><span class="sxs-lookup"><span data-stu-id="fea4f-138">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution at a later time.</span></span>  
  
<a name="WaitingForOne"></a>   
## <a name="waiting-for-one-or-more-tasks-to-complete"></a><span data-ttu-id="fea4f-139">Aguardando a conclusão de tarefas um ou mais</span><span class="sxs-lookup"><span data-stu-id="fea4f-139">Waiting for one or more tasks to complete</span></span>  
 <span data-ttu-id="fea4f-140">Como as tarefas normalmente executadas de forma assíncrona em um pool de threads, o thread que cria e inicia a tarefa continua a execução assim que a tarefa foi instanciada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-140">Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</span></span> <span data-ttu-id="fea4f-141">Em alguns casos, quando o thread de chamada é o thread principal do aplicativo, o aplicativo pode encerrar antes de qualquer tarefa realmente inicia a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-141">In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</span></span> <span data-ttu-id="fea4f-142">Em outros, a lógica do aplicativo pode exigir que o thread de chamada continuar a execução somente quando uma ou mais tarefas concluiu a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-142">In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</span></span> <span data-ttu-id="fea4f-143">Você pode sincronizar a execução do thread de chamada assíncrona tarefas e ela inicia chamando uma `Wait` aguardar uma ou mais tarefas concluir.</span><span class="sxs-lookup"><span data-stu-id="fea4f-143">You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.</span></span>  
  
 <span data-ttu-id="fea4f-144">Para aguardar uma única tarefa ser concluída, você pode chamar seu <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-144">To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-145">Uma chamada para o <xref:System.Threading.Tasks.Task.Wait%2A> método bloqueia o thread de chamada até que a instância da classe única concluiu a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-145">A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.</span></span>  
  
 <span data-ttu-id="fea4f-146">O exemplo a seguir chama o Next sem parâmetros <xref:System.Threading.Tasks.Task.Wait> método incondicionalmente aguardar até que uma tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-146">The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes.</span></span> <span data-ttu-id="fea4f-147">A tarefa simula trabalho chamando o <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método no modo de suspensão por dois segundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-147">The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to sleep for two seconds.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]
 [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  
  
 <span data-ttu-id="fea4f-148">Você pode também condicionalmente aguardar uma tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-148">You can also conditionally wait for a task to complete.</span></span> <span data-ttu-id="fea4f-149">O <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> e <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> métodos bloqueiam o thread de chamada até que a tarefa seja concluída ou um intervalo de tempo limite expira, o que vier primeiro.</span><span class="sxs-lookup"><span data-stu-id="fea4f-149">The <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</span></span> <span data-ttu-id="fea4f-150">Como o exemplo a seguir inicia uma tarefa que entra em suspensão por dois segundos, mas define um valor de tempo limite de um segundo, o chamada thread bloqueia até que o tempo limite expirar e antes da tarefa concluiu a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-150">Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]
 [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  
  
 <span data-ttu-id="fea4f-151">Você também pode fornecer um token de cancelamento por meio da chamada a <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> e <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> métodos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-151">You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods.</span></span> <span data-ttu-id="fea4f-152">Se o token <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> é de propriedade `true` ou se torna `true` enquanto o <xref:System.Threading.Tasks.Task.Wait%2A> método está sendo executado, o método gerará uma <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-152">If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true` or becomes `true` while the <xref:System.Threading.Tasks.Task.Wait%2A> method is executing, the method throws an <xref:System.OperationCanceledException>.</span></span>  
  
 <span data-ttu-id="fea4f-153">Em alguns casos, você pode desejar esperar para o primeiro de uma série de tarefas em execução concluir, mas não o cuidado qual tarefa ele é.</span><span class="sxs-lookup"><span data-stu-id="fea4f-153">In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</span></span>  <span data-ttu-id="fea4f-154">Para essa finalidade, você pode chamar uma das sobrecargas do <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-154">For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="fea4f-155">O exemplo a seguir cria três tarefas, cada um deles entra em suspensão para um intervalo determinam por um gerador de número aleatório.</span><span class="sxs-lookup"><span data-stu-id="fea4f-155">The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</span></span> <span data-ttu-id="fea4f-156">O <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> método aguarda a primeira tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-156">The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete.</span></span> <span data-ttu-id="fea4f-157">O exemplo, em seguida, exibe informações sobre o status de todas as três tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-157">The example then displays information about the status of all three tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]
 [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  
  
 <span data-ttu-id="fea4f-158">Você também pode esperar para todos de uma série de tarefas a concluir ao chamar o <xref:System.Threading.Tasks.Task.WaitAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-158">You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method.</span></span> <span data-ttu-id="fea4f-159">O exemplo a seguir cria dez tarefas, aguarda todos os dez ser concluída e, em seguida, exibe seus status.</span><span class="sxs-lookup"><span data-stu-id="fea4f-159">The following example creates ten tasks, waits for all ten to complete, and then displays their status.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]
 [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  
  
 <span data-ttu-id="fea4f-160">Observe que, ao aguardar uma ou mais tarefas concluir, todas as exceções lançadas nas tarefas em execução sejam propagadas no thread que chama o `Wait` método, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="fea4f-160">Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows.</span></span> <span data-ttu-id="fea4f-161">Ele inicia 12 tarefas, três dos quais concluída normalmente e três dos quais lançar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-161">It launches 12 tasks, three of which complete normally and three of which throw an exception.</span></span> <span data-ttu-id="fea4f-162">Das seis tarefas restantes, três são canceladas antes do início e três serão cancelados durante a eles em execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-162">Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.</span></span> <span data-ttu-id="fea4f-163">As exceções são geradas na <xref:System.Threading.Tasks.Task.WaitAll%2A> chamada de método e são tratadas por um `try` / `catch` bloco.</span><span class="sxs-lookup"><span data-stu-id="fea4f-163">Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]
 [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  
  
 <span data-ttu-id="fea4f-164">Para obter mais informações sobre a manipulação de exceção em operações assíncronas baseadas em tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-164">For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="tasks-and-culture"></a><span data-ttu-id="fea4f-165">Cultura e tarefas</span><span class="sxs-lookup"><span data-stu-id="fea4f-165">Tasks and culture</span></span>  
 <span data-ttu-id="fea4f-166">Começando com aplicativos da área de trabalho que direcionam o [!INCLUDE[net_v46](~/includes/net-v46-md.md)], a cultura do thread que cria e invoca uma tarefa se torna parte do contexto do thread.</span><span class="sxs-lookup"><span data-stu-id="fea4f-166">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="fea4f-167">Ou seja, independentemente da cultura atual do thread no qual a tarefa é executada, a cultura atual da tarefa é a cultura do thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-167">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="fea4f-168">Para aplicativos destinados a versões do .NET Framework anteriores ao [!INCLUDE[net_v46](~/includes/net-v46-md.md)], a cultura da tarefa é a cultura do thread no qual a tarefa será executada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-168">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="fea4f-169">Para obter mais informações, consulte a seção "Cultura e operações assíncronas baseadas em tarefas" no <xref:System.Globalization.CultureInfo> tópico.</span><span class="sxs-lookup"><span data-stu-id="fea4f-169">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fea4f-170">Aplicativos do Store seguem o tempo de execução do Windows na configuração e obter a cultura padrão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-170">Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<a name="Debugger"></a>   
## <a name="for-debugger-developers"></a><span data-ttu-id="fea4f-171">Para desenvolvedores do depurador</span><span class="sxs-lookup"><span data-stu-id="fea4f-171">For debugger developers</span></span>  
 <span data-ttu-id="fea4f-172">Para os desenvolvedores implementar depuradores personalizados, vários membros internos e privados de tarefa podem ser útil (eles podem ser alterados entre versões).</span><span class="sxs-lookup"><span data-stu-id="fea4f-172">For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</span></span> <span data-ttu-id="fea4f-173">O `m_taskId` campo serve como repositório de backup para o <xref:System.Threading.Tasks.Task.Id%2A> propriedade, no entanto ao acessar esse campo diretamente de um depurador pode ser mais eficiente do que acessar o mesmo valor por meio do método de getter da propriedade (o `s_taskIdCounter` contador é usado para recuperar a próxima ID disponível para uma tarefa).</span><span class="sxs-lookup"><span data-stu-id="fea4f-173">The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task).</span></span> <span data-ttu-id="fea4f-174">Da mesma forma, o `m_stateFlags` campo armazena informações sobre o estágio do ciclo de vida atual da tarefa, as informações também é acessíveis por meio de <xref:System.Threading.Tasks.Task.Status%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="fea4f-174">Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="fea4f-175">O `m_action` campo armazena uma referência ao delegado da tarefa e o `m_stateObject` campo armazena o estado de async passado para a tarefa pelo desenvolvedor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-175">The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer.</span></span> <span data-ttu-id="fea4f-176">Por fim, para depuradores que analisam os quadros de pilha, o `InternalWait` método serve um marcador potencial para quando uma tarefa está inserindo uma operação de espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-176">Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.</span></span>   
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="fea4f-177">Todos os membros da <see cref="T:System.Threading.Tasks.Task" />, exceto para <see cref="M:System.Threading.Tasks.Task.Dispose" />, são thread-safe e podem ser usados simultaneamente de vários threads.</span><span class="sxs-lookup"><span data-stu-id="fea4f-177">All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task`1" />
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="fea4f-178">Biblioteca de tarefas paralelas (TPL)</span><span class="sxs-lookup"><span data-stu-id="fea4f-178">Task Parallel Library (TPL)</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="fea4f-179">Programação assíncrona baseada em tarefas</span><span class="sxs-lookup"><span data-stu-id="fea4f-179">Task-based Asynchronous Programming</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="fea4f-180">Exemplos de programação paralela com o .NET Framework</span><span class="sxs-lookup"><span data-stu-id="fea4f-180">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-181">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-181">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task action" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-182">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-182">The delegate that represents the code to execute in the task.</span></span></param>
        <summary><span data-ttu-id="fea4f-183">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação especificada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-183">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-184">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-184">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-185">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-185">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-186">O exemplo a seguir usa o <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> construtor para criar tarefas que recuperar os nomes de arquivos em diretórios de especificados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-186">The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories.</span></span> <span data-ttu-id="fea4f-187">Todas as tarefas de gravam os nomes de arquivo em um único <xref:System.Collections.Concurrent.ConcurrentBag%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-187">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="fea4f-188">O exemplo, em seguida, chama o <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> método para garantir que todas as tarefas foram concluídas e, em seguida, exibe uma contagem do número total de nomes de arquivo gravadas a <xref:System.Collections.Concurrent.ConcurrentBag%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-188">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  
  
 <span data-ttu-id="fea4f-189">O exemplo a seguir é idêntico, exceto que ele usado o <xref:System.Threading.Tasks.Task.Run%28System.Action%29> método para instanciar e executar a tarefa em uma única operação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-189">The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation.</span></span> <span data-ttu-id="fea4f-190">O método retorna o <xref:System.Threading.Tasks.Task> objeto que representa a tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-190">The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-191">O argumento <paramref name="action" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-191">The <paramref name="action" /> argument is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Threading.Tasks.Task.Run(System.Action)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-192">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-192">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-193">O <see cref="T:System.Threading.CancellationToken" /> que a nova tarefa observará.</span><span class="sxs-lookup"><span data-stu-id="fea4f-193">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span></span></param>
        <summary><span data-ttu-id="fea4f-194">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação especificada e <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-194">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-195">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> e <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> métodos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-195">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="fea4f-196">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-196">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="fea4f-197">Para obter mais informações, consulte [paralelismo de tarefas (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) e [cancelamento em Threads gerenciados](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-197">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-198">A exemplo a seguir chama o <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> construtor para criar uma tarefa que itera os arquivos no diretório C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="fea4f-198">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="fea4f-199">A expressão de lambda chama o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método para adicionar informações sobre cada arquivo a um <xref:System.Collections.Generic.List%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-199">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="fea4f-200">Cada desanexado tarefa aninhada invocada pelo <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop verifica o estado do token de cancelamento e, se for solicitado um cancelamento, chama o <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-200">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-201">O <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método lança um <xref:System.OperationCanceledException> exceção que é tratada em um `catch` bloquear quando o thread de chamada chama o <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-201">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="fea4f-202">O <xref:System.Threading.Tasks.Task.Start%2A> método é chamado para iniciar a tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-202">The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-203">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-203">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-204">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-204">The <paramref name="action" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-205">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-205">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="fea4f-206">O <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> usado para personalizar o comportamento da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-206">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="fea4f-207">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação especificada e opções de criação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-207">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-208">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-208">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-209">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-209">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-210">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-210">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-211">O argumento <paramref name="creationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-211">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-212">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-212">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-213">Um objeto que representa dados a serem usados pela ação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-213">An object representing data to be used by the action.</span></span></param>
        <summary><span data-ttu-id="fea4f-214">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação especificada e estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-214">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-215">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-215">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-216">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-216">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-217">O exemplo a seguir define uma matriz de palavras de letras de 6.</span><span class="sxs-lookup"><span data-stu-id="fea4f-217">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="fea4f-218">Cada palavra é então passada como um argumento para o <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> construtor, cujo <xref:System.Action%601> delegado codifica os caracteres na palavra e, em seguida, exibe a palavra original e sua versão embaralhado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-218">Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-219">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-219">The <paramref name="action" /> argument is null.</span></span></exception>
        <altmember cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-220">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-220">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-221">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que a nova tarefa observará.</span><span class="sxs-lookup"><span data-stu-id="fea4f-221">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="fea4f-222">O <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> usado para personalizar o comportamento da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-222">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="fea4f-223">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação especificada e opções de criação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-223">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-224">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-224">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-225">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-225">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="fea4f-226">Para obter mais informações, consulte [paralelismo de tarefas (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) e [cancelamento da tarefa](~/docs/standard/parallel-programming/task-cancellation.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-226">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-227">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-227">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-228">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-228">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-229">O argumento <paramref name="creationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-229">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-230">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-230">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-231">Um objeto que representa dados a serem usados pela ação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-231">An object representing data to be used by the action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-232">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que a nova tarefa observará.</span><span class="sxs-lookup"><span data-stu-id="fea4f-232">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span></span></param>
        <summary><span data-ttu-id="fea4f-233">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação, o estado e as opções especificados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-233">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-234">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-234">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-235">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-235">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-236">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-236">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-237">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-237">The <paramref name="action" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-238">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-238">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-239">Um objeto que representa dados a serem usados pela ação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-239">An object representing data to be used by the action.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="fea4f-240">O <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> usado para personalizar o comportamento da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-240">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="fea4f-241">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação, o estado e as opções especificados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-241">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-242">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-242">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-243">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-243">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-244">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-244">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-245">O argumento <paramref name="creationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-245">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-246">O delegado que representa o código a ser executado na tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-246">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-247">Um objeto que representa dados a serem usados pela ação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-247">An object representing data to be used by the action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-248">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que a nova tarefa observará.</span><span class="sxs-lookup"><span data-stu-id="fea4f-248">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="fea4f-249">O <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> usado para personalizar o comportamento da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-249">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="fea4f-250">Inicializa um novo <see cref="T:System.Threading.Tasks.Task" /> com a ação, o estado e as opções especificados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-250">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-251">Em vez de chamar esse construtor, a maneira mais comum para criar uma instância de um <xref:System.Threading.Tasks.Task> objeto e iniciar uma tarefa está chamando estático <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-251">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-252">A única vantagem oferecida por esse construtor é que ele permite que a instanciação de objetos sejam separados de invocação de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-252">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-253">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-253">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-254">O argumento <paramref name="action" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-254">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-255">O argumento <paramref name="creationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-255">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.Threading.Tasks.Task.AsyncState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-256">Obtém o objeto de estado fornecido quando o <see cref="T:System.Threading.Tasks.Task" /> foi criado ou nulo se não foi fornecido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-256">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span></span></summary>
        <value><span data-ttu-id="fea4f-257">Um <see cref="T:System.Object" /> que representa os dados de estado que foram passados para a tarefa quando ela foi criada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-257">An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-258">Converta o objeto de volta para o tipo original ao recuperar seus dados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-258">Cast the object back to the original type to retrieve its data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CompletedTask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.Task CompletedTask" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CompletedTask" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedTask As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::Task ^ CompletedTask { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedTask : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.CompletedTask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-259">Obtém uma tarefa que já foi concluída com êxito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-259">Gets a task that has already completed successfully.</span></span></summary>
        <value><span data-ttu-id="fea4f-260">A tarefa concluída com êxito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-260">The successfully completed task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-261">Essa propriedade retorna uma tarefa cujo <xref:System.Threading.Tasks.Task.Status%2A> estiver definida como <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-261">This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="fea4f-262">Para criar a tarefa que retorna um valor e é executado até a conclusão, chame o <xref:System.Threading.Tasks.Task.FromResult%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-262">To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.</span></span>  
  
 <span data-ttu-id="fea4f-263">Tentativas repetidas para recuperar o valor dessa propriedade não podem retornar sempre a mesma instância.</span><span class="sxs-lookup"><span data-stu-id="fea4f-263">Repeated attempts to retrieve this property value may not always return the same instance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="member this.ConfigureAwait : bool -&gt; System.Runtime.CompilerServices.ConfiguredTaskAwaitable" Usage="task.ConfigureAwait continueOnCapturedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext"><span data-ttu-id="fea4f-264"><see langword="true" /> para tentar realizar marshaling da continuação de volta ao contexto original capturado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-264"><see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="fea4f-265">Configura um awaiter usado para aguardar este <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-265">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="fea4f-266">Um objeto usado para aguardar essa tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-266">An object used to await this task.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-267">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-267">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith continuationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-268">Uma ação a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-268">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-269">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-269">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <summary><span data-ttu-id="fea4f-270">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-270">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="fea4f-271">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-271">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-272">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-272">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-273">O exemplo a seguir define uma tarefa que preenche uma matriz com valores de hora e data aleatória de 100.</span><span class="sxs-lookup"><span data-stu-id="fea4f-273">The following example defines a task that populates an array with 100 random date and time values.</span></span> <span data-ttu-id="fea4f-274">Ele usa o <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> método para selecionar os valores de data mais recente e o mais cedo, depois que a matriz é totalmente preenchida.</span><span class="sxs-lookup"><span data-stu-id="fea4f-274">It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  
  
 <span data-ttu-id="fea4f-275">Porque um aplicativo de console pode terminar antes que a tarefa de continuação é executada, o <xref:System.Threading.Tasks.Task.Wait> método é chamado para garantir que a continuação termina a execução antes do término de exemplo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-275">Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.</span></span>  
  
 <span data-ttu-id="fea4f-276">Para obter um exemplo adicional, consulte [encadeamento de tarefas com tarefas de continuação](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-276">For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-277">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-277">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-278">Uma ação a ser executada quando a tarefa for concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-278">An action to run when the task completes.</span></span> <span data-ttu-id="fea4f-279">Quando executado, o delegado recebe a tarefa concluída e um objeto de estado fornecido pelo chamador como argumentos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-279">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-280">Um objeto que representa os dados a serem usados pela ação de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-280">An object representing data to be used by the continuation action.</span></span></param>
        <summary><span data-ttu-id="fea4f-281">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e executa quando <see cref="T:System.Threading.Tasks.Task" /> de destino for concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-281">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="fea4f-282">Uma nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-282">A new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-283">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início devido a cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-283">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-284">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-284">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-285">Uma ação a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-285">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-286">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-286">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-287">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-287">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="fea4f-288">Cria uma continuação que recebe um token de cancelamento e é executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino é concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-288">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="fea4f-289">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-289">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-290">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-290">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-291">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou o token já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-291">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-292">O argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-292">The <paramref name="continuationAction" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-293">Uma ação a ser executada de acordo com o <paramref name="continuationOptions" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-293">An action to run according to the specified <paramref name="continuationOptions" />.</span></span> <span data-ttu-id="fea4f-294">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-294">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-295">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-295">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-296">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-296">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="fea4f-297">Cria uma continuação que é executada quando a tarefa de destino é concluída conforme o <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-297">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></summary>
        <returns><span data-ttu-id="fea4f-298">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-298">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-299">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-299">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="fea4f-300">Se os critérios de continuação especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-300">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-301">O exemplo a seguir demonstra como usar <xref:System.Threading.Tasks.TaskContinuationOptions> para especificar que uma tarefa de continuação deve ser executado sincronicamente quando a tarefa antecedente é concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-301">The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes.</span></span> <span data-ttu-id="fea4f-302">(Se a tarefa especificada já foi concluída no momento <xref:System.Threading.Tasks.Task.ContinueWith%2A> é chamado, síncronos continuação será executada na chamada thread <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span><span class="sxs-lookup"><span data-stu-id="fea4f-302">(If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span></span>  
  
```csharp  
  
public class TaskCounter  
{  
   private volatile int _count;  
  
   public void Track(Task t)  
   {  
      if (t == null) throw new ArgumentNullException("t");  
      Interlocked.Increment(ref _count);  
      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  
   }  
  
   public int NumberOfActiveTasks { get { return _count; } }  
}  
  
```  
  
```vb  
  
Public Class TaskCounter  
   Private _count as Integer  
  
   Public Sub Track(ByVal t as Task)  
      If t is Nothing Then Throw New ArgumentNullException("t")  
      Interlocked.Increment(_count)  
      t.ContinueWith(Sub(ct)  
                        Interlocked.Decrement(_count)  
                     End Sub,  
                     TaskContinuationOptions.ExecuteSynchronously)  
   End Sub  
  
   Public ReadOnly Property NumberOfActiveTasks As Integer  
      Get  
         Return _count  
      End Get  
   End Property  
End Class  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-303">O argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-303">The <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-304">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-304">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-305">Uma ação a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-305">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-306">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-306">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-307">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-307">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-308">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-308">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-309">A continuação usa um agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-309">The continuation uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-310">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-310">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-311">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-311">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-312">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-312">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-313">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-313">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fea4f-314">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-314">-or-</span></span> 
<span data-ttu-id="fea4f-315">O argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-315">The <paramref name="scheduler" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-316">Uma ação a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-316">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-317">Quando executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-317">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-318">Um objeto que representa os dados a serem usados pela ação de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-318">An object representing data to be used by the continuation action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-319">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-319">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="fea4f-320">Cria uma continuação que recebe informações de estado e um token de cancelamento fornecidos pelo chamador e que será executada de maneira assíncrona quando a <see cref="T:System.Threading.Tasks.Task" /> de destino for concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-320">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="fea4f-321">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-321">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-322">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-322">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-323">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-323">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-324">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-324">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-325">Uma ação a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-325">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-326">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-326">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-327">Um objeto que representa os dados a serem usados pela ação de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-327">An object representing data to be used by the continuation action.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-328">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-328">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-329">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-329">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="fea4f-330">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e executa quando <see cref="T:System.Threading.Tasks.Task" /> de destino for concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-330">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-331">A continuação é executada com base em um conjunto de condições especificadas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-331">The continuation executes based on a set of specified conditions.</span></span></summary>
        <returns><span data-ttu-id="fea4f-332">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-332">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-333">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-333">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="fea4f-334">Se os critérios de continuação especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-334">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-335">O argumento <paramref name="continuationAction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-335">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-336">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-336">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-337">Uma ação a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-337">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span>  <span data-ttu-id="fea4f-338">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-338">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-339">Um objeto que representa os dados a serem usados pela ação de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-339">An object representing data to be used by the continuation action.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-340">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-340">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-341">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e executa de forma assíncrona quando o destino <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-341">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-342">A continuação usa um agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-342">The continuation uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-343">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-343">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-344">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-344">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-345">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-345">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-346">Uma ação a ser executada de acordo com o <paramref name="continuationOptions" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-346">An action to run according to the specified <paramref name="continuationOptions" />.</span></span> <span data-ttu-id="fea4f-347">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-347">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-348">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-348">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-349">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-349">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-350">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-350">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-351">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-351">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-352">Cria uma continuação que é executada quando a tarefa de destino compete conforme o <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-352">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span> <span data-ttu-id="fea4f-353">A continuação recebe um token de cancelamento e usa um agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-353">The continuation receives a cancellation token and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-354">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-354">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-355">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-355">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="fea4f-356">Se os critérios especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-356">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-357">A seguir é um exemplo de usando ContinueWith para executar o trabalho em segundo plano e o usuário threads de interface.</span><span class="sxs-lookup"><span data-stu-id="fea4f-357">The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</span></span>  
  
```csharp  
  
private void Button1_Click(object sender, EventArgs e)  
{  
   var backgroundScheduler = TaskScheduler.Default;  
   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  
   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  
                         backgroundScheduler).  
   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  
                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  
                             backgroundScheduler).  
                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  
}  
  
```  
  
```vb  
  
Private Sub Button1_Click(ByVal sender As System.Object,   
                          ByVal e As System.EventArgs) Handles Button1.Click  
   Dim backgroundScheduler = TaskScheduler.Default  
   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  
  
   Task.Factory.StartNew(Sub()  
                           DoBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUI()  
                         End Sub, uiScheduler).ContinueWith(Sub(t)  
                            DoAnotherBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUIAgain()  
                         End Sub, uiScheduler)  
End Sub  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-358">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou o token já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-358">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-359">O argumento <paramref name="continuationAction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-359">The <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="fea4f-360">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-360">-or-</span></span> 
<span data-ttu-id="fea4f-361">O argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-361">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-362">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-362">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="fea4f-363">Uma ação a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-363">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-364">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-364">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-365">Um objeto que representa os dados a serem usados pela ação de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-365">An object representing data to be used by the continuation action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-366">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-366">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-367">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-367">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-368">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-368">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-369">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-369">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-370">Cria uma continuação que recebe informações de estado e um token de cancelamento fornecidos pelo chamador e que será executada quando a <see cref="T:System.Threading.Tasks.Task" /> de destino for concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-370">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-371">A continuação é executada com base em um conjunto de condições especificadas e usa um agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-371">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-372">Um novo <see cref="T:System.Threading.Tasks.Task" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-372">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-373">Retornado <xref:System.Threading.Tasks.Task> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-373">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="fea4f-374">Se os critérios especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-374">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-375">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-375">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-376">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-376">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-377">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-377">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith continuationFunction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-378">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-378">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-379">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task`1" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-379">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span></span> <span data-ttu-id="fea4f-380">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-380">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <summary><span data-ttu-id="fea4f-381">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task`1" /> de destino for concluído e retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-381">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span></span></summary>
        <returns><span data-ttu-id="fea4f-382">Uma nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-382">A new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-383">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-383">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-384">O exemplo a seguir mostra como usar o método ContinueWith:</span><span class="sxs-lookup"><span data-stu-id="fea4f-384">The following example shows how to use the ContinueWith method:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]
 [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-385">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-385">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-386">O argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-386">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-387">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-387">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-388">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-388">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-389">Quando executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-389">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-390">Um objeto que representa os dados a serem usados pela função de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-390">An object representing data to be used by the continuation function.</span></span></param>
        <summary><span data-ttu-id="fea4f-391">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e que é executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino é concluído e retorna um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-391">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span></summary>
        <returns><span data-ttu-id="fea4f-392">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-392">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-393">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-393">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-394">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-394">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-395">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-395">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-396">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-396">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-397">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-397">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-398">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-398">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="fea4f-399">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído e retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-399">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="fea4f-400">A continuação recebe um token de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-400">The continuation receives a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="fea4f-401">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-401">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-402">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-402">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-403">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-403">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span>  
  
<span data-ttu-id="fea4f-404">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-404">-or-</span></span> 
<span data-ttu-id="fea4f-405">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou o token já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-405">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-406">O argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-406">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-407">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-407">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-408">Uma função a ser executada de acordo com a condição especificada em <paramref name="continuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-408">A function to run according to the condition specified in <paramref name="continuationOptions" />.</span></span> <span data-ttu-id="fea4f-409">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-409">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-410">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-410">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-411">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-411">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="fea4f-412">Cria uma continuação que executa de acordo com as opções de continuação especificadas e retorna um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-412">Creates a continuation that executes according to the specified continuation options and returns a value.</span></span></summary>
        <returns><span data-ttu-id="fea4f-413">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-413">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-414">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-414">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="fea4f-415">Se os critérios de continuação especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-415">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-416">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-416">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-417">O argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-417">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-418">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-418">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-419">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-419">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-420">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-420">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-421">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-421">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-422">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-422">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-423">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído e retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-423">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="fea4f-424">A continuação usa um agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-424">The continuation uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-425">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-425">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-426">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-426">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-427">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-427">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-428">O argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-428">The <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="fea4f-429">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-429">-or-</span></span> 
<span data-ttu-id="fea4f-430">O argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-430">The <paramref name="scheduler" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-431">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-431">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-432">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-432">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-433">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-433">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-434">Um objeto que representa os dados a serem usados pela função de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-434">An object representing data to be used by the continuation function.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-435">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-435">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="fea4f-436">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído e retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-436">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="fea4f-437">A continuação recebe informações de estado fornecido pelo chamador e um token de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-437">The continuation receives caller-supplied state information and a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="fea4f-438">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-438">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-439">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-439">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-440">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-440">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-441">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-441">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-442">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-442">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-443">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-443">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-444">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-444">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-445">Um objeto que representa os dados a serem usados pela função de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-445">An object representing data to be used by the continuation function.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-446">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-446">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-447">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-447">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="fea4f-448">Cria uma continuação que é executada com base nas opções de continuação de tarefas especificadas quando o <see cref="T:System.Threading.Tasks.Task" /> de destino é concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-448">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-449">A continuação recebe informações de estado fornecidas pelo chamador.</span><span class="sxs-lookup"><span data-stu-id="fea4f-449">The continuation receives caller-supplied state information.</span></span></summary>
        <returns><span data-ttu-id="fea4f-450">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-450">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-451">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-451">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="fea4f-452">Se os critérios de continuação especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-452">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-453">O argumento <paramref name="continuationFunction" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-453">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-454">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-454">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-455">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-455">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-456">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-456">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span>  <span data-ttu-id="fea4f-457">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-457">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-458">Um objeto que representa os dados a serem usados pela função de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-458">An object representing data to be used by the continuation function.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-459">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-459">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-460">Criará uma continuação executada de forma assíncrona quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-460">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-461">A continuação recebe informações de estado fornecidas pelo chamador e usa um agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-461">The continuation receives caller-supplied state information and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-462">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-462">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-463">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída, independentemente de ele ser concluído devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-463">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-464">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-464">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-465">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-465">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-466">Uma função a ser executada de acordo com <c>continuationOptions</c> especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-466">A function to run according to the specified <c>continuationOptions.</c></span></span> <span data-ttu-id="fea4f-467">Quando executado, o delegado passará a tarefa concluída como um argumento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-467">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-468">O <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-468">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-469">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-469">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-470">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-470">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-471">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-471">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-472">Cria uma continuação que executa de acordo com as opções de continuação especificadas e retorna um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-472">Creates a continuation that executes according to the specified continuation options and returns a value.</span></span> <span data-ttu-id="fea4f-473">Um token de cancelamento é passado à continuação e ela usa um agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-473">The continuation is passed a cancellation token and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-474">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-474">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-475">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-475">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="fea4f-476">Se os critérios especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-476">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-477">O exemplo a seguir mostra como usar o método ContinueWith com opções de continuação:</span><span class="sxs-lookup"><span data-stu-id="fea4f-477">The following example shows how to use the ContinueWith method with continuation options:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-478">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-478">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span>  
  
<span data-ttu-id="fea4f-479">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-479">-or-</span></span> 
<span data-ttu-id="fea4f-480">O <see cref="T:System.Threading.CancellationTokenSource" /> que criou o token já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-480">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-481">O argumento <paramref name="continuationFunction" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-481">The <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="fea4f-482">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-482">-or-</span></span> 
<span data-ttu-id="fea4f-483">O argumento <paramref name="scheduler" /> é nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-483">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-484">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-484">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-485">O tipo do resultado produzido pela continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-485">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="fea4f-486">Uma função a ser executada quando o <see cref="T:System.Threading.Tasks.Task" /> for concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-486">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="fea4f-487">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-487">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="fea4f-488">Um objeto que representa os dados a serem usados pela função de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-488">An object representing data to be used by the continuation function.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-489">O <see cref="T:System.Threading.CancellationToken" /> que será atribuído à nova tarefa de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-489">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="fea4f-490">Opções para quando a continuação é agendada e como ela se comporta.</span><span class="sxs-lookup"><span data-stu-id="fea4f-490">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="fea4f-491">Isso inclui critérios como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, além de opções de execução como <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-491">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="fea4f-492">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser associado à tarefa de continuação e a ser usado para sua execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-492">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span></span></param>
        <summary><span data-ttu-id="fea4f-493">Cria uma continuação executada com base nas opções de continuação de tarefas especificadas quando o <see cref="T:System.Threading.Tasks.Task" /> de destino for concluído e retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-493">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="fea4f-494">A continuação recebe informações de estado fornecidas pelo chamador e um token de cancelamento e usa o agendador especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-494">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="fea4f-495">Um novo <see cref="T:System.Threading.Tasks.Task`1" /> de continuação.</span><span class="sxs-lookup"><span data-stu-id="fea4f-495">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-496">Retornado <xref:System.Threading.Tasks.Task%601> não será agendada para execução até que a tarefa atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-496">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="fea4f-497">Se os critérios especificados por meio de `continuationOptions` parâmetro não forem atendidas, a tarefa de continuação será cancelada em vez de agendada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-497">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-498">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-498">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-499">O argumento <paramref name="continuationOptions" /> especifica um valor inválido para <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-499">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-500">O <see cref="T:System.Threading.CancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-500">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.Task.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-501">Obtém o <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> usado para criar esta tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-501">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span></span></summary>
        <value><span data-ttu-id="fea4f-502">O <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> usado para criar esta tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-502">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;int32&gt; CurrentId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CurrentId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;int&gt; CurrentId { Nullable&lt;int&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentId : Nullable&lt;int&gt;" Usage="System.Threading.Tasks.Task.CurrentId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-503">Retorna a ID de execução que atualmente está executando <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-503">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <value><span data-ttu-id="fea4f-504">Um inteiro atribuído pelo sistema à tarefa em execução no momento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-504">An integer that was assigned by the system to the currently-executing task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-505"><xref:System.Threading.Tasks.Task.CurrentId%2A> é um `static` (`Shared` no Visual Basic) propriedade que é usada para obter o identificador da tarefa atualmente em execução do código que a tarefa está em execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-505"><xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</span></span> <span data-ttu-id="fea4f-506">Ele difere de <xref:System.Threading.Tasks.Task.Id%2A> propriedade, que retorna o identificador de um determinado <xref:System.Threading.Tasks.Task> instância.</span><span class="sxs-lookup"><span data-stu-id="fea4f-506">It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance.</span></span> <span data-ttu-id="fea4f-507">Se você tentar recuperar o <xref:System.Threading.Tasks.Task.CurrentId%2A> valor de fora do código que uma tarefa está em execução, a propriedade retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-507">If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.</span></span>  
  
 <span data-ttu-id="fea4f-508">Observe que, embora as colisões são muito raras, identificadores de tarefa não são garantidos para ser exclusivo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-508">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.Id" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delay">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-509">Cria uma tarefa que será concluída após um atraso.</span><span class="sxs-lookup"><span data-stu-id="fea4f-509">Creates a task that will complete after a time delay.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (millisecondsDelay As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="static member Delay : int -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay millisecondsDelay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay"><span data-ttu-id="fea4f-510">O número de milissegundos para esperar antes de concluir a tarefa retornada ou -1 para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-510">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-511">Cria uma tarefa que é concluída após um número especificado de milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-511">Creates a task that completes after a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="fea4f-512">Uma tarefa que representa o atraso.</span><span class="sxs-lookup"><span data-stu-id="fea4f-512">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-513">O <xref:System.Threading.Tasks.Task.Delay%2A> método normalmente é usado para atrasar a operação de todos ou parte de uma tarefa para um intervalo de tempo especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-513">The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval.</span></span> <span data-ttu-id="fea4f-514">Normalmente, o tempo de espera é introduzido:</span><span class="sxs-lookup"><span data-stu-id="fea4f-514">Most commonly, the time delay is introduced:</span></span>  
  
-   <span data-ttu-id="fea4f-515">No início da tarefa, como o exemplo a seguir mostra.</span><span class="sxs-lookup"><span data-stu-id="fea4f-515">At the beginning of the task, as the following example shows.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]
     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  
  
-   <span data-ttu-id="fea4f-516">Em algum momento durante a execução de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-516">Sometime while the task is executing.</span></span> <span data-ttu-id="fea4f-517">Nesse caso, a chamada para o <xref:System.Threading.Tasks.Task.Delay%2A> método é executado como uma tarefa filho dentro de uma tarefa, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="fea4f-517">In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows.</span></span> <span data-ttu-id="fea4f-518">Observe que desde a tarefa que chama o <xref:System.Threading.Tasks.Task.Delay%2A> método executa de forma assíncrona, a tarefa pai deve aguardar a conclusão, usando o `await` palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="fea4f-518">Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]
     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  
  
 <span data-ttu-id="fea4f-519">Após o atraso de tempo especificado, a tarefa é concluída no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-519">After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="fea4f-520">Esse método depende do relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="fea4f-520">This method depends on the system clock.</span></span> <span data-ttu-id="fea4f-521">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o `millisecondsDelay` argumento for menor que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</span><span class="sxs-lookup"><span data-stu-id="fea4f-521">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-522">O exemplo a seguir mostra um uso simples dos <xref:System.Threading.Tasks.Task.Delay%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-522">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-523">O argumento <paramref name="millisecondsDelay" /> é menor que -1.</span><span class="sxs-lookup"><span data-stu-id="fea4f-523">The <paramref name="millisecondsDelay" /> argument is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (delay As TimeSpan) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay"><span data-ttu-id="fea4f-524">O tempo que se deve aguardar antes de concluir a tarefa retornada ou <see langword="TimeSpan.FromMilliseconds(-1)" /> para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-524">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-525">Cria uma tarefa que é concluída após um intervalo de tempo especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-525">Creates a task that completes after a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="fea4f-526">Uma tarefa que representa o atraso.</span><span class="sxs-lookup"><span data-stu-id="fea4f-526">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-527">Após o atraso de tempo especificado, a tarefa é concluída em <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-527">After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="fea4f-528">Para cenários de uso e exemplos adicionais, consulte a documentação para o <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="fea4f-528">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="fea4f-529">Esse método depende do relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="fea4f-529">This method depends on the system clock.</span></span> <span data-ttu-id="fea4f-530">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o `delay` argumento for menor que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</span><span class="sxs-lookup"><span data-stu-id="fea4f-530">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-531">O exemplo a seguir mostra um uso simples dos <xref:System.Threading.Tasks.Task.Delay%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-531">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-532"><paramref name="delay" /> representa um intervalo de tempo negativo diferente de <see langword="TimeSpan.FromMillseconds(-1)" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-532"><paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span></span>  
  
<span data-ttu-id="fea4f-533">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-533">-or-</span></span> 
<span data-ttu-id="fea4f-534">A propriedade <see cref="P:System.TimeSpan.TotalMilliseconds" /> do argumento <paramref name="delay" /> é maior do que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-534">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (millisecondsDelay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay"><span data-ttu-id="fea4f-535">O número de milissegundos para esperar antes de concluir a tarefa retornada ou -1 para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-535">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-536">Um token de cancelamento a ser observado ao aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-536">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-537">Cria uma tarefa cancelável concluída após um número especificado de milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-537">Creates a cancellable task that completes after a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="fea4f-538">Uma tarefa que representa o atraso.</span><span class="sxs-lookup"><span data-stu-id="fea4f-538">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-539">Se o token de cancelamento é sinalizado antes do atraso de tempo especificado, uma <xref:System.Threading.Tasks.TaskCanceledException> resultados da exceção e a tarefa for concluída no <xref:System.Threading.Tasks.TaskStatus.Canceled> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-539">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="fea4f-540">Caso contrário, a tarefa é concluída no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado depois que o atraso de tempo especificado tiver decorrido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-540">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="fea4f-541">Para cenários de uso e exemplos adicionais, consulte a documentação para o <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="fea4f-541">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="fea4f-542">Esse método depende do relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="fea4f-542">This method depends on the system clock.</span></span> <span data-ttu-id="fea4f-543">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o `millisecondsDelay` argumento for menor que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</span><span class="sxs-lookup"><span data-stu-id="fea4f-543">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-544">O exemplo a seguir inicia uma tarefa que inclui uma chamada para o <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> método com um atraso de um segundo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-544">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay.</span></span> <span data-ttu-id="fea4f-545">Antes de expira o intervalo de atraso, o token foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-545">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="fea4f-546">A saída do exemplo mostra que, como resultado, uma <xref:System.Threading.Tasks.TaskCanceledException> é lançada e as tarefas <xref:System.Threading.Tasks.Task.Status%2A> estiver definida como <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-546">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-547">O argumento <paramref name="millisecondsDelay" /> é menor que -1.</span><span class="sxs-lookup"><span data-stu-id="fea4f-547">The <paramref name="millisecondsDelay" /> argument is less than -1.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fea4f-548">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-548">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-549">O <paramref name="cancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-549">The provided <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delay"><span data-ttu-id="fea4f-550">O tempo que se deve aguardar antes de concluir a tarefa retornada ou <see langword="TimeSpan.FromMilliseconds(-1)" /> para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-550">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-551">Um token de cancelamento a ser observado ao aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-551">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-552">Cria uma tarefa cancelável concluída após um intervalo de tempo especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-552">Creates a cancellable task that completes after a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="fea4f-553">Uma tarefa que representa o atraso.</span><span class="sxs-lookup"><span data-stu-id="fea4f-553">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-554">Se o token de cancelamento é sinalizado antes do atraso de tempo especificado, uma <xref:System.Threading.Tasks.TaskCanceledException> resultados da exceção e a tarefa for concluída no <xref:System.Threading.Tasks.TaskStatus.Canceled> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-554">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="fea4f-555">Caso contrário, a tarefa é concluída no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado depois que o atraso de tempo especificado tiver decorrido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-555">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="fea4f-556">Para cenários de uso e exemplos adicionais, consulte a documentação para o <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="fea4f-556">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="fea4f-557">Esse método depende do relógio do sistema.</span><span class="sxs-lookup"><span data-stu-id="fea4f-557">This method depends on the system clock.</span></span> <span data-ttu-id="fea4f-558">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o `delay` argumento for menor que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</span><span class="sxs-lookup"><span data-stu-id="fea4f-558">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-559">O exemplo a seguir inicia uma tarefa que inclui uma chamada para o <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> método com um atraso de 1,5 segundo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-559">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a 1.5 second delay.</span></span> <span data-ttu-id="fea4f-560">Antes de expira o intervalo de atraso, o token foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-560">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="fea4f-561">A saída do exemplo mostra que, como resultado, uma <xref:System.Threading.Tasks.TaskCanceledException> é lançada e as tarefas <xref:System.Threading.Tasks.Task.Status%2A> estiver definida como <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-561">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  
  
 <span data-ttu-id="fea4f-562">Observe que este exemplo inclui uma condição de corrida potenciais: depende da tarefa de execução de forma assíncrona o atraso quando o token é cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-562">Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</span></span> <span data-ttu-id="fea4f-563">Embora o 1,5 segundo atrasar da chamada para o <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> método faz essa suposição prováveis, mesmo assim, é possível que a chamada para o <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> método poderia retornar antes que o token seja cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-563">Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled.</span></span> <span data-ttu-id="fea4f-564">Nesse caso, o exemplo produz a saída a seguir:</span><span class="sxs-lookup"><span data-stu-id="fea4f-564">In that case, the example produces the following output:</span></span>  
  
```  
Task t Status: RanToCompletion, Result: 42  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-565"><paramref name="delay" /> representa um intervalo de tempo negativo diferente de <see langword="TimeSpan.FromMillseconds(-1)" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-565"><paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span></span>  
  
<span data-ttu-id="fea4f-566">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-566">-or-</span></span> 
<span data-ttu-id="fea4f-567">A propriedade <see cref="P:System.TimeSpan.TotalMilliseconds" /> do argumento <paramref name="delay" /> é maior do que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-567">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fea4f-568">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-568">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-569">O <paramref name="cancellationToken" /> fornecido já foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-569">The provided <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-570">Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-570">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="task.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fea4f-571">Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-571">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-572">O <xref:System.Threading.Tasks.Task> classe implementa as <xref:System.IDisposable> interface porque ele usa internamente recursos que também implementam <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-572">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="fea4f-573">No entanto, especialmente se seu aplicativo for destinado à [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ou posterior, não há nenhuma necessidade de chamar <xref:System.Threading.Tasks.Task.Dispose%2A> , a menos que o desempenho ou teste de escalabilidade indica que, com base nos seus padrões de uso, desempenho do seu aplicativo seria melhorado com a eliminação de tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-573">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="fea4f-574">Para obter mais informações, consulte [é necessário descartar tarefas?](https://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="fea4f-574">For more information, see [Do I need to dispose of Tasks?](https://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fea4f-575">A tarefa não está em um dos estados finais: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-575">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="task.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="fea4f-576">Um valor booliano que indica se esse método está sendo chamado devido a uma chamada a <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-576">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span></span></param>
        <summary><span data-ttu-id="fea4f-577">Descarta o <see cref="T:System.Threading.Tasks.Task" />, liberando todos os seus recursos não gerenciados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-577">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-578">O <xref:System.Threading.Tasks.Task> classe implementa as <xref:System.IDisposable> interface porque ele usa internamente recursos que também implementam <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-578">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="fea4f-579">No entanto, especialmente se seu aplicativo for destinado à [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ou posterior, não há nenhuma necessidade de chamar <xref:System.Threading.Tasks.Task.Dispose%2A> , a menos que o desempenho ou teste de escalabilidade indica que, com base nos seus padrões de uso, desempenho do seu aplicativo seria melhorado com a eliminação de tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-579">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="fea4f-580">Para obter mais informações, consulte [é necessário descartar tarefas?](https://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="fea4f-580">For more information, see [Do I need to dispose of Tasks?](https://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fea4f-581">A tarefa não está em um dos estados finais: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-581">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span></span></exception>
        <threadsafe><span data-ttu-id="fea4f-582">Ao contrário da maioria dos membros a <see cref="T:System.Threading.Tasks.Task" /> classe, esse método não é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="fea4f-582">Unlike most of the members of the <see cref="T:System.Threading.Tasks.Task" /> class, this method is not thread-safe.</span></span></threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : AggregateException" Usage="System.Threading.Tasks.Task.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-583">Obtém o <see cref="T:System.AggregateException" /> que fez com que o <see cref="T:System.Threading.Tasks.Task" /> fosse encerrado prematuramente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-583">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span></span> <span data-ttu-id="fea4f-584">Se o <see cref="T:System.Threading.Tasks.Task" /> tiver sido concluído com êxito ou ainda não tiver lançado exceções, isso retornará <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-584">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span></span></summary>
        <value><span data-ttu-id="fea4f-585">O <see cref="T:System.AggregateException" /> que fez com que o <see cref="T:System.Threading.Tasks.Task" /> fosse encerrado prematuramente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-585">The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-586">Tarefas que lançam exceções sem tratamento armazenar a exceção resultante e propagá-lo encapsulado em um <xref:System.AggregateException> em chamadas para <xref:System.Threading.Tasks.Task.Wait%2A> ou em acessos ao <xref:System.Threading.Tasks.Task.Exception%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="fea4f-586">Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span> <span data-ttu-id="fea4f-587">Todas as exceções não observadas no momento em que a instância de tarefa é coletado como lixo serão propagadas no thread do finalizador.</span><span class="sxs-lookup"><span data-stu-id="fea4f-587">Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</span></span> <span data-ttu-id="fea4f-588">Para obter mais informações e um exemplo, consulte [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-588">For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory ^ Factory { System::Threading::Tasks::TaskFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Factory : System.Threading.Tasks.TaskFactory" Usage="System.Threading.Tasks.Task.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-589">Fornece acesso a métodos de fábrica para criar e configurar as instâncias <see cref="T:System.Threading.Tasks.Task" /> e <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-589">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span></span></summary>
        <value><span data-ttu-id="fea4f-590">Um objeto de fábrica que pode criar uma variedade de objetos <see cref="T:System.Threading.Tasks.Task" /> e <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-590">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-591">Essa propriedade retorna uma instância padrão do <xref:System.Threading.Tasks.TaskFactory> classe que é idêntico àquele criado chamando o Next sem parâmetros <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> construtor.</span><span class="sxs-lookup"><span data-stu-id="fea4f-591">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="fea4f-592">Ele tem os seguintes valores de propriedade:</span><span class="sxs-lookup"><span data-stu-id="fea4f-592">It has the following property values:</span></span>  
  
|<span data-ttu-id="fea4f-593">Propriedade</span><span class="sxs-lookup"><span data-stu-id="fea4f-593">Property</span></span>|<span data-ttu-id="fea4f-594">Valor</span><span class="sxs-lookup"><span data-stu-id="fea4f-594">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="fea4f-595">`null`, ou <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="fea4f-595">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="fea4f-596">O uso mais comum dessa propriedade é criar e iniciar uma nova tarefa em uma única chamada para o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-596">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fea4f-597">Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], o <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método fornece a maneira mais fácil de criar um <xref:System.Threading.Tasks.Task> objeto com valores de configuração padrão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-597">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.</span></span>  
  
 <span data-ttu-id="fea4f-598">O exemplo a seguir usa estático <xref:System.Threading.Tasks.Task.Factory%2A> propriedade para fazer duas chamadas para o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-598">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-599">A primeira preenche uma matriz com os nomes dos arquivos no diretório de Meus documentos do usuário, enquanto o segundo preenche uma matriz com os nomes dos subdiretórios do diretório MyDocuments do usuário.</span><span class="sxs-lookup"><span data-stu-id="fea4f-599">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="fea4f-600">Em seguida, ele chama o <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> método, que exibe informações sobre o número de arquivos e diretórios em duas matrizes depois que as duas primeiras tarefas sejam completadas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-600">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskFactory" />
      </Docs>
    </Member>
    <Member MemberName="FromCanceled">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="fea4f-601">O token de cancelamento a ser usado para concluir a tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-601">The cancellation token with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="fea4f-602">Cria um <see cref="T:System.Threading.Tasks.Task" /> que é concluído devido ao cancelamento com um token de cancelamento especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-602">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span></span></summary>
        <returns><span data-ttu-id="fea4f-603">A tarefa cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-603">The canceled task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-604">O cancelamento não foi solicitado para <paramref name="cancellationToken" />; sua propriedade <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> é <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-604">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromCanceled&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromCanceled&lt;TResult&gt;(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-605">O tipo de resultado retornado pela tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-605">The type of the result returned by the task.</span></span></typeparam>
        <param name="cancellationToken"><span data-ttu-id="fea4f-606">O token de cancelamento a ser usado para concluir a tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-606">The cancellation token with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="fea4f-607">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que é concluído devido ao cancelamento com um token de cancelamento especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-607">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span></span></summary>
        <returns><span data-ttu-id="fea4f-608">A tarefa cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-608">The canceled task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-609">O cancelamento não foi solicitado para <paramref name="cancellationToken" />; sua propriedade <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> é <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-609">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromException">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="fea4f-610">A exceção com a qual a tarefa será concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-610">The exception with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="fea4f-611">Cria um <see cref="T:System.Threading.Tasks.Task" /> que foi concluído com uma exceção especificada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-611">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span></span></summary>
        <returns><span data-ttu-id="fea4f-612">A tarefa com falha.</span><span class="sxs-lookup"><span data-stu-id="fea4f-612">The faulted task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-613">Esse método cria uma <xref:System.Threading.Tasks.Task> do objeto cuja <xref:System.Threading.Tasks.Task.Status%2A> é de propriedade <xref:System.Threading.Tasks.TaskStatus.Faulted> e cujos <xref:System.Threading.Tasks.Task.Exception%2A> propriedade contém `exception`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-613">This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="fea4f-614">O método normalmente é usado quando você sabe imediatamente que o trabalho que executa uma tarefa lançará uma exceção antes de executar um caminho mais longo de código.</span><span class="sxs-lookup"><span data-stu-id="fea4f-614">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="fea4f-615">Por exemplo, consulte o <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="fea4f-615">For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromException&lt;TResult&gt;(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException``1(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-616">O tipo de resultado retornado pela tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-616">The type of the result returned by the task.</span></span></typeparam>
        <param name="exception"><span data-ttu-id="fea4f-617">A exceção com a qual a tarefa será concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-617">The exception with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="fea4f-618">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que é concluído com uma exceção especificada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-618">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span></span></summary>
        <returns><span data-ttu-id="fea4f-619">A tarefa com falha.</span><span class="sxs-lookup"><span data-stu-id="fea4f-619">The faulted task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-620">Esse método cria uma <xref:System.Threading.Tasks.Task%601> do objeto cuja <xref:System.Threading.Tasks.Task.Status%2A> é de propriedade <xref:System.Threading.Tasks.TaskStatus.Faulted> e cujos <xref:System.Threading.Tasks.Task.Exception%2A> propriedade contém `exception`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-620">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="fea4f-621">O método normalmente é usado quando você sabe imediatamente que o trabalho que executa uma tarefa lançará uma exceção antes de executar um caminho mais longo de código.</span><span class="sxs-lookup"><span data-stu-id="fea4f-621">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="fea4f-622">O exemplo fornece uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="fea4f-622">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-623">O exemplo a seguir é um utilitário de linha de comando que calcula o número de bytes nos arquivos em cada diretório cujo nome é passado como um argumento de linha de comando.</span><span class="sxs-lookup"><span data-stu-id="fea4f-623">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="fea4f-624">Em vez de executar um caminho mais longo de código que cria uma instância de um <xref:System.IO.FileInfo> do objeto e recupera o valor do seu <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> propriedade para cada arquivo no diretório, o exemplo simplesmente chama o <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> método para criar uma tarefa com falha se um determinado subdiretório não existe.</span><span class="sxs-lookup"><span data-stu-id="fea4f-624">Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResult&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromResult&lt;TResult&gt;(!!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromResult(Of TResult) (result As TResult) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromResult(TResult result);" />
      <MemberSignature Language="F#" Value="static member FromResult : 'Result -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromResult result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-625">O tipo de resultado retornado pela tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-625">The type of the result returned by the task.</span></span></typeparam>
        <param name="result"><span data-ttu-id="fea4f-626">O resultado a armazenar na tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-626">The result to store into the completed task.</span></span></param>
        <summary><span data-ttu-id="fea4f-627">Cria um <see cref="T:System.Threading.Tasks.Task`1" /> que é concluído com êxito com o resultado especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-627">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span></span></summary>
        <returns><span data-ttu-id="fea4f-628">A tarefa concluída com êxito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-628">The successfully completed task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-629">Esse método cria uma <xref:System.Threading.Tasks.Task%601> do objeto cuja <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> é de propriedade `result` e cujos <xref:System.Threading.Tasks.Task.Status%2A> é de propriedade <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-629">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="fea4f-630">O método normalmente é usado quando o valor de retorno de uma tarefa é conhecido imediatamente sem executar um caminho mais longo de código.</span><span class="sxs-lookup"><span data-stu-id="fea4f-630">The method is commonly used when the return value of a task is immediately known without executing a longer code path.</span></span> <span data-ttu-id="fea4f-631">O exemplo fornece uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="fea4f-631">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="fea4f-632">Para criar um objeto de tarefa que não retorna um valor, recuperar o objeto de tarefa do <xref:System.Threading.Tasks.Task.CompletedTask%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="fea4f-632">To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-633">O exemplo a seguir é um utilitário de linha de comando que calcula o número de bytes nos arquivos em cada diretório cujo nome é passado como um argumento de linha de comando.</span><span class="sxs-lookup"><span data-stu-id="fea4f-633">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="fea4f-634">Em vez de executar um caminho mais longo de código que cria uma instância de um <xref:System.IO.FileStream> do objeto e recupera o valor do seu <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> propriedade para cada arquivo no diretório, o exemplo simplesmente chama o <xref:System.Threading.Tasks.Task.FromResult%2A> método para criar uma tarefa cujo <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> propriedade é zero (0) se um diretório não tem arquivos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-634">Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0) if a directory has no files.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CompletedTask" />
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();" />
      <MemberSignature Language="F#" Value="member this.GetAwaiter : unit -&gt; System.Runtime.CompilerServices.TaskAwaiter" Usage="task.GetAwaiter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fea4f-635">Obtém um awaiter usado para aguardar este <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-635">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="fea4f-636">Uma instância de awaiter.</span><span class="sxs-lookup"><span data-stu-id="fea4f-636">An awaiter instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-637">Esse método é destinado para uso pelo compilador em vez de usar no código do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-637">This method is intended for compiler use rather than for use in application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Threading.Tasks.Task.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-638">Obtém uma ID para esta instância <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-638">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span></span></summary>
        <value><span data-ttu-id="fea4f-639">O identificador atribuído pelo sistema para esta instância <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-639">The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-640">IDs de tarefas são atribuídas por demanda e não representam, necessariamente, a ordem na qual a tarefa instâncias são criadas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-640">Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</span></span> <span data-ttu-id="fea4f-641">Observe que, embora as colisões são muito raras, identificadores de tarefa não são garantidos para ser exclusivo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-641">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 <span data-ttu-id="fea4f-642">Para obter a ID da tarefa da tarefa em execução no momento de dentro do código que a tarefa está em execução, use o <xref:System.Threading.Tasks.Task.CurrentId%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="fea4f-642">To get the task ID of the currently executing task from within code that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public bool IsCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCanceled : bool" Usage="System.Threading.Tasks.Task.IsCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-643">Obtém se essa instância <see cref="T:System.Threading.Tasks.Task" /> concluiu sua execução porque foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-643">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span></span></summary>
        <value><span data-ttu-id="fea4f-644"><see langword="true" /> se a tarefa foi concluída porque foi cancelada, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-644"><see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-645">Um <xref:System.Threading.Tasks.Task> será concluída no <xref:System.Threading.Tasks.TaskStatus.Canceled> estado em qualquer uma das seguintes condições:</span><span class="sxs-lookup"><span data-stu-id="fea4f-645">A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="fea4f-646">Seu <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> foi marcado para o cancelamento antes da tarefa começou a executar,</span><span class="sxs-lookup"><span data-stu-id="fea4f-646">Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,</span></span>  
  
-   <span data-ttu-id="fea4f-647">A tarefa confirmou a solicitação de cancelamento em sinalizado já <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> lançando uma <xref:System.OperationCanceledException> que tem o mesmo <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-647">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.</span></span>  
  
-   <span data-ttu-id="fea4f-648">A tarefa confirmou a solicitação de cancelamento em sinalizado já <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> chamando o <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> método o <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-648">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fea4f-649">Recuperar o valor da <xref:System.Threading.Tasks.Task.IsCanceled%2A> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-649">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.Task.IsCompleted" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-650">Obtém a informação de se esta <see cref="T:System.Threading.Tasks.Task" /> foi concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-650">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</span></span></summary>
        <value><span data-ttu-id="fea4f-651"><see langword="true" /> se a tarefa foi concluída; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-651"><see langword="true" /> if the task has completed; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-652"><xref:System.Threading.Tasks.Task.IsCompleted%2A> retornará `true` quando a tarefa está em um dos três estados finais: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-652"><xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fea4f-653">Recuperar o valor da <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-653">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public bool IsCompletedSuccessfully { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedSuccessfully" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompletedSuccessfully As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompletedSuccessfully { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompletedSuccessfully : bool" Usage="System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public bool IsFaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFaulted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsFaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFaulted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFaulted : bool" Usage="System.Threading.Tasks.Task.IsFaulted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-654">Obtém se o <see cref="T:System.Threading.Tasks.Task" /> foi concluído devido a uma exceção sem tratamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-654">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span></span></summary>
        <value><span data-ttu-id="fea4f-655"><see langword="true" /> se a tarefa lançou uma exceção sem tratamento; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-655"><see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-656">Se <xref:System.Threading.Tasks.Task.IsFaulted%2A> está `true`, a tarefa <xref:System.Threading.Tasks.Task.Status%2A> é igual a <xref:System.Threading.Tasks.TaskStatus.Faulted>e seu <xref:System.Threading.Tasks.Task.Exception%2A> propriedade será não nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-656">If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fea4f-657">Recuperar o valor da <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-657">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-658">Coloca o trabalho especificado na fila para execução no ThreadPool e retorna uma tarefa ou um identificador <see cref="T:System.Threading.Tasks.Task`1" /> para esse trabalho.</span><span class="sxs-lookup"><span data-stu-id="fea4f-658">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-659">O <xref:System.Threading.Tasks.Task.Run%2A> método fornece um conjunto de sobrecargas que facilitam a iniciar uma tarefa usando valores padrão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-659">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a set of overloads that make it easy to start a task by using default values.</span></span> <span data-ttu-id="fea4f-660">É uma alternativa leve para o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-660">It is a lightweight alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action);" />
      <MemberSignature Language="F#" Value="static member Run : Action -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-661">O trabalho a ser executado de forma assíncrona</span><span class="sxs-lookup"><span data-stu-id="fea4f-661">The work to execute asynchronously</span></span></param>
        <summary><span data-ttu-id="fea4f-662">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <see cref="T:System.Threading.Tasks.Task" /> que representa o trabalho.</span><span class="sxs-lookup"><span data-stu-id="fea4f-662">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span></span></summary>
        <returns><span data-ttu-id="fea4f-663">Uma tarefa que representa o trabalho na fila a ser executado no ThreadPool.</span><span class="sxs-lookup"><span data-stu-id="fea4f-663">A task that represents the work queued to execute in the ThreadPool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-664">O <xref:System.Threading.Tasks.Task.Run%2A> método permite que você crie e execute uma tarefa em uma única chamada de método e é uma alternativa mais simples para o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-664">The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="fea4f-665">Ele cria uma tarefa com os seguintes valores padrão:</span><span class="sxs-lookup"><span data-stu-id="fea4f-665">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="fea4f-666">Seu token de cancelamento é <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-666">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="fea4f-667">Sua <xref:System.Threading.Tasks.Task.CreationOptions%2A> é o valor da propriedade <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-667">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="fea4f-668">Ele usa o Agendador de tarefas padrão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-668">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="fea4f-669">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-669">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-670">O exemplo a seguir define uma `ShowThreadInfo` método que exibe o <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> do thread atual.</span><span class="sxs-lookup"><span data-stu-id="fea4f-670">The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> of the current thread.</span></span> <span data-ttu-id="fea4f-671">Ele é chamado diretamente no thread do aplicativo e é chamado a partir de <xref:System.Action> delegado passado para o <xref:System.Threading.Tasks.Task.Run%28System.Action%29> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-671">It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]
 [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  
  
 <span data-ttu-id="fea4f-672">O exemplo a seguir é semelhante ao anterior, exceto que ele usa uma expressão lambda para definir o código que a tarefa deve ser executada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-672">The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  
  
 <span data-ttu-id="fea4f-673">Os exemplos mostram que a tarefa assíncrona é executado em um thread diferente do thread principal do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-673">The examples show that the asynchronous task executes on a different thread than the main application thread.</span></span>  
  
 <span data-ttu-id="fea4f-674">A chamada para o <xref:System.Threading.Tasks.Task.Wait%2A> método garante que a tarefa for concluída e exibe seu resultado antes do aplicativo é encerrado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-674">The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends.</span></span> <span data-ttu-id="fea4f-675">Caso contrário, é possível que o `Main` método será concluído antes da tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-675">Otherwise, it is possible that the `Main` method will complete before the task finishes.</span></span>  
  
 <span data-ttu-id="fea4f-676">O exemplo a seguir ilustra o <xref:System.Threading.Tasks.Task.Run%28System.Action%29> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-676">The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span> <span data-ttu-id="fea4f-677">Ele define uma matriz de nomes de diretório e inicia uma tarefa separada para recuperar os nomes de arquivo em cada diretório.</span><span class="sxs-lookup"><span data-stu-id="fea4f-677">It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</span></span> <span data-ttu-id="fea4f-678">Todas as tarefas de gravam os nomes de arquivo em um único <xref:System.Collections.Concurrent.ConcurrentBag%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-678">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="fea4f-679">O exemplo, em seguida, chama o <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> método para garantir que todas as tarefas foram concluídas e, em seguida, exibe uma contagem do número total de nomes de arquivo gravadas a <xref:System.Collections.Concurrent.ConcurrentBag%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-679">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-680">O parâmetro <paramref name="action" /> era <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-680">The <paramref name="action" /> parameter was <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-681">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-681">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run (function As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="fea4f-682">O trabalho a ser executado de forma assíncrona</span><span class="sxs-lookup"><span data-stu-id="fea4f-682">The work to execute asynchronously</span></span></param>
        <summary><span data-ttu-id="fea4f-683">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para a tarefa retornada pelo <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-683">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="fea4f-684">Uma tarefa que representa um proxy para a tarefa retornada pelo <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-684">A task that represents a proxy for the task returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-685">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-685">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-686">O parâmetro <paramref name="function" /> era <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-686">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-687">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-687">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fea4f-688">O trabalho a ser executado de forma assíncrona</span><span class="sxs-lookup"><span data-stu-id="fea4f-688">The work to execute asynchronously</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-689">Um token de cancelamento que pode ser usado para cancelar o trabalho</span><span class="sxs-lookup"><span data-stu-id="fea4f-689">A cancellation token that can be used to cancel the work</span></span></param>
        <summary><span data-ttu-id="fea4f-690">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <see cref="T:System.Threading.Tasks.Task" /> que representa o trabalho.</span><span class="sxs-lookup"><span data-stu-id="fea4f-690">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span></span> <span data-ttu-id="fea4f-691">Um token de cancelamento permite que o trabalho seja cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-691">A cancellation token allows the work to be cancelled.</span></span></summary>
        <returns><span data-ttu-id="fea4f-692">Uma tarefa que representa o trabalho na fila a ser executado no pool de threads.</span><span class="sxs-lookup"><span data-stu-id="fea4f-692">A task that represents the work queued to execute in the thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-693">Se for solicitado o cancelamento antes da tarefa começa a ser executada, a tarefa não será executada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-693">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="fea4f-694">Em vez disso, ele é definido como o <xref:System.Threading.Tasks.TaskStatus.Canceled> estado e gera um <xref:System.Threading.Tasks.TaskCanceledException> exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-694">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="fea4f-695">O <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> método é uma alternativa mais simples para o <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-695">The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-696">Ele cria uma tarefa com os seguintes valores padrão:</span><span class="sxs-lookup"><span data-stu-id="fea4f-696">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="fea4f-697">Sua <xref:System.Threading.Tasks.Task.CreationOptions%2A> é o valor da propriedade <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-697">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="fea4f-698">Ele usa o Agendador de tarefas padrão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-698">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="fea4f-699">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-699">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-700">A exemplo a seguir chama o <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> método para criar uma tarefa que itera os arquivos no diretório C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="fea4f-700">The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="fea4f-701">A expressão de lambda chama o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método para adicionar informações sobre cada arquivo a um <xref:System.Collections.Generic.List%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-701">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="fea4f-702">Cada desanexado tarefa aninhada invocada pelo <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop verifica o estado do token de cancelamento e, se for solicitado um cancelamento, chama o <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-702">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-703">O <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método lança um <xref:System.OperationCanceledException> exceção que é tratada em um `catch` bloquear quando o thread de chamada chama o <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-703">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-704">O parâmetro <paramref name="action" /> era <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-704">The <paramref name="action" /> parameter was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fea4f-705">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-705">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-706">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <paramref name="cancellationToken" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-706">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-707">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-707">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="fea4f-708">O trabalho a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="fea4f-708">The work to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-709">Um token de cancelamento que deve ser usado para cancelar o trabalho.</span><span class="sxs-lookup"><span data-stu-id="fea4f-709">A cancellation token that should be used to cancel the work.</span></span></param>
        <summary><span data-ttu-id="fea4f-710">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para a tarefa retornada pelo <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-710">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="fea4f-711">Uma tarefa que representa um proxy para a tarefa retornada pelo <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-711">A task that represents a proxy for the task returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-712">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-712">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-713">O parâmetro <paramref name="function" /> era <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-713">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fea4f-714">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-714">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-715">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <paramref name="cancellationToken" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-715">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="fea4f-716">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="fea4f-716">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-717">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-717">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-718">O tipo de resultado retornado pela tarefa de proxy.</span><span class="sxs-lookup"><span data-stu-id="fea4f-718">The type of the result returned by the proxy task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="fea4f-719">O trabalho a ser executado de forma assíncrona</span><span class="sxs-lookup"><span data-stu-id="fea4f-719">The work to execute asynchronously</span></span></param>
        <summary><span data-ttu-id="fea4f-720">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para <see langword="Task(TResult)" /> retornado por <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-720">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="fea4f-721">Um <see langword="Task(TResult)" /> que representa um proxy para o <see langword="Task(TResult)" /> retornado por <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-721">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-722">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-722">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-723">O parâmetro <paramref name="function" /> era <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-723">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-724">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-724">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-725">O tipo de retorno da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-725">The return type of the task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="fea4f-726">O trabalho a ser executado de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="fea4f-726">The work to execute asynchronously.</span></span></param>
        <summary><span data-ttu-id="fea4f-727">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa o trabalho.</span><span class="sxs-lookup"><span data-stu-id="fea4f-727">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span></span></summary>
        <returns><span data-ttu-id="fea4f-728">Uma tarefa que representa o trabalho na fila a ser executada no pool de threads.</span><span class="sxs-lookup"><span data-stu-id="fea4f-728">A task object that represents the work queued to execute in the thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-729">O <xref:System.Threading.Tasks.Task.Run%2A> método é uma alternativa mais simples para o <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-729">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fea4f-730">Ele cria uma tarefa com os seguintes valores padrão:</span><span class="sxs-lookup"><span data-stu-id="fea4f-730">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="fea4f-731">Seu token de cancelamento é <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-731">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="fea4f-732">Sua <xref:System.Threading.Tasks.Task.CreationOptions%2A> é o valor da propriedade <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-732">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="fea4f-733">Ele usa o Agendador de tarefas padrão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-733">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="fea4f-734">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-734">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-735">O exemplo a seguir conta o número aproximado de palavras nos arquivos de texto que representam os livros publicados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-735">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="fea4f-736">Cada tarefa é responsável por abrir um arquivo, ler todo o seu conteúdo de forma assíncrona e calcular a contagem de palavras usando uma expressão regular.</span><span class="sxs-lookup"><span data-stu-id="fea4f-736">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="fea4f-737">O <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> método é chamado para assegurar que todas as tarefas tenham concluídas antes de exibir a contagem de palavras de cada livro no console.</span><span class="sxs-lookup"><span data-stu-id="fea4f-737">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  
  
 <span data-ttu-id="fea4f-738">A expressão regular `\p{P}*\s+` corresponde a zero, um ou mais caracteres de pontuação, seguidos por um ou mais caracteres de espaço em branco.</span><span class="sxs-lookup"><span data-stu-id="fea4f-738">The regular expression `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more white-space characters.</span></span> <span data-ttu-id="fea4f-739">Ele pressupõe que o número total de correspondências é igual a contagem de palavras aproximado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-739">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-740">O parâmetro <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-740">The <paramref name="function" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-741">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-741">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-742">O tipo de resultado retornado pela tarefa de proxy.</span><span class="sxs-lookup"><span data-stu-id="fea4f-742">The type of the result returned by the proxy task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="fea4f-743">O trabalho a ser executado de forma assíncrona</span><span class="sxs-lookup"><span data-stu-id="fea4f-743">The work to execute asynchronously</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-744">Um token de cancelamento que deve ser usado para cancelar o trabalho</span><span class="sxs-lookup"><span data-stu-id="fea4f-744">A cancellation token that should be used to cancel the work</span></span></param>
        <summary><span data-ttu-id="fea4f-745">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para <see langword="Task(TResult)" /> retornado por <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-745">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="fea4f-746">Um <see langword="Task(TResult)" /> que representa um proxy para o <see langword="Task(TResult)" /> retornado por <paramref name="function" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-746">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-747">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-747">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-748">O parâmetro <paramref name="function" /> era <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-748">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fea4f-749">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-749">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-750">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <paramref name="cancellationToken" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-750">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="fea4f-751">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="fea4f-751">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-752">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-752">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-753">O tipo de resultado da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-753">The result type of the task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="fea4f-754">O trabalho a ser executado de forma assíncrona</span><span class="sxs-lookup"><span data-stu-id="fea4f-754">The work to execute asynchronously</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-755">Um token de cancelamento que deve ser usado para cancelar o trabalho</span><span class="sxs-lookup"><span data-stu-id="fea4f-755">A cancellation token that should be used to cancel the work</span></span></param>
        <summary><span data-ttu-id="fea4f-756">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <see langword="Task(TResult)" /> que representa o trabalho.</span><span class="sxs-lookup"><span data-stu-id="fea4f-756">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span></span> <span data-ttu-id="fea4f-757">Um token de cancelamento permite que o trabalho seja cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-757">A cancellation token allows the work to be cancelled.</span></span></summary>
        <returns><span data-ttu-id="fea4f-758">Um <see langword="Task(TResult)" /> que representa o trabalho na fila a ser executado no pool de threads.</span><span class="sxs-lookup"><span data-stu-id="fea4f-758">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-759">Se for solicitado o cancelamento antes da tarefa começa a ser executada, a tarefa não será executada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-759">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="fea4f-760">Em vez disso, ele é definido como o <xref:System.Threading.Tasks.TaskStatus.Canceled> estado e gera um <xref:System.Threading.Tasks.TaskCanceledException> exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-760">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="fea4f-761">O <xref:System.Threading.Tasks.Task.Run%2A> método é uma alternativa mais simples para o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-761">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="fea4f-762">Ele cria uma tarefa com os seguintes valores padrão:</span><span class="sxs-lookup"><span data-stu-id="fea4f-762">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="fea4f-763">Sua <xref:System.Threading.Tasks.Task.CreationOptions%2A> é o valor da propriedade <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-763">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="fea4f-764">Ele usa o Agendador de tarefas padrão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-764">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="fea4f-765">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-765">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-766">O exemplo a seguir cria 20 tarefas que fará um loop até que um contador é incrementado em um valor de 2 milhões.</span><span class="sxs-lookup"><span data-stu-id="fea4f-766">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="fea4f-767">Quando as 10 primeiras tarefas alcançar milhões de 2, o token de cancelamento é cancelado, e as tarefas cujos contadores não atingiram 2 milhões serão canceladas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-767">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="fea4f-768">O exemplo mostra a saída possível.</span><span class="sxs-lookup"><span data-stu-id="fea4f-768">The example shows possible output.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 <span data-ttu-id="fea4f-769">Em vez de usar o <xref:System.AggregateException.InnerExceptions%2A> propriedade para examinar as exceções, o exemplo itera todas as tarefas para determinar qual foram concluídos com êxito e que tenha sido cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-769">Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</span></span> <span data-ttu-id="fea4f-770">Para aqueles que foram concluídos, ele exibe o valor retornado pela tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-770">For those that have completed, it displays the value returned by the task.</span></span>  
  
 <span data-ttu-id="fea4f-771">Como o cancelamento é cooperativo, cada tarefa pode decidir como reagir ao cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-771">Because cancellation is cooperative, each task can decide how to respond to cancellation.</span></span> <span data-ttu-id="fea4f-772">O exemplo a seguir é como a primeira, exceto que, depois que o token é cancelado, as tarefas retornam o número de iterações que concluiu em vez de lançam uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-772">The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]
 [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  
  
 <span data-ttu-id="fea4f-773">O exemplo deve tratar o <xref:System.AggregateException> exceção, já que as tarefas que não iniciaram quando o cancelamento é solicitado ainda lançar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-773">The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-774">O parâmetro <paramref name="function" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-774">The <paramref name="function" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fea4f-775">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-775">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-776">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <paramref name="cancellationToken" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-776">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="fea4f-777">Cancelamento da tarefa</span><span class="sxs-lookup"><span data-stu-id="fea4f-777">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-778">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-778">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunSynchronously">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-779">Executa o <see cref="T:System.Threading.Tasks.Task" /> de forma síncrona no <see cref="T:System.Threading.Tasks.TaskScheduler" /> atual.</span><span class="sxs-lookup"><span data-stu-id="fea4f-779">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously();" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : unit -&gt; unit" Usage="task.RunSynchronously " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fea4f-780">Executa o <see cref="T:System.Threading.Tasks.Task" /> de forma síncrona no <see cref="T:System.Threading.Tasks.TaskScheduler" /> atual.</span><span class="sxs-lookup"><span data-stu-id="fea4f-780">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-781">Normalmente, as tarefas são executadas de forma assíncrona em um pool de threads e não bloqueiam o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-781">Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</span></span> <span data-ttu-id="fea4f-782">Tarefas executadas por meio da chamada a <xref:System.Threading.Tasks.Task.RunSynchronously> método estão associados com a atual <xref:System.Threading.Tasks.TaskScheduler> e são executados no thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-782">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread.</span></span> <span data-ttu-id="fea4f-783">Se o Agendador de destino não oferece suporte para executar esta tarefa no thread de chamada, a tarefa será agendada para execução no Agendador e o thread de chamada será bloqueado até que a tarefa foi concluída em execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-783">If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</span></span> <span data-ttu-id="fea4f-784">Mesmo que a tarefa é executada de forma síncrona, o thread de chamada ainda deve chamar <xref:System.Threading.Tasks.Task.Wait%2A> para lidar com todas as exceções que a tarefa pode gerar.</span><span class="sxs-lookup"><span data-stu-id="fea4f-784">Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.</span></span>  <span data-ttu-id="fea4f-785">Para obter mais informações sobre o tratamento de exceções, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-785">For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 <span data-ttu-id="fea4f-786">Tarefas executadas por meio da chamada a <xref:System.Threading.Tasks.Task.RunSynchronously%2A> método são instanciados chamando uma <xref:System.Threading.Tasks.Task> ou <xref:System.Threading.Tasks.Task%601> construtor de classe.</span><span class="sxs-lookup"><span data-stu-id="fea4f-786">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="fea4f-787">A tarefa para ser executado de forma síncrona deve estar no <xref:System.Threading.Tasks.TaskStatus.Created> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-787">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="fea4f-788">Uma tarefa pode ser iniciada e executada somente uma vez.</span><span class="sxs-lookup"><span data-stu-id="fea4f-788">A task may be started and run only once.</span></span> <span data-ttu-id="fea4f-789">Qualquer tentativa de agendar uma tarefa um segundo momento resulta em uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-789">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-790">O exemplo a seguir compara uma tarefa executada chamando o <xref:System.Threading.Tasks.Task.RunSynchronously%2A> método com um executadas de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="fea4f-790">The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously.</span></span> <span data-ttu-id="fea4f-791">Em ambos os casos, as tarefas executadas expressões lambda idênticas que exibem a ID da tarefa e a ID do thread no qual a tarefa está sendo executado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-791">In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</span></span> <span data-ttu-id="fea4f-792">A tarefa calcula a soma dos inteiros entre 1 e 1.000.000.</span><span class="sxs-lookup"><span data-stu-id="fea4f-792">The task calculates the sum of the integers between 1 and 1,000,000.</span></span> <span data-ttu-id="fea4f-793">Como mostra a saída do exemplo, a tarefa é executada chamando o <xref:System.Threading.Tasks.Task.RunSynchronously%2A> método é executado no thread do aplicativo, enquanto a tarefa assíncrona não tem.</span><span class="sxs-lookup"><span data-stu-id="fea4f-793">As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-794">A instância <see cref="T:System.Threading.Tasks.Task" /> foi descartada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-794">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fea4f-795">O <see cref="T:System.Threading.Tasks.Task" /> não está em um estado válido para ser iniciado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-795">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="fea4f-796">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-796">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-797">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-797">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.RunSynchronously scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="fea4f-798">O agendador no qual haverá a tentativa de executar essa tarefa embutida.</span><span class="sxs-lookup"><span data-stu-id="fea4f-798">The scheduler on which to attempt to run this task inline.</span></span></param>
        <summary><span data-ttu-id="fea4f-799">Executa o <see cref="T:System.Threading.Tasks.Task" /> de forma síncrona no <see cref="T:System.Threading.Tasks.TaskScheduler" /> fornecido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-799">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-800">Tarefas executadas por meio da chamada a <xref:System.Threading.Tasks.Task.RunSynchronously%2A> método são instanciados chamando uma <xref:System.Threading.Tasks.Task> ou <xref:System.Threading.Tasks.Task%601> construtor de classe.</span><span class="sxs-lookup"><span data-stu-id="fea4f-800">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="fea4f-801">A tarefa para ser executado de forma síncrona deve estar no <xref:System.Threading.Tasks.TaskStatus.Created> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-801">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="fea4f-802">Uma tarefa pode ser iniciada e executada somente uma vez.</span><span class="sxs-lookup"><span data-stu-id="fea4f-802">A task may be started and run only once.</span></span> <span data-ttu-id="fea4f-803">Qualquer tentativa de agendar uma tarefa um segundo momento resulta em uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-803">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
 <span data-ttu-id="fea4f-804">Se o Agendador de destino não oferece suporte para executar esta tarefa no thread atual, a tarefa será agendada para execução no Agendador e o thread atual será bloqueado até que a tarefa foi concluída em execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-804">If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</span></span> <span data-ttu-id="fea4f-805">Por isso, o thread de chamada não precisa chamar um método como <xref:System.Threading.Tasks.Task.Wait%2A> para garantir que a tarefa foi concluída a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-805">Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution.</span></span> <span data-ttu-id="fea4f-806">Para obter mais informações sobre o tratamento de exceções para operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-806">For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-807">A instância <see cref="T:System.Threading.Tasks.Task" /> foi descartada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-807">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-808">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-808">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fea4f-809">O <see cref="T:System.Threading.Tasks.Task" /> não está em um estado válido para ser iniciado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-809">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="fea4f-810">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-810">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-811">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-811">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-812">Inicia o <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-812">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="task.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fea4f-813">Inicia o <see cref="T:System.Threading.Tasks.Task" />, agendando-o para execução no <see cref="T:System.Threading.Tasks.TaskScheduler" /> atual.</span><span class="sxs-lookup"><span data-stu-id="fea4f-813">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-814">Uma tarefa pode ser iniciada e executada somente uma vez.</span><span class="sxs-lookup"><span data-stu-id="fea4f-814">A task may be started and run only once.</span></span> <span data-ttu-id="fea4f-815">Qualquer tentativa de agendar uma tarefa, uma segunda vez resultará em uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-815">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="fea4f-816">O <xref:System.Threading.Tasks.Task.Start%2A> é usado para executar uma tarefa que foi criada chamando um do <xref:System.Threading.Tasks.Task> construtores.</span><span class="sxs-lookup"><span data-stu-id="fea4f-816">The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors.</span></span> <span data-ttu-id="fea4f-817">Normalmente, você faz isso quando você precisar separar a criação da tarefa de sua execução, como quando você executa tarefas que você criou condicionalmente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-817">Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</span></span> <span data-ttu-id="fea4f-818">Para o caso mais comum em que você não precisa separar a instanciação de tarefa de execução, é recomendável que você chame uma sobrecarga da <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-818">For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="fea4f-819">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-819">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-820">A exemplo a seguir chama o <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> construtor para instanciar um novo <xref:System.Threading.Tasks.Task> objeto que exibe sua tarefa de ID e a ID do thread gerenciado e, em seguida, executa um loop.</span><span class="sxs-lookup"><span data-stu-id="fea4f-820">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop.</span></span> <span data-ttu-id="fea4f-821">Em seguida, ele chama o <xref:System.Threading.Tasks.Task.Start%2A> método para executar a tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-821">It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.</span></span>  <span data-ttu-id="fea4f-822">Como esse é um aplicativo de console, a chamada para o <xref:System.Threading.Tasks.Task.Wait%2A> método é necessário para impedir que o aplicativo seja encerrado antes que a tarefa termina a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-822">Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-823">A instância <see cref="T:System.Threading.Tasks.Task" /> foi descartada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-823">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fea4f-824">O <see cref="T:System.Threading.Tasks.Task" /> não está em um estado válido para ser iniciado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-824">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="fea4f-825">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-825">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-826">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-826">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.Start : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.Start scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="fea4f-827">O <see cref="T:System.Threading.Tasks.TaskScheduler" /> com o qual associar e executar essa tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-827">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span></span></param>
        <summary><span data-ttu-id="fea4f-828">Inicia o <see cref="T:System.Threading.Tasks.Task" />, agendando-o para execução no <see cref="T:System.Threading.Tasks.TaskScheduler" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-828">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-829">Uma tarefa pode apenas iniciada e executada apenas uma vez.</span><span class="sxs-lookup"><span data-stu-id="fea4f-829">A task may only be started and run only once.</span></span> <span data-ttu-id="fea4f-830">Qualquer tentativa de agendar uma tarefa, uma segunda vez resultará em uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-830">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="fea4f-831">Para obter informações sobre o tratamento de exceções geradas por operações de tarefa, consulte [tratamento de exceções](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-831">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-832">O argumento <paramref name="scheduler" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-832">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fea4f-833">O <see cref="T:System.Threading.Tasks.Task" /> não está em um estado válido para ser iniciado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-833">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="fea4f-834">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-834">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-835">A instância <see cref="T:System.Threading.Tasks.Task" /> foi descartada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-835">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskSchedulerException"><span data-ttu-id="fea4f-836">O agendador não pôde colocar essa tarefa na fila.</span><span class="sxs-lookup"><span data-stu-id="fea4f-836">The scheduler was unable to queue this task.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="fea4f-837">Tratamento de exceções (biblioteca de tarefas paralelas)</span><span class="sxs-lookup"><span data-stu-id="fea4f-837">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As TaskStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskStatus Status { System::Threading::Tasks::TaskStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Threading.Tasks.TaskStatus" Usage="System.Threading.Tasks.Task.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-838">Obtém o <see cref="T:System.Threading.Tasks.TaskStatus" /> dessa tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-838">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span></span></summary>
        <value><span data-ttu-id="fea4f-839">O <see cref="T:System.Threading.Tasks.TaskStatus" /> atual desta instância de tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-839">The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-840">Recuperar o valor da <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-840">Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 <span data-ttu-id="fea4f-841">Para obter mais informações e um exemplo, consulte [encadeamento de tarefas com tarefas de continuação](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) e [como: Cancelar uma tarefa e seus filhos](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-841">For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-842">O exemplo a seguir cria 20 tarefas que fará um loop até que um contador é incrementado em um valor de 2 milhões.</span><span class="sxs-lookup"><span data-stu-id="fea4f-842">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="fea4f-843">Quando as 10 primeiras tarefas alcançar milhões de 2, o token de cancelamento é cancelado, e as tarefas cujos contadores não atingiram 2 milhões serão canceladas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-843">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="fea4f-844">O exemplo, em seguida, examina o <xref:System.Threading.Tasks.Task.Status%2A> propriedade de cada tarefa para indicar se ele foi concluído com êxito ou foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-844">The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled.</span></span> <span data-ttu-id="fea4f-845">Para aqueles que concluído, ele exibe o valor retornado pela tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-845">For those that completed, it displays the value returned by the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System::IAsyncResult::AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-846">Obtém um <see cref="T:System.Threading.WaitHandle" /> que pode ser usado para aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-846">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span></span></summary>
        <value><span data-ttu-id="fea4f-847">Um <see cref="T:System.Threading.WaitHandle" /> que pode ser usado para aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-847">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-848">Usando a funcionalidade de espera fornecida pelo <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> é preferível a usar <xref:System.IAsyncResult.AsyncWaitHandle%2A> para uma funcionalidade semelhante.</span><span class="sxs-lookup"><span data-stu-id="fea4f-848">Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality.</span></span> <span data-ttu-id="fea4f-849">Para obter mais informações, consulte a seção "Aguardando em tarefas" em [baseado em tarefas de programação assíncrona](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) e [usando TPL com outros padrões assíncronos](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span><span class="sxs-lookup"><span data-stu-id="fea4f-849">For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-850">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-850">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::IAsyncResult::CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fea4f-851">Obtém uma indicação de se a operação foi concluída de forma síncrona.</span><span class="sxs-lookup"><span data-stu-id="fea4f-851">Gets an indication of whether the operation completed synchronously.</span></span></summary>
        <value><span data-ttu-id="fea4f-852"><see langword="true" /> Se a operação foi concluída de forma síncrona; Caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-852"><see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-853">Aguarda o <see cref="T:System.Threading.Tasks.Task" /> concluir a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-853">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="task.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fea4f-854">Aguarda o <see cref="T:System.Threading.Tasks.Task" /> concluir a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-854">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-855"><xref:System.Threading.Tasks.Task.Wait%2A> é um método de sincronização que faz com que o thread de chamada aguardar até que a tarefa atual foi concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-855"><xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed.</span></span> <span data-ttu-id="fea4f-856">Se a tarefa atual não tiver iniciado a execução, o método Wait tenta remover a tarefa do Agendador e executá-lo embutido no thread atual.</span><span class="sxs-lookup"><span data-stu-id="fea4f-856">If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</span></span> <span data-ttu-id="fea4f-857">Se não for possível fazer isso, ou se a tarefa atual já começou a execução, ele bloqueia o thread de chamada até que a tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-857">If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</span></span> <span data-ttu-id="fea4f-858">Para obter mais informações, consulte [Task. wait e "Inlining"](https://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="fea4f-858">For more information, see [Task.Wait and "Inlining"](https://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.</span></span>   
  
## Examples  
 <span data-ttu-id="fea4f-859">O exemplo a seguir inicia uma tarefa que gera um milhão de inteiros aleatórios entre 0 e 100 e computa sua média.</span><span class="sxs-lookup"><span data-stu-id="fea4f-859">The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="fea4f-860">O exemplo usa o <xref:System.Threading.Tasks.Task.Wait%2A> método para garantir que a tarefa seja concluída antes que o aplicativo seja encerrado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-860">The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates.</span></span> <span data-ttu-id="fea4f-861">Caso contrário, como esse é um aplicativo de console, o exemplo deve terminar antes que a tarefa pode calcular e exibir a média.</span><span class="sxs-lookup"><span data-stu-id="fea4f-861">Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-862">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-862">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-863">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-863">The task was canceled.</span></span> <span data-ttu-id="fea4f-864">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém um objeto <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-864">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="fea4f-865">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-865">-or-</span></span> 
<span data-ttu-id="fea4f-866">Uma exceção foi gerada durante a execução da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-866">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="fea4f-867">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém informações sobre a exceção ou as exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-867">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
        <related type="ExternalDocumentation" href="https://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx"><span data-ttu-id="fea4f-868">Wait e "Inlining"</span><span class="sxs-lookup"><span data-stu-id="fea4f-868">Task.Wait and "Inlining"</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="task.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="fea4f-869">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-869">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-870">Aguarda o <see cref="T:System.Threading.Tasks.Task" /> concluir a execução dentro de um número especificado. de milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-870">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="fea4f-871"><see langword="true" /> se o <see cref="T:System.Threading.Tasks.Task" /> concluiu a execução dentro do tempo determinado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-871"><see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-872"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> é um método de sincronização que faz com que o thread de chamada aguardar a instância atual da tarefa ser concluída até que ocorra um destes procedimentos:</span><span class="sxs-lookup"><span data-stu-id="fea4f-872"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="fea4f-873">A tarefa é concluída com êxito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-873">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="fea4f-874">A própria tarefa for cancelada ou gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-874">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="fea4f-875">Nesse caso, você lidar com um <xref:System.AggregateException> exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-875">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="fea4f-876">O <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> propriedade contém detalhes sobre a exceção ou exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-876">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="fea4f-877">O intervalo definido pelo `millisecondsTimeout` tenha decorrido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-877">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="fea4f-878">Nesse caso, o thread atual retoma a execução e o método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-878">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-879">O exemplo a seguir inicia uma tarefa que gera cinco milhões de inteiros aleatórios entre 0 e 100 e computa sua média.</span><span class="sxs-lookup"><span data-stu-id="fea4f-879">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="fea4f-880">O exemplo usa o <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> método espera para o aplicativo ser concluída dentro de 150 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-880">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="fea4f-881">Se o aplicativo for concluída normalmente, a tarefa exibe a soma e média dos números aleatórios que foi gerado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-881">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="fea4f-882">Se o intervalo de tempo limite expirou, o exemplo exibe uma mensagem antes que ele seja encerrado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-882">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-883">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-883">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-884"><paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-884"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-885">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-885">The task was canceled.</span></span> <span data-ttu-id="fea4f-886">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém um objeto <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-886">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="fea4f-887">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-887">-or-</span></span> 
<span data-ttu-id="fea4f-888">Uma exceção foi gerada durante a execução da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-888">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="fea4f-889">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém informações sobre a exceção ou as exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-889">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="task.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="fea4f-890">Um token de cancelamento a ser observado ao aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-890">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-891">Aguarda o <see cref="T:System.Threading.Tasks.Task" /> concluir a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-891">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span> <span data-ttu-id="fea4f-892">A espera termina se um token de cancelamento for cancelado antes que a tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-892">The wait terminates if a cancellation token is canceled before the task completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-893">O <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> método cria uma espera cancelável; ou seja, ele faz com que o thread atual Aguarde até que ocorra um dos seguintes:</span><span class="sxs-lookup"><span data-stu-id="fea4f-893">The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="fea4f-894">A tarefa é concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-894">The task completes.</span></span>  
  
-   <span data-ttu-id="fea4f-895">O token de cancelamento é cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-895">The cancellation token is canceled.</span></span> <span data-ttu-id="fea4f-896">Nesse caso, a chamada para o <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> método lança um <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-896">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fea4f-897">Cancelando a `cancellationToken` token de cancelamento não tem efeito sobre a tarefa em execução, a menos que ele também foi passado o token de cancelamento e está preparado para lidar com cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-897">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="fea4f-898">Passando o `cancellationToken` objeto para esse método simplesmente permite que a espera seja cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-898">Passing the `cancellationToken` object to this method simply allows the wait to be canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-899">O exemplo a seguir ilustra o uso simple de um token de cancelamento para cancelar a espera pela conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-899">The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</span></span> <span data-ttu-id="fea4f-900">Uma tarefa é iniciada, chama o <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> método cancelar qualquer uma da fonte de token tokens de cancelamento e, em seguida, atrasos por cinco segundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-900">A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</span></span> <span data-ttu-id="fea4f-901">Observe que a tarefa em si não tiver sido passada o token de cancelamento e não é anulável.</span><span class="sxs-lookup"><span data-stu-id="fea4f-901">Note that the task itself has not been passed the cancellation token and is not cancelable.</span></span> <span data-ttu-id="fea4f-902">O thread do aplicativo chama a tarefa <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método para aguardar a conclusão da tarefa, mas a espera seja cancelada depois que o token de cancelamento é cancelado e uma <xref:System.OperationCanceledException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-902">The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown.</span></span> <span data-ttu-id="fea4f-903">O manipulador de exceção relata a exceção e, em seguida, entra em suspensão por seis segundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-903">The exception handler reports the exception and then sleeps for six seconds.</span></span> <span data-ttu-id="fea4f-904">Como mostra a saída do exemplo, esse atraso permite que a tarefa seja concluída no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-904">As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fea4f-905">O <paramref name="cancellationToken" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-905">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-906">A tarefa foi descartada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-906">The task has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-907">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-907">The task was canceled.</span></span> <span data-ttu-id="fea4f-908">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém um objeto <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-908">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="fea4f-909">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-909">-or-</span></span> 
<span data-ttu-id="fea4f-910">Uma exceção foi gerada durante a execução da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-910">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="fea4f-911">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém informações sobre a exceção ou as exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-911">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="task.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="fea4f-912">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos para aguardar ou um <see cref="T:System.TimeSpan" /> que representa -1 milissegundos para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-912">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-913">Aguarda o <see cref="T:System.Threading.Tasks.Task" /> concluir a execução dentro de um intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-913">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="fea4f-914"><see langword="true" /> se o <see cref="T:System.Threading.Tasks.Task" /> concluiu a execução dentro do tempo determinado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-914"><see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-915"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> é um método de sincronização que faz com que o thread de chamada aguardar a instância atual da tarefa ser concluída até que ocorra um destes procedimentos:</span><span class="sxs-lookup"><span data-stu-id="fea4f-915"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="fea4f-916">A tarefa é concluída com êxito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-916">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="fea4f-917">A própria tarefa for cancelada ou gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-917">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="fea4f-918">Nesse caso, você lidar com um <xref:System.AggregateException> exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-918">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="fea4f-919">O <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> propriedade contém detalhes sobre a exceção ou exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-919">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="fea4f-920">O intervalo definido pelo `timeout` tenha decorrido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-920">The interval defined by `timeout` elapses.</span></span> <span data-ttu-id="fea4f-921">Nesse caso, o thread atual retoma a execução e o método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-921">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-922">O exemplo a seguir inicia uma tarefa que gera cinco milhões de inteiros aleatórios entre 0 e 100 e computa sua média.</span><span class="sxs-lookup"><span data-stu-id="fea4f-922">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="fea4f-923">O exemplo usa o <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> método espera para o aplicativo ser concluída dentro de 150 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-923">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="fea4f-924">Se o aplicativo for concluída normalmente, a tarefa exibe a soma e média dos números aleatórios que foi gerado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-924">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="fea4f-925">Se o intervalo de tempo limite expirou, o exemplo exibe uma mensagem antes que ele seja encerrado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-925">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]
 [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-926">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-926">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-927"><paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-927"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="fea4f-928">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-928">-or-</span></span> 
 <span data-ttu-id="fea4f-929"><paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-929"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-930">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-930">The task was canceled.</span></span> <span data-ttu-id="fea4f-931">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém um objeto <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-931">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="fea4f-932">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-932">-or-</span></span> 
<span data-ttu-id="fea4f-933">Uma exceção foi gerada durante a execução da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-933">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="fea4f-934">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém informações sobre a exceção ou as exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-934">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="task.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="fea4f-935">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-935">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-936">Um token de cancelamento a ser observado ao aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-936">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-937">Aguarda o <see cref="T:System.Threading.Tasks.Task" /> concluir a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-937">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span> <span data-ttu-id="fea4f-938">A espera termina se um intervalo de tempo limite expirar ou um token de cancelamento for cancelado antes que a tarefa seja concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-938">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span></span></summary>
        <returns><span data-ttu-id="fea4f-939"><see langword="true" /> se o <see cref="T:System.Threading.Tasks.Task" /> concluiu a execução dentro do tempo determinado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-939"><see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-940"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> é um método de sincronização que faz com que o thread de chamada aguardar a instância atual da tarefa ser concluída até que ocorra um destes procedimentos:</span><span class="sxs-lookup"><span data-stu-id="fea4f-940"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="fea4f-941">A tarefa é concluída com êxito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-941">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="fea4f-942">A própria tarefa for cancelada ou gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-942">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="fea4f-943">Nesse caso, você lidar com um <xref:System.AggregateException> exceção.</span><span class="sxs-lookup"><span data-stu-id="fea4f-943">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="fea4f-944">O <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> propriedade contém detalhes sobre a exceção ou exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-944">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="fea4f-945">O `cancellationToken` token de cancelamento é cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-945">The `cancellationToken` cancellation token is canceled.</span></span> <span data-ttu-id="fea4f-946">Nesse caso, a chamada para o <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> método lança um <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-946">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
-   <span data-ttu-id="fea4f-947">O intervalo definido pelo `millisecondsTimeout` tenha decorrido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-947">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="fea4f-948">Nesse caso, o thread atual retoma a execução e o método retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-948">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fea4f-949">Cancelando a `cancellationToken` token de cancelamento não tem efeito sobre a tarefa em execução, a menos que ele também foi passado o token de cancelamento e está preparado para lidar com cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-949">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="fea4f-950">Passando o `cancellationToken` objeto para esse método simplesmente permite que a espera seja cancelada com base em alguma condição.</span><span class="sxs-lookup"><span data-stu-id="fea4f-950">Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-951">A exemplo a seguir chama o <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> método para fornecer um valor de tempo limite e um cancelamento de token que pode encerrar a espera pela conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-951">The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</span></span> <span data-ttu-id="fea4f-952">Um novo thread é iniciado e executa o `CancelToken` método, que pausa e, em seguida, chama o <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> método cancelar os tokens de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-952">A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel the cancellation tokens.</span></span> <span data-ttu-id="fea4f-953">Uma tarefa é então iniciado e atrasa por 5 segundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-953">A task is then launched and delays for 5 seconds.</span></span> <span data-ttu-id="fea4f-954">O <xref:System.Threading.Tasks.Task.Wait%2A> método é chamado para aguardar a conclusão da tarefa e é fornecido um valor de tempo limite breve e um token de cancelamento.</span><span class="sxs-lookup"><span data-stu-id="fea4f-954">The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  
  
 <span data-ttu-id="fea4f-955">Observe que a saída precisa do exemplo depende se a espera foi cancelada devido ao token de cancelamento ou porque o intervalo de tempo limite decorrido.</span><span class="sxs-lookup"><span data-stu-id="fea4f-955">Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fea4f-956">O <paramref name="cancellationToken" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-956">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-957">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-957">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-958"><paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-958"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-959">A tarefa foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-959">The task was canceled.</span></span> <span data-ttu-id="fea4f-960">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém um objeto <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-960">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="fea4f-961">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-961">-or-</span></span> 
<span data-ttu-id="fea4f-962">Uma exceção foi gerada durante a execução da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-962">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="fea4f-963">A coleção <see cref="P:System.AggregateException.InnerExceptions" /> contém informações sobre a exceção ou as exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-963">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-964">Aguarda até que todos os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos tenham concluído a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-964">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitAll (ParamArray tasks As Task())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-965">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-965">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <summary><span data-ttu-id="fea4f-966">Aguarda até que todos os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos tenham concluído a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-966">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fea4f-967">O exemplo a seguir inicia 10 tarefas, cada um deles é passada um índice como um objeto de estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-967">The following example starts 10 tasks, each of which is passed an index as a state object.</span></span> <span data-ttu-id="fea4f-968">Tarefas com um índice de duas a cinco lançam exceções.</span><span class="sxs-lookup"><span data-stu-id="fea4f-968">Tasks with an index from two to five throw exceptions.</span></span> <span data-ttu-id="fea4f-969">A chamada para o <xref:System.Threading.Tasks.Task.WaitAll%2A> método encapsula todas as exceções em um <xref:System.AggregateException> do objeto e propaga para o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-969">The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]
 [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-970">Um ou mais objetos <see cref="T:System.Threading.Tasks.Task" /> no <paramref name="tasks" /> foram descartados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-970">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-971">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-971">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-972">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-972">The <paramref name="tasks" /> argument contains a null element.</span></span>  
  
<span data-ttu-id="fea4f-973">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-973">-or-</span></span> 
<span data-ttu-id="fea4f-974">O argumento <paramref name="tasks" /> é uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-974">The <paramref name="tasks" /> argument is an empty array.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-975">Pelo menos uma das instâncias <see cref="T:System.Threading.Tasks.Task" /> foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-975">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="fea4f-976">Se uma tarefa foi cancelada, a exceção <see cref="T:System.AggregateException" /> contém uma exceção <see cref="T:System.OperationCanceledException" /> na coleção <see cref="P:System.AggregateException.InnerExceptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-976">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="fea4f-977">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-977">-or-</span></span> 
<span data-ttu-id="fea4f-978">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-978">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-979">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-979">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="fea4f-980">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-980">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-981">Aguarda todos os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos concluírem a execução dentro de um número especificado de milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-981">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="fea4f-982"><see langword="true" /> se todas as instâncias do <see cref="T:System.Threading.Tasks.Task" /> tiverem concluído a execução no tempo determinado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-982"><see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-983">Um ou mais objetos <see cref="T:System.Threading.Tasks.Task" /> no <paramref name="tasks" /> foram descartados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-983">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-984">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-984">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-985">Pelo menos uma das instâncias <see cref="T:System.Threading.Tasks.Task" /> foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-985">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="fea4f-986">Se uma tarefa tiver sido cancelada, a <see cref="T:System.AggregateException" /> conterá um <see cref="T:System.OperationCanceledException" /> em sua coleção <see cref="P:System.AggregateException.InnerExceptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-986">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="fea4f-987">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-987">-or-</span></span> 
<span data-ttu-id="fea4f-988">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-988">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-989"><paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-989"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-990">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-990">The <paramref name="tasks" /> argument contains a null element.</span></span>  
  
<span data-ttu-id="fea4f-991">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-991">-or-</span></span> 
<span data-ttu-id="fea4f-992">O argumento <paramref name="tasks" /> é uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-992">The <paramref name="tasks" /> argument is an empty array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-993">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-993">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-994">Um <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> a ser observado ao aguardar a conclusão das tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-994">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-995">Aguarda até que todos os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos tenham concluído a execução, a menos que a espera seja cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-995">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-996">O `cancellationToken` argumento é usado para cancelar a operação de espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-996">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="fea4f-997">Cancelamento de tarefas é uma operação distinta e é sinalizado, o <xref:System.AggregateException> conforme observado acima.</span><span class="sxs-lookup"><span data-stu-id="fea4f-997">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fea4f-998">O <paramref name="cancellationToken" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-998">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-999">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-999">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-1000">Pelo menos uma das instâncias <see cref="T:System.Threading.Tasks.Task" /> foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1000">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="fea4f-1001">Se uma tarefa tiver sido cancelada, a <see cref="T:System.AggregateException" /> conterá um <see cref="T:System.OperationCanceledException" /> em sua coleção <see cref="P:System.AggregateException.InnerExceptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1001">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="fea4f-1002">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1002">-or-</span></span> 
<span data-ttu-id="fea4f-1003">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1003">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1004">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1004">The <paramref name="tasks" /> argument contains a null element.</span></span>  
  
<span data-ttu-id="fea4f-1005">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1005">-or-</span></span> 
<span data-ttu-id="fea4f-1006">O argumento <paramref name="tasks" /> é uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1006">The <paramref name="tasks" /> argument is an empty array.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1007">Um ou mais objetos <see cref="T:System.Threading.Tasks.Task" /> no <paramref name="tasks" /> foram descartados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1007">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * TimeSpan -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1008">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1008">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="fea4f-1009">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos para aguardar ou um <see cref="T:System.TimeSpan" /> que representa -1 milissegundos para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1009">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-1010">Aguarda todos os objetos <see cref="T:System.Threading.Tasks.Task" /> canceláveis fornecidos concluírem a execução dentro de um intervalo de tempo especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1010">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1011"><see langword="true" /> se todas as instâncias do <see cref="T:System.Threading.Tasks.Task" /> tiverem concluído a execução no tempo determinado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1011"><see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1012">Um ou mais objetos <see cref="T:System.Threading.Tasks.Task" /> no <paramref name="tasks" /> foram descartados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1012">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1013">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1013">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-1014">Pelo menos uma das instâncias <see cref="T:System.Threading.Tasks.Task" /> foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1014">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="fea4f-1015">Se uma tarefa tiver sido cancelada, a <see cref="T:System.AggregateException" /> conterá um <see cref="T:System.OperationCanceledException" /> em sua coleção <see cref="P:System.AggregateException.InnerExceptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1015">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="fea4f-1016">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1016">-or-</span></span> 
<span data-ttu-id="fea4f-1017">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1017">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-1018"><paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1018"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="fea4f-1019">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1019">-or-</span></span> 
 <span data-ttu-id="fea4f-1020"><paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1020"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1021">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1021">The <paramref name="tasks" /> argument contains a null element.</span></span>  
  
<span data-ttu-id="fea4f-1022">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1022">-or-</span></span> 
<span data-ttu-id="fea4f-1023">O argumento <paramref name="tasks" /> é uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1023">The <paramref name="tasks" /> argument is an empty array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1024">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1024">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="fea4f-1025">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1025">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-1026">Um <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> a ser observado ao aguardar a conclusão das tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1026">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-1027">Aguarda todos os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos concluírem a execução em um número especificado de milissegundos ou até que a espera seja cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1027">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1028"><see langword="true" /> se todas as instâncias do <see cref="T:System.Threading.Tasks.Task" /> tiverem concluído a execução no tempo determinado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1028"><see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1029">O `cancellationToken` argumento é usado para cancelar a operação de espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1029">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="fea4f-1030">Cancelamento de tarefas é uma operação distinta e é sinalizado, o <xref:System.AggregateException> observado acima.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1030">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1031">Um ou mais objetos <see cref="T:System.Threading.Tasks.Task" /> no <paramref name="tasks" /> foram descartados.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1031">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1032">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1032">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="fea4f-1033">Pelo menos uma das instâncias <see cref="T:System.Threading.Tasks.Task" /> foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1033">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="fea4f-1034">Se uma tarefa tiver sido cancelada, a <see cref="T:System.AggregateException" /> conterá um <see cref="T:System.OperationCanceledException" /> em sua coleção <see cref="P:System.AggregateException.InnerExceptions" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1034">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="fea4f-1035">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1035">-or-</span></span> 
<span data-ttu-id="fea4f-1036">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1036">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-1037"><paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1037"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1038">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1038">The <paramref name="tasks" /> argument contains a null element.</span></span>  
  
<span data-ttu-id="fea4f-1039">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1039">-or-</span></span> 
<span data-ttu-id="fea4f-1040">O argumento <paramref name="tasks" /> é uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1040">The <paramref name="tasks" /> argument is an empty array.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fea4f-1041">O <paramref name="cancellationToken" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1041">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-1042">Aguarda até que todos os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos tenham concluído a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1042">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (ParamArray tasks As Task()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1043">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1043">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <summary><span data-ttu-id="fea4f-1044">Aguarda até que todos os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos tenham concluído a execução.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1044">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1045">O índice do objeto <see cref="T:System.Threading.Tasks.Task" /> concluído na matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1045">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fea4f-1046">O exemplo a seguir inicia cinco tarefas, cada um deles entra em suspensão para um máximo de 1,050 milissegundos ou de um mínimo de 50 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1046">The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</span></span> <span data-ttu-id="fea4f-1047">O <xref:System.Threading.Tasks.Task.WaitAny%2A> método aguarda até que todas as tarefas para concluir.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1047">The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete.</span></span> <span data-ttu-id="fea4f-1048">O exemplo exibe a ID da tarefa da tarefa que terminou a espera, bem como o status atual de todas as tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1048">The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1049">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1049">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1050">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1050">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1051">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1051">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1052">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1052">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="fea4f-1053">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1053">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-1054">Aguarda qualquer um dos objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos concluírem a execução dentro de um número especificado de milissegundos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1054">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1055">O índice da tarefa concluída no argumento da matriz <paramref name="tasks" /> ou -1 se o tempo limite ocorreu.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1055">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1056">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1056">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1057">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1057">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-1058"><paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1058"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1059">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1059">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1060">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1060">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-1061">Um <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> a ser observado ao aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1061">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-1062">Aguarda até que os objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos tenham concluído a execução, a menos que a espera seja cancelada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1062">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1063">O índice da tarefa concluída no argumento da matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1063">The index of the completed task in the <paramref name="tasks" /> array argument.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1064">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1064">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1065">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1065">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1066">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1066">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fea4f-1067">O <paramref name="cancellationToken" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1067">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * TimeSpan -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1068">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1068">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="fea4f-1069">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos para aguardar ou um <see cref="T:System.TimeSpan" /> que representa -1 milissegundos para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1069">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fea4f-1070">Aguarda algum dos objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos concluir a execução em um intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1070">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1071">O índice da tarefa concluída no argumento da matriz <paramref name="tasks" /> ou -1 se o tempo limite ocorreu.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1071">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1072">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1072">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1073">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1073">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-1074"><paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1074"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="fea4f-1075">- ou -</span><span class="sxs-lookup"><span data-stu-id="fea4f-1075">-or-</span></span> 
 <span data-ttu-id="fea4f-1076"><paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1076"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1077">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1077">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1078">Uma matriz de instâncias <see cref="T:System.Threading.Tasks.Task" /> para espera.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1078">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="fea4f-1079">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1079">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fea4f-1080">Um <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> a ser observado ao aguardar a conclusão da tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1080">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span></span></param>
        <summary><span data-ttu-id="fea4f-1081">Aguarda alguns dos objetos <see cref="T:System.Threading.Tasks.Task" /> fornecidos concluírem a execução em um número especificado de milissegundos ou até que o token de cancelamento seja cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1081">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1082">O índice da tarefa concluída no argumento da matriz <paramref name="tasks" /> ou -1 se o tempo limite ocorreu.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1082">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fea4f-1083">O <see cref="T:System.Threading.Tasks.Task" /> foi descartado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1083">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1084">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1084">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fea4f-1085"><paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1085"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1086">O argumento <paramref name="tasks" /> contém um elemento nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1086">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fea4f-1087">O <paramref name="cancellationToken" /> foi cancelado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1087">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-1088">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1088">Creates a task that will complete when all of the supplied tasks have completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (tasks As IEnumerable(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1089">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1089">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1090">Cria uma tarefa que será concluída quando todos os objetos <see cref="T:System.Threading.Tasks.Task" /> em uma coleção enumerável forem concluídos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1090">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1091">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1091">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1092">As sobrecargas do <xref:System.Threading.Tasks.Task.WhenAll%2A> método que retorna um <xref:System.Threading.Tasks.Task> objeto normalmente são chamados quando você está interessado no status de um conjunto de tarefas ou nas exceções geradas por um conjunto de tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1092">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fea4f-1093">A chamada para <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> método não bloqueia o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1093">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="fea4f-1094">Se qualquer uma das tarefas fornecidas for concluída em um estado de falha, a tarefa retornada também será concluída em um <xref:System.Threading.Tasks.TaskStatus.Faulted> estado, em que suas exceções conterá a agregação do conjunto de exceções sem quebra de texto de cada uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1094">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="fea4f-1095">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada será encerrada no <xref:System.Threading.Tasks.TaskStatus.Canceled> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1095">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="fea4f-1096">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante será encerrada no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1096">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="fea4f-1097">Se o fornecido matriz/enumerável não contém tarefas, a tarefa retornada imediatamente fará a transição para um <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado antes de ser retornado ao chamador.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1097">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-1098">O exemplo a seguir cria um conjunto de tarefas que executar o ping as URLs em uma matriz.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1098">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="fea4f-1099">As tarefas são armazenadas em um `List<Task>` coleção que é passada para o <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1099">The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="fea4f-1100">Após a chamada para o <xref:System.Threading.Tasks.Task.Wait%2A> método garante que todos os threads tem concluído, o exemplo examina a <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriedade para determinar se as tarefas têm com defeito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1100">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1101">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1101">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1102">A coleção <paramref name="tasks" /> continha uma tarefa <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1102">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (ParamArray tasks As Task()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1103">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1103">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1104">Cria uma tarefa que será concluída quando todos os objetos <see cref="T:System.Threading.Tasks.Task" /> em uma matriz forem concluídos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1104">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1105">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1105">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1106">As sobrecargas do <xref:System.Threading.Tasks.Task.WhenAll%2A> método que retorna um <xref:System.Threading.Tasks.Task> objeto normalmente são chamados quando você está interessado no status de um conjunto de tarefas ou nas exceções geradas por um conjunto de tarefas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1106">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fea4f-1107">A chamada para <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> método não bloqueia o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1107">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="fea4f-1108">Se qualquer uma das tarefas fornecidas for concluída em um estado de falha, a tarefa retornada também será concluída em um <xref:System.Threading.Tasks.TaskStatus.Faulted> estado, em que suas exceções conterá a agregação do conjunto de exceções sem quebra de texto de cada uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1108">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="fea4f-1109">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada será encerrada no <xref:System.Threading.Tasks.TaskStatus.Canceled> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1109">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="fea4f-1110">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante será encerrada no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1110">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="fea4f-1111">Se o fornecido matriz/enumerável não contém tarefas, a tarefa retornada imediatamente fará a transição para um <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado antes de ser retornado ao chamador.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1111">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-1112">O exemplo a seguir cria um conjunto de tarefas que executar o ping as URLs em uma matriz.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1112">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="fea4f-1113">As tarefas são armazenadas em um `List<Task>` coleção que é convertida em uma matriz e passada para o <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> método.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1113">The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="fea4f-1114">Após a chamada para o <xref:System.Threading.Tasks.Task.Wait%2A> método garante que todos os threads tem concluído, o exemplo examina a <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriedade para determinar se as tarefas têm com defeito.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1114">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1115">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1115">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1116">A matriz <paramref name="tasks" /> continha uma tarefa <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1116">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-1117">O tipo de tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1117">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="fea4f-1118">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1118">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1119">Cria uma tarefa que será concluída quando todos os objetos <see cref="T:System.Threading.Tasks.Task`1" /> em uma coleção enumerável forem concluídos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1119">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1120">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1120">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1121">A chamada para <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> método não bloqueia o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1121">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread.</span></span> <span data-ttu-id="fea4f-1122">No entanto, uma chamada para retornado <xref:System.Threading.Tasks.Task%601.Result%2A> propriedade bloquear o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1122">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="fea4f-1123">Se qualquer uma das tarefas fornecidas for concluída em um estado de falha, a tarefa retornada também será concluída em um <xref:System.Threading.Tasks.TaskStatus.Faulted> estado, em que suas exceções conterá a agregação do conjunto de exceções sem quebra de texto de cada uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1123">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="fea4f-1124">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada será encerrada no <xref:System.Threading.Tasks.TaskStatus.Canceled> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1124">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="fea4f-1125">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante será encerrada no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1125">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="fea4f-1126">O <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> propriedade da tarefa retornada será definida para uma matriz que contém todos os resultados das tarefas fornecidas na mesma ordem como eles foram fornecidos (por exemplo, se a entrada de tarefas a matriz contida t1, t2, t3, a tarefa de saída <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> propriedade retornará uma `TResult[]` onde `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1126">The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="fea4f-1127">Se o `tasks` argumento não contém tarefas, a tarefa retornada imediatamente fará a transição para um <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado antes de ser retornado ao chamador.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1127">If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span> <span data-ttu-id="fea4f-1128">Retornado `TResult[]` será uma matriz de elementos de 0.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1128">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-1129">O exemplo a seguir cria dez tarefas, cada um deles cria uma instância de um gerador de número aleatório que cria a 1.000 números aleatórios entre 1 e 1.000 e computa sua média.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1129">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="fea4f-1130">O <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> método é usado para atrasar a instanciação de geradores de números aleatórios para que eles não são criados com valores de semente idênticos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1130">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="fea4f-1131">A chamada para o <xref:System.Threading.Tasks.Task.WhenAll%2A> , em seguida, o método retorna um <xref:System.Int64> matriz que contém a média calculada por cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1131">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="fea4f-1132">Em seguida, eles são usados para calcular a média geral.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1132">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  
  
 <span data-ttu-id="fea4f-1133">Nesse caso, as dez tarefas individuais são armazenadas em um <xref:System.Collections.Generic.List%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1133">In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="fea4f-1134"><xref:System.Collections.Generic.List%601> implementa a interface <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1134"><xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1135">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1135">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1136">A coleção <paramref name="tasks" /> continha uma tarefa <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1136">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-1137">O tipo de tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1137">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="fea4f-1138">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1138">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1139">Cria uma tarefa que será concluída quando todos os objetos <see cref="T:System.Threading.Tasks.Task`1" /> em uma matriz forem concluídos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1139">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1140">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1140">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1141">A chamada para <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> método não bloqueia o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1141">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread.</span></span> <span data-ttu-id="fea4f-1142">No entanto, uma chamada para retornado <xref:System.Threading.Tasks.Task%601.Result%2A> propriedade bloquear o thread de chamada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1142">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="fea4f-1143">Se qualquer uma das tarefas fornecidas for concluída em um estado de falha, a tarefa retornada também será concluída em um <xref:System.Threading.Tasks.TaskStatus.Faulted> estado, em que suas exceções conterá a agregação do conjunto de exceções sem quebra de texto de cada uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1143">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="fea4f-1144">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada será encerrada no <xref:System.Threading.Tasks.TaskStatus.Canceled> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1144">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="fea4f-1145">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante será encerrada no <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1145">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="fea4f-1146">O <xref:System.Threading.Tasks.Task%601.Result%2A> da tarefa retornada será definido como uma matriz que contém todos os resultados das tarefas fornecidas na mesma ordem como eles foram fornecidos (por exemplo, se a entrada de tarefas a matriz contida t1, t2, t3, a tarefa de saída <xref:System.Threading.Tasks.Task%601.Result%2A> retornará um `TResult[]` onde `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1146">The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="fea4f-1147">Se o fornecido matriz/enumerável não contém tarefas, a tarefa retornada imediatamente fará a transição para um <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado antes de ser retornado ao chamador.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1147">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  <span data-ttu-id="fea4f-1148">Retornado `TResult[]` será uma matriz de elementos de 0.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1148">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fea4f-1149">O exemplo a seguir cria dez tarefas, cada um deles cria uma instância de um gerador de número aleatório que cria a 1.000 números aleatórios entre 1 e 1.000 e computa sua média.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1149">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="fea4f-1150">Nesse caso, as dez tarefas individuais são armazenadas em um `Task<Int64>` matriz.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1150">In this case, the ten individual tasks are stored in a `Task<Int64>` array.</span></span>  <span data-ttu-id="fea4f-1151">O <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> método é usado para atrasar a instanciação de geradores de números aleatórios para que eles não são criados com valores de semente idênticos.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1151">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="fea4f-1152">A chamada para o <xref:System.Threading.Tasks.Task.WhenAll%2A> , em seguida, o método retorna um <xref:System.Int64> matriz que contém a média calculada por cada tarefa.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1152">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="fea4f-1153">Em seguida, eles são usados para calcular a média geral.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1153">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1154">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1154">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1155">A matriz <paramref name="tasks" /> continha uma tarefa <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1155">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fea4f-1156">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1156">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (tasks As IEnumerable(Of Task)) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1157">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1157">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1158">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1158">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1159">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1159">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="fea4f-1160">O Resultado da tarefa de retorno é a tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1160">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1161">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1161">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="fea4f-1162">A tarefa retornada sempre terminará no `RanToCompletion` estado com seu conjunto de resultados para a primeira tarefa para ser concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1162">The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.</span></span>  <span data-ttu-id="fea4f-1163">Isso é verdadeiro mesmo se a primeira tarefa seja concluída terminou na `Canceled` ou `Faulted` estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1163">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1164">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1164">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1165">A matriz <paramref name="tasks" /> continha uma tarefa nula ou estava vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1165">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (ParamArray tasks As Task()) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="fea4f-1166">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1166">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1167">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1167">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1168">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1168">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="fea4f-1169">O Resultado da tarefa de retorno é a tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1169">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1170">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1170">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="fea4f-1171">A tarefa retornada sempre terminará na `RanToCompletion` estado com seu `Result` definido para a primeira tarefa para ser concluído.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1171">The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.</span></span>  <span data-ttu-id="fea4f-1172">Isso é verdadeiro mesmo se a primeira tarefa seja concluída terminou na `Canceled` ou `Faulted` estado.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1172">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1173">O argumento <paramref name="tasks" /> era nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1173">The <paramref name="tasks" /> argument was null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1174">A matriz <paramref name="tasks" /> continha uma tarefa nula ou estava vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1174">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-1175">O tipo de tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1175">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="fea4f-1176">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1176">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1177">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1177">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1178">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1178">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="fea4f-1179">O Resultado da tarefa de retorno é a tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1179">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1180">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1180">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="fea4f-1181">A tarefa retornada sempre terminará no estado RanToCompletion com seu conjunto de resultados para a primeira tarefa para ser concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1181">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="fea4f-1182">Isso é verdadeiro mesmo se a primeira tarefa seja concluída terminou no estado cancelado ou com falha.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1182">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1183">O argumento <paramref name="tasks" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1183">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1184">A matriz <paramref name="tasks" /> continha uma tarefa nula ou estava vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1184">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="fea4f-1185">O tipo de tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1185">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="fea4f-1186">As tarefas para aguardar pela conclusão.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1186">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="fea4f-1187">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1187">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1188">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1188">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="fea4f-1189">O Resultado da tarefa de retorno é a tarefa concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1189">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1190">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1190">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="fea4f-1191">A tarefa retornada sempre terminará no estado RanToCompletion com seu conjunto de resultados para a primeira tarefa para ser concluída.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1191">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="fea4f-1192">Isso é verdadeiro mesmo se a primeira tarefa seja concluída terminou no estado cancelado ou com falha.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1192">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fea4f-1193">O argumento <paramref name="tasks" /> era nulo.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1193">The <paramref name="tasks" /> argument was null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fea4f-1194">A matriz <paramref name="tasks" /> continha uma tarefa nula ou estava vazia.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1194">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.YieldAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.YieldAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As YieldAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::CompilerServices::YieldAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Runtime.CompilerServices.YieldAwaitable" Usage="System.Threading.Tasks.Task.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.YieldAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fea4f-1195">Cria uma tarefa que é possível aguardar que retorna assincronamente para o contexto atual quando aguardada.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1195">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span></span></summary>
        <returns><span data-ttu-id="fea4f-1196">Um contexto que, quando aguardado, fará a transição de maneira assíncrona de volta ao contexto atual ao aguardar.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1196">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span></span> <span data-ttu-id="fea4f-1197">Se o <see cref="T:System.Threading.SynchronizationContext" /> atual não for nulo, ele será tratado como o contexto atual.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1197">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span></span> <span data-ttu-id="fea4f-1198">Caso contrário, o Agendador de Tarefas associado à tarefa em execução no momento será tratado como o contexto atual.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1198">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fea4f-1199">Você pode usar `await Task.Yield();` em um método assíncrono para forçar o método a ser realizadas de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1199">You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously.</span></span> <span data-ttu-id="fea4f-1200">Se não houver um contexto de sincronização atual (<xref:System.Threading.SynchronizationContext> objeto), isso postará o restante da execução do método para esse contexto.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1200">If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method's execution back to that context.</span></span> <span data-ttu-id="fea4f-1201">No entanto, o contexto decidirá como priorizar esse trabalho em relação ao outro trabalho que pode estar pendente.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1201">However, the context will decide how to prioritize this work relative to other work that may be pending.</span></span> <span data-ttu-id="fea4f-1202">O contexto de sincronização que está presente em um thread de interface do usuário na maioria dos ambientes de interface do usuário geralmente priorizará trabalho lançada para o contexto de maior do que a entrada e o trabalho de renderização.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1202">The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</span></span> <span data-ttu-id="fea4f-1203">Por esse motivo, não confie em `await Task.Yield();` manter uma interface do usuário responsiva.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1203">For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.</span></span>  <span data-ttu-id="fea4f-1204">Para obter mais informações, consulte a entrada [útil abstrações habilitado com ContinueWith](https://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) na programação paralela no blog do .NET.</span><span class="sxs-lookup"><span data-stu-id="fea4f-1204">For more information, see the entry [Useful Abstractions Enabled with ContinueWith](https://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>