<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Task.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d920b17ab80db20fab0e3101b745858eade81dd1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d920b17ab80db20fab0e3101b745858eade81dd1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Represents an asynchronous operation.</source>
          <target state="translated">Representa uma operação assíncrona.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class represents a single operation that does not return a value and that usually executes asynchronously.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> classe representa uma única operação que não retorna um valor e que normalmente executa de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects are one of the central components of the  <bpt id="p1">[</bpt>task-based asynchronous pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept> first introduced in the .NET Framework 4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objetos são um dos componentes da centrais de <bpt id="p1">[</bpt>padrão assíncrono baseado em tarefa<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept> introduzida no .NET Framework 4.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Because the work performed by a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property, as well as the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> properties, to determine the   state of a task.</source>
          <target state="translated">Porque o trabalho executado por um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto normalmente executa de forma assíncrona em um thread do pool em vez de forma síncrona no thread principal do aplicativo, você pode usar o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriedade, bem como o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> propriedades, para determinar o estado de uma tarefa.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Most commonly, a lambda expression is used to specify the work that the task is to perform.</source>
          <target state="translated">Geralmente, uma expressão lambda é usada para especificar que a tarefa é executar o trabalho.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For operations that return values, you use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class.</source>
          <target state="translated">Para operações que retornam valores, você deve usar o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>In this section:</source>
          <target state="translated">Nesta seção:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><bpt id="p1">[</bpt>Task instantiation examples<ept id="p1">](#Instant)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Exemplos de instanciação da tarefa<ept id="p1">](#Instant)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><bpt id="p1">[</bpt>Creating and executing a task<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Criar e executar uma tarefa<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><bpt id="p1">[</bpt>Separating task creation and execution<ept id="p1">](#Separating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>A separação de execução e criação de tarefa<ept id="p1">](#Separating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><bpt id="p1">[</bpt>Waiting for one or more tasks to complete<ept id="p1">](#WaitingForOne)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Aguardando a conclusão de tarefas um ou mais<ept id="p1">](#WaitingForOne)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><bpt id="p1">[</bpt>Tasks and culture<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Tarefas e cultura<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><bpt id="p1">[</bpt>For debugger developers<ept id="p1">](#Debugger)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Para desenvolvedores do depurador<ept id="p1">](#Debugger)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Task instantiation</source>
          <target state="translated">Instanciação de tarefa</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The following example creates and executes four tasks.</source>
          <target state="translated">O exemplo a seguir cria e executa quatro tarefas.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Three tasks execute an <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate named <ph id="ph2">`action`</ph>, which accepts an argument of type <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Três tarefas executar um <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegado chamado <ph id="ph2">`action`</ph>, que aceita um argumento de tipo <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>A fourth task executes a lambda expression (an <ph id="ph1">&lt;xref:System.Action&gt;</ph> delegate) that is defined inline in the call to the task creation method.</source>
          <target state="translated">Uma tarefa do quarta executa uma expressão lambda (um <ph id="ph1">&lt;xref:System.Action&gt;</ph> delegar) que é definida embutida na chamada para o método de criação de tarefa.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Each task is instantiated and run in a different way:</source>
          <target state="translated">Cada tarefa é instanciada e executada de maneira diferente:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Task <ph id="ph1">`t1`</ph> is instantiated by calling a Task class constructor, but is started by calling its <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start&gt;</ph> method only after task <ph id="ph3">`t2`</ph> has started.</source>
          <target state="translated">Tarefa <ph id="ph1">`t1`</ph> é instanciado chamando um construtor de classe de tarefa, mas é iniciada chamando seu <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start&gt;</ph> método somente após a tarefa <ph id="ph3">`t2`</ph> foi iniciado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Task <ph id="ph1">`t2`</ph> is instantiated and started in a single method call by calling the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Tarefa <ph id="ph1">`t2`</ph> é criada e iniciada em uma única chamada de método chamando o <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Task <ph id="ph1">`t3`</ph> is instantiated and started in a single method call by calling the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> method.</source>
          <target state="translated">Tarefa <ph id="ph1">`t3`</ph> é criada e iniciada em uma única chamada de método chamando o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Task <ph id="ph1">`t4`</ph> is executed synchronously on the main thread by calling the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.RunSynchronously&gt;</ph> method.</source>
          <target state="translated">Tarefa <ph id="ph1">`t4`</ph> é executada modo síncrono no thread principal chamando o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.RunSynchronously&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Because task <ph id="ph1">`t4`</ph> executes synchronously, it executes on the main application thread.</source>
          <target state="translated">Como tarefa <ph id="ph1">`t4`</ph> executado de modo síncrono, ele executa no thread principal do aplicativo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The remaining tasks execute asynchronously typically on one or more thread pool threads.</source>
          <target state="translated">As tarefas restantes executadas de forma assíncrona normalmente em um ou mais threads do pool.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Creating and executing a task</source>
          <target state="translated">Criar e executar uma tarefa</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instances may be created in a variety of ways.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instâncias podem ser criadas em uma variedade de maneiras.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The most common approach, which is available starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, is to call the static <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method.</source>
          <target state="translated">A abordagem mais comum, que está disponível desde o <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, é chamar estático <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method provides a simple way to start a task using default values and without requiring additional parameters.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> método fornece uma maneira simples de iniciar uma tarefa usando valores padrão e sem a necessidade de parâmetros adicionais.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> method to start a task that loops and then displays the number of loop iterations:</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> método para iniciar uma tarefa que executa um loop e, em seguida, exibe o número de iterações do loop:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>An alternative, and the most common method to start a task in <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, is the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Uma alternativa e o método mais comum para iniciar uma tarefa <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, é estático <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType&gt;</ph> propriedade retorna um <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method let you specify parameters to pass to the task creation options and a task scheduler.</source>
          <target state="translated">Sobrecargas do <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> método permitem que você especifique parâmetros passados para as opções de criação de tarefa e um agendador de tarefas.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method to start a task.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> método para iniciar uma tarefa.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>It is functionally equivalent to the code in the previous example.</source>
          <target state="translated">É funcionalmente equivalente ao código no exemplo anterior.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For more complete examples, see <bpt id="p1">[</bpt>Task-based Asynchronous Programming<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>.</source>
          <target state="translated">Para obter mais exemplos, consulte <bpt id="p1">[</bpt>baseado em tarefas de programação assíncrona<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Separating task creation and execution</source>
          <target state="translated">A separação de execução e criação de tarefa</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class also provides constructors that initialize the task but that do not schedule it for execution.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> classe também fornece construtores que inicializar a tarefa, mas que não agendá-lo para execução.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For performance reasons, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType&gt;</ph> method to schedule the task for execution at a later time.</source>
          <target state="translated">Por motivos de desempenho, o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> método é o mecanismo preferido para criar e agendar tarefas de computação, mas para cenários em que a criação e agendamento devem ser separados, você pode usar os construtores e, em seguida, chamar o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType&gt;</ph> método para agendar a tarefa para execução em um momento posterior.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Waiting for one or more tasks to complete</source>
          <target state="translated">Aguardando a conclusão de tarefas um ou mais</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</source>
          <target state="translated">Como tarefas normalmente executados de forma assíncrona em um pool de threads, o thread que cria e inicia a tarefa continua a execução assim que a tarefa foi criada.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</source>
          <target state="translated">Em alguns casos, quando o thread de chamada é o thread principal do aplicativo, o aplicativo pode encerrar antes de qualquer tarefa realmente começa a ser executada.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</source>
          <target state="translated">Em outros, a lógica do aplicativo pode exigir que o thread de chamada continuar execução somente quando uma ou mais tarefas concluiu a execução.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a <ph id="ph1">`Wait`</ph> method to wait for one or more tasks to complete.</source>
          <target state="translated">Você pode sincronizar a execução do thread de chamada assíncrona tarefas e ela inicia chamando um <ph id="ph1">`Wait`</ph> método para aguardar a conclusão de tarefas um ou mais.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>To wait for a single task to complete, you can call its <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para aguardar uma única tarefa ser concluída, você pode chamar seu <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>A call to the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method blocks the calling thread until the single class instance has completed execution.</source>
          <target state="translated">Uma chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método bloqueia o thread de chamada até que a instância da classe único concluiu a execução.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The following example calls the parameterless <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait&gt;</ph> method to wait unconditionally until a task completes.</source>
          <target state="translated">O exemplo a seguir chama o sem parâmetros <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait&gt;</ph> método incondicionalmente aguardar até que uma tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The task simulates work by calling the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method to sleep for two seconds.</source>
          <target state="translated">A tarefa simula trabalho chamando o <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> método no modo de suspensão por dois segundos.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>You can also conditionally wait for a task to complete.</source>
          <target state="translated">Você pode também condicionalmente esperar a conclusão de uma tarefa.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> métodos bloqueiam o thread de chamada até que a tarefa seja concluída ou um intervalo de tempo limite expira, o que ocorrer primeiro.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</source>
          <target state="translated">Como o exemplo a seguir inicia uma tarefa que define um valor de tempo limite de um segundo, os blocos de thread de chamada até que o tempo limite expirar, mas ficará suspenso por dois segundos e antes da tarefa foi concluída a execução.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>You can also supply a cancellation token by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> and  <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> methods.</source>
          <target state="translated">Você também pode fornecer um token de cancelamento chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>If the  token's <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the wait is cancelled; if it becomes true while the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method terminates.</source>
          <target state="translated">Se o token <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> é de propriedade <ph id="ph2">`true`</ph>, a espera foi cancelada; se ela for verdadeira durante o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método termina.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</source>
          <target state="translated">Em alguns casos, talvez você queira aguardar para a primeira de uma série de tarefas em execução concluir, mas não é cuidado qual tarefa-lo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For this purpose, you can call one of the overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para essa finalidade, você pode chamar uma das sobrecargas do <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</source>
          <target state="translated">O exemplo a seguir cria três tarefas, cada uma delas é suspenso para determinar um intervalo por um gerador de número aleatório.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> method waits for the first task to complete.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> método aguarda a conclusão da tarefa primeiro.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The example then displays information about the status of all three tasks.</source>
          <target state="translated">O exemplo, em seguida, exibe informações sobre o status de todas as três tarefas.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>You can also wait for all of a series of tasks to complete by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> method.</source>
          <target state="translated">Você também pode aguardar todos de uma série de tarefas a concluir ao chamar o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The following example creates ten tasks, waits for all ten to complete, and then displays their status.</source>
          <target state="translated">O exemplo a seguir cria as dez tarefas, aguarda até que todos os dez ser concluída e, em seguida, exibe seu status.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the <ph id="ph1">`Wait`</ph> method, as the following example shows.</source>
          <target state="translated">Observe que, quando você espera por uma ou mais tarefas concluir, as exceções geradas na execução de tarefas são propagadas no thread que chama o <ph id="ph1">`Wait`</ph> método, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>It launches 12 tasks, three of which complete normally and three of which throw an exception.</source>
          <target state="translated">Ela inicia 12 tarefas, três dos quais concluída normalmente e três dos quais lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.</source>
          <target state="translated">Seis tarefas restantes, três são cancelada antes do início e três serão cancelados durante a eles em execução.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Exceptions are thrown in the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> method call and are handled by a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">As exceções são geradas <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> chamada de método e são tratadas por um <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloco.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For more information on exception handling in task-based asynchronous operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre o tratamento de exceções em baseado em tarefas de operações assíncronas, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Tasks and culture</source>
          <target state="translated">Tarefas e cultura</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Starting with desktop apps that target the <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the thread that creates and invokes a task becomes part of the thread's context.</source>
          <target state="translated">Começando com aplicativos de desktop que visam o <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, a cultura do thread que cria e invoca uma tarefa se torna parte do contexto do thread.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</source>
          <target state="translated">Ou seja, independentemente da cultura atual do thread no qual a tarefa é executada, a cultura atual da tarefa é a cultura do thread de chamada.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For apps that target versions of the .NET Framework prior to the <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the task is the culture of the thread on which the task executes.</source>
          <target state="translated">Para aplicativos que usam versões do .NET Framework antes do <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, a cultura da tarefa é a cultura do thread no qual a tarefa será executada.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For more information, see the "Culture and task-based asynchronous operations" section in the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> topic.</source>
          <target state="translated">Para obter mais informações, consulte a seção "Cultura e baseado em tarefas de operações assíncronas" o <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> tópico.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Store apps follow the Windows Runtime in setting and getting the default culture.</source>
          <target state="translated">Aplicativos da Windows Store siga o tempo de execução do Windows na configuração e obter a cultura padrão.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For debugger developers</source>
          <target state="translated">Para desenvolvedores do depurador</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</source>
          <target state="translated">Para desenvolvedores implementando depuradores personalizados, vários membros internos e privados de tarefa podem ser útil de (eles podem ser alterados de versão para versão).</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">`m_taskId`</ph> field serves as the backing store for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Id%2A&gt;</ph> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the <ph id="ph3">`s_taskIdCounter`</ph> counter is used to retrieve the next available ID for a task).</source>
          <target state="translated">O <ph id="ph1">`m_taskId`</ph> campo serve como armazenamento de backup para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Id%2A&gt;</ph> propriedade, no entanto ao acessar esse campo diretamente de um depurador pode ser mais eficiente do que acessar o mesmo valor por meio do método de getter da propriedade (o <ph id="ph3">`s_taskIdCounter`</ph> contador é usado para recuperar a próxima ID disponível para uma tarefa).</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Similarly, the <ph id="ph1">`m_stateFlags`</ph> field stores information about the current lifecycle stage of the task, information also accessible through the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Da mesma forma, o <ph id="ph1">`m_stateFlags`</ph> campo armazena informações sobre o estágio do ciclo de vida atual da tarefa, as informações também acessíveis por meio de <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">`m_action`</ph> field stores a reference to the task's delegate, and the <ph id="ph2">`m_stateObject`</ph> field stores the async state passed to the task by the developer.</source>
          <target state="translated">O <ph id="ph1">`m_action`</ph> campo armazena uma referência ao representante da tarefa e o <ph id="ph2">`m_stateObject`</ph> campo armazena o estado de async passado para a tarefa pelo desenvolvedor.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>Finally, for debuggers that parse stack frames, the <ph id="ph1">`InternalWait`</ph> method serves a potential marker for when a task is entering a wait operation.</source>
          <target state="translated">Finalmente, para depuradores que analisam os quadros de pilha, o <ph id="ph1">`InternalWait`</ph> método serve um marcador potencial para quando uma tarefa está inserindo uma operação de espera.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>All members of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, except for <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.Dispose" /&gt;</ph>, are thread-safe and may be used from multiple threads concurrently.</source>
          <target state="translated">Todos os membros de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, exceto para <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.Dispose" /&gt;</ph>, são thread-safe e podem ser usados em vários threads ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação especificada.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29&gt;</ph> constructor to create tasks that retrieve the filenames in specified directories.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29&gt;</ph> especificado de construtor para criar tarefas que recuperar os nomes dos arquivos em diretórios.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>All tasks write the file names to a single <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> object.</source>
          <target state="translated">Todas as tarefas de gravar os nomes de arquivo em um único <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> object.</source>
          <target state="translated">O exemplo, em seguida, chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> método para garantir que todas as tarefas concluiu e, em seguida, exibe uma contagem do número total de nomes de arquivo gravado para o <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>The following example is identical, except that it used the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> method to instantiate and run the task in a single operation.</source>
          <target state="translated">O exemplo a seguir é idêntico, exceto que ele usado o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> método para instanciar e executar a tarefa em uma única operação.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>The method returns the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object that represents the task.</source>
          <target state="translated">O método retorna o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto que representa a tarefa.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that the new  task will observe.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> que a nova tarefa observará.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action and <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação especificada e <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> e <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>For more information, see <bpt id="p1">[</bpt>Task Parallelism (Task Parallel Library)<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> and <bpt id="p2">[</bpt>Cancellation in Managed Threads<ept id="p2">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>paralelismo de tarefas (Task Parallel Library)<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> e <bpt id="p2">[</bpt>cancelamento em Threads gerenciados<ept id="p2">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> construtor para criar uma tarefa que itera os arquivos no diretório C:\Windows\System32.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The lambda expression calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> method to add information about each  file to a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">A expressão de lambda chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> método para adicionar informações sobre cada arquivo a um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>Each detached nested task invoked by the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> loop checks the state of the cancellation token and, if cancellation is requested, calls the <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Cada desanexado tarefa aninhada invocada pelo <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> loop verifica o estado do token de cancelamento e, se cancelamento for solicitado, chama o <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception that is handled in a <ph id="ph3">`catch`</ph> block when the calling thread calls the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> método lança um <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exceção que é tratada de uma <ph id="ph3">`catch`</ph> bloquear quando o thread de chamada chama o <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method is then called to start the task.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método é chamado para iniciar a tarefa.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornecido já foi descartado.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> usado para personalizar o comportamento da tarefa.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action and creation options.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação especificada e opções de criação.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>An object representing data to be used by the action.</source>
          <target state="translated">Um objeto que representa dados a serem usados pela ação.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action and state.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação especificada e estado.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>The following example defines an array of 6-letter words.</source>
          <target state="translated">O exemplo a seguir define uma matriz de palavras de letra 6.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>Each word is then passed as an argument to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29&gt;</ph> constructor, whose <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</source>
          <target state="translated">Cada palavra é passada como um argumento para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29&gt;</ph> construtor, cujo <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegado codifica os caracteres na palavra, em seguida, exibe a palavra original e sua versão embaralhado.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that the new task will observe.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> que a nova tarefa observará.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> usado para personalizar o comportamento da tarefa.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action and creation options.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação especificada e opções de criação.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Task Parallelism (Task Parallel Library)<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> and <bpt id="p2">[</bpt>Task Cancellation<ept id="p2">](~/docs/standard/parallel-programming/task-cancellation.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>paralelismo de tarefas (Task Parallel Library)<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> e <bpt id="p2">[</bpt>cancelamento da tarefa<ept id="p2">](~/docs/standard/parallel-programming/task-cancellation.md)</ept>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>An object representing data to be used by the action.</source>
          <target state="translated">Um objeto que representa dados a serem usados pela ação.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that that the new task will observe.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> que a nova tarefa observará.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action, state, and options.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação, o estado e as opções especificados.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object representing data to be used by the action.</source>
          <target state="translated">Um objeto que representa dados a serem usados pela ação.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> usado para personalizar o comportamento da tarefa.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action, state, and options.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação, o estado e as opções especificados.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">O delegado que representa o código a ser executado na tarefa.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object representing data to be used by the action.</source>
          <target state="translated">Um objeto que representa dados a serem usados pela ação.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that that the new task will observe..</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> que a nova tarefa observará.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> usado para personalizar o comportamento da tarefa.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> with the specified action, state, and options.</source>
          <target state="translated">Inicializa um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> com a ação, o estado e as opções especificados.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Em vez de chamar este construtor, a maneira mais comum para instanciar um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto e inicie uma tarefa está chamando estático <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">A única vantagem oferecida por esse construtor é que ele permite que a instanciação do objeto a ser separado da invocação de tarefa.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> já foi descartado.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.AsyncState">
          <source>Gets the state object supplied when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> was created, or null if none was supplied.</source>
          <target state="translated">Obtém o objeto de estado fornecido quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi criado ou nulo se não foi fornecido.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.AsyncState">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the state data that was passed in to the task when it was created.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que representa os dados de estado que foram passados para a tarefa quando ela foi criada.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.AsyncState">
          <source>Cast the object back to the original type to retrieve its data.</source>
          <target state="translated">Converta o objeto para o tipo original ao recuperar seus dados.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.CompletedTask">
          <source>Gets a task that has already completed successfully.</source>
          <target state="translated">Obtém uma tarefa que já foi concluída com êxito.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CompletedTask">
          <source>The successfully completed task.</source>
          <target state="translated">A tarefa concluída com êxito.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CompletedTask">
          <source>This property returns a task whose <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>.</source>
          <target state="translated">Essa propriedade retorna uma tarefa cujo <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> está definida como <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CompletedTask">
          <source>To create task that returns a value and runs to completion, call the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> method.</source>
          <target state="translated">Para criar a tarefa que retorna um valor e é executado até a conclusão, chame o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CompletedTask">
          <source>Repeated attempts to retrieve this property value may not always return the same instance.</source>
          <target state="translated">As tentativas repetidas para recuperar o valor dessa propriedade podem não retornar sempre a mesma instância.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attempt to marshal the continuation back to the original context captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para tentar realizar marshaling da continuação de volta ao contexto original capturado; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
          <source>Configures an awaiter used to await this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Configura um awaiter usado para aguardar este <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
          <source>An object used to await this task.</source>
          <target state="translated">Um objeto usado para aguardar essa tarefa.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma ação a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>The following example defines a task that populates an array with 100 random date and time values.</source>
          <target state="translated">O exemplo a seguir define uma tarefa que preenche uma matriz com 100 aleatória valores de data e hora.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>It uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> method to select the earliest and the latest date values once the array is fully populated.</source>
          <target state="translated">Ele usa o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> método para selecionar o mais recente e os valores de data mais recentes quando a matriz é totalmente preenchida.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>Because a console application may terminate before the continuation task executes, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait&gt;</ph> method is called to ensure that the continuation finishes executing before the example ends.</source>
          <target state="translated">Como um aplicativo de console pode ser encerrada antes de executa a tarefa de continuação, o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait&gt;</ph> método é chamado para garantir que a continuação termina de executar antes do término de exemplo.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>For an additional example, see <bpt id="p1">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.</source>
          <target state="translated">Para obter um exemplo adicional, consulte <bpt id="p1">[</bpt>encadeamento de tarefas por tarefas de continuação usando<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
          <source>An action to run when the task completes.</source>
          <target state="translated">Uma ação a ser executada quando a tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
          <source>When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</source>
          <target state="translated">Quando executado, o delegado recebe a tarefa concluída e um objeto de estado fornecido pelo chamador como argumentos.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela ação de continuação.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
          <source>Creates a continuation that receives caller-supplied state information and executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e executa quando <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluída.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
          <source>A new continuation task.</source>
          <target state="translated">Uma nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou saindo no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma ação a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>Creates a continuation that receives a cancellation token and executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma continuação que recebe um token de cancelamento e é executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino é concluído.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created the token has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou o token já foi descartado.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>An action to run according to the specified <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma ação a ser executada de acordo com <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept> especificado.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that executes when the target task completes according to the specified <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">Cria uma continuação que é executada quando a tarefa de destino é concluída conforme o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>If the continuation criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios de continuação especificado por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The following example demonstrates using <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> to specify that a continuation task should run synchronously when the antecedent task completes.</source>
          <target state="translated">O exemplo a seguir demonstra como usar <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> para especificar que uma tarefa de continuação deve executar sincronicamente quando a tarefa antecedente é concluída.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>(If the specified task has already completed by the time <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.ContinueWith%2A&gt;</ph> is called, the synchronous continuation will run on the thread calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.ContinueWith%2A&gt;</ph>.)</source>
          <target state="translated">(Se a tarefa especificada já foi concluída no momento <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.ContinueWith%2A&gt;</ph> é chamado, o síncrona continuação será executado na chamada do thread <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.ContinueWith%2A&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma ação a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>The continuation uses a specified scheduler.</source>
          <target state="translated">A continuação usa um agendador especificado.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma ação a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela ação de continuação.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma continuação que recebe informações de estado e um token de cancelamento fornecidos pelo chamador e que será executada de maneira assíncrona quando a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluída.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornecido já foi descartado.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma ação a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela ação de continuação.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that receives caller-supplied state information and executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e executa quando <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluída.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The continuation executes based on a set of specified conditions.</source>
          <target state="translated">A continuação é executada com base em um conjunto de condições especificadas.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>If the continuation criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios de continuação especificado por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma ação a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela ação de continuação.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e executa de forma assíncrona quando o destino <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The continuation uses a specified scheduler.</source>
          <target state="translated">A continuação usa um agendador especificado.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An action to run according to the specified <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma ação a ser executada de acordo com <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept> especificado.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes when the target task competes according to the specified <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">Cria uma continuação que é executada quando a tarefa de destino compete conforme o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The continuation receives a cancellation token and uses a specified scheduler.</source>
          <target state="translated">A continuação recebe um token de cancelamento e usa um agendador especificado.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If the criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios especificados por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</source>
          <target state="translated">Este é um exemplo de uso ContinueWith para executar o trabalho em segundo plano e no usuário de threads de interface.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created the token has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou o token já foi descartado.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma ação a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela ação de continuação.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its  execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma continuação que recebe informações de estado e um token de cancelamento fornecidos pelo chamador e que será executada quando a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluída.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The continuation executes based on a set of specified conditions and uses a specified scheduler.</source>
          <target state="translated">A continuação é executada com base em um conjunto de condições especificadas e usa um agendador especificado.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If the criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter  are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios especificados por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornecido já foi descartado.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes and returns a value.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de destino for concluído e retornar um valor.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>A new continuation task.</source>
          <target state="translated">Uma nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>The following example shows how to use the ContinueWith method:</source>
          <target state="translated">O exemplo a seguir mostra como usar o método ContinueWith:</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela função de continuação.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes and returns a value.</source>
          <target state="translated">Cria uma continuação que recebe informações de estado fornecidas pelo chamador e que é executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino é concluído e retorna um valor.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes and returns a value.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído e retornar um valor.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The continuation receives a cancellation token.</source>
          <target state="translated">A continuação recebe um token de cancelamento.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created the token has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou o token já foi descartado.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A function to run according to the condition specified in <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma função a ser executada de acordo com a condição especificada em <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that executes according to the specified continuation options and returns a value.</source>
          <target state="translated">Cria uma continuação que executa de acordo com as opções de continuação especificadas e retorna um valor.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>If the continuation criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios de continuação especificado por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes and returns a value.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído e retornar um valor.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>The continuation uses a specified scheduler.</source>
          <target state="translated">A continuação usa um agendador especificado.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela função de continuação.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes and returns a value.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído e retornar um valor.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The continuation receives caller-supplied state information and a cancellation token.</source>
          <target state="translated">A continuação recebe informações de estado fornecido pelo chamador e um token de cancelamento.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornecido já foi descartado.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela função de continuação.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that executes based on the specified task continuation options when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Cria uma continuação que é executada com base nas opções de continuação de tarefas especificadas quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino é concluído.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The continuation receives caller-supplied state information.</source>
          <target state="translated">A continuação recebe informações de estado fornecidas pelo chamador.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>If the continuation criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios de continuação especificado por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela função de continuação.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Criará uma continuação executada de forma assíncrona quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The continuation receives caller-supplied state information and uses a specified scheduler.</source>
          <target state="translated">A continuação recebe informações de estado fornecidas pelo chamador e usa um agendador especificado.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não é agendado para execução até que a tarefa atual for concluída, se ela é concluída devido a execução até a conclusão com êxito, falha devido a uma exceção sem tratamento ou sair no início devido a cancelamento.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function to run according to the specified <bpt id="p1">&lt;c&gt;</bpt>continuationOptions.<ept id="p1">&lt;/c&gt;</ept></source>
          <target state="translated">Uma função a ser executada de acordo com <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept> especificado.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quando executado, o delegado passará a tarefa concluída como um argumento.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes according to the specified continuation options and returns a value.</source>
          <target state="translated">Cria uma continuação que executa de acordo com as opções de continuação especificadas e retorna um valor.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The continuation is passed a cancellation token and uses a specified scheduler.</source>
          <target state="translated">Um token de cancelamento é passado à continuação e ela usa um agendador especificado.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If the criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios especificados por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The following example shows how to use the ContinueWith method with continuation options:</source>
          <target state="translated">O exemplo a seguir mostra como usar o método ContinueWith com opções de continuação:</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created the token has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> que criou o token já foi descartado.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é nulo.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">O tipo do resultado produzido pela continuação.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes.</source>
          <target state="translated">Uma função a ser executada quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> for concluído.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Quando a ação for executada, a tarefa concluída e o objeto de estado fornecido pelo chamador serão passados como argumentos ao delegado.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Um objeto que representa os dados a serem usados pela função de continuação.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> que será atribuído à nova tarefa de continuação.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Opções para quando a continuação é agendada e como ela se comporta.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Isso inclui critérios como <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, além de opções de execução como <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its  execution.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> a ser associado à tarefa de continuação e a ser usado para sua execução.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes based on the specified task continuation options when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completes and returns a value.</source>
          <target state="translated">Cria uma continuação executada com base nas opções de continuação de tarefas especificadas quando o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de destino for concluído e retornar um valor.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</source>
          <target state="translated">A continuação recebe informações de estado fornecidas pelo chamador e um token de cancelamento e usa o agendador especificado.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Um novo <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuação.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed.</source>
          <target state="translated">Retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> não será agendado para execução até que a tarefa atual seja concluída.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If the criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter  are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Se os critérios especificados por meio de <ph id="ph1">`continuationOptions`</ph> parâmetro não forem atendidos, a tarefa de continuação será cancelada em vez de agendado.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> especifica um valor inválido para <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornecido já foi descartado.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.CreationOptions">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to create this task.</source>
          <target state="translated">Obtém o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> usado para criar esta tarefa.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CreationOptions">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to create this task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> usado para criar esta tarefa.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.CurrentId">
          <source>Returns the ID of the currently executing <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Retorna a ID de execução que atualmente está executando <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CurrentId">
          <source>An integer that was assigned by the system to the currently-executing task.</source>
          <target state="translated">Um inteiro atribuído pelo sistema à tarefa em execução no momento.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CurrentId">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> is a <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> é um <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic) propriedade que é usada para obter o identificador da tarefa em execução no momento do código que está executando a tarefa.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CurrentId">
          <source>It differs from the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Id%2A&gt;</ph> property, which returns the identifier of a particular <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instance.</source>
          <target state="translated">Ele difere de <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Id%2A&gt;</ph> propriedade, que retorna o identificador de um determinado <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CurrentId">
          <source>If you attempt to retrieve the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> value from outside the code that a task is executing, the property returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se você tentar recuperar o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> valor de fora do código que está executando uma tarefa, a propriedade retornará <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.CurrentId">
          <source>Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</source>
          <target state="translated">Observe que, embora colisões são muito raras, identificadores de tarefa não têm garantia de exclusividade.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Creates a task that will complete after a time delay.</source>
          <target state="translated">Cria uma tarefa que será concluída após um atraso.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para esperar antes de concluir a tarefa retornada ou -1 para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>Creates a task that completes after a time delay.</source>
          <target state="translated">Cria uma tarefa que é concluída após um atraso.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>A task that represents the time delay.</source>
          <target state="translated">Uma tarefa que representa o atraso.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method is typically used to delay the operation of all or part of a task for a specified time interval.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> método normalmente é usado para atrasar a operação de todos ou parte de uma tarefa para um intervalo de tempo especificado.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>Most commonly, the time delay is introduced:</source>
          <target state="translated">Normalmente, o tempo de espera é apresentado:</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>At the beginning of the task, as the following example shows.</source>
          <target state="translated">No início da tarefa, como o exemplo a seguir mostra.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>Sometime while the task is executing.</source>
          <target state="translated">Em algum momento durante a execução da tarefa.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>In this case, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method executes as a child task within a task, as the following example shows.</source>
          <target state="translated">Nesse caso, a chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> método é executado como uma tarefa filho dentro de uma tarefa, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>Note that since the task that calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method executes asynchronously, the parent task must wait for it to complete by using the <ph id="ph2">`await`</ph> keyword.</source>
          <target state="translated">Observe que desde a tarefa que chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> método é executado de forma assíncrona, a tarefa pai deve aguardar a conclusão, usando o <ph id="ph2">`await`</ph> palavra-chave.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>After the specified time delay, the task is completed in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state.</source>
          <target state="translated">Após o atraso de tempo especificado, a tarefa é concluída no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>This method depends on the system clock.</source>
          <target state="translated">Esse método depende do relógio do sistema.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>This means that the time delay will approximately equal the resolution of the system clock if the <ph id="ph1">`millisecondsDelay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</source>
          <target state="translated">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o <ph id="ph1">`millisecondsDelay`</ph> argumento for menor do que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>The following example shows a simple use of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra um uso simple de <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> argument is less than -1.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> é menor que -1.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>The time span to wait before completing the returned task, or <ph id="ph1">&lt;see langword="TimeSpan.FromMilliseconds(-1)" /&gt;</ph> to wait indefinitely.</source>
          <target state="translated">O tempo que se deve aguardar antes de concluir a tarefa retornada ou <ph id="ph1">&lt;see langword="TimeSpan.FromMilliseconds(-1)" /&gt;</ph> para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>Creates a task that completes after a specified time interval.</source>
          <target state="translated">Cria uma tarefa que é concluída após um intervalo de tempo especificado.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>A task that represents the time delay.</source>
          <target state="translated">Uma tarefa que representa o atraso.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>After the specified time delay, the task is completed in <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state.</source>
          <target state="translated">Após o atraso de tempo especificado, a tarefa é concluída em <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>For usage scenarios and additional examples, see the documentation for the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Para cenários de uso e exemplos adicionais, consulte a documentação para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>This method depends on the system clock.</source>
          <target state="translated">Esse método depende do relógio do sistema.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>This means that the time delay will approximately equal the resolution of the system clock if the <ph id="ph1">`delay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</source>
          <target state="translated">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o <ph id="ph1">`delay`</ph> argumento for menor do que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>The following example shows a simple use of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir mostra um uso simple de <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph> represents a negative time interval other than <ph id="ph2">&lt;see langword="TimeSpan.FromMillseconds(-1)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph> representa um intervalo de tempo negativo diferente de <ph id="ph2">&lt;see langword="TimeSpan.FromMillseconds(-1)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> argument's <ph id="ph2">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> property is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph2">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> do argumento <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> é maior do que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para esperar antes de concluir a tarefa retornada ou -1 para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>The cancellation token that will be checked prior to completing the returned task.</source>
          <target state="translated">O token de cancelamento que será verificado antes de concluir a tarefa retornada.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>Creates a cancellable task that completes after a time delay.</source>
          <target state="translated">Cria uma tarefa que pode ser cancelada, que é concluída após um atraso.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the time delay.</source>
          <target state="translated">Uma tarefa que representa o atraso.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>If the cancellation token is signaled before the specified time delay, a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception results, and the task is completed in the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state.</source>
          <target state="translated">Se o token de cancelamento é sinalizado antes do intervalo de tempo especificado, um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> resultados de exceção e a tarefa é concluída no <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>Otherwise, the task is completed in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state once the specified time delay has elapsed.</source>
          <target state="translated">Caso contrário, a tarefa é concluída no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado após o atraso de tempo especificado tiver decorrido.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>For usage scenarios and additional examples, see the documentation for the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Para cenários de uso e exemplos adicionais, consulte a documentação para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>This method depends on the system clock.</source>
          <target state="translated">Esse método depende do relógio do sistema.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>This means that the time delay will approximately equal the resolution of the system clock if the <ph id="ph1">`millisecondsDelay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</source>
          <target state="translated">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o <ph id="ph1">`millisecondsDelay`</ph> argumento for menor do que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>The following example launches a task that includes a call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> method with a one second delay.</source>
          <target state="translated">O exemplo a seguir inicia uma tarefa que inclui uma chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> método com um atraso de um segundo.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>Before the delay interval elapses, the token is cancelled.</source>
          <target state="translated">Antes de expira o intervalo de atraso, o símbolo é cancelado.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>The output from the example shows that, as a result, a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> is thrown, and the tasks' <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">A saída do exemplo mostra que, como resultado, um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> for lançada e as tarefas <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> está definida como <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> argument is less than -1.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> é menor que -1.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>The task has been canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> fornecido já foi descartado.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The time span to wait before completing the returned task, or <ph id="ph1">&lt;see langword="TimeSpan.FromMilliseconds(-1)" /&gt;</ph> to wait indefinitely.</source>
          <target state="translated">O tempo que se deve aguardar antes de concluir a tarefa retornada ou <ph id="ph1">&lt;see langword="TimeSpan.FromMilliseconds(-1)" /&gt;</ph> para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The cancellation token that will be checked prior to completing the returned task.</source>
          <target state="translated">O token de cancelamento que será verificado antes de concluir a tarefa retornada.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Creates a cancellable task that completes after a specified time interval.</source>
          <target state="translated">Cria uma tarefa cancelável concluída após um intervalo de tempo especificado.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A task that represents the time delay.</source>
          <target state="translated">Uma tarefa que representa o atraso.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the cancellation token is signaled before the specified time delay, a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception results, and the task is completed in the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state.</source>
          <target state="translated">Se o token de cancelamento é sinalizado antes do intervalo de tempo especificado, um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> resultados de exceção e a tarefa é concluída no <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Otherwise, the task is completed in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state once the specified time delay has elapsed.</source>
          <target state="translated">Caso contrário, a tarefa é concluída no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado após o atraso de tempo especificado tiver decorrido.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>For usage scenarios and additional examples, see the documentation for the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Para cenários de uso e exemplos adicionais, consulte a documentação para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>This method depends on the system clock.</source>
          <target state="translated">Esse método depende do relógio do sistema.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>This means that the time delay will approximately equal the resolution of the system clock if the <ph id="ph1">`delay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</source>
          <target state="translated">Isso significa que o tempo de espera será aproximadamente igual a resolução do relógio do sistema se o <ph id="ph1">`delay`</ph> argumento for menor do que a resolução do relógio do sistema, que é de aproximadamente 15 milissegundos em sistemas Windows.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The following example launches a task that includes a call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> method with a one-and-a-half second delay.</source>
          <target state="translated">O exemplo a seguir inicia uma tarefa que inclui uma chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> método com um atraso de um e-e meio segundo.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Before the delay interval elapses, the token is cancelled.</source>
          <target state="translated">Antes de expira o intervalo de atraso, o símbolo é cancelado.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The output from the example shows that, as a result, a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> is thrown, and the tasks' <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated">A saída do exemplo mostra que, como resultado, um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> for lançada e as tarefas <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> está definida como <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</source>
          <target state="translated">Observe que este exemplo inclui uma condição de corrida potenciais: ele depende da tarefa executar assincronamente o atraso quando o token é cancelado.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Although the 1.5 second delay from the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> method makes that assumption likely, it is nevertheless possible that the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> method could return before the token is cancelled.</source>
          <target state="translated">Embora a segunda 1,5 atraso da chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> método faz essa suposição provável, mesmo assim, é possível que a chamada para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> método pode retornar antes que o token seja cancelado.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>In that case, the example produces the following output:</source>
          <target state="translated">Nesse caso, o exemplo produz a saída a seguir:</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph> represents a negative time interval other than <ph id="ph2">&lt;see langword="TimeSpan.FromMillseconds(-1)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph> representa um intervalo de tempo negativo diferente de <ph id="ph2">&lt;see langword="TimeSpan.FromMillseconds(-1)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> argument's <ph id="ph2">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> property is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph2">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> do argumento <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> é maior do que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The task has been canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> fornecido já foi descartado.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> class.</source>
          <target state="translated">Libera todos os recursos usados pela instância atual da classe <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> class.</source>
          <target state="translated">Libera todos os recursos usados pela instância atual da classe <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface because internally it uses resources that also implement <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> classe implementa o <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface porque, internamente ele usa recursos que também implementam <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Dispose">
          <source>However, particularly if your app targets the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> or later, there is no need to call <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Dispose%2A&gt;</ph> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</source>
          <target state="translated">No entanto, especialmente se o aplicativo é destinado a <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> ou posterior, não é necessário chamar <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Dispose%2A&gt;</ph> , a menos que o teste de escalabilidade ou desempenho indica que, com base nos seus padrões de uso, desempenho do seu aplicativo deve ser melhorado com a eliminação de tarefas.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Do I need to dispose of Tasks?<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>é necessário descartar tarefas?<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)</ept> em programação paralela com .NET blog.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Dispose">
          <source>The task is not in one of the final states: <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">A tarefa não está em um dos estados finais: <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> ou <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
          <source>A Boolean value that indicates whether this method is being called due to a call to <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Dispose" /&gt;</ph>.</source>
          <target state="translated">Um valor booliano que indica se esse método está sendo chamado devido a uma chamada a <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
          <source>Disposes the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, releasing all of its unmanaged resources.</source>
          <target state="translated">Descarta o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, liberando todos os seus recursos não gerenciados.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface because internally it uses resources that also implement <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> classe implementa o <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface porque, internamente ele usa recursos que também implementam <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
          <source>However, particularly if your app targets the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> or later, there is no need to call <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Dispose%2A&gt;</ph> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</source>
          <target state="translated">No entanto, especialmente se o aplicativo é destinado a <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> ou posterior, não é necessário chamar <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Dispose%2A&gt;</ph> , a menos que o teste de escalabilidade ou desempenho indica que, com base nos seus padrões de uso, desempenho do seu aplicativo deve ser melhorado com a eliminação de tarefas.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
          <source>For more information, see <bpt id="p1">[</bpt>Do I need to dispose of Tasks?<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>é necessário descartar tarefas?<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)</ept> em programação paralela com .NET blog.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
          <source>The task is not in one of the final states: <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>, or <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">A tarefa não está em um dos estados finais: <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> ou <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
          <source>Unlike most of the members of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> class, this method is not thread-safe.</source>
          <target state="translated">Ao contrário da maioria dos membros a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> classe, esse método não é thread-safe.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.Exception">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> that caused the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to end prematurely.</source>
          <target state="translated">Obtém o <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> que fez com que o <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fosse encerrado prematuramente.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.Exception">
          <source>If the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completed successfully or has not yet thrown any exceptions, this will return <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Se o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> tiver sido concluído com êxito ou ainda não tiver lançado exceções, isso retornará <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Exception">
          <source>The <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> that caused the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to end prematurely.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> que fez com que o <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fosse encerrado prematuramente.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Exception">
          <source>Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> in calls to <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> or in accesses to the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.</source>
          <target state="translated">Tarefas que lançam exceções sem tratamento armazenar a exceção resultante e propagá-lo encapsulado em um <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> em chamadas para <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> ou em acessos para o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Exception">
          <source>Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</source>
          <target state="translated">Todas as exceções não observadas no momento em que a instância da tarefa é coletado como lixo serão propagadas no thread do finalizador.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Exception">
          <source>For more information and an example, see <bpt id="p1">[</bpt>Exception Handling (Task Parallel Library)<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter mais informações e um exemplo, consulte <bpt id="p1">[</bpt>tratamento de exceção (Task Parallel Library)<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.Factory">
          <source>Provides access to factory methods for creating and configuring <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> instances.</source>
          <target state="translated">Fornece acesso a métodos de fábrica para criar e configurar as instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>A factory object that can create a variety of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects.</source>
          <target state="translated">Um objeto de fábrica que pode criar uma variedade de objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>This property returns a default instance of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class that is identical to the one created by calling the parameterless <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Essa propriedade retorna uma instância padrão do <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> classe que é idêntica a uma criada chamando o sem parâmetros <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>It has the following property values:</source>
          <target state="translated">Ela tem os seguintes valores de propriedade:</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>Property</source>
          <target state="translated">Propriedade</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>Value</source>
          <target state="translated">Valor</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source><ph id="ph1">`null`</ph>, or <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated"><ph id="ph1">`null`</ph>, ou <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>The most common use of this property is to create and start a new task in a single call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O uso mais comum dessa propriedade é criar e iniciar uma nova tarefa em uma única chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method provides the easiest way to create a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object with default configuration values.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> método fornece a maneira mais fácil de criar um <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto com valores de configuração padrão.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>The following example uses the static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A&gt;</ph> property to make two calls to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir usa estático <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A&gt;</ph> propriedade fazer duas chamadas para o <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</source>
          <target state="translated">O primeiro preenche uma matriz com os nomes dos arquivos no diretório de Meus documentos do usuário, enquanto a segunda preenche uma matriz com os nomes de subpastas da pasta de Meus documentos do usuário.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Factory">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> método, que exibe informações sobre o número de arquivos e diretórios em duas matrizes, após as duas primeiras tarefas concluiu a execução.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
          <source>The cancellation token with which to complete the task.</source>
          <target state="translated">O token de cancelamento a ser usado para concluir a tarefa.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that's completed due to cancellation with a specified cancellation token.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> que é concluído devido ao cancelamento com um token de cancelamento especificado.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
          <source>The canceled task.</source>
          <target state="translated">A tarefa cancelada.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
          <source>Cancellation has not been requested for <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph>; its <ph id="ph2">&lt;see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /&gt;</ph> property is <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">O cancelamento não foi solicitado para <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph>; sua propriedade <ph id="ph2">&lt;see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /&gt;</ph> é <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
          <source>The type of the result returned by the task.</source>
          <target state="translated">O tipo de resultado retornado pela tarefa.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
          <source>The cancellation token with which to complete the task.</source>
          <target state="translated">O token de cancelamento a ser usado para concluir a tarefa.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that's completed due to cancellation with a specified cancellation token.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que é concluído devido ao cancelamento com um token de cancelamento especificado.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
          <source>The canceled task.</source>
          <target state="translated">A tarefa cancelada.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
          <source>Cancellation has not been requested for <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph>; its <ph id="ph2">&lt;see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /&gt;</ph> property is <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">O cancelamento não foi solicitado para <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph>; sua propriedade <ph id="ph2">&lt;see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /&gt;</ph> é <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromException(System.Exception)">
          <source>The exception with which to complete the task.</source>
          <target state="translated">A exceção com a qual a tarefa será concluída.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromException(System.Exception)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that has completed with a specified exception.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> que foi concluído com uma exceção especificada.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromException(System.Exception)">
          <source>The faulted task.</source>
          <target state="translated">A tarefa com falha.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException(System.Exception)">
          <source>This method creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object whose <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> and whose <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property contains <ph id="ph5">`exception`</ph>.</source>
          <target state="translated">Esse método cria um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> do objeto cuja <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> é de propriedade <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> e cuja <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> propriedade contém <ph id="ph5">`exception`</ph>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException(System.Exception)">
          <source>The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</source>
          <target state="translated">O método normalmente é usado quando você sabe imediatamente que o trabalho que executa uma tarefa lançará uma exceção antes de executar um caminho mais longo de código.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException(System.Exception)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29&gt;</ph> overload.</source>
          <target state="translated">Para obter um exemplo, consulte o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>The type of the result returned by the task.</source>
          <target state="translated">O tipo de resultado retornado pela tarefa.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>The exception with which to complete the task.</source>
          <target state="translated">A exceção com a qual a tarefa será concluída.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that's completed with a specified exception.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que é concluído com uma exceção especificada.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>The faulted task.</source>
          <target state="translated">A tarefa com falha.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>This method creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object whose <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> and whose <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property contains <ph id="ph5">`exception`</ph>.</source>
          <target state="translated">Esse método cria um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> do objeto cuja <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> é de propriedade <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> e cuja <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> propriedade contém <ph id="ph5">`exception`</ph>.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</source>
          <target state="translated">O método normalmente é usado quando você sabe imediatamente que o trabalho que executa uma tarefa lançará uma exceção antes de executar um caminho mais longo de código.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>The example provides an illustration.</source>
          <target state="translated">O exemplo fornece uma ilustração.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</source>
          <target state="translated">O exemplo a seguir é um utilitário de linha de comando que calcula o número de bytes em arquivos em cada diretório cujo nome é passado como um argumento de linha de comando.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
          <source>Rather than executing a longer code path that instantiates a <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object and retrieves the value of its <ph id="ph2">&lt;xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType&gt;</ph> property for each file in the directory, the example simply calls the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29&gt;</ph> method to create a faulted task if a particular subdirectory does not exist.</source>
          <target state="translated">Em vez de executar um caminho mais longo de código que instancia um <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> de objeto e recupera o valor do seu <ph id="ph2">&lt;xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType&gt;</ph> propriedade para cada arquivo no diretório, o exemplo simplesmente chama o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29&gt;</ph> método para criar uma tarefa com falha se um determinado subdiretório não existe.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>The type of the result returned by the task.</source>
          <target state="translated">O tipo de resultado retornado pela tarefa.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>The result to store into the completed task.</source>
          <target state="translated">O resultado a armazenar na tarefa concluída.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that's completed successfully with the specified result.</source>
          <target state="translated">Cria um <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que é concluído com êxito com o resultado especificado.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>The successfully completed task.</source>
          <target state="translated">A tarefa concluída com êxito.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>This method creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object whose <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> property is <ph id="ph3">`result`</ph> and whose <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>.</source>
          <target state="translated">Esse método cria um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> do objeto cuja <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> é de propriedade <ph id="ph3">`result`</ph> e cuja <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> é de propriedade <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>The method is commonly used when the return value of a task is immediately known without executing a longer code path.</source>
          <target state="translated">O método normalmente é usado quando o valor de retorno de uma tarefa é conhecido imediatamente sem um caminho mais longo de código em execução.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>The example provides an illustration.</source>
          <target state="translated">O exemplo fornece uma ilustração.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>To create a Task object that does not return a value, retrieve the Task object from the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CompletedTask%2A&gt;</ph> property.</source>
          <target state="translated">Para criar um objeto de tarefa que não retorna um valor, recuperar o objeto de tarefa do <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CompletedTask%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</source>
          <target state="translated">O exemplo a seguir é um utilitário de linha de comando que calcula o número de bytes em arquivos em cada diretório cujo nome é passado como um argumento de linha de comando.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.FromResult``1(``0)">
          <source>Rather than executing a longer code path that instantiates a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object and retrieves the value of its <ph id="ph2">&lt;xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType&gt;</ph> property for each file in the directory, the example simply calls the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> method to create a task whose <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> property is zero (0) if a directory has no files.</source>
          <target state="translated">Em vez de executar um caminho mais longo de código que instancia um <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> de objeto e recupera o valor do seu <ph id="ph2">&lt;xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType&gt;</ph> propriedade para cada arquivo no diretório, o exemplo simplesmente chama o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> método para criar uma tarefa cujo <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> propriedade é zero (0) se um diretório não tem arquivos.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.GetAwaiter">
          <source>Gets an awaiter used to await this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Obtém um awaiter usado para aguardar este <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.GetAwaiter">
          <source>An awaiter instance.</source>
          <target state="translated">Uma instância de awaiter.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.GetAwaiter">
          <source>This method is intended for compiler use rather than for use in application code.</source>
          <target state="translated">Este método destina para uso do compilador em vez de para uso no código do aplicativo.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.Id">
          <source>Gets an ID for this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instance.</source>
          <target state="translated">Obtém uma ID para esta instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Id">
          <source>The identifier that is assigned by the system to this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instance.</source>
          <target state="translated">O identificador atribuído pelo sistema para esta instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Id">
          <source>Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</source>
          <target state="translated">IDs de tarefas são atribuídas sob demanda e não representa necessariamente a ordem na qual a tarefa instâncias são criadas.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Id">
          <source>Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</source>
          <target state="translated">Observe que, embora colisões são muito raras, identificadores de tarefa não têm garantia de exclusividade.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Id">
          <source>To get the task ID of the currently executing task from within code that that task is executing, use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> property.</source>
          <target state="translated">Para obter a ID da tarefa da tarefa em execução no momento de dentro do código que está executando essa tarefa, use o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.IsCanceled">
          <source>Gets whether this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instance has completed execution due to being canceled.</source>
          <target state="translated">Obtém se essa instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluiu sua execução porque foi cancelada.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCanceled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the task has completed due to being canceled; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a tarefa foi concluída porque foi cancelada, caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCanceled">
          <source>A <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will complete in the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state under any of the following conditions:</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> será concluída no <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado em qualquer uma das seguintes condições:</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCanceled">
          <source>Its <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> was marked for cancellation before the task started executing,</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> foi marcada para cancelamento antes da tarefa começou a executar,</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCanceled">
          <source>The task acknowledged the cancellation request on its already signaled <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> by throwing an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> that bears the same <ph id="ph3">&lt;xref:System.Threading.CancellationToken&gt;</ph>.</source>
          <target state="translated">A tarefa de confirmada a solicitação de cancelamento em sinalizado já <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> , lançando um <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> que tem o mesmo <ph id="ph3">&lt;xref:System.Threading.CancellationToken&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCanceled">
          <source>The task acknowledged the cancellation request on its already signaled <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> by calling the <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Threading.CancellationToken&gt;</ph>.</source>
          <target state="translated">A tarefa de confirmada a solicitação de cancelamento em sinalizado já <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> chamando o <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A&gt;</ph> método o <ph id="ph3">&lt;xref:System.Threading.CancellationToken&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCanceled">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph> property does not block the calling thread until the task has completed.</source>
          <target state="translated">Recuperar o valor da <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.IsCompleted">
          <source>Gets whether this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has completed.</source>
          <target state="translated">Obtém a informação de se esta <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi concluída.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the task has completed; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a tarefa foi concluída; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCompleted">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph> will return <ph id="ph2">`true`</ph> when the task is in one of the three final states: <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph> retornará <ph id="ph2">`true`</ph> quando a tarefa estiver em um dos três estados finais: <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, ou <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsCompleted">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType&gt;</ph> property does not block the calling thread until the task has completed.</source>
          <target state="translated">Recuperar o valor da <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType&gt;</ph> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.IsFaulted">
          <source>Gets whether the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completed due to an unhandled exception.</source>
          <target state="translated">Obtém se o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi concluído devido a uma exceção sem tratamento.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsFaulted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the task has thrown an unhandled exception; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se a tarefa lançou uma exceção sem tratamento; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsFaulted">
          <source>If <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the task's <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> is equal to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, and its <ph id="ph5">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property will be non-null.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> é <ph id="ph2">`true`</ph>, a tarefa <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> é igual a <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>e sua <ph id="ph5">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> propriedade será não nulo.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.IsFaulted">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType&gt;</ph> property does not block the calling thread until the task has completed.</source>
          <target state="translated">Recuperar o valor da <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType&gt;</ph> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Queues the specified work to run on the ThreadPool and returns a task or <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> handle for that work.</source>
          <target state="translated">Coloca o trabalho especificado na fila para execução no ThreadPool e retorna uma tarefa ou um identificador <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> para esse trabalho.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method provides a set of overloads that make it easy to start a task by using default values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> método fornece um conjunto de sobrecargas que tornam mais fácil iniciar uma tarefa usando valores padrão.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task">
          <source>It is a lightweight alternative to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> overloads.</source>
          <target state="translated">É uma alternativa leve para o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> sobrecargas.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The work to execute asynchronously</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>Queues the specified work to run on the thread pool and returns a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> object that represents that work.</source>
          <target state="translated">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> que representa o trabalho.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>A task that represents the work queued to execute in the ThreadPool.</source>
          <target state="translated">Uma tarefa que representa o trabalho na fila a ser executado no ThreadPool.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method allows you to create and execute a task in a single method call and is a simpler alternative to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> método permite que você criar e executar uma tarefa em uma única chamada de método e é uma alternativa mais simples para o <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>It creates a task with the following default values:</source>
          <target state="translated">Ele cria uma tarefa com os seguintes valores padrão:</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>Its cancellation token is <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Seu token de cancelamento é <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>Its <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> é o valor da propriedade <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>It uses the default task scheduler.</source>
          <target state="translated">Ele usa o Agendador de tarefas padrão.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The following example defines a <ph id="ph1">`ShowThreadInfo`</ph> method  that displays the <ph id="ph2">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> of the current thread.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`ShowThreadInfo`</ph> método que exibe o <ph id="ph2">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> do thread atual.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>It is called directly from the application thread, and is called from the <ph id="ph1">&lt;xref:System.Action&gt;</ph> delegate passed to the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> method.</source>
          <target state="translated">Ele é chamado diretamente no thread do aplicativo e é chamado a partir de <ph id="ph1">&lt;xref:System.Action&gt;</ph> delegado passado para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</source>
          <target state="translated">O exemplo a seguir é semelhante ao anterior, exceto que ele usa uma expressão lambda para definir o código que a tarefa deve ser executada.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The examples show that the asynchronous task executes on a different thread than the main application thread.</source>
          <target state="translated">Os exemplos mostram que a tarefa assíncrona é executado em um thread diferente do thread principal do aplicativo.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method ensures that the task completes and displays its output before the application ends.</source>
          <target state="translated">A chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método garante que a tarefa for concluída e exibe seu resultado antes do aplicativo terminar.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>Otherwise, it is possible that the <ph id="ph1">`Main`</ph> method will complete before the task finishes.</source>
          <target state="translated">Caso contrário, é possível que o <ph id="ph1">`Main`</ph> método será concluído antes que a tarefa for concluída.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir ilustra o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</source>
          <target state="translated">Ele define uma matriz de nomes de diretórios e inicia uma tarefa separada para recuperar os nomes de arquivo em cada pasta.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>All tasks write the file names to a single <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> object.</source>
          <target state="translated">Todas as tarefas de gravar os nomes de arquivo em um único <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> object.</source>
          <target state="translated">O exemplo, em seguida, chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> método para garantir que todas as tarefas concluiu e, em seguida, exibe uma contagem do número total de nomes de arquivo gravado para o <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> parameter was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="action" /&gt;</ph> era <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
          <source>The work to execute asynchronously</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
          <source>Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para a tarefa retornada pelo <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
          <source>A task that represents a proxy for the task returned by <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Uma tarefa que representa um proxy para a tarefa retornada pelo <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> parameter was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="function" /&gt;</ph> era <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The work to execute asynchronously</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>A cancellation token that can be used to cancel the work</source>
          <target state="translated">Um token de cancelamento que pode ser usado para cancelar o trabalho</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>Queues the specified work to run on the thread pool and returns a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> object that represents that work.</source>
          <target state="translated">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> que representa o trabalho.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>A cancellation token allows the work to be cancelled.</source>
          <target state="translated">Um token de cancelamento permite que o trabalho seja cancelado.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>A task that represents the work queued to execute in the thread pool.</source>
          <target state="translated">Uma tarefa que representa o trabalho na fila a ser executado no pool de threads.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>If cancellation is requested before the task begins execution, the task does not execute.</source>
          <target state="translated">Se o cancelamento é solicitado antes da tarefa começa a ser executada, a tarefa não será executado.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>Instead it is set to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state and throws a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception.</source>
          <target state="translated">Em vez disso, ele é definido como o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado e lança um <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> method is a simpler alternative to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> método é uma alternativa mais simples para o <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>It creates a task with the following default values:</source>
          <target state="translated">Ele cria uma tarefa com os seguintes valores padrão:</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>Its <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> é o valor da propriedade <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>It uses the default task scheduler.</source>
          <target state="translated">Ele usa o Agendador de tarefas padrão.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> method to create a task that iterates the files in the C:\Windows\System32 directory.</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> método para criar uma tarefa que itera os arquivos no diretório C:\Windows\System32.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The lambda expression calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> method to add information about each  file to a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">A expressão de lambda chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> método para adicionar informações sobre cada arquivo a um <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>Each detached nested task invoked by the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> loop checks the state of the cancellation token and, if cancellation is requested, calls the <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Cada desanexado tarefa aninhada invocada pelo <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> loop verifica o estado do token de cancelamento e, se cancelamento for solicitado, chama o <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception that is handled in a <ph id="ph3">`catch`</ph> block when the calling thread calls the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> método lança um <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exceção que é tratada de uma <ph id="ph3">`catch`</ph> bloquear quando o thread de chamada chama o <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> parameter was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="action" /&gt;</ph> era <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The task has been canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> was disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associado ao <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The work to execute asynchronously.</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>A cancellation token that should be used to cancel the work.</source>
          <target state="translated">Um token de cancelamento que deve ser usado para cancelar o trabalho.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>Queues the specified work to run on the thread pool and returns a proxy for the task returned by <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para a tarefa retornada pelo <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>A task that represents a proxy for the task returned by <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Uma tarefa que representa um proxy para a tarefa retornada pelo <ph id="ph1">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> parameter was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="function" /&gt;</ph> era <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The task has been canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> was disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associado ao <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
          <source>The type of the result returned by the proxy task.</source>
          <target state="translated">O tipo de resultado retornado pela tarefa de proxy.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
          <source>The work to execute asynchronously</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
          <source>Queues the specified work to run on the thread pool and returns a proxy for the <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> returned by <ph id="ph2">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> retornado por <ph id="ph2">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
          <source>A <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> that represents a proxy for the <ph id="ph2">&lt;see langword="Task(TResult)" /&gt;</ph> returned by <ph id="ph3">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> que representa um proxy para o <ph id="ph2">&lt;see langword="Task(TResult)" /&gt;</ph> retornado por <ph id="ph3">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> parameter was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="function" /&gt;</ph> era <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>The return type of the task.</source>
          <target state="translated">O tipo de retorno da tarefa.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>The work to execute asynchronously.</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>Queues the specified work to run on the thread pool and returns a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that represents that work.</source>
          <target state="translated">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que representa o trabalho.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>A task object that represents the work queued to execute in the thread pool.</source>
          <target state="translated">Uma tarefa que representa o trabalho na fila a ser executada no pool de threads.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method is a simpler alternative to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> método é uma alternativa mais simples para o <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>It creates a task with the following default values:</source>
          <target state="translated">Ele cria uma tarefa com os seguintes valores padrão:</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>Its cancellation token is <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Seu token de cancelamento é <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>Its <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> é o valor da propriedade <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>It uses the default task scheduler.</source>
          <target state="translated">Ele usa o Agendador de tarefas padrão.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>The following example counts the approximate number of words in text files that represent published books.</source>
          <target state="translated">O exemplo a seguir conta o número aproximado de palavras em arquivos de texto que representam os livros publicados.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</source>
          <target state="translated">Cada tarefa é responsável para abertura de um arquivo, ler todo o seu conteúdo de forma assíncrona e calcular a contagem de palavras usando uma expressão regular.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> método é chamado para garantir que todas as tarefas sejam concluídas antes de exibir a contagem de palavras de cada livro para o console.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>The regular expression <ph id="ph1">`\p{P}*\s+`</ph> matches zero, one, or more punctuation characters followed by one or more whitespace characters.</source>
          <target state="translated">A expressão regular <ph id="ph1">`\p{P}*\s+`</ph> corresponde a zero, um ou mais caracteres de pontuação, seguidos por um ou mais caracteres de espaço em branco.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>It assumes that the total number of matches equals the approximate word count.</source>
          <target state="translated">Ele pressupõe que o número total de correspondências igual à contagem de palavras aproximado.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The type of the result returned by the proxy task.</source>
          <target state="translated">O tipo de resultado retornado pela tarefa de proxy.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The work to execute asynchronously</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>A cancellation token that should be used to cancel the work</source>
          <target state="translated">Um token de cancelamento que deve ser usado para cancelar o trabalho</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>Queues the specified work to run on the thread pool and returns a proxy for the <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> returned by <ph id="ph2">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Coloca o trabalho especificado na fila para execução no pool de threads e retorna um proxy para <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> retornado por <ph id="ph2">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> that represents a proxy for the <ph id="ph2">&lt;see langword="Task(TResult)" /&gt;</ph> returned by <ph id="ph3">&lt;paramref name="function" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> que representa um proxy para o <ph id="ph2">&lt;see langword="Task(TResult)" /&gt;</ph> retornado por <ph id="ph3">&lt;paramref name="function" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> parameter was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="function" /&gt;</ph> era <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The task has been canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> was disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associado ao <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The result type of the task.</source>
          <target state="translated">O tipo de resultado da tarefa.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The work to execute asynchronously</source>
          <target state="translated">O trabalho a ser executado de forma assíncrona</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>A cancellation token that should be used to cancel the work</source>
          <target state="translated">Um token de cancelamento que deve ser usado para cancelar o trabalho</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Queues the specified work to run on the thread pool and returns a <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> object that represents that work.</source>
          <target state="translated">Coloca o trabalho especificado em fila para execução no pool de threads e retorna um objeto <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> que representa o trabalho.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>A cancellation token allows the work to be cancelled.</source>
          <target state="translated">Um token de cancelamento permite que o trabalho seja cancelado.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> that represents the work queued to execute in the thread pool.</source>
          <target state="translated">Um <ph id="ph1">&lt;see langword="Task(TResult)" /&gt;</ph> que representa o trabalho na fila a ser executado no pool de threads.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>If cancellation is requested before the task begins execution, the task does not execute.</source>
          <target state="translated">Se o cancelamento é solicitado antes da tarefa começa a ser executada, a tarefa não será executado.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Instead it is set to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state and throws a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception.</source>
          <target state="translated">Em vez disso, ele é definido como o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado e lança um <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method is a simpler alternative to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> método é uma alternativa mais simples para o <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>It creates a task with the following default values:</source>
          <target state="translated">Ele cria uma tarefa com os seguintes valores padrão:</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Its <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> é o valor da propriedade <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>It uses the default task scheduler.</source>
          <target state="translated">Ele usa o Agendador de tarefas padrão.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</source>
          <target state="translated">O exemplo a seguir cria 20 tarefas que fará um loop até que um contador é incrementado em um valor de 2 milhões.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</source>
          <target state="translated">Quando as 10 primeiras tarefas atingirem 2 milhões, o token de cancelamento é cancelado e as tarefas cujas contadores que não alcançaram 2 milhões serão canceladas.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The example shows possible output.</source>
          <target state="translated">O exemplo mostra a saída possíveis.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Instead of using the <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A&gt;</ph> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</source>
          <target state="translated">Em vez de usar o <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A&gt;</ph> propriedade para examinar as exceções, o exemplo itera todas as tarefas para determinar qual foram concluídos com êxito e que foram cancelado.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>For those that have completed, it displays the value returned by the task.</source>
          <target state="translated">Para aqueles que foram concluídas, ele exibe o valor retornado pela tarefa.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Because cancellation is cooperative, each task can decide how to respond to cancellation.</source>
          <target state="translated">Como o cancelamento é cooperativo, cada tarefa pode decidir como reagir ao cancelamento.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</source>
          <target state="translated">O exemplo a seguir é como o primeiro, exceto que, depois que o token é cancelado, tarefas de retornam o número de iterações que tiver concluído, em vez de lançam uma exceção.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The example still must handle the <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</source>
          <target state="translated">O exemplo deve tratar o <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exceção, desde que nenhuma das tarefas que não iniciaram quando o cancelamento for solicitado ainda lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O parâmetro <ph id="ph1">&lt;paramref name="function" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The task has been canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> was disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associado ao <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Runs the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> synchronously on the current <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph>.</source>
          <target state="translated">Executa o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de forma síncrona no <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>Runs the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> synchronously on the current <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph>.</source>
          <target state="translated">Executa o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de forma síncrona no <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</source>
          <target state="translated">Em geral, as tarefas são executadas de forma assíncrona em um pool de threads e não bloqueiam o thread de chamada.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>Tasks executed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously&gt;</ph> method are associated with the current <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> and are run on the calling thread.</source>
          <target state="translated">As tarefas executadas chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously&gt;</ph> método estão associados com a atual <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> e são executados no thread de chamada.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</source>
          <target state="translated">Se o Agendador de destino não oferece suporte para executar esta tarefa no thread de chamada, a tarefa será agendada para execução no Agendador e o thread de chamada será bloqueado até que a tarefa foi concluída a execução.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>Even though the task runs synchronously, the calling thread should still call <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> to handle any exceptions that the task might throw.</source>
          <target state="translated">Mesmo que a tarefa é executada de forma síncrona, o thread de chamada ainda deve chamar <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> para lidar com todas as exceções que a tarefa poderá gerar.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>For more information on exception handling, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre o tratamento de exceção, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>Tasks executed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> method are instantiated by calling a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class constructor.</source>
          <target state="translated">As tarefas executadas chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> método são instanciados chamando um <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtor de classe.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>The task to be run synchronously must be in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Created&gt;</ph> state.</source>
          <target state="translated">A tarefa para ser executado de forma síncrona deve estar no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Created&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>A task may be started and run only once.</source>
          <target state="translated">Uma tarefa pode ser iniciada e executada apenas uma vez.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>Any attempts to schedule a task a second time results in an exception.</source>
          <target state="translated">Qualquer tentativa para agendar uma tarefa um segundo momento resulta em uma exceção.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>The following example compares a task executed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> method with one executed asynchronously.</source>
          <target state="translated">O exemplo a seguir compara uma tarefa executada chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> método com um executadas de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</source>
          <target state="translated">Em ambos os casos, as tarefas executar expressões lambda idênticos que exibem a ID da tarefa e a ID do thread em que a tarefa está em execução.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>The task calculates the sum of the integers between 1 and 1,000,000.</source>
          <target state="translated">A tarefa calcula a soma de números inteiros entre 1 e 1.000.000.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>As the output from the example shows, the task executed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> method runs on the application thread, while the asynchronous task does not.</source>
          <target state="translated">Como mostra a saída do exemplo, a tarefa executada chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> método é executado no thread do aplicativo, enquanto a tarefa assíncrona não.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">A instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartada.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> is not in a valid state to be started.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> não está em um estado válido para ser iniciado.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously">
          <source>It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</source>
          <target state="translated">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler on which to attempt to run this task inline.</source>
          <target state="translated">O agendador no qual haverá a tentativa de executar essa tarefa embutida.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>Runs the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> synchronously on the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> provided.</source>
          <target state="translated">Executa o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de forma síncrona no <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> fornecido.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>Tasks executed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> method are instantiated by calling a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class constructor.</source>
          <target state="translated">As tarefas executadas chamando o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> método são instanciados chamando um <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> construtor de classe.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>The task to be run synchronously must be in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Created&gt;</ph> state.</source>
          <target state="translated">A tarefa para ser executado de forma síncrona deve estar no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Created&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>A task may be started and run only once.</source>
          <target state="translated">Uma tarefa pode ser iniciada e executada apenas uma vez.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>Any attempts to schedule a task a second time results in an exception.</source>
          <target state="translated">Qualquer tentativa para agendar uma tarefa um segundo momento resulta em uma exceção.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</source>
          <target state="translated">Se o Agendador de destino não oferece suporte para executar esta tarefa no thread atual, a tarefa será agendada para execução no Agendador e o segmento atual será bloqueado até que a tarefa foi concluída a execução.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>Because of this, the calling thread does not need to call a method such as <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> to ensure that the task has completed execution.</source>
          <target state="translated">Por isso, o thread de chamada não precisa chamar um método, como <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> para garantir que a tarefa foi concluída a execução.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>For more information on exception handling for task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre o tratamento de exceções para operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">A instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartada.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> is not in a valid state to be started.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> não está em um estado válido para ser iniciado.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
          <source>It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</source>
          <target state="translated">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Starts the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Inicia o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start">
          <source>Starts the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, scheduling it for execution to the current <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph>.</source>
          <target state="translated">Inicia o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, agendando-o para execução no <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>A task may be started and run only once.</source>
          <target state="translated">Uma tarefa pode ser iniciada e executada apenas uma vez.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>Any attempts to schedule a task a second time will result in an exception.</source>
          <target state="translated">Qualquer tentativa para agendar uma tarefa de uma segunda vez resultará em uma exceção.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> is used to execute a task that has been created by calling one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> constructors.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> é usada para executar uma tarefa que foi criada chamando um do <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> construtores.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</source>
          <target state="translated">Normalmente, você faz isso quando você precisar separar a criação da tarefa de sua execução, como quando você executar tarefas que você criou condicionalmente.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para o caso mais comum em que você não precisa separar instanciação de tarefa de execução, é recomendável que você chame uma sobrecarga de <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29&gt;</ph> constructor to instantiate a new <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object that displays its task ID and managed thread ID and then executes a loop.</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29&gt;</ph> construtor para instanciar um novo <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto que exibe sua tarefa ID e a ID do thread gerenciado e, em seguida, executa um loop.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to execute the task.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> método para executar a tarefa.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start">
          <source>Since this is a console app, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method is necessary to prevent the app from terminating before the task finishes execution.</source>
          <target state="translated">Como esse é um aplicativo de console, a chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método é necessário para impedir que o aplicativo finalizando antes de terminar a execução.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">A instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartada.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> is not in a valid state to be started.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> não está em um estado válido para ser iniciado.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start">
          <source>It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</source>
          <target state="translated">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> with which to associate and execute this task.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> com o qual associar e executar essa tarefa.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>Starts the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, scheduling it for execution to the specified <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph>.</source>
          <target state="translated">Inicia o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>, agendando-o para execução no <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>A task may only be started and run only once.</source>
          <target state="translated">Uma tarefa só pode ser iniciada e executada apenas uma vez.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>Any attempts to schedule a task a second time will result in an exception.</source>
          <target state="translated">Qualquer tentativa para agendar uma tarefa de uma segunda vez resultará em uma exceção.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>For information on handling exceptions thrown by task operations, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como manipular exceções lançadas por operações de tarefa, consulte <bpt id="p1">[</bpt>tratamento de exceção<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> is not in a valid state to be started.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> não está em um estado válido para ser iniciado.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</source>
          <target state="translated">Ele pode já ter sido iniciado, executado ou cancelado ou pode ter sido criado de forma a não dar suporte ao agendamento direto.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">A instância <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartada.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler was unable to queue this task.</source>
          <target state="translated">O agendador não pôde colocar essa tarefa na fila.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.Status">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskStatus" /&gt;</ph> of this task.</source>
          <target state="translated">Obtém o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskStatus" /&gt;</ph> dessa tarefa.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Status">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskStatus" /&gt;</ph> of this task instance.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskStatus" /&gt;</ph> atual desta instância de tarefa.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Status">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> property does not block the calling thread until the task has completed.</source>
          <target state="translated">Recuperar o valor da <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> propriedade não bloqueia o thread de chamada até que a tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Status">
          <source>For more information and an example, see <bpt id="p1">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept> and <bpt id="p2">[</bpt>How to: Cancel a Task and Its Children<ept id="p2">](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)</ept>.</source>
          <target state="translated">Para obter mais informações e um exemplo, consulte <bpt id="p1">[</bpt>encadeamento de tarefas por tarefas de continuação usando<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept> e <bpt id="p2">[</bpt>como: Cancelar uma tarefa e seus filhos<ept id="p2">](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)</ept>.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Status">
          <source>The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</source>
          <target state="translated">O exemplo a seguir cria 20 tarefas que fará um loop até que um contador é incrementado em um valor de 2 milhões.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Status">
          <source>When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</source>
          <target state="translated">Quando as 10 primeiras tarefas atingirem 2 milhões, o token de cancelamento é cancelado e as tarefas cujas contadores que não alcançaram 2 milhões serão canceladas.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Status">
          <source>The example then examines the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property of each task to indicate whether it completed successfully or was cancelled.</source>
          <target state="translated">O exemplo, em seguida, examina o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriedade de cada tarefa para indicar se ele foi concluído com êxito ou foi cancelado.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.Status">
          <source>For those that completed, it displays the value returned by the task.</source>
          <target state="translated">Para aqueles que concluído, ele exibe o valor retornado pela tarefa.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait for the task to complete.</source>
          <target state="translated">Obtém um <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que pode ser usado para aguardar a conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait for the task to complete.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que pode ser usado para aguardar a conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
          <source>Using the wait functionality provided by <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> is preferable to using <ph id="ph2">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> for similar functionality.</source>
          <target state="translated">Usando a funcionalidade de espera fornecida pelo <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> é preferível a usar <ph id="ph2">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> para uma funcionalidade semelhante.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
          <source>For more information, see the "Waiting on Tasks" section in <bpt id="p1">[</bpt>Task-based Asynchronous Programming<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> and <bpt id="p2">[</bpt>Using TPL with Other Asynchronous Patterns<ept id="p2">](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte a seção "Aguardando em tarefas" <bpt id="p1">[</bpt>baseado em tarefas de programação assíncrona<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> e <bpt id="p2">[</bpt>usando TPL com outros padrões assíncronos<ept id="p2">](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md)</ept>.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
          <source>Gets an indication of whether the operation completed synchronously.</source>
          <target state="translated">Obtém uma indicação de se a operação foi concluída de forma síncrona.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation completed synchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Se a operação é concluída de forma síncrona; Caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Waits for the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to complete execution.</source>
          <target state="translated">Aguarda o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluir a execução.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait">
          <source>Waits for the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to complete execution.</source>
          <target state="translated">Aguarda o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluir a execução.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> is a synchronization method that causes the calling thread to wait until the current task has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> é um método de sincronização que faz com que o thread de chamada aguardar até que a tarefa atual for concluída.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source>If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</source>
          <target state="translated">Se a tarefa atual não tiver iniciado a execução, o método espera tentará remover a tarefa do Agendador e executá-lo embutido no thread atual.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source>If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</source>
          <target state="translated">Se não for possível fazer isso ou se a tarefa atual já iniciou a execução, ele bloqueia o thread de chamada até que a tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source>For more information, see <bpt id="p1">[</bpt>Task.Wait and "Inlining"<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>Task.Wait e "Inlining"<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx)</ept> em programação paralela com .NET blog.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source>For more information and an example, see <bpt id="p1">[</bpt>How to: Wait on One or More Tasks to Complete<ept id="p1">](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374)</ept>.</source>
          <target state="translated">Para obter mais informações e um exemplo, consulte <bpt id="p1">[</bpt>como: espera-se em uma ou mais tarefas a concluir<ept id="p1">](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374)</ept>.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source>The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</source>
          <target state="translated">O exemplo a seguir inicia uma tarefa que gera um milhão de inteiros aleatórios entre 0 e 100 e computa sua média.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method to ensure that the task completes before the application terminates.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método para garantir que a tarefa é concluída antes do encerramento do aplicativo.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait">
          <source>Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</source>
          <target state="translated">Caso contrário, porque este é um aplicativo de console, o exemplo deve terminar antes que a tarefa pode calcular e exibir a média.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait">
          <source>The task was canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph> object.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém um objeto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait">
          <source>An exception was thrown during the execution of the task.</source>
          <target state="translated">Uma exceção foi gerada durante a execução da tarefa.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains information about the exception or exceptions.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém informações sobre a exceção ou as exceções.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para aguardar ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (- 1) para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>Waits for the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to complete execution within a specified number of milliseconds.</source>
          <target state="translated">Aguarda o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluir a execução dentro de um número especificado. de milissegundos.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completed execution within the allotted time; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluiu a execução dentro do tempo determinado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> é um método de sincronização que faz com que o thread de chamada aguardar a instância atual da tarefa ser concluída até que ocorra um dos seguintes:</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The task completes successfully.</source>
          <target state="translated">A tarefa é concluída com êxito.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The task itself is canceled or throws an exception.</source>
          <target state="translated">A própria tarefa foi cancelada ou gera uma exceção.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>In this case, you handle an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exception.</source>
          <target state="translated">Nesse caso, você processa um <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType&gt;</ph> property contains details about the exception or exceptions.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType&gt;</ph> propriedade contém detalhes sobre a exceção ou exceções.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The interval defined by <ph id="ph1">`millisecondsTimeout`</ph> elapses.</source>
          <target state="translated">O intervalo definido pela <ph id="ph1">`millisecondsTimeout`</ph> expira.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>In this case, the current thread resumes execution and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Nesse caso, o thread atual continua a execução e o método retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</source>
          <target state="translated">O exemplo a seguir inicia uma tarefa que gera cinco milhões de inteiros aleatórios entre 0 e 100 e computa sua média.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> method to wait for the application to complete within 150 milliseconds.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> método de espera para o aplicativo ser concluída dentro de 150 milissegundos.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</source>
          <target state="translated">Se o aplicativo for concluída normalmente, a tarefa exibe a soma e média dos números aleatórios que gerou.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>If the timeout interval has elapsed, the example displays a message before it terminates.</source>
          <target state="translated">Se o intervalo de tempo limite expirou, o exemplo exibe uma mensagem antes de ele termina.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The task was canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph> object.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém um objeto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>An exception was thrown during the execution of the task.</source>
          <target state="translated">Uma exceção foi gerada durante a execução da tarefa.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains information about the exception or exceptions.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém informações sobre a exceção ou as exceções.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>A cancellation token to observe while waiting for the task to complete.</source>
          <target state="translated">Um token de cancelamento a ser observado ao aguardar a conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>Waits for the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to complete execution.</source>
          <target state="translated">Aguarda o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluir a execução.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The wait terminates if a cancellation token is canceled before the task completes.</source>
          <target state="translated">A espera termina se um token de cancelamento for cancelado antes que a tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> método cria uma espera cancelável; ou seja, ele faz com que o thread atual aguardar até que ocorra um dos seguintes:</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The task completes.</source>
          <target state="translated">A tarefa é concluída.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The cancellation token is canceled.</source>
          <target state="translated">O token de cancelamento é cancelado.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>In this case, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>.</source>
          <target state="translated">Nesse caso, a chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> método lança um <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>Canceling the <ph id="ph1">`cancellationToken`</ph> cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</source>
          <target state="translated">Cancelando o <ph id="ph1">`cancellationToken`</ph> token de cancelamento não tem efeito sobre a tarefa em execução, a menos que ele também foi passado o token de cancelamento e está preparado para lidar com cancelamento.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>Passing the <ph id="ph1">`cancellationToken`</ph> object to this method simply allows the wait to be canceled.</source>
          <target state="translated">Passando o <ph id="ph1">`cancellationToken`</ph> objeto para este método simplesmente permite que a espera para ser cancelada.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</source>
          <target state="translated">O exemplo a seguir ilustra o uso simple de um token de cancelamento para cancelar aguardando a conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>A task is launched, calls the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</source>
          <target state="translated">Uma tarefa é iniciada, chama o <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> método cancelar qualquer uma da origem de token tokens de cancelamento e, em seguida, atrasos de cinco segundos.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>Note that the task itself has not been passed the cancellation token and is not cancelable.</source>
          <target state="translated">Observe que a própria tarefa não passou o token de cancelamento e não é anulável.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The application thread calls the task's <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> is thrown.</source>
          <target state="translated">O thread de aplicativo chama a tarefa <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> método para aguardar a conclusão da tarefa, mas a espera for cancelada depois que o token de cancelamento é cancelado e um <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The exception handler reports the exception and then sleeps for six seconds.</source>
          <target state="translated">O manipulador de exceção relata a exceção e, em seguida, ficará suspenso por seis segundos.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>As the output from the example shows, that delay allows the task to complete in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state.</source>
          <target state="translated">Como mostra a saída do exemplo, esse atraso permite que a tarefa concluir o <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The task has been disposed.</source>
          <target state="translated">A tarefa foi descartada.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The task was canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph> object.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém um objeto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>An exception was thrown during the execution of the task.</source>
          <target state="translated">Uma exceção foi gerada durante a execução da tarefa.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains information about the exception or exceptions.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém informações sobre a exceção ou as exceções.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa o número de milissegundos para aguardar ou um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milissegundos para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>Waits for the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to complete execution within a specified time interval.</source>
          <target state="translated">Aguarda o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluir a execução dentro de um intervalo especificado.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completed execution within the allotted time; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluiu a execução dentro do tempo determinado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> é um método de sincronização que faz com que o thread de chamada aguardar a instância atual da tarefa ser concluída até que ocorra um dos seguintes:</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The task completes successfully.</source>
          <target state="translated">A tarefa é concluída com êxito.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The task itself is canceled or throws an exception.</source>
          <target state="translated">A própria tarefa foi cancelada ou gera uma exceção.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>In this case, you handle an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exception.</source>
          <target state="translated">Nesse caso, você processa um <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType&gt;</ph> property contains details about the exception or exceptions.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType&gt;</ph> propriedade contém detalhes sobre a exceção ou exceções.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The interval defined by <ph id="ph1">`timeout`</ph> elapses.</source>
          <target state="translated">O intervalo definido pela <ph id="ph1">`timeout`</ph> expira.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>In this case, the current thread resumes execution and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Nesse caso, o thread atual continua a execução e o método retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</source>
          <target state="translated">O exemplo a seguir inicia uma tarefa que gera cinco milhões de inteiros aleatórios entre 0 e 100 e computa sua média.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> method to wait for the application to complete within 150 milliseconds.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> método de espera para o aplicativo ser concluída dentro de 150 milissegundos.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</source>
          <target state="translated">Se o aplicativo for concluída normalmente, a tarefa exibe a soma e média dos números aleatórios que gerou.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>If the timeout interval has elapsed, the example displays a message before it terminates.</source>
          <target state="translated">Se o intervalo de tempo limite expirou, o exemplo exibe uma mensagem antes de ele termina.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The task was canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph> object.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém um objeto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>An exception was thrown during the execution of the task.</source>
          <target state="translated">Uma exceção foi gerada durante a execução da tarefa.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains information about the exception or exceptions.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém informações sobre a exceção ou as exceções.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para aguardar ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (- 1) para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>A cancellation token to observe while waiting for the task to complete.</source>
          <target state="translated">Um token de cancelamento a ser observado ao aguardar a conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Waits for the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> to complete execution.</source>
          <target state="translated">Aguarda o <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluir a execução.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</source>
          <target state="translated">A espera termina se um intervalo de tempo limite expirar ou um token de cancelamento for cancelado antes que a tarefa seja concluída.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> completed execution within the allotted time; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluiu a execução dentro do tempo determinado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> é um método de sincronização que faz com que o thread de chamada aguardar a instância atual da tarefa ser concluída até que ocorra um dos seguintes:</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The task completes successfully.</source>
          <target state="translated">A tarefa é concluída com êxito.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The task itself is canceled or throws an exception.</source>
          <target state="translated">A própria tarefa foi cancelada ou gera uma exceção.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>In this case, you handle an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exception.</source>
          <target state="translated">Nesse caso, você processa um <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exceção.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType&gt;</ph> property contains details about the exception or exceptions.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType&gt;</ph> propriedade contém detalhes sobre a exceção ou exceções.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">`cancellationToken`</ph> cancellation token is canceled.</source>
          <target state="translated">O <ph id="ph1">`cancellationToken`</ph> token de cancelamento é cancelado.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>In this case, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>.</source>
          <target state="translated">Nesse caso, a chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> método lança um <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The interval defined by <ph id="ph1">`millisecondsTimeout`</ph> elapses.</source>
          <target state="translated">O intervalo definido pela <ph id="ph1">`millisecondsTimeout`</ph> expira.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>In this case, the current thread resumes execution and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Nesse caso, o thread atual continua a execução e o método retornará <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Canceling the <ph id="ph1">`cancellationToken`</ph> cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</source>
          <target state="translated">Cancelando o <ph id="ph1">`cancellationToken`</ph> token de cancelamento não tem efeito sobre a tarefa em execução, a menos que ele também foi passado o token de cancelamento e está preparado para lidar com cancelamento.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Passing the <ph id="ph1">`cancellationToken`</ph> object to this method simply allows the wait to be canceled based on some condition.</source>
          <target state="translated">Passando o <ph id="ph1">`cancellationToken`</ph> objeto para este método simplesmente permite que a espera para ser cancelada com base em alguma condição.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> método para fornecer um valor de tempo limite e o cancelamento de um token que pode terminar a espera pela conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>A new thread is started and executes the <ph id="ph1">`CancelToken`</ph> method, which pauses and then calls the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method to cancel the cancellation tokens.</source>
          <target state="translated">Um novo thread foi iniciado e executa o <ph id="ph1">`CancelToken`</ph> método, que pausa e, em seguida, chama o <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> método para cancelar os tokens de cancelamento.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>A task is then launched and delays for 5 seconds.</source>
          <target state="translated">Uma tarefa, em seguida, iniciado e atrasa por 5 segundos.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método é chamado para aguardar a conclusão da tarefa e é fornecido um valor de tempo limite breve e um token de cancelamento.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</source>
          <target state="translated">Observe que a saída precisa do exemplo depende se a espera foi cancelada devido ao token de cancelamento ou porque o intervalo de tempo limite expirou.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The task was canceled.</source>
          <target state="translated">A tarefa foi cancelada.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph> object.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém um objeto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>An exception was thrown during the execution of the task.</source>
          <target state="translated">Uma exceção foi gerada durante a execução da tarefa.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains information about the exception or exceptions.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contém informações sobre a exceção ou as exceções.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Waits for all of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution.</source>
          <target state="translated">Aguarda até que todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos tenham concluído a execução.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>Waits for all of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution.</source>
          <target state="translated">Aguarda até que todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos tenham concluído a execução.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>The following example starts 10 tasks, each of which is passed an index as a state object.</source>
          <target state="translated">O exemplo a seguir inicia 10 tarefas, cada um deles é passada um índice como um objeto de estado.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>Tasks with an index from two to five throw exceptions.</source>
          <target state="translated">Tarefas com um índice de duas a cinco lançam exceções.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>The call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> method wraps all exceptions in an <ph id="ph2">&lt;xref:System.AggregateException&gt;</ph> object and propagates it to the calling thread.</source>
          <target state="translated">A chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> método encapsula todas as exceções em um <ph id="ph2">&lt;xref:System.AggregateException&gt;</ph> de objeto e propaga para o thread de chamada.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>One or more of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects in <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> has been disposed.</source>
          <target state="translated">Um ou mais objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> no <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> foram descartados.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is an empty array.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>At least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances was canceled.</source>
          <target state="translated">Pelo menos uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi cancelada.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>If a task was canceled, the <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> exception contains an <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> exception in its <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection.</source>
          <target state="translated">Se uma tarefa foi cancelada, a exceção <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> contém uma exceção <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> na coleção <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
          <source>An exception was thrown during the execution of at least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances.</source>
          <target state="translated">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para aguardar ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (- 1) para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>Waits for all of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution within a specified number of milliseconds.</source>
          <target state="translated">Aguarda todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos concluírem a execução dentro de um número especificado de milissegundos.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if all of the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances completed execution within the allotted time; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se todas as instâncias do <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> tiverem concluído a execução no tempo determinado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>One or more of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects in <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> has been disposed.</source>
          <target state="translated">Um ou mais objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> no <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> foram descartados.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>At least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances was canceled.</source>
          <target state="translated">Pelo menos uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi cancelada.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>If a task was canceled, the <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> contains an <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> in its <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection.</source>
          <target state="translated">Se uma tarefa tiver sido cancelada, a <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> conterá um <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> em sua coleção <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>An exception was thrown during the execution of at least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances.</source>
          <target state="translated">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is an empty array.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> to observe while waiting for the tasks to complete.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> a ser observado ao aguardar a conclusão das tarefas.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>Waits for all of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution unless the wait is cancelled.</source>
          <target state="translated">Aguarda até que todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos tenham concluído a execução, a menos que a espera seja cancelada.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">`cancellationToken`</ph> argument is used to cancel the wait operation.</source>
          <target state="translated">O <ph id="ph1">`cancellationToken`</ph> argumento é usado para cancelar a operação de espera.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>Cancellation of the tasks is a distinct operation, and is signaled by the <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> as noted above.</source>
          <target state="translated">Cancelamento de tarefas é uma operação distinta e é sinalizado pelo <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> conforme observado acima.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>At least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances was canceled.</source>
          <target state="translated">Pelo menos uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi cancelada.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>If a task was canceled, the <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> contains an <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> in its <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection.</source>
          <target state="translated">Se uma tarefa tiver sido cancelada, a <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> conterá um <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> em sua coleção <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>An exception was thrown during the execution of at least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances.</source>
          <target state="translated">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is an empty array.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>One or more of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects in <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> has been disposed.</source>
          <target state="translated">Um ou mais objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> no <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> foram descartados.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa o número de milissegundos para aguardar ou um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milissegundos para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>Waits for all of the provided cancellable <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution within a specified time interval.</source>
          <target state="translated">Aguarda todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> canceláveis fornecidos concluírem a execução dentro de um intervalo de tempo especificado.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if all of the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances completed execution within the allotted time; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se todas as instâncias do <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> tiverem concluído a execução no tempo determinado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>One or more of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects in <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> has been disposed.</source>
          <target state="translated">Um ou mais objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> no <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> foram descartados.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>At least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances was canceled.</source>
          <target state="translated">Pelo menos uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi cancelada.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>If a task was canceled, the <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> contains an <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> in its <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection.</source>
          <target state="translated">Se uma tarefa tiver sido cancelada, a <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> conterá um <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> em sua coleção <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>An exception was thrown during the execution of at least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances.</source>
          <target state="translated">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is an empty array.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para aguardar ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (- 1) para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> to observe while waiting for the tasks to complete.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> a ser observado ao aguardar a conclusão das tarefas.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>Waits for all of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</source>
          <target state="translated">Aguarda todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos concluírem a execução em um número especificado de milissegundos ou até que a espera seja cancelada.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if all of the <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances completed execution within the allotted time; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se todas as instâncias do <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> tiverem concluído a execução no tempo determinado; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">`cancellationToken`</ph> argument is used to cancel the wait operation.</source>
          <target state="translated">O <ph id="ph1">`cancellationToken`</ph> argumento é usado para cancelar a operação de espera.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>Cancellation of the tasks is a distinct operation, and is signaled by the <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> noted above.</source>
          <target state="translated">Cancelamento de tarefas é uma operação distinta e é sinalizado pelo <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> indicado acima.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>One or more of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects in <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> has been disposed.</source>
          <target state="translated">Um ou mais objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> no <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> foram descartados.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>At least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances was canceled.</source>
          <target state="translated">Pelo menos uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi cancelada.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>If a task was canceled, the <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> contains an <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> in its <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection.</source>
          <target state="translated">Se uma tarefa tiver sido cancelada, a <ph id="ph1">&lt;see cref="T:System.AggregateException" /&gt;</ph> conterá um <ph id="ph2">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> em sua coleção <ph id="ph3">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>An exception was thrown during the execution of at least one of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances.</source>
          <target state="translated">Uma exceção foi gerada durante a execução de, pelo menos, uma das instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is an empty array.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é uma matriz vazia.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Waits for any of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution.</source>
          <target state="translated">Aguarda até que todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos tenham concluído a execução.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>Waits for any of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution.</source>
          <target state="translated">Aguarda até que todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos tenham concluído a execução.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>The index of the completed <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> object in the <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph> array.</source>
          <target state="translated">O índice do objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> concluído na matriz <ph id="ph2">&lt;paramref name="tasks" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</source>
          <target state="translated">O exemplo a seguir inicia cinco tarefas, cada uma delas ficará suspenso por um mínimo de 50 milissegundos ou um máximo de 1,050 milissegundos.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAny%2A&gt;</ph> method then waits for any of the tasks to complete.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAny%2A&gt;</ph> método espera por qualquer uma das tarefas para concluir.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</source>
          <target state="translated">O exemplo exibe a ID da tarefa da tarefa que terminou a espera, bem como o status atual de todas as tarefas.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para aguardar ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (- 1) para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source>Waits for any of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution within a specified number of milliseconds.</source>
          <target state="translated">Aguarda qualquer um dos objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos concluírem a execução dentro de um número especificado de milissegundos.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source>The index of the completed task in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array argument, or -1 if the timeout occurred.</source>
          <target state="translated">O índice da tarefa concluída no argumento da matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> ou -1 se o tempo limite ocorreu.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> to observe while waiting for a task to complete.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> a ser observado ao aguardar a conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>Waits for any of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution unless the wait is cancelled.</source>
          <target state="translated">Aguarda até que os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos tenham concluído a execução, a menos que a espera seja cancelada.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The index of the completed task in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array argument.</source>
          <target state="translated">O índice da tarefa concluída no argumento da matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa o número de milissegundos para aguardar ou um <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que representa -1 milissegundos para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>Waits for any of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution within a specified time interval.</source>
          <target state="translated">Aguarda algum dos objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos concluir a execução em um intervalo especificado.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>The index of the completed task in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array argument, or -1 if the timeout occurred.</source>
          <target state="translated">O índice da tarefa concluída no argumento da matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> ou -1 se o tempo limite ocorreu.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> instances on which to wait.</source>
          <target state="translated">Uma matriz de instâncias <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> para espera.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">O número de milissegundos para aguardar ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (- 1) para aguardar indefinidamente.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> to observe while waiting for a task to complete.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> a ser observado ao aguardar a conclusão da tarefa.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>Waits for any of the provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</source>
          <target state="translated">Aguarda alguns dos objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> fornecidos concluírem a execução em um número especificado de milissegundos ou até que o token de cancelamento seja cancelado.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The index of the completed task in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array argument, or -1 if the timeout occurred.</source>
          <target state="translated">O índice da tarefa concluída no argumento da matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> ou -1 se o tempo limite ocorreu.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> has been disposed.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> foi descartado.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> é um número negativo diferente de -1, que representa um tempo limite infinito.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument contains a null element.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contém um elemento nulo.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> foi cancelado.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Creates a task that will complete when all of the supplied tasks have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>Creates a task that will complete when all of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects in an enumerable collection have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> em uma coleção enumerável forem concluídos.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>A task that represents the completion of all of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> method that return a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</source>
          <target state="translated">As sobrecargas do <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> método que retorna um <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto normalmente são chamados quando você está interessado no status de um conjunto de tarefas ou a exceções lançadas por um conjunto de tarefas.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> method does not block the calling thread.</source>
          <target state="translated">A chamada para <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> método não bloqueia o thread de chamada.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</source>
          <target state="translated">Se qualquer uma das tarefas fornecidas é concluído em um estado de falha, a tarefa retornada também será concluída em um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> estado, em que suas exceções conterá a agregação do conjunto de exceções não encapsuladas de cada uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state before it's returned to the caller.</source>
          <target state="translated">Se o fornecido matriz/enumerável não contém tarefas, a tarefa retornada imediatamente fará a transição para um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado antes de ser retornado ao chamador.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The following example creates a set of tasks that ping the URLs in an array.</source>
          <target state="translated">O exemplo a seguir cria um conjunto de tarefas que executar o ping de URLs em uma matriz.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The tasks are stored in a <ph id="ph1">`List&lt;Task&gt;`</ph> collection that is passed to the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> method.</source>
          <target state="translated">As tarefas são armazenadas em um <ph id="ph1">`List&lt;Task&gt;`</ph> coleção que é passada para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>After the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method ensures that all threads have completed, the example examines the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> property to determine whether any tasks have faulted.</source>
          <target state="translated">Após a chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método garante que todos os threads concluir, o exemplo examina o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> propriedade para determinar se todas as tarefas têm com defeito.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> collection contained a <ph id="ph2">&lt;see langword="null" /&gt;</ph> task.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>Creates a task that will complete when all of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects in an array have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> em uma matriz forem concluídos.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>A task that represents the completion of all of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>The overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> method that return a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</source>
          <target state="translated">As sobrecargas do <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> método que retorna um <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto normalmente são chamados quando você está interessado no status de um conjunto de tarefas ou a exceções lançadas por um conjunto de tarefas.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>The call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> method does not block the calling thread.</source>
          <target state="translated">A chamada para <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> método não bloqueia o thread de chamada.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</source>
          <target state="translated">Se qualquer uma das tarefas fornecidas é concluído em um estado de falha, a tarefa retornada também será concluída em um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> estado, em que suas exceções conterá a agregação do conjunto de exceções não encapsuladas de cada uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state before it's returned to the caller.</source>
          <target state="translated">Se o fornecido matriz/enumerável não contém tarefas, a tarefa retornada imediatamente fará a transição para um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado antes de ser retornado ao chamador.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>The following example creates a set of tasks that ping the URLs in an array.</source>
          <target state="translated">O exemplo a seguir cria um conjunto de tarefas que executar o ping de URLs em uma matriz.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>The tasks are stored in a <ph id="ph1">`List&lt;Task&gt;`</ph> collection that is converted to an array and passed to the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> method.</source>
          <target state="translated">As tarefas são armazenadas em um <ph id="ph1">`List&lt;Task&gt;`</ph> coleção que é convertida em uma matriz e passada para o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>After the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method ensures that all threads have completed, the example examines the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> property to determine whether any tasks have faulted.</source>
          <target state="translated">Após a chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> método garante que todos os threads concluir, o exemplo examina o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> propriedade para determinar se todas as tarefas têm com defeito.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contained a <ph id="ph2">&lt;see langword="null" /&gt;</ph> task.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The type of the completed task.</source>
          <target state="translated">O tipo de tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>Creates a task that will complete when all of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects in an enumerable collection have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> em uma coleção enumerável forem concluídos.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>A task that represents the completion of all of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29&gt;</ph> method does not block the calling thread.</source>
          <target state="translated">A chamada para <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29&gt;</ph> método não bloqueia o thread de chamada.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>However, a call to the returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property does block the calling thread.</source>
          <target state="translated">No entanto, uma chamada para retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriedade bloquear o thread de chamada.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</source>
          <target state="translated">Se qualquer uma das tarefas fornecidas é concluído em um estado de falha, a tarefa retornada também será concluída em um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> estado, em que suas exceções conterá a agregação do conjunto de exceções não encapsuladas de cada uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> property will return an <ph id="ph3">`TResult[]`</ph> where <ph id="ph4">`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> definirá a propriedade da tarefa retornada para uma matriz que contém todos os resultados das tarefas fornecidos na mesma ordem como eles foram fornecidos (por exemplo, se a entrada tarefas matriz contida t1, t2, t3, a tarefa de saída <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> propriedade retornará um <ph id="ph3">`TResult[]`</ph> onde <ph id="ph4">`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`</ph>.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>If the <ph id="ph1">`tasks`</ph> argument contains no tasks, the returned task will immediately transition to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state before it's returned to the caller.</source>
          <target state="translated">Se o <ph id="ph1">`tasks`</ph> argumento não contém tarefas, a tarefa retornada imediatamente fará a transição para um <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado antes de ser retornado ao chamador.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The returned <ph id="ph1">`TResult[]`</ph> will be an array of 0 elements.</source>
          <target state="translated">Retornado <ph id="ph1">`TResult[]`</ph> será uma matriz de elementos de 0.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</source>
          <target state="translated">O exemplo a seguir cria dez tarefas, cada uma delas instancia um gerador de número aleatório que cria 1.000 números aleatórios entre 1 e 1.000 e computa sua média.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> método é usado para atrasar a instanciação de geradores de números aleatórios para que eles não são criados com valores de semente idênticos.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> method then returns an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> array that contains the mean computed by each task.</source>
          <target state="translated">A chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> , em seguida, o método retorna um <ph id="ph2">&lt;xref:System.Int64&gt;</ph> matriz que contém a média calculada por cada tarefa.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>These are then used to calculate the overall mean.</source>
          <target state="translated">Em seguida, eles são usados para calcular a média geral.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>In this case, the ten individual tasks are stored in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">Nesse caso, as dez tarefas individuais são armazenadas em um <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> implementa a interface <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> collection contained a <ph id="ph2">&lt;see langword="null" /&gt;</ph> task.</source>
          <target state="translated">A coleção <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The type of the completed task.</source>
          <target state="translated">O tipo de tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>Creates a task that will complete when all of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects in an array have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todos os objetos <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> em uma matriz forem concluídos.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>A task that represents the completion of all of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de todas as tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29&gt;</ph> method does not block the calling thread.</source>
          <target state="translated">A chamada para <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29&gt;</ph> método não bloqueia o thread de chamada.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>However, a call to the returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property does block the calling thread.</source>
          <target state="translated">No entanto, uma chamada para retornado <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriedade bloquear o thread de chamada.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</source>
          <target state="translated">Se qualquer uma das tarefas fornecidas é concluído em um estado de falha, a tarefa retornada também será concluída em um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> estado, em que suas exceções conterá a agregação do conjunto de exceções não encapsuladas de cada uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas fornecidas com defeito, mas pelo menos um deles foi cancelado, a tarefa retornada terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state.</source>
          <target state="translated">Se nenhuma das tarefas com falha e nenhuma das tarefas foram canceladas, a tarefa resultante terminará no <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> will return an <ph id="ph3">`TResult[]`</ph> where <ph id="ph4">`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> da tarefa retornada será definido como uma matriz que contém todos os resultados das tarefas fornecidos na mesma ordem como eles foram fornecidos (por exemplo, se a entrada tarefas matriz contida t1, t2, t3, a tarefa de saída <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> retornará um <ph id="ph3">`TResult[]`</ph> onde <ph id="ph4">`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`</ph>.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state before it's returned to the caller.</source>
          <target state="translated">Se o fornecido matriz/enumerável não contém tarefas, a tarefa retornada imediatamente fará a transição para um <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> estado antes de ser retornado ao chamador.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The returned <ph id="ph1">`TResult[]`</ph> will be an array of 0 elements.</source>
          <target state="translated">Retornado <ph id="ph1">`TResult[]`</ph> será uma matriz de elementos de 0.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</source>
          <target state="translated">O exemplo a seguir cria dez tarefas, cada uma delas instancia um gerador de número aleatório que cria 1.000 números aleatórios entre 1 e 1.000 e computa sua média.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>In this case, the ten individual tasks are stored in a <ph id="ph1">`Task&lt;Int64&gt;`</ph> array.</source>
          <target state="translated">Nesse caso, as dez tarefas individuais são armazenadas em um <ph id="ph1">`Task&lt;Int64&gt;`</ph> matriz.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> método é usado para atrasar a instanciação de geradores de números aleatórios para que eles não são criados com valores de semente idênticos.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> method then returns an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> array that contains the mean computed by each task.</source>
          <target state="translated">A chamada para o <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> , em seguida, o método retorna um <ph id="ph2">&lt;xref:System.Int64&gt;</ph> matriz que contém a média calculada por cada tarefa.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>These are then used to calculate the overall mean.</source>
          <target state="translated">Em seguida, eles são usados para calcular a média geral.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contained a <ph id="ph2">&lt;see langword="null" /&gt;</ph> task.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task">
          <source>Creates a task that will complete when any of the supplied tasks have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>Creates a task that will complete when any of the supplied tasks have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>A task that represents the completion of one of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The return task's Result is the task that completed.</source>
          <target state="translated">O Resultado da tarefa de retorno é a tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The returned task will complete when any of the supplied tasks has completed.</source>
          <target state="translated">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The returned task will always end in the <ph id="ph1">`RanToCompletion`</ph> state  with its Result set to the first task to complete.</source>
          <target state="translated">A tarefa retornada sempre terminará no <ph id="ph1">`RanToCompletion`</ph> estado com seu conjunto de resultados para a primeira tarefa para ser concluída.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>This is true even if the first task to complete ended in the <ph id="ph1">`Canceled`</ph> or <ph id="ph2">`Faulted`</ph> state.</source>
          <target state="translated">Isso é verdadeiro mesmo se a primeira tarefa para concluir terminou no <ph id="ph1">`Canceled`</ph> ou <ph id="ph2">`Faulted`</ph> estado.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contained a null task, or was empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa nula ou estava vazia.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>Creates a task that will complete when any of the supplied tasks have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>A task that represents the completion of one of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>The return task's Result is the task that completed.</source>
          <target state="translated">O Resultado da tarefa de retorno é a tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>The returned task will complete when any of the supplied tasks has completed.</source>
          <target state="translated">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>The returned task will always end in the <ph id="ph1">`RanToCompletion`</ph> state   with its <ph id="ph2">`Result`</ph> set to the first task to complete.</source>
          <target state="translated">A tarefa retornada sempre terminará no <ph id="ph1">`RanToCompletion`</ph> estado com seu <ph id="ph2">`Result`</ph> definido para a primeira tarefa para ser concluído.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>This is true even if the first task to complete ended in the <ph id="ph1">`Canceled`</ph> or <ph id="ph2">`Faulted`</ph> state.</source>
          <target state="translated">Isso é verdadeiro mesmo se a primeira tarefa para concluir terminou no <ph id="ph1">`Canceled`</ph> ou <ph id="ph2">`Faulted`</ph> estado.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> era nulo.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contained a null task, or was empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa nula ou estava vazia.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The type of the completed task.</source>
          <target state="translated">O tipo de tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>Creates a task that will complete when any of the supplied tasks have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>A task that represents the completion of one of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The return task's Result is the task that completed.</source>
          <target state="translated">O Resultado da tarefa de retorno é a tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The returned task will complete when any of the supplied tasks has completed.</source>
          <target state="translated">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</source>
          <target state="translated">A tarefa retornada sempre terminará no estado RanToCompletion com seu conjunto de resultados para a primeira tarefa para ser concluída.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>This is true even if the first task to complete ended in the Canceled or Faulted state.</source>
          <target state="translated">Isso é verdadeiro mesmo se tiver terminado a primeira tarefa para ser concluída no estado cancelado ou com falha.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contained a null task, or was empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa nula ou estava vazia.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>The type of the completed task.</source>
          <target state="translated">O tipo de tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>The tasks to wait on for completion.</source>
          <target state="translated">As tarefas para aguardar pela conclusão.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>Creates a task that will complete when any of the supplied tasks have completed.</source>
          <target state="translated">Cria uma tarefa que será concluída quando todas as tarefas fornecidas forem concluídas.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>A task that represents the completion of one of the supplied tasks.</source>
          <target state="translated">Uma tarefa que representa a conclusão de uma das tarefas fornecidas.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>The return task's Result is the task that completed.</source>
          <target state="translated">O Resultado da tarefa de retorno é a tarefa concluída.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>The returned task will complete when any of the supplied tasks has completed.</source>
          <target state="translated">A tarefa retornada será concluída quando qualquer uma das tarefas fornecidas foi concluída.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</source>
          <target state="translated">A tarefa retornada sempre terminará no estado RanToCompletion com seu conjunto de resultados para a primeira tarefa para ser concluída.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>This is true even if the first task to complete ended in the Canceled or Faulted state.</source>
          <target state="translated">Isso é verdadeiro mesmo se tiver terminado a primeira tarefa para ser concluída no estado cancelado ou com falha.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> argument was null.</source>
          <target state="translated">O argumento <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> era nulo.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contained a null task, or was empty.</source>
          <target state="translated">A matriz <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> continha uma tarefa nula ou estava vazia.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Yield">
          <source>Creates an awaitable task that asynchronously yields back to the current context when awaited.</source>
          <target state="translated">Cria uma tarefa que é possível aguardar que retorna assincronamente para o contexto atual quando aguardada.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Yield">
          <source>A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</source>
          <target state="translated">Um contexto que, quando aguardado, fará a transição de maneira assíncrona de volta ao contexto atual ao aguardar.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Yield">
          <source>If the current <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> is non-null, it is treated as the current context.</source>
          <target state="translated">Se o <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> atual não for nulo, ele será tratado como o contexto atual.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task.Yield">
          <source>Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</source>
          <target state="translated">Caso contrário, o Agendador de Tarefas associado à tarefa em execução no momento será tratado como o contexto atual.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Yield">
          <source>You can use <ph id="ph1">`await Task.Yield();`</ph> in an asynchronous method to force the method to complete asynchronously.</source>
          <target state="translated">Você pode usar <ph id="ph1">`await Task.Yield();`</ph> em um método assíncrono para forçar o método de conclusão de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Yield">
          <source>If there is a current synchronization context (<ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> object), this will post the remainder of the method’s execution back to that context.</source>
          <target state="translated">Se houver um contexto de sincronização atual (<ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> objeto), isso publicará o restante da execução do método para esse contexto.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Yield">
          <source>However, the context will decide how to prioritize this work relative to other work that may be pending.</source>
          <target state="translated">No entanto, o contexto decidirá como priorizar esse trabalho em relação a outro trabalho que pode estar pendente.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Yield">
          <source>The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</source>
          <target state="translated">O contexto de sincronização que está presente em um thread de interface do usuário na maioria dos ambientes de interface do usuário será geralmente priorizar lançado para o contexto maior do que a entrada e o trabalho de processamento de trabalho.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Yield">
          <source>For this reason, do not rely on <ph id="ph1">`await Task.Yield();`</ph> to keep a UI responsive.</source>
          <target state="translated">Por esse motivo, não confie em <ph id="ph1">`await Task.Yield();`</ph> manter uma interface do usuário responsiva.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task.Yield">
          <source>For more information, see the entry <bpt id="p1">[</bpt>Useful Abstractions Enabled with ContinueWith<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Para obter mais informações, consulte a entrada <bpt id="p1">[</bpt>útil abstrações habilitado com o método ContinueWith<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx)</ept> em programação paralela com .NET blog.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>