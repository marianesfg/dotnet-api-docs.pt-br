<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextWriterTraceListener.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72d95acec01c061dc9a581ef63651072539c24df28.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d95acec01c061dc9a581ef63651072539c24df28</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Directs tracing or debugging output to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> or to a <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, such as <ph id="ph3">&lt;see cref="T:System.IO.FileStream" /&gt;</ph>.</source>
          <target state="translated">Direciona a saída do rastreamento ou da depuração para um <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> ou um <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, como <ph id="ph3">&lt;see cref="T:System.IO.FileStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> class provides the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> property to get or set the text writer that receives the tracing or debugging output.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> classe fornece a <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> propriedade para obter ou definir o gravador de texto que recebe o rastreamento ou a saída de depuração.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Quando você terminar de usar o tipo, descarte-direta ou indiretamente.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para descartar o tipo diretamente, chame seu <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método em um <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloco.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para descartar indiretamente dele, use uma construção de linguagem, como <ph id="ph1">`using`</ph> (em c#) ou <ph id="ph2">`Using`</ph> (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tópico de interface.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>This class also provides methods to <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> so that it no longer receives tracing or debugging output, to <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Flush%2A&gt;</ph> the output buffer for the <ph id="ph4">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>, and to <ph id="ph5">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph> a message to the <ph id="ph6">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>.</source>
          <target state="translated">Essa classe também fornece métodos para <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> para que ele não receberá mais rastreamento ou depuração da saída, a <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Flush%2A&gt;</ph> o buffer de saída para o <ph id="ph4">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>e <ph id="ph5">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph> uma mensagem para o <ph id="ph6">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>You must enable tracing or debugging to use a trace listener.</source>
          <target state="translated">Você deve habilitar o rastreamento ou a depuração para usar um ouvinte de rastreamento.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The following syntax is compiler specific.</source>
          <target state="translated">A sintaxe a seguir é específico do compilador.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</source>
          <target state="translated">Se você usar compiladores que não seja o c# ou Visual Basic, consulte a documentação para o compilador.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To enable debugging in C#, add the <ph id="ph1">`/d:DEBUG`</ph> flag to the compiler command line when you compile your code, or you can add <ph id="ph2">`#define DEBUG`</ph> to the top of your file.</source>
          <target state="translated">Para habilitar a depuração em c#, adicione o <ph id="ph1">`/d:DEBUG`</ph> sinalizador para a linha de comando do compilador quando você compila o código, ou você pode adicionar <ph id="ph2">`#define DEBUG`</ph> à parte superior do seu arquivo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>In Visual Basic, add the <ph id="ph1">`/d:DEBUG=True`</ph> flag to the compiler command line.</source>
          <target state="translated">No Visual Basic, adicione o <ph id="ph1">`/d:DEBUG=True`</ph> sinalizador para a linha de comando do compilador.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To enable tracing in C#, add the <ph id="ph1">`/d:TRACE`</ph> flag to the compiler command line when you compile your code, or add <ph id="ph2">`#define TRACE`</ph> to the top of your file.</source>
          <target state="translated">Para habilitar o rastreamento em c#, adicione o <ph id="ph1">`/d:TRACE`</ph> sinalizador para a linha de comando do compilador quando você compila o código ou adiciona <ph id="ph2">`#define TRACE`</ph> à parte superior do seu arquivo.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>In Visual Basic, add the <ph id="ph1">`/d:TRACE=True`</ph> flag to the compiler command line.</source>
          <target state="translated">No Visual Basic, adicione o <ph id="ph1">`/d:TRACE=True`</ph> sinalizador para a linha de comando do compilador.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>To add a trace listener, edit the configuration file that corresponds to the name of your application.</source>
          <target state="translated">Para adicionar um ouvinte de rastreamento, edite o arquivo de configuração que corresponde ao nome do seu aplicativo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application.</source>
          <target state="translated">Nesse arquivo, você pode adicionar um ouvinte, defina seu tipo e definir seu parâmetro, remover um ouvinte ou limpar todos os ouvintes anteriormente definidos pelo aplicativo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The configuration file should be formatted like the following example.</source>
          <target state="translated">O arquivo de configuração deve ser formatado como o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>If an attempt is made to write to a file that is in use or unavailable, the file name is automatically prefixed by a GUID.</source>
          <target state="translated">Se for feita uma tentativa de gravar em um arquivo que está em uso ou indisponível, o nome de arquivo automaticamente é prefixado por um GUID.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>The following example implements an instance of the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> class that uses a <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> called <ph id="ph3">`myOutputWriter`</ph> to write to a file named <ph id="ph4">`TestFile.txt`</ph>.</source>
          <target state="translated">O exemplo a seguir implementa uma instância do <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> classe que usa um <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> chamado <ph id="ph3">`myOutputWriter`</ph> para gravar um arquivo chamado <ph id="ph4">`TestFile.txt`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>First the example creates a file for output.</source>
          <target state="translated">Primeiro, o exemplo cria um arquivo de saída.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Then it creates the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> for the first text writer, assigns it the output file, and adds it to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>.</source>
          <target state="translated">Em seguida, ele cria o <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> para o gravador de texto primeiro, atribui o arquivo de saída e adiciona-o para o <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Then, the code outputs one line of text to the file.</source>
          <target state="translated">Em seguida, o código gera uma linha de texto para o arquivo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Finally, the example flushes the output buffer.</source>
          <target state="translated">Por fim, o exemplo libera o buffer de saída.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>After running this sample, you can open the <ph id="ph1">`TestFile.txt`</ph> file to see the output.</source>
          <target state="translated">Depois de executar este exemplo, você pode abrir o <ph id="ph1">`TestFile.txt`</ph> arquivo para ver a saída.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.TextWriterTraceListener">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> as the output recipient.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> com <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> como o destinatário de saída.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>This constructor uses the <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> stream as the recipient of the tracing or debugging output.</source>
          <target state="translated">Este construtor usa o <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> fluxo como o destinatário do rastreamento ou a saída de depuração.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>Its <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string ("", or <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> propriedade é inicializada para uma cadeia de caracteres vazia ("", ou <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>It sets the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> property to console output, and then adds the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">Ele define o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Writer%2A&gt;</ph> propriedade ao console de saída e, em seguida, adiciona o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> para o <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor">
          <source>It writes a message in two segments, and then closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">Ele grava uma mensagem em dois segmentos e, em seguida, fecha o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> that represents the stream the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> que representa o fluxo no qual o <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> é gravado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class, using the stream as the recipient of the debugging and tracing output.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>, usando o fluxo como o destinatário da saída de depuração e de rastreamento.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">Este construtor inicializa o <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> propriedade como uma cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%29&gt;</ph> constructor and adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%29&gt;</ph> construtor e adiciona-o para o <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>The example then writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, and writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo, em seguida, grava duas mensagens isso <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>e grava uma mensagem a todos os <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objetos no <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">Finalmente, ele libera e fecha o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
          <source>The stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O fluxo é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that receives the output from the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> que recebe a saída do <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class using the specified writer as recipient of the tracing or debugging output.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>, usando o gravador especificado como destino da saída de depuração ou rastreamento.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">Este construtor inicializa o <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> propriedade como uma cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%29&gt;</ph> constructor.</source>
          <target state="translated">O exemplo de código a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, then references the <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> when it creates the <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, which it then adds to the <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo cria um <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, depois referencia o <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> quando ele cria o <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, que, em seguida, ele adiciona ao <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The example writes a message to all <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>, then closes this <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">O exemplo grava uma mensagem a todos os <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objetos no <ph id="ph2">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>, em seguida, fecha isso <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
          <source>The writer is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O gravador está <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The name of the file the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated">O nome do arquivo no qual o <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> é gravado.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class, using the file as the recipient of the debugging and tracing output.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> usando o arquivo como destinatário da saída da depuração e do rastreamento.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">Este construtor inicializa o <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> propriedade como uma cadeia de caracteres vazia ("").</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%29&gt;</ph> constructor, then adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%29&gt;</ph> construtor, em seguida, adiciona-o para o <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The example writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, then writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo grava duas mensagens isso <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, em seguida, grava uma mensagem a todos os <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objetos no <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">Finalmente, ele libera e fecha o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
          <source>The file is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O arquivo é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> that represents the stream the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> que representa o fluxo no qual o <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> é gravado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The name of the new instance.</source>
          <target state="translated">O nome da nova instância.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with the specified name, using the stream as the recipient of the debugging and tracing output.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> com o nome especificado, usando o fluxo como o destinatário da saída de depuração e rastreamento.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to the <ph id="ph2">`name`</ph> parameter or to an empty string (""), if the <ph id="ph3">`name`</ph> parameter is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Este construtor inicializa o <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> propriedade para o <ph id="ph2">`name`</ph> parâmetro ou uma cadeia de caracteres vazia (""), se o <ph id="ph3">`name`</ph> parâmetro é <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%2CSystem.String%29&gt;</ph> constructor and adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.Stream%2CSystem.String%29&gt;</ph> construtor e adiciona-o para o <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The example then writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> and writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo, em seguida, grava duas mensagens isso <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> e grava uma mensagem a todos os <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objetos no <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">Finalmente, ele libera e fecha o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
          <source>The stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O fluxo é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that receives the output from the <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> que recebe a saída do <ph id="ph2">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The name of the new instance.</source>
          <target state="translated">O nome da nova instância.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with the specified name, using the specified writer as recipient of the tracing or debugging output.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> com o nome especificado, usando o gravador especificado como o destinatário da saída de rastreamento ou depuração.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%2CSystem.String%29&gt;</ph> constructor.</source>
          <target state="translated">O exemplo de código a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.IO.TextWriter%2CSystem.String%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, then references the <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> when it creates the <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, which it then adds to the <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo cria um <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, depois referencia o <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> quando ele cria o <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, que, em seguida, ele adiciona ao <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The example writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, then writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo grava duas mensagens isso <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, em seguida, grava uma mensagem a todos os <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objetos no <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">Finalmente, ele libera e fecha o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
          <source>The writer is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O gravador está <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The name of the file the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> writes to.</source>
          <target state="translated">O nome do arquivo no qual o <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> é gravado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The name of the new instance.</source>
          <target state="translated">O nome da nova instância.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> class with the specified name, using the file as the recipient of the debugging and tracing output.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> com o nome especificado, usando o arquivo como o destinatário da saída de depuração e de rastreamento.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property to the <ph id="ph2">`name`</ph> parameter or to an empty string (""), if the <ph id="ph3">`name`</ph> parameter is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Este construtor inicializa o <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> propriedade para o <ph id="ph2">`name`</ph> parâmetro ou uma cadeia de caracteres vazia (""), se o <ph id="ph3">`name`</ph> parâmetro é <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%2CSystem.String%29&gt;</ph> constructor, then adds it to the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.%23ctor%28System.String%2CSystem.String%29&gt;</ph> construtor, em seguida, adiciona-o para o <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The example writes two messages to this <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, then writes a message to all <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objects in the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</source>
          <target state="translated">O exemplo grava duas mensagens isso <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>, em seguida, grava uma mensagem a todos os <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> objetos no <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>Finally, it flushes and closes the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
          <target state="translated">Finalmente, ele libera e fecha o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
          <source>The stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O fluxo é <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>Closes the <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> so that it no longer receives tracing or debugging output.</source>
          <target state="translated">Fecha o <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> para que ele não receba mais a saída de rastreamento ou de depuração.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>Calling a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.WriteLine%2A&gt;</ph> method after calling <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> automatically reopens the stream.</source>
          <target state="translated">Chamando um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Write%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener.WriteLine%2A&gt;</ph> método depois de chamar <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> o fluxo é reaberto automaticamente.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myTextListener`</ph>, which uses a <ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph> called <ph id="ph4">`myOutputWriter`</ph> to write to a file named <ph id="ph5">`TestFile.txt`</ph>.</source>
          <target state="translated">O exemplo a seguir implementa um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> chamado <ph id="ph2">`myTextListener`</ph>, que usa um <ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph> chamado <ph id="ph4">`myOutputWriter`</ph> para gravar um arquivo chamado <ph id="ph5">`TestFile.txt`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Close">
          <source>The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the stream.</source>
          <target state="translated">O exemplo cria o gravador de arquivo, o fluxo e o texto, grava uma linha de texto para o arquivo e, em seguida, libera e fecha o fluxo.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release managed resources; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)" /&gt;</ph> has no effect.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar recursos gerenciados; se <ph id="ph2">&lt;see langword="false" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)" /&gt;</ph> não terá nenhum efeito.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
          <source>Disposes this <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph> object.</source>
          <target state="translated">Descarta este objeto <ph id="ph1">&lt;see cref="T:System.Diagnostics.TextWriterTraceListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> class to release the managed resources of a <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> object.</source>
          <target state="translated">Use o <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> método o <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> classe para liberar os recursos gerenciados de um <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Flush">
          <source>Flushes the output buffer for the <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph>.</source>
          <target state="translated">Libera o buffer de saída para o <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Flush">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myTextListener`</ph>, which uses a <ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph> called <ph id="ph4">`myOutputWriter`</ph> to write to a file named <ph id="ph5">`TestFile.txt`</ph>.</source>
          <target state="translated">O exemplo a seguir implementa um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> chamado <ph id="ph2">`myTextListener`</ph>, que usa um <ph id="ph3">&lt;xref:System.IO.StreamWriter&gt;</ph> chamado <ph id="ph4">`myOutputWriter`</ph> para gravar um arquivo chamado <ph id="ph5">`TestFile.txt`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Flush">
          <source>The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the stream.</source>
          <target state="translated">O exemplo cria o gravador de arquivo, o fluxo e o texto, grava uma linha de texto para o arquivo e, em seguida, libera e fecha o fluxo.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>A message to write.</source>
          <target state="translated">Uma mensagem a ser gravada.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>Writes a message to this instance's <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph>.</source>
          <target state="translated">Grava uma mensagem no <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> desta instância.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myWriter`</ph> to write to the console screen.</source>
          <target state="translated">O exemplo a seguir implementa um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> chamado <ph id="ph2">`myWriter`</ph> para gravar a tela do console.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>The example writes two lines to the console screen.</source>
          <target state="translated">O exemplo grava duas linhas para a tela do console.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>Note the second write appears on the same line as the first write.</source>
          <target state="translated">Observe que a segunda gravação aparece na mesma linha como a primeira gravação.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
          <source>The example then flushes and closes the stream.</source>
          <target state="translated">O exemplo, em seguida, libera e fecha o fluxo.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>A message to write.</source>
          <target state="translated">Uma mensagem a ser gravada.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>Writes a message to this instance's <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> followed by a line terminator.</source>
          <target state="translated">Grava uma mensagem no <ph id="ph1">&lt;see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /&gt;</ph> desta instância seguido por um terminador de linha.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The default line terminator is a carriage return followed by a line feed (\r\n).</source>
          <target state="translated">O terminador de linha padrão é um retorno de carro seguido por uma alimentação de linha (\r\n).</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The following example implements a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> named <ph id="ph2">`myWriter`</ph> to write to the console screen.</source>
          <target state="translated">O exemplo a seguir implementa um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> chamado <ph id="ph2">`myWriter`</ph> para gravar a tela do console.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The example writes two lines to the console screen.</source>
          <target state="translated">O exemplo grava duas linhas para a tela do console.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>Note the second write appears on the same line as the first write.</source>
          <target state="translated">Observe que a segunda gravação aparece na mesma linha como a primeira gravação.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
          <source>The example then flushes and closes the stream.</source>
          <target state="translated">O exemplo, em seguida, libera e fecha o fluxo.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>Gets or sets the text writer that receives the tracing or debugging output.</source>
          <target state="translated">Obtém ou define o text writer que recebe a saída do rastreamento ou da depuração.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that represents the writer that receives the tracing or debugging output.</source>
          <target state="translated">Um <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> que representa o gravador que recebe a saída do rastreamento ou da depuração.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> that writes to the console screen.</source>
          <target state="translated">O exemplo a seguir cria um <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> que grava a tela do console.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.TextWriterTraceListener.Writer">
          <source>Then the code adds the new trace listener to the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> in the trace class.</source>
          <target state="translated">Em seguida, o código adiciona o novo ouvinte de rastreamento para o <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> na classe de rastreamento.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>