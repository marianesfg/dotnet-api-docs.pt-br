<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="947a1f9fa7d052610f5006e95373c72b4f3aae6c" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52231194" /></Metadata><TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Direciona a saída de rastreamento ou de depuração como dados codificados em XML para um <see cref="T:System.IO.TextWriter" /> ou <see cref="T:System.IO.Stream" />, como um <see cref="T:System.IO.FileStream" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Você deve ter permissão de código para criar uma instância de unmanaged o <xref:System.Diagnostics.XmlWriterTraceListener> classe.  
  
 O <xref:System.Diagnostics.XmlWriterTraceListener> classe converte a rastreamento e depuração de informações em um fluxo de texto codificado em XML. A descrição da saída XML é mostrada nas tabelas a seguir. Você pode usar o [ferramenta de Visualizador de rastreamento de serviço (SvcTraceViewer.exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129) exibir o XML de saída.  
  
 Você pode habilitar ou desabilitar um <xref:System.Diagnostics.XmlWriterTraceListener> por meio do arquivo de configuração de aplicativo e, em seguida, use o configurado <xref:System.Diagnostics.XmlWriterTraceListener> em seu aplicativo. Como alternativa, você pode criar um <xref:System.Diagnostics.XmlWriterTraceListener> em seu código.  
  
 Para configurar um <xref:System.Diagnostics.XmlWriterTraceListener>, edite o arquivo de configuração que corresponde ao nome do seu aplicativo. Nesse arquivo, você pode adicionar ou remover um ouvinte, definir as propriedades de um ouvinte ou remover ouvintes. O arquivo de configuração deve ser formatado como o exemplo a seguir.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 O <xref:System.Diagnostics.XmlWriterTraceListener> classe herda a <xref:System.Diagnostics.TraceListener.Filter%2A> propriedade da classe base <xref:System.Diagnostics.TraceListener>.  O <xref:System.Diagnostics.TraceListener.Filter%2A> propriedade permite que um nível adicional de filtragem no ouvinte a saída de rastreamento.  Se não houver um filtro estiver presente, o `Trace` métodos da chamada de ouvinte de rastreamento a <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> método do filtro para determinar se deve emitir o rastreamento.  
  
> [!NOTE]
>  Se for feita uma tentativa de gravar em um arquivo que está em uso ou indisponível, o nome do arquivo automaticamente é prefixado por um GUID.  
  
> [!NOTE]
>  Métodos de ouvinte são destinados a ser chamado pelos métodos das <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classes.  Os métodos de ouvinte não se destinam a ser chamado diretamente no código do aplicativo. O <xref:System.Diagnostics.XmlWriterTraceListener> ouvinte é usado principalmente para uso pelo <xref:System.Diagnostics.TraceSource> classe. O <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> e <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A> métodos podem ser chamados <xref:System.Diagnostics.Trace> e <xref:System.Diagnostics.Debug> classes e os valores padrão são fornecidos para os elementos XML que <xref:System.Diagnostics.Trace> e <xref:System.Diagnostics.Debug> não fornecer valores para.  
  
 A tabela a seguir descreve os elementos e atributos da saída XML.  
  
|Elemento|Atributos|Saída|Observações|  
|-------------|----------------|------------|-----------|  
|`CallStack`|Nenhum|Depende da presença do <xref:System.Diagnostics.TraceOptions.Callstack> sinalizador no <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriedade.|Caracteres especiais, como > ou < são substituídos por sequências de escape. Consulte a tabela de conversão de escape de caractere que segue.|  
|`Computer`|Nenhum|Sempre presente.|O valor da propriedade <xref:System.Environment.MachineName%2A>.|  
|`Correlation`|`ActivityID`|Sempre presente|Se não for especificado, o padrão é um GUID vazio.|  
||`RelatedActivityID`|Depende da presença do `relatedActivityId` parâmetro na chamada do método de rastreamento.|O parâmetro `relatedActivityId` do método <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>.|  
|`DataItem`|Nenhum|Depende de `data` parâmetro do <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método.|Esse elemento pode conter uma matriz de elementos ou um elemento, portanto, os valores são gravados como um conjunto de `DataItem` os nós sob o `TraceData` elemento.<br /><br /> Os dados de saída usa o `ToString` método dos objetos de dados no passado.|  
|`EventID`|Nenhum|Sempre presente.|Entrada de parâmetro (`id`).|  
|`Execution`|`ProcessName`|Sempre presente.|Do <xref:System.Diagnostics.TraceEventCache>.|  
||`ProcessID`|Sempre presente.|Do <xref:System.Diagnostics.TraceEventCache>. No Windows 98 e Windows Me, sistemas operacionais, se `ProcessID` é maior que 2.147.483.647 é uma representação positiva de um número negativo e devem ser convertida para obter o identificador de processo correto.|  
||`ThreadID`|Sempre presente.|Do <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|Nenhum|Sempre presente.|Entrada de parâmetro (o valor numérico de `eventType`). Valores de parâmetro maiores que 255 são a saída como 255.|  
|`LogicalOperationStack`|Nenhum|Depende da presença do <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> sinalizador no <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriedade.|Pode haver mais de uma operação lógica, portanto, os valores são gravados como `LogicalOperation` os nós sob o `LogicalOperationStack` elemento.|  
|`Message`|Nenhum|Depende da presença de uma mensagem na chamada do método de rastreamento.|Esse elemento é uma mensagem formatada se argumentos de formatação são fornecidos.|  
|`Source`|`Name`|Sempre presente.|Parâmetro de entrada.|  
|`SubType`|`Name`|Sempre presente.|Parâmetro de entrada.|  
|`TimeCreated`|`SystemTime`|Sempre presente.|Se não estiver presente no <xref:System.Diagnostics.TraceEventCache>, o padrão é a hora atual.|  
|`TimeStamp`|Nenhum|Depende da presença do <xref:System.Diagnostics.TraceOptions.Timestamp> sinalizador no <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriedade.|Do <xref:System.Diagnostics.TraceEventCache>.|  
|`Type`|Nenhum|Sempre presente.|Sempre o valor 3.|  
  
 A tabela a seguir mostra os caracteres de escape na saída XML. Escape ocorre em todos os elementos e atributos, com exceção do `DataItem` elemento, que não é ignorado se o objeto passado para o `data` parâmetro do <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método é um <xref:System.Xml.XPath.XPathNavigator> objeto. Se um <xref:System.Xml.XPath.XPathNavigator> é usado para o objeto de dados, o <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> é chamado de método e o nó raiz inteira é rastreado como dados sem escape.  
  
|Caractere com escape|Valor|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 O exemplo de código a seguir mostra o uso da <xref:System.Diagnostics.XmlWriterTraceListener> classe para gravar dados de escape e sem escape aos arquivos de log.  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Um <see cref="T:System.IO.Stream" /> que representa o fluxo no qual o ouvinte de rastreamento grava.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" />, usando o fluxo especificado como o destinatário da saída de depuração e de rastreamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.TraceListener.Name%2A> propriedade é inicializada para uma cadeia de caracteres vazia ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Um <see cref="T:System.IO.TextWriter" /> que recebe a saída do ouvinte de rastreamento.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> usando o gravador especificado como o destinatário da saída de depuração e de rastreamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.TraceListener.Name%2A> propriedade é inicializada para uma cadeia de caracteres vazia ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">O nome do arquivo no qual gravar.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> usando o arquivo especificado como o destinatário da saída de depuração e de rastreamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor inicializa uma nova instância dos <xref:System.IO.StreamWriter> classe para o arquivo especificado no caminho especificado, usando <xref:System.Text.Encoding.UTF8%2A> codificação. Se o arquivo existir, ele é acrescentado à. Se o arquivo não existir, um novo arquivo é criado.  
  
> [!NOTE]
>  Para reduzir a chance de uma exceção, qualquer caractere que pode invalidar a saída será substituído por um "?" caracteres.  
  
 O <xref:System.Diagnostics.TraceListener.Name%2A> propriedade é inicializada para uma cadeia de caracteres vazia ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Um <see cref="T:System.IO.Stream" /> que representa o fluxo no qual o ouvinte de rastreamento grava.</param>
        <param name="name">O nome da nova instância.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> com o nome especificado, usando o fluxo especificado como o destinatário da saída de depuração e de rastreamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor inicializa o <xref:System.Diagnostics.TraceListener.Name%2A> propriedade para o `name` o valor do parâmetro ou uma cadeia de caracteres vazia ("") se o `name` parâmetro é `null`. O nome pode ser usado como um índice no <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> coleção para alterar as propriedades de forma programática para o ouvinte. Por exemplo, o seguinte código define a <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriedade para uma instância do <xref:System.Diagnostics.XmlWriterTraceListener> cuja <xref:System.Diagnostics.TraceListener.Name%2A> propriedade é "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Um <see cref="T:System.IO.TextWriter" /> que recebe a saída do ouvinte de rastreamento.</param>
        <param name="name">O nome da nova instância.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> com o nome especificado, usando o gravador especificado como o destinatário da saída de depuração e de rastreamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor inicializa o <xref:System.Diagnostics.TraceListener.Name%2A> propriedade para o `name` o valor do parâmetro ou uma cadeia de caracteres vazia ("") se o `name` parâmetro é `null`. O nome pode ser usado como um índice no <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> coleção para alterar as propriedades de forma programática para o ouvinte. Por exemplo, o seguinte código define a <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriedade para uma instância do <xref:System.Diagnostics.XmlWriterTraceListener> cuja <xref:System.Diagnostics.TraceListener.Name%2A> propriedade é "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">O nome do arquivo no qual gravar.</param>
        <param name="name">O nome da nova instância.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> com o nome especificado, usando o arquivo especificado como o destinatário da saída de depuração e de rastreamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor inicializa uma nova instância dos <xref:System.IO.StreamWriter> classe para o arquivo especificado no caminho especificado, usando <xref:System.Text.Encoding.UTF8%2A> codificação. Se o arquivo existir, ele é acrescentado à. Se o arquivo não existir, um novo arquivo é criado.  
  
> [!NOTE]
>  Para reduzir a chance de uma exceção, qualquer caractere que pode invalidar a saída será substituído por um "?" caracteres.  
  
 O <xref:System.Diagnostics.TraceListener.Name%2A> estiver definida como o `name` o valor do parâmetro ou uma cadeia de caracteres vazia ("") se o `name` parâmetro é `null`. O nome pode ser usado como um índice no <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> coleção para alterar as propriedades de forma programática para o ouvinte. Por exemplo, o seguinte código define a <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriedade para uma instância do <xref:System.Diagnostics.XmlWriterTraceListener> cuja <xref:System.Diagnostics.TraceListener.Name%2A> propriedade é "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha o <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> deste ouvinte para que ele não receba mais a saída de rastreamento ou de depuração.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">A mensagem de erro a ser gravada.</param>
        <param name="detailMessage">A mensagem de erro detalhada a ser acrescentada à mensagem de erro.</param>
        <summary>Grava informações de rastreamento, incluindo uma mensagem de erro e uma mensagem de erro detalhada no arquivo ou no fluxo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O comportamento padrão é exibir a mensagem e a mensagem detalhada em uma caixa de mensagem quando o aplicativo está em execução no modo de interface do usuário e para o <xref:System.Diagnostics.TraceListener> instâncias no <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> coleção. Por padrão, a coleção contém uma instância de <xref:System.Diagnostics.DefaultTraceListener>. Você pode personalizar esse comportamento adicionando ou removendo um <xref:System.Diagnostics.TraceListener> da coleção.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava dados de rastreamento no arquivo ou no fluxo de saída.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Um <see cref="T:System.Diagnostics.TraceEventCache" /> que contém as informações atuais de ID de processo, ID de thread e rastreamento de pilha.</param>
        <param name="source">O nome de origem.</param>
        <param name="eventType">Um dos valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Um identificador numérico do evento.</param>
        <param name="data">Um objeto de dados a ser emitido.</param>
        <summary>Grava as informações de rastreamento, um objeto de dados e informações de evento no fluxo ou no arquivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `eventCache`, `source`, `eventType`, e `id` parâmetros são usados no cabeçalho e rodapé do rastreamento. O `id` parâmetro é convertido em um inteiro sem sinal antes de gravar, portanto, um negativo `id` valor é escrito como um grande número inteiro positivo. O `data` parâmetro é escrito como um `DataItem` nó no `TraceData` elemento. O `ToString` método do objeto de dados é usado para converter o objeto para uma cadeia de caracteres.  
  
> [!IMPORTANT]
>  Esse método não se destina a ser chamado diretamente pelo código do aplicativo.  Ele é chamado pelos métodos das <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classes para gravar dados de rastreamento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Um <see cref="T:System.Diagnostics.TraceEventCache" /> que contém as informações atuais de ID de processo, ID de thread e rastreamento de pilha.</param>
        <param name="source">O nome de origem.</param>
        <param name="eventType">Um dos valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Um identificador numérico do evento.</param>
        <param name="data">Uma matriz de objetos de dados a ser emitida.</param>
        <summary>Grava informações de rastreamento, objetos de dados e informações de evento no arquivo ou no fluxo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `eventCache`, `source`, `eventType`, e `id` parâmetros são usados no cabeçalho e rodapé do rastreamento. O `id` parâmetro é convertido em um inteiro sem sinal antes de gravar, portanto, um negativo `id` valor é escrito como um grande número inteiro positivo. Os objetos na `data` matriz de parâmetros são gravados como `DataItem` nós no `TraceData` elemento. O `ToString` método de cada objeto de dados é usado para converter o objeto para uma cadeia de caracteres.  
  
> [!IMPORTANT]
>  Esse método não se destina a ser chamado diretamente pelo código do aplicativo.  Ele é chamado pelos métodos das <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classes para gravar dados de rastreamento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Grava informações de rastreamento de evento no arquivo ou no fluxo de saída.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Um <see cref="T:System.Diagnostics.TraceEventCache" /> que contém as informações atuais de ID de processo, ID de thread e rastreamento de pilha.</param>
        <param name="source">O nome de origem.</param>
        <param name="eventType">Um dos valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Um identificador numérico do evento.</param>
        <param name="message">A mensagem a ser gravada.</param>
        <summary>Grava informações de rastreamento, uma mensagem e informações de evento no fluxo ou no arquivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `eventCache`, `source`, `eventType`, e `id` parâmetros são usados no cabeçalho e rodapé do rastreamento. O `id` parâmetro é convertido em um inteiro sem sinal antes de gravar, portanto, um negativo `id` valor é escrito como um grande número inteiro positivo. O `message` parâmetro é escrito como o `Message` elemento.  
  
> [!IMPORTANT]
>  Esse método não se destina a ser chamado diretamente pelo código do aplicativo.  Ele é chamado pelos métodos das <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classes para gravar dados de rastreamento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Um <see cref="T:System.Diagnostics.TraceEventCache" /> que contém as informações atuais de ID de processo, ID de thread e rastreamento de pilha.</param>
        <param name="source">O nome de origem.</param>
        <param name="eventType">Um dos valores de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Um identificador numérico do evento.</param>
        <param name="format">Uma cadeia de caracteres de formato que contém zero ou mais itens de formato, que correspondem aos objetos na matriz <paramref name="args" />.</param>
        <param name="args">Uma matriz de objeto que contém zero ou mais objetos a serem formatados.</param>
        <summary>Grava informações de rastreamento, uma mensagem formatada e informações de evento no fluxo ou no arquivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `eventCache`, `source`, `eventType`, e `id` parâmetros são usados no cabeçalho e rodapé do rastreamento. O `id` parâmetro é convertido em um inteiro sem sinal antes de gravar, portanto, um negativo `id` valor é escrito como um grande número inteiro positivo. O <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método é chamado, passando a `format` cadeia de caracteres e `args` matriz como parâmetros, para formatar o `args` matriz de objetos, como o `Message` elemento.  
  
> [!IMPORTANT]
>  Esse método não se destina a ser chamado diretamente pelo código do aplicativo.  Ele é chamado pelos métodos das <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classes para gravar dados de rastreamento.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">Um <see cref="T:System.Diagnostics.TraceEventCache" /> que contém as informações atuais de ID de processo, ID de thread e rastreamento de pilha.</param>
        <param name="source">O nome de origem.</param>
        <param name="id">Um identificador numérico do evento.</param>
        <param name="message">Uma mensagem de rastreamento a ser gravada.</param>
        <param name="relatedActivityId">Uma estrutura <see cref="T:System.Guid" /> que identifica uma atividade relacionada.</param>
        <summary>Grava informações de rastreamento, incluindo a identidade de uma atividade relacionada, uma mensagem e informações de evento no arquivo ou no fluxo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> método é usado para a correlação de rastreamentos relacionados. O `eventCache`, `source`, `id`, e `relatedActivityId` parâmetros são usados no cabeçalho e rodapé do rastreamento. O `id` parâmetro é convertido em um inteiro sem sinal antes de gravar, portanto, um negativo `id` valor é escrito como um grande número inteiro positivo. O `message` parâmetro é escrito como o `Message` elemento. O <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> método é chamado para converter o `relatedActivityId`valor para um "B" formatado de cadeia de caracteres que é exibido no cabeçalho. O `SubTypeName` elemento no rodapé identifica o tipo de evento de rastreamento como um <xref:System.Diagnostics.TraceEventType.Transfer>.  
  
> [!IMPORTANT]
>  O <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> método não se destina a ser chamado pelo código do aplicativo.  Ele se destina a ser chamado por um <xref:System.Diagnostics.TraceSource> objeto para emitir as informações de rastreamento para seu <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> método.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">A mensagem a ser gravada.</param>
        <summary>Grava uma mensagem textual sem nenhuma informação de contexto adicional no arquivo ou no fluxo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método para incluir informações de contexto na saída do log.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">A mensagem a ser gravada.</param>
        <summary>Grava uma mensagem textual sem nenhuma informação de contexto adicional seguida pelo terminador de linha atual no arquivo ou no fluxo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> método para incluir informações de contexto na saída do log.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para a capacidade de chamar código não gerenciado. Enumeração associada: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>