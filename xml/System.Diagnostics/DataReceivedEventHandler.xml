<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b72e96be77b3f18942ac9258ea5a047960ff7583" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30396560" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">A fonte do evento.</param>
    <param name="e">Um <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> que contém os dados do evento.</param>
    <summary>Representa o método que manipulará o evento <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> ou <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> de um <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você cria um <xref:System.Diagnostics.DataReceivedEventHandler> delegado, você identificar o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante. Para obter mais informações sobre delegados de manipulador de eventos, consulte [tratamento e gerando eventos](~/docs/standard/events/index.md).  
  
 De forma assíncrona coletar o redirecionamento <xref:System.Diagnostics.Process.StandardOutput%2A> ou <xref:System.Diagnostics.Process.StandardError%2A> fluxo de saída de um processo, adicione o manipulador de eventos para o <xref:System.Diagnostics.Process.OutputDataReceived> ou <xref:System.Diagnostics.Process.ErrorDataReceived> eventos. Esses eventos são gerados sempre que o processo grava uma linha para o fluxo redirecionado correspondente. Quando o fluxo redirecionado é fechado, uma linha nulo é enviada ao manipulador de eventos. Certifique-se de que o manipulador de eventos procura por esta condição antes de acessar o <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> propriedade. Por exemplo, você pode usar o `static` método <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> para validar o <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> propriedade em seu manipulador de eventos.  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra como executar operações de leitura assíncronas no redirecionamento <xref:System.Diagnostics.Process.StandardOutput%2A> fluxo do **classificação** comando. O **classificação** comando é um aplicativo de console que lê e classifica a entrada de texto.  
  
 O exemplo cria um <xref:System.Diagnostics.DataReceivedEventHandler> delegar o `SortOutputHandler` manipulador de eventos e associa o delegado com o <xref:System.Diagnostics.Process.OutputDataReceived> evento. O manipulador de eventos recebe linhas de texto do redirecionamento <xref:System.Diagnostics.Process.StandardOutput%2A> fluxo, formata o texto e escreve o texto na tela.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>