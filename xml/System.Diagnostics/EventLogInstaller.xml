<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88596074c0bd24dd3f2dd67de13860ad50ec959d" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63887916" /></Metadata><TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type EventLogInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permite instalar e configurar um log de eventos que o aplicativo lê ou no qual faz gravações quando está em execução.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.EventLogInstaller> é usado pelas [Installutil.exe (ferramenta de instalação)](~/docs/framework/tools/installutil-exe-installer-tool.md) durante a instalação de um log de eventos. O <xref:System.Diagnostics.EventLogInstaller> classe pode instalar os logs de eventos somente no computador local.  
  
 Use o <xref:System.Diagnostics.EventLogInstaller> classe quando seu aplicativo grava um log de eventos; não é necessário usar um instalador de log de eventos para seu aplicativo para ler de um log de eventos. Aplicativos e serviços devem gravar no log do aplicativo ou um log personalizado. Drivers de dispositivo devem gravar no log do sistema.  
  
> [!NOTE]
>  O log de segurança é somente leitura.  
  
 O instalador cria a origem do evento que você especificar na <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade e registra-o para o log de eventos especificado em <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade. Esse comportamento é semelhante a chamar <xref:System.Diagnostics.EventLog.CreateEventSource%2A> sobre o <xref:System.Diagnostics.EventLog> componente.  
  
 Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> métodos para gravar eventos em um log de eventos. Você deve especificar uma origem de evento para gravar eventos; Você deve criar e configurar a origem do evento antes de gravar a primeira entrada com o código-fonte.  
  
 Crie a nova fonte de evento durante a instalação do seu aplicativo. Isso permite que o tempo para o sistema operacional atualizar sua lista de fontes de eventos registrados e suas configurações. Se o sistema operacional não foi atualizado para a sua lista de fontes de eventos, e você tentar gravar um evento com a nova fonte, que haverá falha na operação de gravação. Você pode configurar uma nova fonte usando um <xref:System.Diagnostics.EventLogInstaller>, ou usando o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método. Você deve ter direitos administrativos no computador para criar uma nova fonte de evento.  
  
 Você pode criar uma fonte de evento para um log de eventos existente ou um novo log de eventos. Quando você cria uma nova origem para um novo log de eventos, o sistema registra a origem para que o log, mas o log não é criado até que a primeira entrada seja gravada nele.  
  
 Para instalar um log de eventos, crie uma classe de instalador de projeto que herda de <xref:System.Configuration.Install.Installer>e defina o <xref:System.ComponentModel.RunInstallerAttribute> a classe `true`. Dentro de seu projeto, crie um <xref:System.Diagnostics.EventLogInstaller> para cada log de eventos que seu aplicativo gravar e adicionar a instância à sua classe de instalador de projeto.  
  
 Quando o [Installutil.exe (ferramenta de instalação)](~/docs/framework/tools/installutil-exe-installer-tool.md) é chamado, ele examina o <xref:System.ComponentModel.RunInstallerAttribute>. Se ele estiver `true`, a ferramenta instala todos os itens a <xref:System.Configuration.Install.Installer.Installers%2A> coleta que estão associados com o instalador de seu projeto. Se <xref:System.ComponentModel.RunInstallerAttribute> é `false`, a ferramenta ignora o instalador de projeto.  
  
 Você modificar outras propriedades de um <xref:System.Diagnostics.EventLogInstaller> antes ou depois de adicionar a instância para o <xref:System.Configuration.Install.Installer.Installers%2A> coleção de instalador de seu projeto, mas antes que a ferramenta instalador é executado. Você deve definir o <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade se seu aplicativo será gravado no log de eventos.  
  
 Use <xref:System.Diagnostics.EventLogInstaller> para registrar uma nova origem para um log de eventos novo ou existente; não use <xref:System.Diagnostics.EventLogInstaller> para alterar uma fonte existente. O <xref:System.Diagnostics.EventLogInstaller> classe não modifica as propriedades de configuração de uma fonte existente para corresponder as propriedades de instalação especificado. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método lança uma exceção se o <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que está registrado para outro log de eventos no computador. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método não registrar a fonte se a <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que já está registrado para o mesmo log de eventos especificado no <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade.  
  
 Você pode registrar a origem do evento com arquivos de recursos localizados para suas cadeias de caracteres de categoria e mensagem de evento. Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recurso, em vez de especificar a cadeia de caracteres real. O Visualizador de eventos usa o identificador de recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso localizada com base nas configurações de idioma atual. Você pode registrar um arquivo separado para categorias de evento, mensagens e cadeias de caracteres de inserção de parâmetro, ou você pode registrar o mesmo arquivo de recurso para todos os três tipos de cadeias de caracteres. Use o <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> propriedades para configurar a fonte para gravar entradas localizadas para o log de eventos. Se seu aplicativo grava os valores de cadeias de caracteres diretamente ao log de eventos, você precisa definir essas propriedades.  
  
 A origem deve ser configurada para gravar entradas localizadas ou para gravação de cadeias de caracteres diretas. Se seu aplicativo grava entradas usando os valores de cadeia de caracteres e identificadores de recurso, você deve registrar duas fontes separadas. Por exemplo, configure uma fonte com arquivos de recurso e, em seguida, usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar entradas usando identificadores de recurso para o log de eventos. Criar uma fonte diferente sem arquivos de recurso e, em seguida, usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEntry%2A> método escrever cadeias de caracteres diretamente ao log de eventos usando essa fonte.  
  
 Normalmente, você não chama os métodos do <xref:System.Diagnostics.EventLogInstaller> de classe de dentro de seu código; eles geralmente são chamados apenas por Installutil.exe. A ferramenta chama automaticamente o <xref:System.Diagnostics.EventLogInstaller.Install%2A> método durante o processo de instalação. Ele desfaz falhas, se necessário, chamando o <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método para o objeto que gerou a exceção.  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de instalação para uma nova origem do evento. O exemplo de código define o nome de origem e o nome do log de eventos e adiciona o <xref:System.Diagnostics.EventLogInstaller> para o <xref:System.Configuration.Install.Installer.Installers%2A> coleção.  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
    <related type="Article" href="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe (Ferramenta de Instalação)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.EventLogInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o número de categorias no arquivo de recurso da categoria.</summary>
        <value>O número de categorias no arquivo de recurso da categoria. O valor padrão é zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriedades para gravar eventos com localizadas cadeias de caracteres da categoria. O Visualizador de eventos exibe a categoria de uma entrada de evento, se você fornecer uma categoria ao gravar o evento. Categorias de log de eventos são cadeias de caracteres definida pelo aplicativo que ajudam a filtrar eventos ou fornecem informações sobre um evento. Por exemplo, seu aplicativo pode definir categorias separadas para operações diferentes ou componentes diferentes.  
  
 Categorias de evento são opcionais. Se seu aplicativo não usar categorias, não defina a <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriedades.  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de instalação para uma nova origem do evento. O exemplo de código define o nome de origem do evento, o nome de log de eventos e o arquivo de recurso para o texto do evento localizada.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o caminho do arquivo de recurso que contém cadeias de caracteres da categoria para a origem.</summary>
        <value>O caminho do arquivo de recurso da categoria. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriedades para gravar eventos com localizadas cadeias de caracteres da categoria. O Visualizador de eventos exibe a categoria de uma entrada de evento, se você fornecer uma categoria ao gravar o evento. Categorias de log de eventos são cadeias de caracteres definida pelo aplicativo que ajudam a filtrar eventos, ou fornecem informações sobre um evento. Por exemplo, seu aplicativo pode ter categorias separadas para operações diferentes ou componentes diferentes.  
  
 Categorias de evento são opcionais. Se seu aplicativo não usar categorias, não defina a <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriedades.  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de instalação para uma nova origem do evento. O exemplo de código define o nome de origem do evento, o nome de log de eventos e o arquivo de recurso para o texto do evento localizada.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="eventLogInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Um <see cref="T:System.ComponentModel.IComponent" /> a ser usado como um modelo para o <see cref="T:System.Diagnostics.EventLogInstaller" />.</param>
        <summary>Copia os valores de propriedade de um componente <see cref="T:System.Diagnostics.EventLog" /> que são necessários no momento da instalação para um log de eventos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O componente especificado o `component` parâmetro deve ser um <xref:System.Diagnostics.EventLog>; caso contrário, uma exceção é lançada.  
  
 Normalmente, você não chama os métodos do <xref:System.Diagnostics.EventLogInstaller> de dentro de seu código; eles geralmente são chamados apenas pelo [Installutil.exe (ferramenta de instalação)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> é usado pelo Installutil.exe para definir os valores de propriedade para o <xref:System.Diagnostics.EventLogInstaller> para os valores de existente <xref:System.Diagnostics.EventLog>.  
  
 Se o <xref:System.Diagnostics.EventLog.Log%2A> do <xref:System.Diagnostics.EventLog> que é passado é uma cadeia de caracteres vazia (""), você deve definir o <xref:System.Diagnostics.EventLog.Log%2A> propriedade para um valor válido antes de executa o instalador.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O componente especificado não é um <see cref="T:System.Diagnostics.EventLog" />.  
  
- ou - 
A propriedade <see cref="P:System.Diagnostics.EventLog.Log" /> ou <see cref="P:System.Diagnostics.EventLog.Source" /> do componente especificado está <see langword="null" /> ou vazio.</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Um <see cref="T:System.Collections.IDictionary" /> usado para salvar as informações necessárias para realizar uma operação de reversão ou desinstalação.</param>
        <summary>Executa a instalação e grava as informações de log de eventos no registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método grava informações de log de eventos no registro e associa o log de eventos com um log que é especificado pelo <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade. Se o log ainda não existir (e uma fonte for especificada), <xref:System.Diagnostics.EventLogInstaller.Install%2A> cria um log e associa a nova fonte ela.  
  
 Normalmente, você não chama os métodos do <xref:System.Diagnostics.EventLogInstaller> de dentro de seu código; eles geralmente são chamados apenas pelo [Installutil.exe (ferramenta de instalação)](~/docs/framework/tools/installutil-exe-installer-tool.md). A ferramenta chama automaticamente o <xref:System.Diagnostics.EventLogInstaller.Install%2A> método durante o processo de instalação para gravar informações de registro que está associadas com o log de eventos que está sendo instalado. Instalação é transacional, portanto, se houver uma falha de qualquer componente de projeto de instalação durante a instalação, todos os componentes instalados anteriormente são imediatamente revertidos para seus estados de pré-instalação. Isso é feito chamando-se cada componente <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método.  
  
 Use <xref:System.Diagnostics.EventLogInstaller> para registrar uma nova origem para um log de eventos novo ou existente; não use <xref:System.Diagnostics.EventLogInstaller> para alterar uma fonte existente. O <xref:System.Diagnostics.EventLogInstaller> classe não modifica as propriedades de configuração de uma fonte existente para corresponder as propriedades de instalação especificado. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método lança uma exceção se o <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que está registrado para outro log de eventos no computador. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método ignorar a registrar a fonte se a <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que já está registrado para o mesmo log de eventos especificado no <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade.  
  
 Rotina de instalação de um aplicativo usa o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propriedade para manter automaticamente informações sobre os componentes que já foram instalados. Essas informações de estado, que são passadas para <xref:System.Diagnostics.EventLogInstaller.Install%2A> como o `stateSaver` parâmetro, é atualizado continuamente conforme a ferramenta instala cada <xref:System.Diagnostics.EventLogInstaller>. Normalmente, não é necessário para seu código explicitamente modificar essas informações de estado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">A plataforma que o instalador está tentando usar não é do Windows NT 4.0 ou posterior.</exception>
        <exception cref="T:System.ArgumentException">O nome especificado na propriedade <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> já está registrado para outro log de eventos.</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="eventLogInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">O instalador a comparar.</param>
        <summary>Determina se um instalador e outro instalador especificado se referem à mesma origem.</summary>
        <returns><see langword="true" /> se este instalador e o instalador especificado pelo parâmetro <paramref name="otherInstaller" /> instalaria ou desinstalaria a mesma origem; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, você não chama os métodos do <xref:System.Diagnostics.EventLogInstaller> de dentro de seu código; eles geralmente são chamados apenas pela ferramenta do instalador (Installutil.exe).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome do log para o qual a origem será definida.</summary>
        <value>O nome do log. Isso pode ser Aplicativo, Sistema ou um nome de log personalizado. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade para associar a fonte que você especificar na <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade com um log existente ou um novo log no computador local. O [Installutil.exe (ferramenta de instalação)](~/docs/framework/tools/installutil-exe-installer-tool.md) usa essas informações para mapear o código-fonte para o log no registro do computador. Aplicativos e serviços devem gravar no log do aplicativo ou um log personalizado. Drivers de dispositivo devem gravar no log do sistema.  
  
 Para gravar entradas em um log de eventos, você deve criar uma fonte e registrá-lo com um log de eventos. Uma origem do evento só pode gravar um log cada vez. O instalador usará o valor da <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade para registrar seu aplicativo com o log de eventos como uma fonte válida de entradas. Se você não especificar um nome de log antes da execução do instalador, o instalador registra sua fonte para o log do aplicativo. Se você especificar uma nova fonte e um log existente, o instalador cria uma nova fonte de evento e associa-o com o log que você especificar. Se você especificar uma nova fonte e um novo log, o instalador associa a nova fonte com o novo log no registro, mas o log não é criado até que a primeira entrada seja gravada nele.  
  
 O sistema operacional armazena os logs de eventos como arquivos. Quando você usa <xref:System.Diagnostics.EventLogInstaller> ou o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método para criar um novo log de eventos, o arquivo associado é armazenado no diretório %SystemRoot%\System32\Config no computador especificado. O nome do arquivo é definido por meio do acréscimo 8 primeiros caracteres da <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade com a extensão de nome de arquivo ". evt".  
  
 Use <xref:System.Diagnostics.EventLogInstaller> para registrar uma nova origem para um log de eventos novo ou existente; não use <xref:System.Diagnostics.EventLogInstaller> para alterar uma fonte existente. O <xref:System.Diagnostics.EventLogInstaller> classe não modifica as propriedades de configuração de uma fonte existente para corresponder as propriedades de instalação especificado. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método lança uma exceção se o <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que está registrado para outro log de eventos no computador. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método não registrar a fonte se a <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que já está registrado para o mesmo log de eventos especificado no <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade.  
  
 Para obter mais informações sobre os comportamentos de fontes e os logs de eventos, consulte o <xref:System.Diagnostics.EventLog> classe documentação para o <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.Source%2A> propriedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o caminho do arquivo de recurso que contém a formatação de mensagem para a origem.</summary>
        <value>O caminho do arquivo de recurso da mensagem. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propriedade para configurar uma fonte de log de eventos para gravar mensagens de evento localizada. Mensagens de evento são cadeias de caracteres definida pelo aplicativo que descrevem o evento para o usuário.  
  
 Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recurso. Um identificador de recurso indexa uma mensagem localizada no <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. O Visualizador de eventos usa o identificador de recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso localizada com base nas configurações de idioma atual.  
  
 A origem do evento deve ser configurada para gravar entradas localizadas ou para gravação de cadeias de caracteres diretas. Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar entradas localizadas para uma fonte configurada com um arquivo de recursos de mensagem.  
  
 Se seu aplicativo grava cadeias de caracteres de mensagem de evento diretamente, em vez de usar um identificador de recurso em um arquivo de recurso localizado, não defina o <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propriedade.  
  
 Se o <xref:System.Diagnostics.EventLog.MachineName%2A> propriedade não é o identificador do computador local ("."), o .NET Framework pressupõe que o arquivo de recurso está em um computador remoto. Se o <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> o valor da propriedade contém uma letra de unidade, o arquivo de recurso é considerado na \\ \\< machinename\>\\< unidade\>compartilhamento $ (por exemplo, \\\server \c$). Se o valor contiver a cadeia de caracteres % systemroot %, o arquivo de recurso devem para estar na \\ \\< machinename\>\admin$ compartilhamento (por exemplo, \\\server\admin$).  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de instalação para uma nova origem do evento. O exemplo de código define o nome de origem do evento, o nome de log de eventos e o arquivo de recurso para o texto do evento localizada.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o caminho do arquivo de recurso que contém as cadeias de caracteres do parâmetro da mensagem para a origem.</summary>
        <value>O caminho do arquivo de recurso do parâmetro de mensagem. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> inserido de propriedade para configurar uma fonte de log de eventos para gravar mensagens de evento localizada com cadeias de caracteres do parâmetro. Cada mensagem de evento localizada especificada no <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propriedade pode conter espaços reservados para cadeias de caracteres de inserção. Esses espaços reservados são usados para especificar a posição e o identificador de recurso para uma cadeia de caracteres independente de linguagem dentro da mensagem de evento. O Visualizador de eventos substitui os espaços reservados com cadeias de caracteres correspondentes do <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> e formata a mensagem de log de eventos para a entrada de evento localizada.  
  
 Por exemplo, a seção de um arquivo de texto de mensagem a seguir define uma cadeia de caracteres com um espaço reservado de parâmetro:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 Dentro do arquivo de recurso do parâmetro, a cadeia de caracteres de inserção deve ser definida com o identificador de recurso correspondente para o espaço reservado, conforme mostrado abaixo:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 A origem do evento deve ser configurada para gravar entradas localizadas ou para gravação de cadeias de caracteres diretas. Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar entradas localizadas para uma fonte configurada com um arquivo de recursos de mensagem.  
  
 Se seu aplicativo grava cadeias de caracteres de mensagem de evento diretamente ao log de eventos, ou se sua <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> não contém mensagens com espaços reservados de inserção do parâmetro, não defina o <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> propriedade.  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de instalação para uma nova origem do evento. O exemplo de código define o nome de origem do evento, o nome de log de eventos e o arquivo de recurso para o texto do evento localizada.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro. Especificamente, a mensagem definida para o identificador de recurso 1004 usa um espaço reservado para uma cadeia de caracteres de parâmetro definida para o identificador de recurso 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Um <see cref="T:System.Collections.IDictionary" /> que contém o estado de pré-instalação do computador.</param>
        <summary>Restaura o computador para o estado em que estava antes da instalação revertendo as informações do log de eventos que o procedimento de instalação gravou no Registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método desfaz os efeitos da <xref:System.Diagnostics.EventLogInstaller.Install%2A> método. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> é chamado se a instalação de qualquer componente no projeto de instalação falhará. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método cria ou define as propriedades de um log de eventos e a origem do evento. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Exclui o log de eventos e código-fonte ou redefine as propriedades de uma fonte já existente para seus valores de pré-instalação.  
  
 Normalmente, você não chama os métodos do <xref:System.Diagnostics.EventLogInstaller> de dentro de seu código; eles geralmente são chamados apenas pelo [Installutil.exe (ferramenta de instalação)](~/docs/framework/tools/installutil-exe-installer-tool.md). As chamadas de ferramenta a <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> método, quando este ou outro componente falhou para instalar, para desfazer as alterações que já fez o processo de instalação.  
  
 Rotina de instalação de um aplicativo usa o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propriedade para manter automaticamente informações sobre os componentes que já foram instalados. Essas informações de estado, que são passadas para <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> como o `savedState` parâmetro, é atualizado continuamente desenrolar a ferramenta de fazer backup de cada <xref:System.Diagnostics.EventLogInstaller>. Normalmente, não é necessário para seu código explicitamente modificar essas informações de estado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome da origem a ser registrada com o log.</summary>
        <value>O nome a ser registrado com o log de eventos como uma fonte de entradas. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A origem do evento indica que o que registra o evento. Geralmente é o nome do aplicativo ou o nome de um componente dentro de um aplicativo grande.  
  
 O instalador usará o valor da <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade para registrar seu aplicativo com o log de eventos como uma fonte válida de entradas. Um novo nome de origem não pode corresponder a um nome de origem existente ou um nome de log de eventos existente. Cada fonte pode gravar apenas em um log de eventos ao mesmo tempo; No entanto, seu aplicativo pode usar várias fontes para gravar em vários logs de eventos. Por exemplo, seu aplicativo pode exigir várias fontes, configurados para arquivos de recurso diferente ou logs de eventos diferentes.  
  
 Aplicativos e serviços devem gravar no log do aplicativo ou um log personalizado. Drivers de dispositivo devem gravar no log do sistema. Se você não especificar um nome de log antes da execução do instalador, o instalador registra sua fonte para o log do aplicativo. Se você especificar o nome de um log que não existe, o sistema registra a <xref:System.Diagnostics.EventLogInstaller.Source%2A> nesse log, mas o log não é criado até que a primeira entrada seja gravada nele.  
  
 Use <xref:System.Diagnostics.EventLogInstaller> para registrar uma nova origem para um log de eventos novo ou existente; não use <xref:System.Diagnostics.EventLogInstaller> para alterar uma fonte existente. O <xref:System.Diagnostics.EventLogInstaller> classe não modifica as propriedades de configuração de uma fonte existente para corresponder as propriedades de instalação especificado. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método lança uma exceção se o <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que está registrado para outro log de eventos no computador. O <xref:System.Diagnostics.EventLogInstaller.Install%2A> método não registrar a fonte se a <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedade corresponde a um nome de origem que já está registrado para o mesmo log de eventos especificado no <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriedade.  
  
 Para obter mais informações sobre os comportamentos de fontes e os logs de eventos, consulte o <xref:System.Diagnostics.EventLog> classe documentação para o <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.Source%2A> propriedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Um <see cref="T:System.Collections.IDictionary" /> que contém o estado de pré-instalação do computador.</param>
        <summary>Remove uma instalação removendo as informações do log de eventos do Registro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> é o valor da propriedade `Remove`, o <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> método exclui a origem e o log associado que o instalador criado se o <xref:System.Diagnostics.EventLogInstaller.Log%2A> e <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriedades especificadas a criação de um novo log de eventos e código-fonte.  
  
 Normalmente, você não chama os métodos do <xref:System.Diagnostics.EventLogInstaller> de dentro de seu código; eles geralmente são chamados apenas pelo [Installutil.exe (ferramenta de instalação)](~/docs/framework/tools/installutil-exe-installer-tool.md) no modo de desinstalação. A ferramenta chama automaticamente o <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> método para restaurar as partes do sistema que foram afetadas pela instalação para seus estados de pré-instalação. Isso inclui excluir informações de registro que está associadas com o log de eventos que estão sendo desinstalado.  
  
 Um aplicativo desinstalar rotina usa o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propriedade para manter automaticamente informações sobre os componentes que já tenha sido desinstalado. Essas informações de estado, que são passadas para <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> como o `savedState` parâmetro, é atualizado continuamente conforme a ferramenta desinstala cada <xref:System.Diagnostics.EventLogInstaller>. Normalmente, não é necessário para seu código explicitamente modificar essas informações de estado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o <see href="https://docs.microsoft.com/dotnet/framework/tools/installutil-exe-installer-tool">Installutil.exe (Ferramenta de Instalação)</see> deve remover o log de eventos ou deixá-lo em seu estado instalado no momento da desinstalação.</summary>
        <value>Um dos <see cref="T:System.Configuration.Install.UninstallAction" /> valores que indicam qual estado para deixar o log de eventos quando o <see cref="T:System.Diagnostics.EventLog" /> é desinstalado. O padrão é <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você instala um log de eventos, você pode, opcionalmente, conectá-lo em um log existente. Se você fizer isso, você deve decidir se o log deve retornar ao estado pré-instalação ou permanecem em seu estado atual, após a instalação. Se você optar por retornar o log de eventos para o estado de pré-instalação, as alterações para as entradas de log de eventos durante a instalação não são restauradas. Você pode redefinir somente as propriedades de log de eventos que estão associadas a <xref:System.Diagnostics.EventLogInstaller> para seus valores de pré-instalação.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> contém um valor inválido. Os únicos valores válidos para essa propriedade são <see langword="Remove" /> e <see langword="NoAction" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>