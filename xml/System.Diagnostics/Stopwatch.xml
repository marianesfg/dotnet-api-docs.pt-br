<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca3ac66cc8f9855372aa92b45a2715f31c5e689c" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63887477" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um conjunto de métodos e propriedades que você pode usar para medir com precisão o tempo decorrido.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Diagnostics.Stopwatch> instância pode medir o tempo decorrido para um intervalo ou o total de tempo decorrido entre vários intervalos. Em um típico <xref:System.Diagnostics.Stopwatch> cenário, você chama o <xref:System.Diagnostics.Stopwatch.Start%2A> método, chamar, eventualmente, o <xref:System.Diagnostics.Stopwatch.Stop%2A> método e, em seguida, verificar o tempo decorrido usando o <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriedade.  
  
 Um <xref:System.Diagnostics.Stopwatch> instância está em execução ou parado; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> para determinar o estado atual de um <xref:System.Diagnostics.Stopwatch>. Use <xref:System.Diagnostics.Stopwatch.Start%2A> para começar a medir o tempo decorrido; use <xref:System.Diagnostics.Stopwatch.Stop%2A> para interromper a medição de tempo decorrido. O valor de tempo decorrido por meio das propriedades de consulta <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, ou <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Você pode consultar as propriedades de tempo decorrido, enquanto a instância está em execução ou parado. Tempo decorrido aumentarem de propriedades enquanto o <xref:System.Diagnostics.Stopwatch> está em execução; eles permanecem constantes quando a instância é interrompida.  
  
 Por padrão, o valor de tempo decorrido de um <xref:System.Diagnostics.Stopwatch> instância é igual ao total de todos os intervalos de tempo medido. Cada chamada para <xref:System.Diagnostics.Stopwatch.Start%2A> começa a contar ao tempo decorrido cumulativo; cada chamada para <xref:System.Diagnostics.Stopwatch.Stop%2A> termina a medição de intervalo atual e congela o valor de tempo cumulativo do decorrido. Use o <xref:System.Diagnostics.Stopwatch.Reset%2A> método para limpar o tempo decorrido cumulativo em existente <xref:System.Diagnostics.Stopwatch> instância.  
  
 O <xref:System.Diagnostics.Stopwatch> mede o tempo decorrido pela contagem de tiques do temporizador no mecanismo de temporizador subjacente. Se o hardware instalado e o sistema operacional dão suporte a um contador de desempenho de alta resolução, em seguida, a <xref:System.Diagnostics.Stopwatch> classe usa esse contador para medir o tempo decorrido. Caso contrário, o <xref:System.Diagnostics.Stopwatch> classe usa o timer do sistema para medir o tempo decorrido. Use o <xref:System.Diagnostics.Stopwatch.Frequency> e <xref:System.Diagnostics.Stopwatch.IsHighResolution> campos para determinar a precisão e a resolução do <xref:System.Diagnostics.Stopwatch> implementação de medição de tempo.  
  
 O <xref:System.Diagnostics.Stopwatch> classe auxilia a manipulação de contadores de desempenho relacionados à temporização dentro do código gerenciado. Especificamente, o <xref:System.Diagnostics.Stopwatch.Frequency> campo e <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> método pode ser usado no lugar de APIs não gerenciadas do Windows `QueryPerformanceFrequency` e `QueryPerformanceCounter`.  
  
> [!NOTE]
>  Em um computador multiprocessador, não importa qual processador o thread é executada. No entanto, devido a bugs no BIOS ou a camada de abstração de Hardware (HAL), você pode obter os resultados de tempo diferentes em diferentes processadores. Para especificar a afinidade do processador para um thread, use o <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Diagnostics.Stopwatch> classe para determinar o tempo de execução para um aplicativo.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 O exemplo a seguir demonstra o uso da <xref:System.Diagnostics.Stopwatch> classe para calcular dados de desempenho.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retornado <xref:System.Diagnostics.Stopwatch> instância é interrompida, e a propriedade de tempo decorrido da instância é zero.  
  
 Use o <xref:System.Diagnostics.Stopwatch.Start%2A> método para começar a medir o tempo decorrido com o novo <xref:System.Diagnostics.Stopwatch> instância. Use o <xref:System.Diagnostics.Stopwatch.StartNew%2A> método para inicializar um novo <xref:System.Diagnostics.Stopwatch> da instância e inicie-o imediatamente.  
  
   
  
## Examples  
 O exemplo a seguir inicializa um <xref:System.Diagnostics.Stopwatch> instância usando um construtor de classe simples.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tempo total decorrido, medido pela instância atual.</summary>
        <value>Um <see cref="T:System.TimeSpan" /> somente leitura que representa o tempo total decorrido, medido pela instância atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em um típico <xref:System.Diagnostics.Stopwatch> cenário, você chama o <xref:System.Diagnostics.Stopwatch.Start%2A> método, chamar, eventualmente, o <xref:System.Diagnostics.Stopwatch.Stop%2A> método e, em seguida, verificar o tempo decorrido usando o <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriedade.  
  
 Use o <xref:System.Diagnostics.Stopwatch.Elapsed%2A> valor de propriedade para recuperar o tempo decorrido usando <xref:System.TimeSpan> métodos e propriedades. Por exemplo, você pode formatar retornado <xref:System.TimeSpan> da instância em uma representação de texto ou passá-lo para outra classe que requer um <xref:System.TimeSpan> parâmetro.  
  
 Você pode consultar as propriedades <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, e <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> enquanto o <xref:System.Diagnostics.Stopwatch> instância está em execução ou parado. Tempo decorrido aumentarem de propriedades enquanto o <xref:System.Diagnostics.Stopwatch> está em execução; eles permanecem constantes quando a instância é interrompida.  
  
 Por padrão, o valor de tempo decorrido de um <xref:System.Diagnostics.Stopwatch> instância é igual ao total de todos os intervalos de tempo medido. Cada chamada para <xref:System.Diagnostics.Stopwatch.Start%2A> começa a contar ao tempo decorrido cumulativo; cada chamada para <xref:System.Diagnostics.Stopwatch.Stop%2A> termina a medição de intervalo atual e congela o valor de tempo cumulativo do decorrido. Use o <xref:System.Diagnostics.Stopwatch.Reset%2A> método para limpar o tempo decorrido cumulativo em existente <xref:System.Diagnostics.Stopwatch> instância.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriedade para determinar o tempo de execução para um aplicativo.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tempo total decorrido, medido pela instância atual, em milissegundos.</summary>
        <value>Um inteiro longo somente leitura que representa o número total de milissegundos medidos pela instância atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade representa o tempo decorrido arredondado para baixo até o valor de milissegundo inteiro mais próximo. Para medidas de maior precisão, use o <xref:System.Diagnostics.Stopwatch.Elapsed%2A> ou <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> propriedades.  
  
 Você pode consultar as propriedades <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, e <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> enquanto o <xref:System.Diagnostics.Stopwatch> instância está em execução ou parado. Tempo decorrido aumentarem de propriedades enquanto o <xref:System.Diagnostics.Stopwatch> está em execução; eles permanecem constantes quando a instância é interrompida.  
  
 Por padrão, o valor de tempo decorrido de um <xref:System.Diagnostics.Stopwatch> instância é igual ao total de todos os intervalos de tempo medido. Cada chamada para <xref:System.Diagnostics.Stopwatch.Start%2A> começa a contar ao tempo decorrido cumulativo; cada chamada para <xref:System.Diagnostics.Stopwatch.Stop%2A> termina a medição de intervalo atual e congela o valor de tempo cumulativo do decorrido. Use o <xref:System.Diagnostics.Stopwatch.Reset%2A> método para limpar o tempo decorrido cumulativo em existente <xref:System.Diagnostics.Stopwatch> instância.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Diagnostics.Stopwatch> classe para medir o desempenho de quatro implementações diferentes para analisar um número inteiro de uma cadeia de caracteres. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tempo total decorrido, medido pela instância atual, em tiques do temporizador.</summary>
        <value>Um inteiro longo somente leitura que representa o número total de tiques do temporizador medidos pela instância atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade representa o número de tiques decorridos no mecanismo de temporizador subjacente. Um tique é a menor unidade de tempo que o <xref:System.Diagnostics.Stopwatch> temporizador pode medir. Use o <xref:System.Diagnostics.Stopwatch.Frequency> campo para converter o <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> valor em um número de segundos.  
  
 Você pode consultar as propriedades <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, e <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> enquanto o <xref:System.Diagnostics.Stopwatch> instância está em execução ou parado. Tempo decorrido aumentarem de propriedades enquanto o <xref:System.Diagnostics.Stopwatch> está em execução; eles permanecem constantes quando a instância é interrompida.  
  
 Por padrão, o valor de tempo decorrido de um <xref:System.Diagnostics.Stopwatch> instância é igual ao total de todos os intervalos de tempo medido. Cada chamada para <xref:System.Diagnostics.Stopwatch.Start%2A> começa a contar ao tempo decorrido cumulativo; cada chamada para <xref:System.Diagnostics.Stopwatch.Stop%2A> termina a medição de intervalo atual e congela o valor de tempo cumulativo do decorrido. Use o <xref:System.Diagnostics.Stopwatch.Reset%2A> método para limpar o tempo decorrido cumulativo em existente <xref:System.Diagnostics.Stopwatch> instância.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> tiques são diferentes das <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Cada tique no <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> valor representa um intervalo de 100 nanossegundos. Cada tique na <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> valor representa o intervalo de tempo igual a 1 segundo dividido pelo <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Diagnostics.Stopwatch> classe para medir o desempenho de quatro implementações diferentes para analisar um número inteiro de uma cadeia de caracteres. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a frequência do temporizador como o número de tiques por segundo. Este campo é somente leitura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A frequência do temporizador indica a precisão de temporizador e a resolução. Por exemplo, uma frequência de timer de 2 milhões tiques por segundo é igual a uma resolução do timer de 500 nanossegundos por tique. Em outras palavras, como um segundo é igual a 1 bilhão de nanossegundos, frequência de timer de 2 milhões de tiques por segundo é equivalente a 2 milhões de tiques por 1 bilhão nanossegundos, que podem ser ainda mais simplificados para 1 tique por 500 nanossegundos.  
  
 O <xref:System.Diagnostics.Stopwatch.Frequency> valor depende da resolução do mecanismo de tempo subjacente. Se o hardware instalado e o sistema operacional dão suporte a um contador de desempenho de alta resolução, em seguida, a <xref:System.Diagnostics.Stopwatch.Frequency> valor reflete a frequência do que o contador. Caso contrário, o <xref:System.Diagnostics.Stopwatch.Frequency> valor é baseado na frequência de timer do sistema.  
  
 Porque o <xref:System.Diagnostics.Stopwatch> frequência depende do hardware instalado e o sistema operacional, o <xref:System.Diagnostics.Stopwatch.Frequency> valor permanece constante enquanto o sistema está em execução.  
  
   
  
## Examples  
 O exemplo a seguir exibe a frequência e a resolução de um <xref:System.Diagnostics.Stopwatch> timer. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém o número de tiques atual no mecanismo de temporizador.</summary>
        <returns>Um inteiro longo que representa o valor do contador de tiques do mecanismo de temporizador subjacente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o <xref:System.Diagnostics.Stopwatch> classe usa um contador de desempenho de alta resolução, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> retorna o valor atual do contador. Se o <xref:System.Diagnostics.Stopwatch> classe usa o timer do sistema, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> retorna atual <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> propriedade o <xref:System.DateTime.Now%2A?displayProperty=nameWithType> instância.  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso do <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> método para atualizar um contador de desempenho.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se o temporizador é baseado em um contador de desempenho de alta resolução. Este campo é somente leitura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O timer usado pela <xref:System.Diagnostics.Stopwatch> classe depende do hardware do sistema e do sistema operacional. <xref:System.Diagnostics.Stopwatch.IsHighResolution> está `true` se o <xref:System.Diagnostics.Stopwatch> temporizador é baseado em um contador de desempenho de alta resolução. Caso contrário, <xref:System.Diagnostics.Stopwatch.IsHighResolution> está `false`, que indica que o <xref:System.Diagnostics.Stopwatch> temporizador é baseado em temporizador do sistema.  
  
   
  
## Examples  
 O exemplo a seguir exibe a frequência e a resolução de um <xref:System.Diagnostics.Stopwatch> timer. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o temporizador de <see cref="T:System.Diagnostics.Stopwatch" /> está em execução.</summary>
        <value><see langword="true" /> se a instância de <see cref="T:System.Diagnostics.Stopwatch" /> estiver em execução e medindo o tempo decorrido com relação a um intervalo; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Diagnostics.Stopwatch> instância começa a execução com uma chamada para <xref:System.Diagnostics.Stopwatch.Start%2A> ou <xref:System.Diagnostics.Stopwatch.StartNew%2A>. As paradas de instância em execução com uma chamada para <xref:System.Diagnostics.Stopwatch.Stop%2A> ou <xref:System.Diagnostics.Stopwatch.Reset%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Interrompe a medida de intervalo de tempo e redefine o tempo decorrido para zero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Diagnostics.Stopwatch> instância calcula e retém o tempo decorrido cumulativo em vários intervalos de tempo, até que a instância seja reiniciada. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> para interromper a medição de intervalo atual e manter o valor de tempo cumulativo do decorrido. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> parar qualquer medida de intervalo em andamento e limpar o valor de tempo decorrido.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Interrompe a medida de tempo de intervalo, redefine o tempo decorrido para zero e começa a medir o tempo decorrido.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Diagnostics.Stopwatch> instância calcula e retém o tempo decorrido cumulativo em vários intervalos de tempo, até que a instância é redefinir ou reiniciada. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> para interromper a medição de intervalo atual e manter o valor de tempo cumulativo do decorrido. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> parar qualquer medida de intervalo em andamento e limpar o valor de tempo decorrido. Use <xref:System.Diagnostics.Stopwatch.Restart%2A> para interromper a medição de intervalo atual e iniciar uma nova medida de intervalo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia ou retoma a medição do tempo decorrido de um intervalo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em um típico <xref:System.Diagnostics.Stopwatch> cenário, você chama o <xref:System.Diagnostics.Stopwatch.Start%2A> método, chamar, eventualmente, o <xref:System.Diagnostics.Stopwatch.Stop%2A> método e, em seguida, verificar o tempo decorrido usando o <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriedade.  
  
 Uma vez iniciada, um <xref:System.Diagnostics.Stopwatch> timer mede o intervalo atual, em tiques de timer decorrido, até que a instância é interrompida ou redefinir. Iniciando um <xref:System.Diagnostics.Stopwatch> que é já em execução não alteram o estado do temporizador ou redefina as propriedades de tempo decorrido.  
  
 Quando um <xref:System.Diagnostics.Stopwatch> instância mede a mais de um intervalo, o <xref:System.Diagnostics.Stopwatch.Start%2A> método retoma a medição de tempo do valor de tempo decorrido atual. Um <xref:System.Diagnostics.Stopwatch> instância calcula e retém o tempo decorrido cumulativo em vários intervalos de tempo, até que a instância seja reiniciada. Use o <xref:System.Diagnostics.Stopwatch.Reset%2A> método antes de chamar <xref:System.Diagnostics.Stopwatch.Start%2A> para limpar o tempo decorrido cumulativo em um <xref:System.Diagnostics.Stopwatch> instância. Use o <xref:System.Diagnostics.Stopwatch.Restart%2A> método <xref:System.Diagnostics.Stopwatch.Reset%2A> e <xref:System.Diagnostics.Stopwatch.Start%2A> o <xref:System.Diagnostics.Stopwatch> com um único comando.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Diagnostics.Stopwatch.Start%2A> método para iniciar um timer que mede o tempo de execução de um aplicativo.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância <see cref="T:System.Diagnostics.Stopwatch" />, define a propriedade de tempo decorrido como zero e começa a medir o tempo decorrido.</summary>
        <returns>Um <see cref="T:System.Diagnostics.Stopwatch" /> que acabou de iniciar a medição de tempo decorrido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é equivalente a chamar o <xref:System.Diagnostics.Stopwatch> construtor e, em seguida, chamar <xref:System.Diagnostics.Stopwatch.Start%2A> na nova instância.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Diagnostics.Stopwatch> classe para medir o desempenho de quatro implementações diferentes para analisar um número inteiro de uma cadeia de caracteres. Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Para a medição do tempo decorrido de um intervalo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em um típico <xref:System.Diagnostics.Stopwatch> cenário, você chama o <xref:System.Diagnostics.Stopwatch.Start%2A> método, chamar, eventualmente, o <xref:System.Diagnostics.Stopwatch.Stop%2A> método e, em seguida, verificar o tempo decorrido usando o <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriedade.  
  
 O <xref:System.Diagnostics.Stopwatch.Stop%2A> método termina a medição de intervalo de tempo atual. Interrompendo um <xref:System.Diagnostics.Stopwatch> que é não está em execução não alteram o estado do temporizador ou redefina as propriedades de tempo decorrido.  
  
 Quando um <xref:System.Diagnostics.Stopwatch> instância mede a mais de um intervalo, o <xref:System.Diagnostics.Stopwatch.Stop%2A> método é equivalente ao pausar a medição de tempo decorrido. Uma chamada subsequente para <xref:System.Diagnostics.Stopwatch.Start%2A> retoma a medição de tempo do valor de tempo decorrido atual. Use o <xref:System.Diagnostics.Stopwatch.Reset%2A> método para limpar o tempo decorrido cumulativo em um <xref:System.Diagnostics.Stopwatch> instância.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Diagnostics.Stopwatch.Stop%2A> método para interromper um temporizador que mede o tempo de execução de um aplicativo.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>