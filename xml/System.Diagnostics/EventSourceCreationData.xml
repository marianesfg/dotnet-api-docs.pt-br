<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="22f2dbe93f2e963c10ea8d98d4690040412dc5df" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51880642" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa as configurações usadas para criar uma fonte de log de eventos no computador local ou em um computador remoto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventSourceCreationData> classe para configurar uma nova fonte para gravar entradas localizadas em um log de eventos. Não é necessário usar essa classe para ler de um log de eventos.  
  
 Essa classe define as definições de configuração para uma nova origem do evento e seu log de eventos associado. O log de eventos associado pode ser no computador local ou em um computador remoto. Para criar uma nova origem para um log de eventos de novo ou existente no computador local, defina as <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> e <xref:System.Diagnostics.EventSourceCreationData.Source%2A> propriedades de uma <xref:System.Diagnostics.EventSourceCreationData> e chamar o <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> método. Esse método cria a origem do evento que você especificar o <xref:System.Diagnostics.EventSourceCreationData.Source%2A> propriedade e registra-o para o log de eventos especificado em <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>. Esse comportamento é semelhante a usar o <xref:System.Diagnostics.EventLogInstaller> classe para registrar uma fonte de evento para um log de eventos.  
  
 Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> métodos para gravar eventos em um log de eventos. Você deve especificar uma origem de evento para gravar eventos; Você deve criar e configurar a origem do evento antes de gravar a primeira entrada com o código-fonte.  
  
 Crie a nova fonte de evento durante a instalação do seu aplicativo. Isso permite que o tempo para o sistema operacional atualizar sua lista de fontes de eventos registrados e suas configurações. Se o sistema operacional não foi atualizado para a sua lista de fontes de eventos, e você tentar gravar um evento com a nova fonte, que haverá falha na operação de gravação. Você pode configurar uma nova fonte usando um <xref:System.Diagnostics.EventLogInstaller>, ou usando o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método. Você deve ter direitos administrativos no computador para criar uma nova fonte de evento.  
  
 Você pode criar uma fonte de evento para um log de eventos existente ou um novo log de eventos. Quando você cria uma nova origem para um novo log de eventos, o sistema registra a origem para que o log, mas o log não é criado até que a primeira entrada seja gravada nele.  
  
 Cada fonte pode gravar apenas em um log de eventos ao mesmo tempo; No entanto, seu aplicativo pode usar várias fontes para gravar em vários logs de eventos. Por exemplo, seu aplicativo talvez seja necessário configurados para arquivos de recurso diferente ou logs de eventos diferentes de várias fontes.  
  
 Para alterar os detalhes de configuração de uma fonte existente, você deve excluir a fonte e, em seguida, criá-lo com a nova configuração. Se outros aplicativos ou componentes de usam o código-fonte existente, crie uma nova fonte com a configuração atualizada, em vez de excluir o código-fonte existente.  
  
 Você pode registrar a origem do evento com os recursos localizados para suas cadeias de caracteres de categoria e mensagem de evento. Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recurso, em vez de especificar a cadeia de caracteres real. O Visualizador de eventos usa o identificador de recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso localizada com base nas configurações de idioma atual. Você pode registrar um arquivo separado para categorias de evento, mensagens e cadeias de caracteres de inserção de parâmetro, ou você pode registrar o mesmo arquivo de recurso para todos os três tipos de cadeias de caracteres. Use o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propriedades para configurar a fonte para gravar entradas localizadas para o log de eventos. Se seu aplicativo grava os valores de cadeia de caracteres diretamente ao log de eventos, você precisa definir essas propriedades.  
  
 A origem deve ser configurada para gravar entradas localizadas ou para gravação de cadeias de caracteres diretas. O <xref:System.Diagnostics.EventLog.WriteEntry%2A> método grava a cadeia de caracteres fornecida diretamente para o log de eventos; ele não usa um arquivo de recurso de mensagem localizável. Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar eventos usando um arquivo de recurso de mensagem localizada.  
  
 Se seu aplicativo grava entradas usando os valores de cadeia de caracteres e identificadores de recurso, você deve registrar duas fontes separadas. Por exemplo, configure uma fonte com arquivos de recurso e, em seguida, usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar entradas usando identificadores de recurso para o log de eventos. Em seguida, criar uma fonte diferente sem arquivos de recurso e usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEntry%2A> método escrever cadeias de caracteres diretamente ao log de eventos usando essa fonte.  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de configuração para uma fonte de evento dos argumentos de linha de comando. Os argumentos de entrada especificam o nome da fonte de evento, nome do log de eventos, nome do computador e arquivo de recurso de mensagem de evento. O exemplo de código verifica se a fonte não está em conflito com uma fonte de evento existente e, em seguida, cria a nova origem do evento para o log de eventos especificado.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">O nome a ser registrado com o log de eventos como uma fonte de entradas.</param>
        <param name="logName">O nome do log no qual as entradas da origem são gravadas.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.EventSourceCreationData" /> com uma origem do evento e nome de registro do evento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gravar entradas em um log de eventos, que você deve primeiro criar uma fonte de evento para o log de eventos. Para registrar uma nova fonte, inicializar um <xref:System.Diagnostics.EventSourceCreationData> da instância, configure as propriedades de instância para seu aplicativo e chame o <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> método. Depois que a fonte é registrada, você pode gravar entradas do código-fonte usando o <xref:System.Diagnostics.EventLog.WriteEvent%2A> ou <xref:System.Diagnostics.EventLog.WriteEntry%2A> métodos.  
  
 Você pode registrar a origem do evento com os recursos localizados para suas cadeias de caracteres de categoria e mensagem de evento. Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recurso, em vez de especificar a cadeia de caracteres real. O Visualizador de eventos usa o identificador de recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso localizada com base nas configurações de idioma atual. Você pode registrar um arquivo separado para categorias de evento, mensagens e cadeias de caracteres de inserção de parâmetro, ou você pode registrar o mesmo arquivo de recurso para todos os três tipos de cadeias de caracteres. Use o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propriedades para configurar a fonte para gravar entradas localizadas para o log de eventos. Se seu aplicativo grava os valores de cadeia de caracteres diretamente ao log de eventos, você precisa definir essas propriedades.  
  
 A origem deve ser configurada para gravar entradas localizadas ou para gravação de cadeias de caracteres diretas. Se seu aplicativo grava entradas usando os valores de cadeia de caracteres e identificadores de recurso, você deve registrar duas fontes separadas. Por exemplo, configure uma fonte com arquivos de recurso e, em seguida, usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar entradas usando identificadores de recurso para o log de eventos. Em seguida, criar uma fonte diferente sem arquivos de recurso e usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEntry%2A> método escrever cadeias de caracteres diretamente ao log de eventos.  
  
 A tabela a seguir mostra os valores de propriedade iniciais para um <xref:System.Diagnostics.EventSourceCreationData>.  
  
|Propriedade|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|O parâmetro `source`.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|O parâmetro `logName`.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|O computador local (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Zero|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (`Nothing` no Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (`Nothing` no Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (`Nothing` no Visual Basic).|  
  
   
  
## Examples  
 O exemplo de código a seguir determina se a origem do evento nomeado `SampleApplicationSource` está registrado no computador local. Se a origem do evento não existir, o exemplo define o arquivo de recurso de mensagem para a fonte e cria a nova origem do evento. Por fim, o exemplo de código define o nome de exibição localizado para o log de eventos, usando o valor do identificador de recurso de `DisplayNameMsgId` e o caminho do arquivo de recurso no `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o número de categorias no arquivo de recurso da categoria.</summary>
        <value>O número de categorias no arquivo de recurso da categoria. O valor padrão é zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriedades para gravar eventos com localizadas cadeias de caracteres da categoria. O Visualizador de eventos exibe a categoria de uma entrada de evento, se você fornecer uma categoria ao gravar o evento. Categorias de log de eventos são cadeias de caracteres definida pelo aplicativo que ajudam a filtrar eventos, ou fornecem mais informações sobre o evento. Por exemplo, seu aplicativo pode definir categorias separadas para operações diferentes ou componentes diferentes.  
  
 Categorias de evento são opcionais. Se seu aplicativo não usar categorias, não defina a <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriedades.  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir determina se a origem do evento nomeado `SampleApplicationSource` está registrado no computador local. Se a origem do evento não existir, o exemplo define o arquivo de recurso de mensagem para a fonte e cria a nova origem do evento. Por fim, o exemplo de código define o nome de exibição localizado para o log de eventos, usando o valor do identificador de recurso de `DisplayNameMsgId` e o caminho do arquivo de recurso no `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">A propriedade está definida com um valor negativo ou um valor maior que <see cref="F:System.UInt16.MaxValue" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o caminho do arquivo de recurso que contém cadeias de caracteres da categoria para a origem.</summary>
        <value>O caminho do arquivo de recurso da categoria. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriedades para gravar eventos com localizadas cadeias de caracteres da categoria. O Visualizador de eventos exibe a categoria de uma entrada de evento, se você fornecer uma categoria ao gravar o evento. Categorias de log de eventos são cadeias de caracteres definida pelo aplicativo que ajudam a filtrar eventos, ou fornecem mais informações sobre o evento. Por exemplo, seu aplicativo pode definir categorias separadas para operações diferentes ou componentes diferentes.  
  
 Categorias de evento são opcionais. Se seu aplicativo não usar categorias, não defina a <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriedades.  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir determina se a origem do evento nomeado `SampleApplicationSource` está registrado no computador local. Se a origem do evento não existir, o exemplo define o arquivo de recurso de mensagem para a fonte e cria a nova origem do evento. Por fim, o exemplo de código define o nome de exibição localizado para o log de eventos, usando o valor do identificador de recurso de `DisplayNameMsgId` e o caminho do arquivo de recurso no `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome do log de eventos no qual a origem grava as entradas.</summary>
        <value>O nome do log de eventos. Isso pode ser Aplicativo, Sistema ou um nome de log personalizado. O valor padrão é “Application”.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriedade para identificar o log de eventos que seu aplicativo grava as entradas usando a nova fonte. O log de eventos pode ser um novo log ou um log existente. Aplicativos e serviços devem gravar no log do aplicativo ou um log personalizado. Drivers de dispositivo devem gravar no log do sistema. Se você não definir explicitamente o <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriedade, o log de eventos assume como padrão o log do aplicativo.  
  
> [!NOTE]
>  O log de segurança é somente leitura.  
  
 Para um log existente para a nova fonte de destino, defina o <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriedade com o nome do log de eventos existente. Para criar um novo log de eventos para a fonte, você deve definir o <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriedade. Os nomes de log de eventos devem conter caracteres imprimíveis e não podem incluir os caracteres “*”, “?” ou “\\”. Os 8 primeiros caracteres do nome do log de eventos devem ser diferentes dos 8 primeiros caracteres dos nomes existentes dos logs de eventos no computador especificado.  
  
 O sistema operacional armazena os logs de eventos como arquivos. Quando você usa <xref:System.Diagnostics.EventLogInstaller> ou o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> método para criar um novo log de eventos, o arquivo associado é armazenado no diretório %SystemRoot%\System32\Config no computador especificado. O nome do arquivo é definido por meio do acréscimo 8 primeiros caracteres da <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriedade com a extensão de nome de arquivo ". evt".  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de configuração para uma fonte de evento dos argumentos de linha de comando. Os argumentos de entrada especificam o nome da fonte de evento, nome do log de eventos, nome do computador e arquivo de recurso de mensagem de evento. Este exemplo é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome do computador em que a origem do evento é registrada.</summary>
        <value>O nome do sistema no qual registrar a origem do evento. O padrão é o computador local (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> valor não pode ser uma cadeia de caracteres vazia. Se o nome da máquina não é definido explicitamente, o padrão será o computador local (".").  
  
 Ao registrar uma fonte em um computador remoto, você deve ter direitos administrativos no computador para gravar os valores do registro com permissões suficientes.  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de configuração para uma fonte de evento dos argumentos de linha de comando. Os argumentos de entrada especificam o nome da fonte de evento, nome do log de eventos, nome do computador e arquivo de recurso de mensagem de evento. Este exemplo é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O nome do computador é inválido.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o caminho do arquivo de recurso da mensagem que contém a cadeia de caracteres de formatação de mensagem para a origem.</summary>
        <value>O caminho do arquivo de recurso da mensagem. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriedade para configurar uma fonte de log de eventos para gravar mensagens de evento localizada. Mensagens de evento são cadeias de caracteres definida pelo aplicativo que descrevem o evento para o usuário.  
  
 Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recurso. Um identificador de recurso indexa uma mensagem localizada no <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>. O Visualizador de eventos usa o identificador de recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso de mensagem localizada com base nas configurações de idioma atual.  
  
 A origem do evento deve ser configurada para gravar entradas localizadas ou para gravação de cadeias de caracteres diretas. Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar entradas localizadas para uma fonte configurada com um arquivo de recursos de mensagem.  
  
 Se seu aplicativo grava cadeias de caracteres de mensagem de evento diretamente, em vez de usar um identificador de recurso em um arquivo de recurso localizado, não defina o <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriedade.  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir determina se a origem do evento nomeado `SampleApplicationSource` está registrado no computador local. Se a origem do evento não existir, o exemplo define o arquivo de recurso de mensagem para a fonte e cria a nova origem do evento. Por fim, o exemplo de código define o nome de exibição localizado para o log de eventos, usando o valor do identificador de recurso de `DisplayNameMsgId` e o caminho do arquivo de recurso no `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o caminho do arquivo de recurso que contém as cadeias de caracteres do parâmetro da mensagem para a origem.</summary>
        <value>O caminho do arquivo de recurso de parâmetro. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> inserido de propriedade para configurar uma fonte de log de eventos para gravar mensagens de evento localizada com cadeias de caracteres do parâmetro. Cada mensagem de evento localizada especificada no <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriedade pode conter espaços reservados para cadeias de caracteres de inserção. Esses espaços reservados são usados para especificar a posição e o identificador de recurso para uma cadeia de caracteres independente de linguagem dentro da mensagem de evento. O Visualizador de eventos preenche os espaços reservados usando cadeias de caracteres correspondentes do <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> e formata a mensagem de log de eventos para a entrada de evento localizada.  
  
 Por exemplo, a seção de um arquivo de texto de mensagem a seguir define uma cadeia de caracteres com um espaço reservado de parâmetro:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 Dentro do arquivo de recurso do parâmetro, a cadeia de caracteres de inserção deve ser definida com o identificador de recurso correspondente para o espaço reservado, conforme mostrado abaixo:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 A origem do evento deve ser configurada para gravar entradas localizadas ou para gravação de cadeias de caracteres diretas. Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A> método para gravar entradas localizadas para uma fonte configurada com um arquivo de recursos de mensagem.  
  
 Se seu aplicativo grava cadeias de caracteres de mensagem de evento diretamente ao log de eventos, ou se sua <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriedade não contém mensagens com espaços reservados de inserção do parâmetro, não defina o <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propriedade.  
  
 Para obter detalhes sobre como definir as mensagens de evento e a criação de arquivos de recurso de evento, consulte o tópico de "Compilador de mensagens" na documentação do SDK da plataforma em [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 O exemplo de código a seguir determina se a origem do evento nomeado `SampleApplicationSource` está registrado no computador local. Se a origem do evento não existir, o exemplo define o arquivo de recurso de mensagem para a fonte e cria a nova origem do evento. Por fim, o exemplo de código define o nome de exibição localizado para o log de eventos, usando o valor do identificador de recurso de `DisplayNameMsgId` e o caminho do arquivo de recurso no `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 O exemplo de código usa o seguinte arquivo de texto de mensagem, criado para a biblioteca do recurso EventLogMsgs.dll. Um arquivo de texto da mensagem é a origem do qual o arquivo de recurso de mensagem é criado. O arquivo de texto de mensagem define os identificadores de recurso e o texto para a categoria, a mensagem de evento e a cadeias de caracteres de inserção de parâmetro. Especificamente, a mensagem definida para o identificador de recurso 1004 usa um espaço reservado para uma cadeia de caracteres de parâmetro definida para o identificador de recurso 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome a ser registrado com o log de eventos como uma origem do evento.</summary>
        <value>O nome a ser registrado com o log de eventos como uma fonte de entradas. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nome da fonte é geralmente o nome do aplicativo ou o nome de um componente dentro de um aplicativo grande. O <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> usa o <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, e <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> as propriedades para criar valores do registro no computador de destino para a nova fonte e seu log de eventos associado. Um novo nome de origem não pode corresponder a um nome de origem existente ou um nome de log de eventos existente no computador de destino.  
  
 Depois que os valores do registro para a fonte são criados, seu aplicativo pode usar o código-fonte para gravar entradas no log de eventos configurado.  
  
 Cada fonte pode gravar apenas em um log de eventos ao mesmo tempo; No entanto, seu aplicativo pode usar várias fontes para gravar em vários logs de eventos. Por exemplo, seu aplicativo pode exigir várias fontes, configurados para arquivos de recurso diferente ou logs de eventos diferentes.  
  
   
  
## Examples  
 O exemplo de código a seguir define as propriedades de configuração para uma fonte de evento dos argumentos de linha de comando. Os argumentos de entrada especificam o nome da fonte de evento, nome do log de eventos, nome do computador e arquivo de recurso de mensagem de evento. Este exemplo é parte de um exemplo maior fornecido para o <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para chamar qualquer membro do <see cref="T:System.Diagnostics.EventSourceCreationData" /> com confiança total. Enumeração associada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>