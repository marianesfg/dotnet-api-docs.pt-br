<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DefaultTraceListener.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb722fecfb03cfd81074ed7c6c40ebe2934781ef8a57.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fecfb03cfd81074ed7c6c40ebe2934781ef8a57</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>Provides the default output methods and behavior for tracing.</source>
          <target state="translated">Fornece os métodos de saída padrão e o comportamento do rastreamento.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>An instance of this class is automatically added to the <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> collections.</source>
          <target state="translated">Uma instância dessa classe é adicionada automaticamente para o <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> coleções.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>Explicitly adding a second <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> causes duplicate messages in the debugger output window and duplicate message boxes for asserts.</source>
          <target state="translated">Adicionar explicitamente um segundo <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> causas duplicar mensagens na janela de saída do depurador e caixas de mensagem duplicada para declarações.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>By default, the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A&gt;</ph> methods emit the message to the Win32 <ph id="ph3">`OutputDebugString`</ph> function and to the <ph id="ph4">&lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Por padrão, o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A&gt;</ph> métodos emitir a mensagem para o Win32 <ph id="ph3">`OutputDebugString`</ph> função e o <ph id="ph4">&lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>For information about the <ph id="ph1">`OutputDebugString`</ph> function, see the Platform SDK or MSDN.</source>
          <target state="translated">Para obter informações sobre o <ph id="ph1">`OutputDebugString`</ph> funcionam, consulte o SDK da plataforma ou MSDN.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%2A&gt;</ph> method, by default, displays a message box when the application is running in a user interface mode; it also emits the message using <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%2A&gt;</ph> método, por padrão, exibe uma caixa de mensagem quando o aplicativo é executado em um modo de interface do usuário; ele também emite a mensagem usando <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>The display of the message box for <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Debug.Fail%2A&gt;</ph> method calls depends on the presence of the <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</source>
          <target state="translated">A exibição da caixa de mensagem para <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Diagnostics.Debug.Fail%2A&gt;</ph> chamadas de método depende da presença do <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> is not in the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection, the message box is not displayed.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> não está no <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> coleção, a caixa de mensagem não é exibida.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> can be removed by the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>clear&gt; element<ept id="p1">](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)</ept>, by the <bpt id="p2">[</bpt><ph id="ph3">\&lt;</ph>remove&gt; element<ept id="p2">](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)</ept>, or by calling the <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection.Clear%2A&gt;</ph> method on the <ph id="ph5">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> property (<ph id="ph6">`System.Diagnostics.Trace.Listeners.Clear()`</ph>).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> pode ser removido com o <bpt id="p1">[</bpt> <ph id="ph2">\&lt;</ph>limpar &gt; elemento<ept id="p1">](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)</ept>, pelo <bpt id="p2">[</bpt> <ph id="ph3">\&lt;</ph>remover &gt; elemento<ept id="p2">](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)</ept>, ou chamando o <ph id="ph4">&lt;xref:System.Diagnostics.TraceListenerCollection.Clear%2A&gt;</ph> método no <ph id="ph5">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> propriedade (<ph id="ph6">`System.Diagnostics.Trace.Listeners.Clear()`</ph>).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>You must enable tracing or debugging to use a trace listener.</source>
          <target state="translated">Você deve habilitar o rastreamento ou a depuração para usar um ouvinte de rastreamento.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>The following syntax is compiler specific.</source>
          <target state="translated">A sintaxe a seguir é específico do compilador.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</source>
          <target state="translated">Se você usar compiladores que não seja o c# ou Visual Basic, consulte a documentação para o compilador.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>To enable debugging in C#, add the <ph id="ph1">`/d:DEBUG`</ph> flag to the compiler command line when you compile your code, or add <ph id="ph2">`#define DEBUG`</ph> to the top of your file.</source>
          <target state="translated">Para habilitar a depuração em c#, adicione o <ph id="ph1">`/d:DEBUG`</ph> sinalizador para a linha de comando do compilador quando você compila o código ou adiciona <ph id="ph2">`#define DEBUG`</ph> à parte superior do seu arquivo.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>In Visual Basic, add the <ph id="ph1">`/d:DEBUG=True`</ph> flag to the compiler command line.</source>
          <target state="translated">No Visual Basic, adicione o <ph id="ph1">`/d:DEBUG=True`</ph> sinalizador para a linha de comando do compilador.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>To enable tracing in C#, add the <ph id="ph1">`/d:TRACE`</ph> flag to the compiler command line when you compile your code, or add <ph id="ph2">`#define TRACE`</ph> to the top of your file.</source>
          <target state="translated">Para habilitar o rastreamento em c#, adicione o <ph id="ph1">`/d:TRACE`</ph> sinalizador para a linha de comando do compilador quando você compila o código ou adiciona <ph id="ph2">`#define TRACE`</ph> à parte superior do seu arquivo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>In Visual Basic, add the <ph id="ph1">`/d:TRACE=True`</ph> flag to the compiler command line.</source>
          <target state="translated">No Visual Basic, adicione o <ph id="ph1">`/d:TRACE=True`</ph> sinalizador para a linha de comando do compilador.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>To add a trace listener, edit the configuration file that corresponds to the name of your application.</source>
          <target state="translated">Para adicionar um ouvinte de rastreamento, edite o arquivo de configuração que corresponde ao nome do seu aplicativo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application.</source>
          <target state="translated">Nesse arquivo, você pode adicionar um ouvinte, defina seu tipo e definir seus parâmetros, remover um ouvinte ou limpar todos os ouvintes anteriormente definidos pelo aplicativo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>The configuration file should be formatted similar to the following example:</source>
          <target state="translated">O arquivo de configuração deve ser formatado semelhante ao exemplo a seguir:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>The following code example calculates binomial coefficients, which are values used in probability and statistics.</source>
          <target state="translated">O exemplo de código a seguir calcula binomial coeficientes, que são usados em probabilidade e estatísticas de valores.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>This example uses a <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> to trace results and log errors.</source>
          <target state="translated">Este exemplo usa um <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> para resultados de rastreamento e registro de erros.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>It creates a new <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>, adds it to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> collection, and sets the <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A&gt;</ph> property to the log file specified in the command-line arguments.</source>
          <target state="translated">Cria um novo <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>, adiciona ao <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> coleta e conjuntos de <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A&gt;</ph> propriedade para o arquivo de log especificado nos argumentos da linha de comando.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>If an error is detected while processing the input parameter, or if the <ph id="ph1">`CalcBinomial`</ph> function throws an exception, the <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%2A&gt;</ph> method logs and displays an error message.</source>
          <target state="translated">Se for detectado um erro ao processar o parâmetro de entrada, ou se o <ph id="ph1">`CalcBinomial`</ph> função lançará uma exceção, o <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%2A&gt;</ph> método registra em log e exibirá uma mensagem de erro.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, the error message is also written to the console.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A&gt;</ph> é de propriedade <ph id="ph2">`false`</ph>, a mensagem de erro também é gravada no console.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>When the result is calculated successfully, the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29&gt;</ph> methods write the results to the log file.</source>
          <target state="translated">Quando o resultado é calculado com êxito, o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29&gt;</ph> métodos gravar os resultados para o arquivo de log.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A&gt;</ph> methods cause trace information to be written only to the <ph id="ph4">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A&gt;</ph> métodos com que as informações de rastreamento a ser gravada somente o <ph id="ph4">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>To write trace information to all listeners in the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> collection, use the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Fail%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.Trace.Write%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Diagnostics.Trace.WriteLine%2A&gt;</ph> methods of the <ph id="ph5">&lt;xref:System.Diagnostics.Trace&gt;</ph> class.</source>
          <target state="translated">Para gravar informações de rastreamento para todos os ouvintes no <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> coleção, use o <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Fail%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.Trace.Write%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Diagnostics.Trace.WriteLine%2A&gt;</ph> métodos do <ph id="ph5">&lt;xref:System.Diagnostics.Trace&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>This class is thread safe.</source>
          <target state="translated">Essa classe é thread-safe.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.DefaultTraceListener" /&gt;</ph> class with "Default" as its <ph id="ph2">&lt;see cref="P:System.Diagnostics.TraceListener.Name" /&gt;</ph> property value.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Diagnostics.DefaultTraceListener" /&gt;</ph> com “Default” como o valor da propriedade <ph id="ph2">&lt;see cref="P:System.Diagnostics.TraceListener.Name" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.#ctor">
          <source>The following code example removes the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> provided by the application from the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> collection and then creates a new <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> and adds it to the <ph id="ph4">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">O código a seguir remove do exemplo o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> fornecida pelo aplicativo do <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> coleção e, em seguida, cria um novo <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> e adiciona-o para o <ph id="ph4">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> coleção.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
          <source>Gets or sets a value indicating whether the application is running in user-interface mode.</source>
          <target state="translated">Obtém ou define um valor que indica se o aplicativo está sendo executado no modo de interface do usuário.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if user-interface mode is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o modo de interface do usuário estiver habilitado, caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
          <source>The following code example calls a function that calls the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29&gt;</ph> method to log an error message if the function throws an exception.</source>
          <target state="translated">O exemplo de código a seguir chama uma função que chama o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29&gt;</ph> método para registrar uma mensagem de erro se a função gera uma exceção.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, the method also writes the error message to the console.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A&gt;</ph> é de propriedade <ph id="ph2">`false`</ph>, o método também grava a mensagem de erro no console.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.DefaultTraceListener">
          <source>Emits or displays a message and a stack trace for an assertion that always fails.</source>
          <target state="translated">Emite ou exibe uma mensagem e um rastreamento de pilha para uma declaração que sempre falha.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
          <source>The message to emit or display.</source>
          <target state="translated">A mensagem a ser emitida ou exibida.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
          <source>Emits or displays a message and a stack trace for an assertion that always fails.</source>
          <target state="translated">Emite ou exibe uma mensagem e um rastreamento de pilha para uma declaração que sempre falha.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
          <source>By default, this method sends the <ph id="ph1">`message`</ph> parameter and a stack trace to a message box (when the application runs in user-interface mode) and to the <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> instance.</source>
          <target state="translated">Por padrão, esse método envia o <ph id="ph1">`message`</ph> parâmetro e um rastreamento de pilha para uma caixa de mensagem (quando o aplicativo é executado no modo de interface do usuário) e o <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
          <source>The following code example writes an error message to a <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> using the <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%29&gt;</ph> method.</source>
          <target state="translated">O exemplo de código a seguir grava uma mensagem de erro para um <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> usando o <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
          <source>The method also writes the message to the console if a user interface is not available.</source>
          <target state="translated">O método também grava a mensagem para o console se uma interface de usuário não está disponível.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
          <source>The message to emit or display.</source>
          <target state="translated">A mensagem a ser emitida ou exibida.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
          <source>The detailed message to emit or display.</source>
          <target state="translated">A mensagem detalhada a ser emitida ou exibida.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
          <source>Emits or displays detailed messages and a stack trace for an assertion that always fails.</source>
          <target state="translated">Emite ou exibe mensagens detalhadas e um rastreamento de pilha para uma declaração que sempre falha.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
          <source>By default, this method sends the <ph id="ph1">`message`</ph> parameter, the <ph id="ph2">`detailMessage`</ph> parameter, and a stack trace to a message box (when the application runs in user-interface mode) and to the <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> instance.</source>
          <target state="translated">Por padrão, esse método envia o <ph id="ph1">`message`</ph> parâmetro, o <ph id="ph2">`detailMessage`</ph> parâmetro e um rastreamento de pilha para uma caixa de mensagem (quando o aplicativo é executado no modo de interface do usuário) e o <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
          <source>The following code example calls a function that calls the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29&gt;</ph> method to log a detailed error message if the function throws an exception.</source>
          <target state="translated">O exemplo de código a seguir chama uma função que chama o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29&gt;</ph> método para registrar uma mensagem de erro detalhadas se a função gera uma exceção.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
          <source>The method writes the message to the console if a user interface is not available.</source>
          <target state="translated">O método grava a mensagem para o console se uma interface de usuário não está disponível.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DefaultTraceListener.LogFileName">
          <source>Gets or sets the name of a log file to write trace or debug messages to.</source>
          <target state="translated">Obtém ou define o nome de um arquivo de log no qual as mensagens de rastreamento e depuração serão gravadas.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DefaultTraceListener.LogFileName">
          <source>The name of a log file to write trace or debug messages to.</source>
          <target state="translated">O nome de um arquivo de log no qual as mensagens de rastreamento e depuração serão gravadas.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DefaultTraceListener.LogFileName">
          <source>The following code example creates a new <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>, adds it to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> collection, and sets the <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A&gt;</ph> property to the log file specified in the command-line arguments.</source>
          <target state="translated">O exemplo de código a seguir cria um novo <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>, adiciona ao <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType&gt;</ph> coleta e conjuntos de <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A&gt;</ph> propriedade para o arquivo de log especificado nos argumentos da linha de comando.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
          <source>The message to write to <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph>.</source>
          <target state="translated">A mensagem a ser gravada em <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
          <source>Writes the output to the <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> function and to the <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph> method.</source>
          <target state="translated">Grava a saída na função <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> e no método <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
          <source>For information about the Win32 <ph id="ph1">`OutputDebugString`</ph> debugging function, see "OutputDebugString" in the Platform SDK or MSDN.</source>
          <target state="translated">Para obter informações sobre o Win32 <ph id="ph1">`OutputDebugString`</ph> depuração de função, consulte "OutputDebugString" no SDK da plataforma ou no MSDN.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
          <source>The following code example formats the results of a function and uses the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29&gt;</ph> method to write the first part of the message to a <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir formata os resultados de uma função e usa o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29&gt;</ph> método grave a primeira parte da mensagem para um <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
          <source>The message to write to <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph>.</source>
          <target state="translated">A mensagem a ser gravada em <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
          <source>Writes the output to the <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> function and to the <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph> method, followed by a carriage return and line feed (\r\n).</source>
          <target state="translated">Grava a saída para a função <ph id="ph1">&lt;see langword="OutputDebugString" /&gt;</ph> e o método <ph id="ph2">&lt;see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /&gt;</ph>, seguido por um retorno de carro e alimentação de linha (\r\n).</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
          <source>The default line terminator is a carriage return followed by a line feed (\r\n).</source>
          <target state="translated">O terminador de linha padrão é um retorno de carro seguido por uma alimentação de linha (\r\n).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
          <source>For information about the Win32 <ph id="ph1">`OutputDebugString`</ph> debugging function, see the Platform SDK or MSDN.</source>
          <target state="translated">Para obter informações sobre o Win32 <ph id="ph1">`OutputDebugString`</ph> depuração de função, consulte o SDK da plataforma ou MSDN.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
          <source>This method sets the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Esse método define o <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt;</ph> propriedade <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
          <source>The following code example formats the results of a function and uses the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29&gt;</ph> method to write the last part of the message to a <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</source>
          <target state="translated">O exemplo de código a seguir formata os resultados de uma função e usa o <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29&gt;</ph> método para gravar a última parte da mensagem para um <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>