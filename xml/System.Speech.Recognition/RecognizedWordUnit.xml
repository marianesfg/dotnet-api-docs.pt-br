<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="771e992ed34a53bfc517be9343f1c99f5d7fbd96" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55320090" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece a unidade atômica da voz reconhecida.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos os resultados retornados por um mecanismo de reconhecimento são construídos de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos.  
  
 Uma matriz de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos está acessível para qualquer operação de reconhecimento por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.  
  
 Além de fornecer uma medida de certeza do reconhecimento (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) um <xref:System.Speech.Recognition.RecognizedWordUnit> instância fornece:  
  
-   Representações de texto normalizado e exato (ou lexical) de uma palavra reconhecida. Para obter mais informações, consulte <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.  
  
-   Informações de pronúncia usando caracteres de um alfabeto fonético com suporte, como o alfabeto fonético internacional (IPA) ou o Universal telefone definido (no-break). Para obter mais informações, consulte <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.  
  
-   Formatação para impressão. Para obter mais informações, consulte o <xref:System.Speech.Recognition.DisplayAttributes> classe e seu <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma rotina de utilitário (`stringFromWordArray`) que gera as cadeias de caracteres. As cadeias de caracteres contêm a saída de léxica (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado texto (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), ou caracteres fonéticos do alfabeto fonético internacional (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Cadeias de caracteres são formatadas usando <xref:System.Speech.Recognition.DisplayAttributes> objetos obtidos os <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos. O <xref:System.Speech.Recognition.RecognizedWordUnit> objetos são obtidos a partir de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">O texto normalizado de uma palavra reconhecida.  
  
Esse valor pode ser <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</param>
        <param name="confidence">Um <see langword="float" /> valor de 0.0 a 1.0 indicando a certeza do reconhecimento da palavra.</param>
        <param name="pronunciation">A ortografia fonética de uma palavra reconhecida.  
  
Esse valor pode ser <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</param>
        <param name="lexicalForm">O texto não normalizado de uma palavra reconhecida.  
  
Esse argumento é necessário e não pode ser <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</param>
        <param name="displayAttributes">Define o uso de espaço em branco para exibir palavras reconhecidas.</param>
        <param name="audioPosition">O local da palavra reconhecida no fluxo de entrada de áudio.  
  
Este valor pode ser <see cref="F:System.TimeSpan.Zero" />.</param>
        <param name="audioDuration">O comprimento do áudio entrada correspondente à palavra reconhecida.  
  
Este valor pode ser <see cref="F:System.TimeSpan.Zero" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `text` ou `pronunciation` são `null`, "", ou <xref:System.String.Empty> e o <xref:System.Speech.Recognition.RecognizedWordUnit> é usada em uma operação de reconhecimento, o mecanismo de reconhecimento irá gerar os valores apropriados em qualquer saída <xref:System.Speech.Recognition.RecognizedWordUnit> instância.  
  
 Direcionar a construção do <xref:System.Speech.Recognition.RecognizedWordUnit> instâncias normalmente é usado somente durante a emulação de operações de reconhecimento usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos dos <xref:System.Speech.Recognition.SpeechRecognitionEngine> classe e o <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> métodos do <xref:System.Speech.Recognition.SpeechRecognizer> classe.  
  
 Para aplicativos reais, não diretamente construa <xref:System.Speech.Recognition.RecognizedWordUnit>, em vez disso, obtenha-o por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.  
  
   
  
## Examples  
 O exemplo a seguir é um teste forçado de emulação, onde novas palavras são geradas a partir de entrada passadas para o emulador e verificadas.  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">Alfabeto fonético internacional</related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor, atribuído pelo identificador, que representa a probabilidade de que uma palavra reconhecida corresponda a uma determinada entrada.</summary>
        <value>Uma medida relativa de certeza do reconhecimento correto para uma palavra. O valor é de 0,0 a 1,0 para confiança baixa a alta, respectivamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pontuações de confiança não indicam a probabilidade absoluta de uma palavra foi reconhecida corretamente. Em vez disso, pontuações de confiança fornecem um mecanismo para comparar a precisão relativa das várias alternativas de reconhecimento para uma determinada entrada. Isso facilita a retornar o resultado de reconhecimento mais preciso. Por exemplo, se uma palavra reconhecida tiver uma pontuação de confiança de 0,8, isso não significa que a palavra possui uma 80% de chance de ser a correspondência correta para a entrada.  Isso significa que o word é mais provável de ser a correspondência correta para a entrada de outros resultados que tenham confiança pontuações menor que 0,8.  
  
 Uma pontuação de confiança por conta própria não faz sentida, a menos que você tenha resultados alternativos para comparação, a partir da mesma operação de reconhecimento ou de reconhecimentos anteriores da mesma entrada.  
  
 Os valores retornados pelo <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> são relativos e exclusivo para cada mecanismo de reconhecimento. Há uma definição de como comparam valores de confiança entre dois mecanismos de reconhecimento diferente, nem como o <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> de indivíduo <xref:System.Speech.Recognition.RecognizedWordUnit> objetos definem a <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> de um <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
 Um mecanismo de reconhecimento de fala pode atribuir uma pontuação de confiança baixa a entrada de fala por vários motivos, incluindo interferência de plano de fundo, inarticulate fala, ou palavras inesperadas ou sequências de palavras. Se seu aplicativo estiver usando um <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância, você pode modificar o nível de confiança na qual fala entrada aceito ou rejeitada com um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos. Os limites de confiança para o reconhecedor compartilhado, gerenciado pelo <xref:System.Speech.Recognition.SpeechRecognizer>, são associados a um perfil de usuário e armazenada no registro do Windows. Aplicativos não devem gravar alterações no registro para as propriedades do reconhecedor compartilhado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém as informações usadas para criar a saída de texto da instância de <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> atual.</summary>
        <value>Especifica o uso de espaço em branco para exibir o conteúdo de um <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Speech.Recognition.DisplayAttributes> objeto retornado pelo <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade especifica os espaços à esquerda e à direita a ser usado com uma determinada palavra, se houver.  
  
 Para obter mais informações sobre como usar essas informações de formatação, consulte o <xref:System.Speech.Recognition.DisplayAttributes> enumeração.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma rotina de utilitário (`stringFromWordArray`) que gera uma cadeia de caracteres formatada em uma destas três maneiras: lexicalmente (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), ou foneticamente (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). A saída de texto é obtida do <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade em um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido do <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade em um <xref:System.Speech.Recognition.RecognizedPhrase> objeto.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o texto não normalizado para uma palavra reconhecida.</summary>
        <value>Retorna um <see cref="T:System.String" /> que contém o texto de uma palavra reconhecida, sem nenhuma normalização.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na maioria dos casos os valores retornados pelo <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> são idênticos. No entanto, os mecanismos de reconhecimento podem usar a normalização de fala para retornar mais amigável ou coloquial representações de texto de entrada de áudio.  
  
 Normalização de fala é o uso de construções especiais ou símbolos para expressar fala por escrito. Por exemplo, normalização pode substituir as palavras faladas "um cifrão e centavos dezesseis" por "$1.16" no texto de saída.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma rotina de utilitário que gera texto em um dos três formatos: lexical (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonéticas (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). A saída de texto é obtida de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido dos <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a ortografia fonética de uma palavra reconhecida.</summary>
        <value>Uma cadeia de caracteres de um alfabeto fonético com suporte, como o IPA (Alfabeto Fonético Internacional) ou o UPS (Conjunto Universal de Telefones).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O conteúdo do <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicar que o mecanismo de reconhecimento de fala usado para corresponder à entrada de fala a um dos seus carregado de pronúncia <xref:System.Speech.Recognition.Grammar> objetos. Pronúncia pode ser definida em léxico interno do mecanismo de reconhecimento de fala, em um documento de léxico que está vinculado a partir de uma gramática de reconhecimento em um carregado <xref:System.Speech.Recognition.Grammar> objeto ou embutido em uma gramática de reconhecimento em um carregado <xref:System.Speech.Recognition.Grammar> objeto. Um mecanismo de reconhecimento de fala também pode criar a pronúncia de palavras incomum cuja pronúncia não está definida em um léxico ou gramática para o qual o mecanismo de reconhecimento de fala no momento tem acesso.  
  
 Muitas fontes de Unicode com base em Windows, como o Courier New, dão suporte à exibição de cadeias de caracteres de IPA. Para obter mais informações, consulte [alfabeto fonético internacional](https://go.microsoft.com/fwlink/?LinkId=58363).  
  
   
  
## Examples  
 O exemplo a seguir mostra uma rotina de utilitário que gera uma cadeia de caracteres com um dos três formatos possíveis: lexical (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonéticas (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). A saída de texto é obtida de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido dos <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">Alfabeto fonético internacional</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o texto normalizado para uma palavra reconhecida.</summary>
        <value>Uma cadeia de caracteres que contém a saída de texto normalizado para uma determinada palavra de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na maioria dos casos os valores retornados pelo <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> serão idênticas. No entanto, os mecanismos de reconhecimento podem usar a normalização de fala para retornar mais amigável ou coloquial representações de texto de entrada de áudio.  
  
 Normalização de fala é o uso de construções especiais ou símbolos para expressar fala por escrito. Por exemplo, normalização pode substituir as palavras faladas "um cifrão e centavos dezesseis" por "$1.16" no texto de saída.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma rotina de utilitário que gera uma cadeia de caracteres em um dos três formatos: lexical (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonéticas (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). A saída de texto é obtida de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido dos <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>