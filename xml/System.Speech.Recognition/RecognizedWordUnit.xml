<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="771e992ed34a53bfc517be9343f1c99f5d7fbd96" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55320090" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b9ee1-101">Fornece a unidade atômica da voz reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-101">Provides the atomic unit of recognized speech.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9ee1-102">Todos os resultados retornados por um mecanismo de reconhecimento são construídos de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="b9ee1-103">Uma matriz de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos está acessível para qualquer operação de reconhecimento por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="b9ee1-104">Além de fornecer uma medida de certeza do reconhecimento (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) um <xref:System.Speech.Recognition.RecognizedWordUnit> instância fornece:</span><span class="sxs-lookup"><span data-stu-id="b9ee1-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="b9ee1-105">Representações de texto normalizado e exato (ou lexical) de uma palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="b9ee1-106">Para obter mais informações, consulte <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="b9ee1-107">Informações de pronúncia usando caracteres de um alfabeto fonético com suporte, como o alfabeto fonético internacional (IPA) ou o Universal telefone definido (no-break).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="b9ee1-108">Para obter mais informações, consulte <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="b9ee1-109">Formatação para impressão.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-109">Formatting for printing.</span></span> <span data-ttu-id="b9ee1-110">Para obter mais informações, consulte o <xref:System.Speech.Recognition.DisplayAttributes> classe e seu <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9ee1-111">O exemplo a seguir mostra uma rotina de utilitário (`stringFromWordArray`) que gera as cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="b9ee1-112">As cadeias de caracteres contêm a saída de léxica (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado texto (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), ou caracteres fonéticos do alfabeto fonético internacional (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="b9ee1-113">Cadeias de caracteres são formatadas usando <xref:System.Speech.Recognition.DisplayAttributes> objetos obtidos os <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="b9ee1-114">O <xref:System.Speech.Recognition.RecognizedWordUnit> objetos são obtidos a partir de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="b9ee1-115">O texto normalizado de uma palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-115">The normalized text for a recognized word.</span></span>  
  
<span data-ttu-id="b9ee1-116">Esse valor pode ser <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="confidence"><span data-ttu-id="b9ee1-117">Um <see langword="float" /> valor de 0.0 a 1.0 indicando a certeza do reconhecimento da palavra.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="b9ee1-118">A ortografia fonética de uma palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-118">The phonetic spelling of a recognized word.</span></span>  
  
<span data-ttu-id="b9ee1-119">Esse valor pode ser <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="lexicalForm"><span data-ttu-id="b9ee1-120">O texto não normalizado de uma palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-120">The unnormalized text for a recognized word.</span></span>  
  
<span data-ttu-id="b9ee1-121">Esse argumento é necessário e não pode ser <see langword="null" />, "" ou <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="displayAttributes"><span data-ttu-id="b9ee1-122">Define o uso de espaço em branco para exibir palavras reconhecidas.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-122">Defines the use of white space to display recognized words.</span></span></param>
        <param name="audioPosition"><span data-ttu-id="b9ee1-123">O local da palavra reconhecida no fluxo de entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-123">The location of the recognized word in the audio input stream.</span></span>  
  
<span data-ttu-id="b9ee1-124">Este valor pode ser <see cref="F:System.TimeSpan.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <param name="audioDuration"><span data-ttu-id="b9ee1-125">O comprimento do áudio entrada correspondente à palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-125">The length of the audio input corresponding to the recognized word.</span></span>  
  
<span data-ttu-id="b9ee1-126">Este valor pode ser <see cref="F:System.TimeSpan.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <summary><span data-ttu-id="b9ee1-127">Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9ee1-128">Se `text` ou `pronunciation` são `null`, "", ou <xref:System.String.Empty> e o <xref:System.Speech.Recognition.RecognizedWordUnit> é usada em uma operação de reconhecimento, o mecanismo de reconhecimento irá gerar os valores apropriados em qualquer saída <xref:System.Speech.Recognition.RecognizedWordUnit> instância.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="b9ee1-129">Direcionar a construção do <xref:System.Speech.Recognition.RecognizedWordUnit> instâncias normalmente é usado somente durante a emulação de operações de reconhecimento usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos dos <xref:System.Speech.Recognition.SpeechRecognitionEngine> classe e o <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> métodos do <xref:System.Speech.Recognition.SpeechRecognizer> classe.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="b9ee1-130">Para aplicativos reais, não diretamente construa <xref:System.Speech.Recognition.RecognizedWordUnit>, em vez disso, obtenha-o por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9ee1-131">O exemplo a seguir é um teste forçado de emulação, onde novas palavras são geradas a partir de entrada passadas para o emulador e verificadas.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="b9ee1-132">Alfabeto fonético internacional</span><span class="sxs-lookup"><span data-stu-id="b9ee1-132">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9ee1-133">Obtém um valor, atribuído pelo identificador, que representa a probabilidade de que uma palavra reconhecida corresponda a uma determinada entrada.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-133">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span></span></summary>
        <value><span data-ttu-id="b9ee1-134">Uma medida relativa de certeza do reconhecimento correto para uma palavra.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-134">A relative measure of the certainty of correct recognition for a word.</span></span> <span data-ttu-id="b9ee1-135">O valor é de 0,0 a 1,0 para confiança baixa a alta, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-135">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9ee1-136">Pontuações de confiança não indicam a probabilidade absoluta de uma palavra foi reconhecida corretamente.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-136">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="b9ee1-137">Em vez disso, pontuações de confiança fornecem um mecanismo para comparar a precisão relativa das várias alternativas de reconhecimento para uma determinada entrada.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-137">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="b9ee1-138">Isso facilita a retornar o resultado de reconhecimento mais preciso.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-138">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="b9ee1-139">Por exemplo, se uma palavra reconhecida tiver uma pontuação de confiança de 0,8, isso não significa que a palavra possui uma 80% de chance de ser a correspondência correta para a entrada.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-139">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="b9ee1-140">Isso significa que o word é mais provável de ser a correspondência correta para a entrada de outros resultados que tenham confiança pontuações menor que 0,8.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-140">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="b9ee1-141">Uma pontuação de confiança por conta própria não faz sentida, a menos que você tenha resultados alternativos para comparação, a partir da mesma operação de reconhecimento ou de reconhecimentos anteriores da mesma entrada.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-141">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="b9ee1-142">Os valores retornados pelo <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> são relativos e exclusivo para cada mecanismo de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-142">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="b9ee1-143">Há uma definição de como comparam valores de confiança entre dois mecanismos de reconhecimento diferente, nem como o <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> de indivíduo <xref:System.Speech.Recognition.RecognizedWordUnit> objetos definem a <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> de um <xref:System.Speech.Recognition.RecognizedPhrase>.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-143">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="b9ee1-144">Um mecanismo de reconhecimento de fala pode atribuir uma pontuação de confiança baixa a entrada de fala por vários motivos, incluindo interferência de plano de fundo, inarticulate fala, ou palavras inesperadas ou sequências de palavras.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-144">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="b9ee1-145">Se seu aplicativo estiver usando um <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância, você pode modificar o nível de confiança na qual fala entrada aceito ou rejeitada com um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-145">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="b9ee1-146">Os limites de confiança para o reconhecedor compartilhado, gerenciado pelo <xref:System.Speech.Recognition.SpeechRecognizer>, são associados a um perfil de usuário e armazenada no registro do Windows.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-146">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="b9ee1-147">Aplicativos não devem gravar alterações no registro para as propriedades do reconhecedor compartilhado.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-147">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9ee1-148">Obtém as informações usadas para criar a saída de texto da instância de <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> atual.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-148">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span></span></summary>
        <value><span data-ttu-id="b9ee1-149">Especifica o uso de espaço em branco para exibir o conteúdo de um <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-149">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9ee1-150">O <xref:System.Speech.Recognition.DisplayAttributes> objeto retornado pelo <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade especifica os espaços à esquerda e à direita a ser usado com uma determinada palavra, se houver.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-150">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="b9ee1-151">Para obter mais informações sobre como usar essas informações de formatação, consulte o <xref:System.Speech.Recognition.DisplayAttributes> enumeração.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-151">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9ee1-152">O exemplo a seguir mostra uma rotina de utilitário (`stringFromWordArray`) que gera uma cadeia de caracteres formatada em uma destas três maneiras: lexicalmente (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), ou foneticamente (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-152">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="b9ee1-153">A saída de texto é obtida do <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propriedade em um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido do <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade em um <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-153">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9ee1-154">Obtém o texto não normalizado para uma palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-154">Gets the unnormalized text of a recognized word.</span></span></summary>
        <value><span data-ttu-id="b9ee1-155">Retorna um <see cref="T:System.String" /> que contém o texto de uma palavra reconhecida, sem nenhuma normalização.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-155">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9ee1-156">Na maioria dos casos os valores retornados pelo <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> são idênticos.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-156">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="b9ee1-157">No entanto, os mecanismos de reconhecimento podem usar a normalização de fala para retornar mais amigável ou coloquial representações de texto de entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-157">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="b9ee1-158">Normalização de fala é o uso de construções especiais ou símbolos para expressar fala por escrito.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-158">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="b9ee1-159">Por exemplo, normalização pode substituir as palavras faladas "um cifrão e centavos dezesseis" por "$1.16" no texto de saída.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-159">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9ee1-160">O exemplo a seguir mostra uma rotina de utilitário que gera texto em um dos três formatos: lexical (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonéticas (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-160">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="b9ee1-161">A saída de texto é obtida de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido dos <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-161">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9ee1-162">Obtém a ortografia fonética de uma palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-162">Gets the phonetic spelling of a recognized word.</span></span></summary>
        <value><span data-ttu-id="b9ee1-163">Uma cadeia de caracteres de um alfabeto fonético com suporte, como o IPA (Alfabeto Fonético Internacional) ou o UPS (Conjunto Universal de Telefones).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-163">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9ee1-164">O conteúdo do <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicar que o mecanismo de reconhecimento de fala usado para corresponder à entrada de fala a um dos seus carregado de pronúncia <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-164">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="b9ee1-165">Pronúncia pode ser definida em léxico interno do mecanismo de reconhecimento de fala, em um documento de léxico que está vinculado a partir de uma gramática de reconhecimento em um carregado <xref:System.Speech.Recognition.Grammar> objeto ou embutido em uma gramática de reconhecimento em um carregado <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-165">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="b9ee1-166">Um mecanismo de reconhecimento de fala também pode criar a pronúncia de palavras incomum cuja pronúncia não está definida em um léxico ou gramática para o qual o mecanismo de reconhecimento de fala no momento tem acesso.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-166">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="b9ee1-167">Muitas fontes de Unicode com base em Windows, como o Courier New, dão suporte à exibição de cadeias de caracteres de IPA.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-167">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="b9ee1-168">Para obter mais informações, consulte [alfabeto fonético internacional](https://go.microsoft.com/fwlink/?LinkId=58363).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-168">For more information, see [International Phonetic Alphabet](https://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9ee1-169">O exemplo a seguir mostra uma rotina de utilitário que gera uma cadeia de caracteres com um dos três formatos possíveis: lexical (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonéticas (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-169">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="b9ee1-170">A saída de texto é obtida de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido dos <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-170">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="b9ee1-171">Alfabeto fonético internacional</span><span class="sxs-lookup"><span data-stu-id="b9ee1-171">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b9ee1-172">Obtém o texto normalizado para uma palavra reconhecida.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-172">Gets the normalized text for a recognized word.</span></span></summary>
        <value><span data-ttu-id="b9ee1-173">Uma cadeia de caracteres que contém a saída de texto normalizado para uma determinada palavra de entrada.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-173">A string that contains the normalized text output for a given input word.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b9ee1-174">Na maioria dos casos os valores retornados pelo <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> serão idênticas.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-174">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="b9ee1-175">No entanto, os mecanismos de reconhecimento podem usar a normalização de fala para retornar mais amigável ou coloquial representações de texto de entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-175">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="b9ee1-176">Normalização de fala é o uso de construções especiais ou símbolos para expressar fala por escrito.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-176">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="b9ee1-177">Por exemplo, normalização pode substituir as palavras faladas "um cifrão e centavos dezesseis" por "$1.16" no texto de saída.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-177">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b9ee1-178">O exemplo a seguir mostra uma rotina de utilitário que gera uma cadeia de caracteres em um dos três formatos: lexical (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonéticas (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="b9ee1-178">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="b9ee1-179">A saída de texto é obtida de um <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que é obtido dos <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propriedade no <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="b9ee1-179">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>