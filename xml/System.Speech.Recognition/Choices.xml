<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="451bf9dafb2e50595cabe66bb83ee0cb52efc4c5" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59743318" /></Metadata><TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um conjunto de alternativas dentro das restrições de uma gramática de reconhecimento de fala.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Speech.Recognition.Choices> objeto representa um componente de uma frase que pode ter um dos vários valores. Use essa classe durante a criação de uma gramática de reconhecimento de fala de um <xref:System.Speech.Recognition.GrammarBuilder> objeto.  
  
 Por exemplo, uma <xref:System.Speech.Recognition.Choices> objeto pode representar o componente *colorChoice* da frase "alterar a cor a ser *colorChoice*", onde os valores aceitáveis para *colorChoice* são "vermelho", ou "verde" ou "blue".  
  
> [!NOTE]
>  Para usar um <xref:System.Speech.Recognition.Choices> objeto como um componente opcional em uma frase, criar o <xref:System.Speech.Recognition.Choices> do objeto e adicioná-lo a um <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> do objeto com `minRepeat` e `maxRepeat` definido como 0 e 1, respectivamente. Frases que contém os componentes opcionais podem ser reconhecidos se o componente opcional é falado.  
  
 O <xref:System.Speech.Recognition.Choices> classe serve a mesma função que o `one-of` elemento XML definido pelo [especificação de gramática de reconhecimento de fala (SRGS) versão 1.0](https://www.w3.org/TR/speech-grammar/) e é semelhante ao <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> classe no <xref:System.Speech.Recognition.SrgsGrammar> namespace.  
  
 Para obter mais informações sobre como definir uma gramática de reconhecimento de fala, consulte [reconhecimento de fala](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) e [criar gramáticas de GrammarBuilder](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 O exemplo a seguir cria uma gramática de reconhecimento de fala a frase, "Definir plano de fundo *colorChoice*", onde *colorChoice* pode ser uma das cores definidas. O <xref:System.Speech.Recognition.GrammarBuilder> é usado para definir as restrições da gramática.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Especificação de gramática de reconhecimento de fala (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode construir uma <xref:System.Speech.Recognition.Choices> do objeto usando um construtor padrão (que retorna um objeto vazio), de um grupo de <xref:System.String> objetos, ou um de conjunto de <xref:System.Speech.Recognition.GrammarBuilder> objetos.  
  
 Porque o <xref:System.Speech.Recognition.GrammarBuilder> objeto dá suporte à conversão implícita de <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey>, um <xref:System.Speech.Recognition.Choices> podem ser construídos a partir de uma matriz desses objetos usando uma conversão.  
  
   
  
## Examples  
 O exemplo a seguir usa <xref:System.Speech.Recognition.Choices> objetos para criar duas listas de alternativas.  
  
 A primeira <xref:System.Speech.Recognition.Choices> objeto é construído a partir de uma matriz de <xref:System.String> objetos. A outra <xref:System.Speech.Recognition.Choices> objeto é construído a partir de uma matriz de <xref:System.Speech.Recognition.GrammarBuilder> objetos que foram convertidos implicitamente por uma conversão.  
  
 O exemplo usa uma <xref:System.Speech.Recognition.GrammarBuilder> objeto para montar uma frase, usando o <xref:System.Speech.Recognition.Choices> duas cadeias de caracteres adicionais, que podem ser usadas para reconhecer fala e de objetos de entrada na forma de "Chamada [contactlList] em [phoneType] telefone", por exemplo "Jane chamada no telefone celular".  
  
```csharp
public GrammarBuilder ChoicesConstructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.Choices" /> que contém um conjunto vazio de alternativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor retorna um conjunto vazio válido, de alternativas. Você pode adicionar alternativas usando qualquer um do <xref:System.Speech.Recognition.Choices.Add%2A> métodos.  
  
   
  
## Examples  
 O exemplo a seguir usa <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> objetos para criar uma frase que pode ser usada para reconhecer a entrada de fala, como "Chamada Anne em sua célula" e "James chamada em seu telefone de trabalho". O exemplo usa conversões implícitas de <xref:System.Speech.Recognition.Choices> e <xref:System.String> para <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Uma matriz contendo o conjunto de alternativas.</param>
        <summary>Inicializa uma nova instância da <see cref="T:System.Speech.Recognition.Choices" /> classe de uma matriz que contém um ou mais objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada <xref:System.Speech.Recognition.GrammarBuilder> em `alternateChoices` define uma alternativa. Se `alternateChoices` é uma matriz vazia, o construtor retorna um conjunto vazio de alternativas. Você pode adicionar alternativas usando qualquer um do <xref:System.Speech.Recognition.Choices.Add%2A> métodos.  
  
 O construtor gerará um <xref:System.ArgumentNullException> quando `alternateChoices` é `null` ou quando qualquer um dos elementos da matriz são `null`.  
  
 Porque o <xref:System.Speech.Recognition.GrammarBuilder> classe oferece suporte para conversão implícita de <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, e <xref:System.Speech.Recognition.SemanticResultKey> objetos <xref:System.Speech.Recognition.GrammarBuilder> instâncias, corretamente usando conversões, esse construtor pode ser usado para criar um <xref:System.Speech.Recognition.Choices> objeto de uma lista de qualquer combinação desses objetos.  
  
   
  
## Examples  
 O exemplo a seguir usa `Choices` e <xref:System.Speech.Recognition.GrammarBuilder> objetos para criar um <xref:System.Speech.Recognition.Grammar> frases como "Chamada Anne em sua célula" e "James chamada em seu telefone de trabalho". O exemplo usa conversões implícitas de `Choices` e <xref:System.String> para <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Uma matriz contendo o conjunto de alternativas.</param>
        <summary>Inicializa uma nova instância da <see cref="T:System.Speech.Recognition.Choices" /> classe de uma matriz que contém um ou mais objetos <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada <xref:System.String> em `phrases` define uma alternativa. O mecanismo de reconhecimento de fala pode usar qualquer um dos itens na matriz de cadeia de caracteres para corresponder à entrada de fala. Se `phrases` é uma matriz vazia, o construtor retorna um conjunto vazio de alternativas. Você pode adicionar alternativas usando qualquer um do <xref:System.Speech.Recognition.Choices.Add%2A> métodos.  
  
 O construtor gerará um <xref:System.ArgumentNullException> quando `phrases` é `null` ou qualquer um dos elementos da matriz são `null`. O construtor gerará um <xref:System.ArgumentException> se qualquer elemento na matriz é uma cadeia de caracteres vazia ("").  
  
   
  
## Examples  
 O exemplo a seguir usa <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> objetos para criar um <xref:System.Speech.Recognition.Grammar> para as frases como "Chamada Anne em sua célula" e "James chamada em seu telefone de trabalho". O exemplo usa conversões implícitas de `Choices` e <xref:System.String> para <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adiciona itens ao conjunto de alternativas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Os objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> a serem adicionados a este objeto <see cref="T:System.Speech.Recognition.Choices" />.</param>
        <summary>Adiciona uma matriz que contém um ou mais objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> ao conjunto de alternativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por causa do suporte para conversão implícita de <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, e <xref:System.Speech.Recognition.SemanticResultValue> objetos <xref:System.Speech.Recognition.GrammarBuilder>, essas três classes podem ser adicionados a um <xref:System.Speech.Recognition.Choices> instância também.  
  
 Se `alternateChoices` é uma matriz vazia, esse método não atualiza o conjunto de alternativas.  
  
 Os aplicativos podem usar ambos <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> e <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> para adicionar alternativas para uma <xref:System.Speech.Recognition.Choices> objeto.  
  
 Este método lança um <xref:System.ArgumentNullException> quando `alternateChoices` é `null` ou qualquer um dos elementos da matriz são `null`.  
  
   
  
## Examples  
 O exemplo a seguir cria uma gramática de reconhecimento de fala para frases como "Chamada Anne em sua célula" e "James chamada em seu telefone de trabalho". O exemplo usa ambas as sobrecargas do <xref:System.Speech.Recognition.Choices.Add%2A> método para compilar a gramática.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">As cadeias de caracteres a adicionar a este objeto <see cref="T:System.Speech.Recognition.Choices" />.</param>
        <summary>Adiciona uma matriz que contém um ou mais objetos <see cref="T:System.String" /> ao conjunto de alternativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os aplicativos podem usar ambos <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> e <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> para adicionar alternativas para uma <xref:System.Speech.Recognition.Choices> objeto.  
  
 Se `phrases` é uma matriz vazia, esse método não atualiza o conjunto de alternativas.  
  
 Este método lança um <xref:System.ArgumentNullException> quando `phrases` é `null` ou qualquer um dos elementos da matriz são `null`. Este método lança um <xref:System.ArgumentException> se qualquer elemento na matriz é a cadeia de caracteres vazia ("").  
  
   
  
## Examples  
 O exemplo a seguir cria uma gramática de reconhecimento de fala para frases semelhantes a "Chamada Anne em sua célula" e "James chamada em seu telefone de trabalho". O exemplo usa ambas as sobrecargas do <xref:System.Speech.Recognition.Choices.Add%2A> método para compilar a gramática.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um objeto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> deste objeto <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <returns>Um <see cref="T:System.Speech.Recognition.GrammarBuilder" /> que corresponde a este objeto <see cref="T:System.Speech.Recognition.Choices" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Speech.Recognition.GrammarBuilder> retornado por esse método é equivalente a um retornado por uma das opções a seguir.  
  
-   Chamar o <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> construtor com esse objeto como parâmetro.  
  
-   Usar o implícita ou explícita convertido do objeto para um <xref:System.Speech.Recognition.GrammarBuilder>.  
  
   
  
## Examples  
 O exemplo a seguir cria uma gramática de reconhecimento de fala para alterar a cor do plano de fundo.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>