<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e3ba992dc823e9cdfaada6bc75282d1fd9946d0" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53511884" /></Metadata><TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognitionEngine = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3df71-101">Fornece os meios de acessar e gerenciar um mecanismo de reconhecimento de fala no processo.</span><span class="sxs-lookup"><span data-stu-id="3df71-101">Provides the means to access and manage an in-process speech recognition engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-102">Você pode criar uma instância dessa classe para nenhum dos reconhecedores de fala instalados.</span><span class="sxs-lookup"><span data-stu-id="3df71-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="3df71-103">Para obter informações sobre os quais há reconhecedores instalados, use estático <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-104">Essa classe é para fala reconhecimento mecanismos em processo e fornece controle sobre vários aspectos de reconhecimento de fala, da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="3df71-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="3df71-105">Para criar um reconhecedor de fala no processo, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> construtores.</span><span class="sxs-lookup"><span data-stu-id="3df71-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="3df71-106">Para gerenciar as gramáticas do reconhecimento de fala, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> métodos e o <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="3df71-107">Para configurar a entrada para o reconhecedor, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="3df71-108">Para executar o reconhecimento de fala, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="3df71-109">Para modificar como reconhecimento trata silêncio ou inesperado de entrada, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="3df71-110">Para alterar o número de alternativas que retorna o reconhecedor, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="3df71-111">O reconhecedor retorna resultados de reconhecimento em um <xref:System.Speech.Recognition.RecognitionResult> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="3df71-112">Para sincronizar as alterações para o reconhecedor, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="3df71-113">O reconhecedor usa mais de um thread para executar tarefas.</span><span class="sxs-lookup"><span data-stu-id="3df71-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="3df71-114">Para emular a entrada para o reconhecedor, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="3df71-115">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> é de objeto para o único uso do processo que criar uma instância do objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="3df71-116">Por outro lado, o <xref:System.Speech.Recognition.SpeechRecognizer> compartilha um identificador único com qualquer aplicativo que queira utilizá-la.</span><span class="sxs-lookup"><span data-stu-id="3df71-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3df71-117">Sempre chamar <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> antes de liberar sua última referência para o reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="3df71-118">Caso contrário, os recursos que ele está usando não serão liberados até que o coletor de lixo chama o objeto de reconhecedor `Finalize` método.</span><span class="sxs-lookup"><span data-stu-id="3df71-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-119">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-120">Como este exemplo usa o `Multiple` modo do <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> método, ele executa o reconhecimento até você fechar a janela do console ou parar a depuração.</span><span class="sxs-lookup"><span data-stu-id="3df71-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-121">Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-122">Você pode construir um <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância de qualquer um dos seguintes:</span><span class="sxs-lookup"><span data-stu-id="3df71-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="3df71-123">O mecanismo de reconhecimento de fala padrão do sistema</span><span class="sxs-lookup"><span data-stu-id="3df71-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="3df71-124">Um mecanismo de reconhecimento de fala específico que você especifica por nome</span><span class="sxs-lookup"><span data-stu-id="3df71-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="3df71-125">O mecanismo de reconhecimento de fala padrão para uma localidade que você especificar</span><span class="sxs-lookup"><span data-stu-id="3df71-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="3df71-126">Um mecanismo de reconhecimento específico que atenda aos critérios que você especificar em uma <xref:System.Speech.Recognition.RecognizerInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="3df71-127">Antes do reconhecedor de fala pode começar o reconhecimento, você deve carregar a gramática de reconhecimento de fala de pelo menos um e configurar a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="3df71-128">Para carregar uma gramática, chame o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-129">Para configurar a entrada de áudio, use um dos seguintes métodos:</span><span class="sxs-lookup"><span data-stu-id="3df71-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-130">Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> usando o reconhecedor de fala padrão do sistema.</span><span class="sxs-lookup"><span data-stu-id="3df71-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-131">Antes de começar o reconhecimento de fala do reconhecedor de fala, você deve carregar pelo menos uma gramática de reconhecimento e configurar a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="3df71-132">Para carregar uma gramática, chame o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-133">Para configurar a entrada de áudio, use um dos seguintes métodos:</span><span class="sxs-lookup"><span data-stu-id="3df71-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Globalization.CultureInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="3df71-134">A localidade para a qual o reconhecedor de fala deve dar suporte.</span><span class="sxs-lookup"><span data-stu-id="3df71-134">The locale that the speech recognizer must support.</span></span></param>
        <summary><span data-ttu-id="3df71-135">Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> usando o reconhecedor de fala padrão de uma localidade específica.</span><span class="sxs-lookup"><span data-stu-id="3df71-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-136">Microsoft Windows e a API de System. Speech aceitam todos os códigos de idioma-país válidos.</span><span class="sxs-lookup"><span data-stu-id="3df71-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="3df71-137">Para executar o reconhecimento de fala usando o idioma especificado no `CultureInfo` argumento, um mecanismo de reconhecimento de fala que dá suporte a que o código de idioma-país deve ser instalado.</span><span class="sxs-lookup"><span data-stu-id="3df71-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="3df71-138">Os mecanismos de reconhecimento de fala que acompanha o Microsoft Windows 7 funcionam com os seguintes códigos de idioma-país.</span><span class="sxs-lookup"><span data-stu-id="3df71-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="3df71-139">en-GB.</span><span class="sxs-lookup"><span data-stu-id="3df71-139">en-GB.</span></span> <span data-ttu-id="3df71-140">Inglês (Reino Unido)</span><span class="sxs-lookup"><span data-stu-id="3df71-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="3df71-141">en-US.</span><span class="sxs-lookup"><span data-stu-id="3df71-141">en-US.</span></span> <span data-ttu-id="3df71-142">Inglês (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="3df71-142">English (United States)</span></span>  
  
-   <span data-ttu-id="3df71-143">de-DE.</span><span class="sxs-lookup"><span data-stu-id="3df71-143">de-DE.</span></span> <span data-ttu-id="3df71-144">Alemão (Alemanha)</span><span class="sxs-lookup"><span data-stu-id="3df71-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="3df71-145">es-ES.</span><span class="sxs-lookup"><span data-stu-id="3df71-145">es-ES.</span></span> <span data-ttu-id="3df71-146">Espanhol (Espanha)</span><span class="sxs-lookup"><span data-stu-id="3df71-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="3df71-147">fr-FR.</span><span class="sxs-lookup"><span data-stu-id="3df71-147">fr-FR.</span></span> <span data-ttu-id="3df71-148">Francês (França)</span><span class="sxs-lookup"><span data-stu-id="3df71-148">French (France)</span></span>  
  
-   <span data-ttu-id="3df71-149">ja-JP.</span><span class="sxs-lookup"><span data-stu-id="3df71-149">ja-JP.</span></span> <span data-ttu-id="3df71-150">Japonês (Japão)</span><span class="sxs-lookup"><span data-stu-id="3df71-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="3df71-151">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="3df71-151">zh-CN.</span></span> <span data-ttu-id="3df71-152">Chinês (China)</span><span class="sxs-lookup"><span data-stu-id="3df71-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="3df71-153">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="3df71-153">zh-TW.</span></span> <span data-ttu-id="3df71-154">Chinês (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="3df71-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="3df71-155">Códigos de idioma de duas letras, como "en", "fr" ou "es" também são permitidas.</span><span class="sxs-lookup"><span data-stu-id="3df71-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="3df71-156">Antes do reconhecedor de fala pode começar o reconhecimento, você deve carregar a gramática de reconhecimento de fala de pelo menos um e configurar a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="3df71-157">Para carregar uma gramática, chame o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-158">Para configurar a entrada de áudio, use um dos seguintes métodos:</span><span class="sxs-lookup"><span data-stu-id="3df71-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-159">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico e inicializa um reconhecedor de fala para a localidade en-US.</span><span class="sxs-lookup"><span data-stu-id="3df71-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-160">Nenhum dos reconhecedores de fala instalados dão suporte à localidade especificada, ou <paramref name="culture" /> é a cultura invariável.</span><span class="sxs-lookup"><span data-stu-id="3df71-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-161"><paramref name="Culture" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-161"><paramref name="Culture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Speech.Recognition.RecognizerInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerInfo" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo"><span data-ttu-id="3df71-162">As informações para o reconhecedor de fala específico.</span><span class="sxs-lookup"><span data-stu-id="3df71-162">The information for the specific speech recognizer.</span></span></param>
        <summary><span data-ttu-id="3df71-163">Inicializa uma nova instância do <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> usando as informações em um objeto <see cref="T:System.Speech.Recognition.RecognizerInfo" /> para especificar o reconhecedor a ser usado.</span><span class="sxs-lookup"><span data-stu-id="3df71-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-164">Você pode criar uma instância dessa classe para nenhum dos reconhecedores de fala instalados.</span><span class="sxs-lookup"><span data-stu-id="3df71-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="3df71-165">Para obter informações sobre os quais há reconhecedores instalados, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-166">Antes do reconhecedor de fala pode começar o reconhecimento, você deve carregar a gramática de reconhecimento de fala de pelo menos um e configurar a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="3df71-167">Para carregar uma gramática, chame o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-168">Para configurar a entrada de áudio, use um dos seguintes métodos:</span><span class="sxs-lookup"><span data-stu-id="3df71-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-169">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico e inicializa um reconhecedor de fala que dá suporte ao idioma inglês.</span><span class="sxs-lookup"><span data-stu-id="3df71-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : string -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId"><span data-ttu-id="3df71-170">O nome do token do reconhecedor de fala a ser usado.</span><span class="sxs-lookup"><span data-stu-id="3df71-170">The token name of the speech recognizer to use.</span></span></param>
        <summary><span data-ttu-id="3df71-171">Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> com um parâmetro de cadeia de caracteres que especifica o nome do reconhecedor a ser usado.</span><span class="sxs-lookup"><span data-stu-id="3df71-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-172">O nome do token do reconhecedor de é o valor da <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> propriedade do <xref:System.Speech.Recognition.RecognizerInfo> objeto retornado pelo <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> propriedade do reconhecedor de.</span><span class="sxs-lookup"><span data-stu-id="3df71-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="3df71-173">Para obter uma coleção de todos os reconhecedores instalados, use estático <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-174">Antes do reconhecedor de fala pode começar o reconhecimento, você deve carregar a gramática de reconhecimento de fala de pelo menos um e configurar a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="3df71-175">Para carregar uma gramática, chame o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-176">Para configurar a entrada de áudio, use um dos seguintes métodos:</span><span class="sxs-lookup"><span data-stu-id="3df71-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-177">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico e cria uma instância do 8.0 do reconhecedor de fala para Windows (inglês - EUA).</span><span class="sxs-lookup"><span data-stu-id="3df71-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-178">Nenhum reconhecedor de fala com esse nome de token está instalado ou <paramref name="recognizerId" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-179"><paramref name="recognizerId" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-179"><paramref name="recognizerId" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-180">Obtém o formato de áudio sendo recebido pelo <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="3df71-181">O formato de áudio na entrada para a instância <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ou <see langword="null" /> se a entrada não estiver configurada ou definida como a entrada nula.</span><span class="sxs-lookup"><span data-stu-id="3df71-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-182">Para configurar a entrada de áudio, use um dos seguintes métodos:</span><span class="sxs-lookup"><span data-stu-id="3df71-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-183">O exemplo abaixo usa <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> para obter e exibir dados de formato de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-184">Obtém o nível do áudio sendo recebido pelo <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="3df71-185">O nível do áudio da entrada para o reconhecedor de fala, de 0 a 100.</span><span class="sxs-lookup"><span data-stu-id="3df71-185">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-186">O valor 0 representa silêncio e 100 representa o volume máximo de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-187">Gerado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> relata o nível de sua entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-188">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> gera esse evento várias vezes por segundo.</span><span class="sxs-lookup"><span data-stu-id="3df71-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="3df71-189">A frequência com a qual o evento é acionado depende do computador no qual o aplicativo está em execução.</span><span class="sxs-lookup"><span data-stu-id="3df71-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="3df71-190">Para obter o nível de áudio no momento do evento, use o <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> propriedade de associado <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="3df71-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="3df71-191">Para obter o nível atual de áudio da entrada para o reconhecedor, use o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="3df71-192">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-193">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-194">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-195">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-195">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-196">O exemplo a seguir adiciona um manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> evento para um <xref:System.Speech.Recognition.SpeechRecognitionEngine> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="3df71-197">O manipulador gera o novo nível de áudio para o console.</span><span class="sxs-lookup"><span data-stu-id="3df71-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-198">Obtém o local atual no fluxo de áudio que está sendo gerado pelo dispositivo que está fornecendo a entrada para o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="3df71-199">O local atual no fluxo de áudio que está sendo gerado pelo dispositivo de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-199">The current location in the audio stream being generated by the input device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-200">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriedade faz referência a posição do dispositivo de entrada no seu fluxo de áudio gerado.</span><span class="sxs-lookup"><span data-stu-id="3df71-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="3df71-201">Por outro lado, o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriedade faz referência a posição do reconhecedor dentro de sua entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="3df71-202">Essas posições podem ser diferentes.</span><span class="sxs-lookup"><span data-stu-id="3df71-202">These positions can be different.</span></span> <span data-ttu-id="3df71-203">Por exemplo, se o reconhecedor recebeu de entrada para as quais ele não tem ainda gerado de um resultado de reconhecimento e em seguida, o valor da <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriedade é menor que o valor da <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-204">No exemplo a seguir, o reconhecedor de fala em processo usa uma gramática de ditado para corresponder à entrada de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="3df71-205">Um manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento grava no console do <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> quando o reconhecedor de fala detecta em sua entrada de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-206">Gerado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detecta um problema no sinal de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-207">Para obter a qual problema ocorreu, use o <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> propriedade de associado <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="3df71-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="3df71-208">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-209">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-210">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-211">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-211">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-212">O exemplo a seguir define um manipulador de eventos que coleta informações sobre um <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-213">Obtém o nível do áudio sendo recebido pelo <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="3df71-214">O estado da entrada de áudio para o reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-214">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-215">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> propriedade representa o estado de áudio com um membro do <xref:System.Speech.Recognition.AudioState> enumeração.</span><span class="sxs-lookup"><span data-stu-id="3df71-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-216">Gerado quando o estado é alterado no áudio que está sendo recebido pelo <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-217">Para obter o estado de áudio no momento do evento, use o <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> propriedade de associado <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="3df71-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="3df71-218">Para obter o estado atual de áudio da entrada para o reconhecedor, use o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="3df71-219">Para obter mais informações sobre o estado de áudio, consulte o <xref:System.Speech.Recognition.AudioState> enumeração.</span><span class="sxs-lookup"><span data-stu-id="3df71-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="3df71-220">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-221">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-222">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-223">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-223">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-224">O exemplo a seguir usa um manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> eventos para gravar o reconhecedor de novo <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> no console sempre que as alterações, usando um membro do <xref:System.Speech.Recognition.AudioState> enumeração.</span><span class="sxs-lookup"><span data-stu-id="3df71-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.BabbleTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-225">Obtém ou define o intervalo de tempo durante o qual um <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> aceita entrada contendo apenas ruídos de fundo, antes de finalizar o reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="3df71-226">A duração do intervalo de tempo.</span><span class="sxs-lookup"><span data-stu-id="3df71-226">The duration of the time interval.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-227">Cada reconhecedor de fala tem um algoritmo para distinguir entre silence e fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="3df71-228">O reconhecedor classifica como ruídos de fundo qualquer não silêncio de entrada que não coincide com a regra inicial de qualquer um do reconhecedor carregados e habilitados gramáticas de reconhecimento de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="3df71-229">Se o reconhecedor recebe apenas ruídos de fundo e silêncio dentro do intervalo de tempo limite de interferência, o reconhecedor finaliza essa operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="3df71-230">Para operações de reconhecimento assíncrono, o reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, onde o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> é de propriedade `true`e o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> é de propriedade `null`.</span><span class="sxs-lookup"><span data-stu-id="3df71-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="3df71-231">Para operações de reconhecimento síncrono e emulação, retorna o reconhecedor `null`, em vez de um válido <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="3df71-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="3df71-232">Se o período de tempo limite de interferência for definido como 0, o reconhecedor não executa uma verificação de tempo limite de interferência.</span><span class="sxs-lookup"><span data-stu-id="3df71-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="3df71-233">O intervalo de tempo limite pode ser qualquer valor não negativo.</span><span class="sxs-lookup"><span data-stu-id="3df71-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="3df71-234">O padrão é 0 segundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-235">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básica que define o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades de um <xref:System.Speech.Recognition.SpeechRecognitionEngine> antes de iniciar o reconhecimento de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="3df71-236">Manipuladores para o reconhecedor de fala <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> eventos de saída de informações de evento para o console para demonstrar como o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades de um <xref:System.Speech.Recognition.SpeechRecognitionEngine> afetam as operações de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3df71-237">Esta propriedade está definida como menos de 0 segundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-237">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-238">Descarta o objeto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognitionEngine.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-239">Descarta o objeto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognitionEngine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="3df71-240"><see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</span><span class="sxs-lookup"><span data-stu-id="3df71-240"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="3df71-241">Descarta o objeto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> e libera os recursos usados durante a sessão.</span><span class="sxs-lookup"><span data-stu-id="3df71-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-242">Emula a entrada para o reconhecedor de fala usando o texto no lugar do áudio para o reconhecimento de fala síncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-243">Esses métodos ignoram a entrada de áudio do sistema e forneça o texto para o reconhecedor como <xref:System.String> objetos ou como uma matriz de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="3df71-244">Isso pode ser útil quando você está testando ou depurando um aplicativo ou gramática.</span><span class="sxs-lookup"><span data-stu-id="3df71-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="3df71-245">Por exemplo, você pode usar a emulação para determinar se uma palavra é em uma gramática e quais semântica é retornada quando a palavra é reconhecida.</span><span class="sxs-lookup"><span data-stu-id="3df71-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="3df71-246">Use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> método para desabilitar a entrada de áudio para o mecanismo de reconhecimento de voz durante as operações de emulação.</span><span class="sxs-lookup"><span data-stu-id="3df71-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="3df71-247">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="3df71-248">O reconhecedor ignora novas linhas e espaço em branco extra e trata de pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3df71-249">O <xref:System.Speech.Recognition.RecognitionResult> objeto gerado pelo reconhecedor de fala em resposta à entrada emulada tem um valor de `null` para seu <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="3df71-250">Para emular o reconhecimento assíncrono, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="3df71-251">A entrada da operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-251">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="3df71-252">Emula a entrada de uma fase para o reconhecedor de fala usando o texto no lugar do áudio para o reconhecimento de fala síncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="3df71-253">O resultado da operação de reconhecimento ou <see langword="null" /> se a operação não for bem-sucedida ou o reconhecedor não estiver habilitado.</span><span class="sxs-lookup"><span data-stu-id="3df71-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-254">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="3df71-255">Os identificadores que são fornecidos com o Vista e Windows 7 Ignorar maiusculas e minúsculas e largura de caracteres ao aplicar regras de gramática para a frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="3df71-256">Para obter mais informações sobre esse tipo de comparação, consulte o <xref:System.Globalization.CompareOptions> valores de enumeração <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> e <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="3df71-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="3df71-257">Os identificadores também ignoram linhas novas e espaço em branco extra e tratam a pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-258">O exemplo de código a seguir é parte de um aplicativo de console que demonstra a entrada emulada, os resultados de reconhecimento associados e os eventos associados gerados pelo reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="3df71-259">O exemplo gera a saída a seguir.</span><span class="sxs-lookup"><span data-stu-id="3df71-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-260">O reconhecedor não tem nenhuma gramática de reconhecimento de fala carregada.</span><span class="sxs-lookup"><span data-stu-id="3df71-260">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-261"><paramref name="inputText" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-261"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-262"><paramref name="inputText" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-262"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="3df71-263">Uma matriz de unidades de palavra que contém a entrada da operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-263">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="3df71-264">Uma combinação bit a bit dos valores de enumeração que descrevem o tipo de comparação a ser usada para a operação de reconhecimento emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="3df71-265">Emula a entrada de palavras específicas no reconhecedor de fala usando texto em vez de áudio para o reconhecimento de fala síncrono e especifica como o reconhecedor trata a comparação Unicode entre as palavras e as gramáticas do reconhecimento de fala carregado.</span><span class="sxs-lookup"><span data-stu-id="3df71-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="3df71-266">O resultado da operação de reconhecimento ou <see langword="null" /> se a operação não for bem-sucedida ou o reconhecedor não estiver habilitado.</span><span class="sxs-lookup"><span data-stu-id="3df71-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-267">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="3df71-268">Usa o reconhecedor `compareOptions` quando ele aplica regras de gramática a frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="3df71-269">Os identificadores que são fornecidos com o Vista e Windows 7 Ignorar maiusculas e minúsculas se o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="3df71-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="3df71-270">O reconhecedor sempre ignora a largura de caractere e nunca ignora o tipo Kana.</span><span class="sxs-lookup"><span data-stu-id="3df71-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="3df71-271">O reconhecedor também ignora as novas linhas e espaço em branco extra e trata de pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="3df71-272">Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions> enumeração.</span><span class="sxs-lookup"><span data-stu-id="3df71-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-273">O reconhecedor não tem nenhuma gramática de reconhecimento de fala carregada.</span><span class="sxs-lookup"><span data-stu-id="3df71-273">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-274"><paramref name="wordUnits" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-274"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-275"><paramref name="wordUnits" /> contém um ou mais elementos <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-275"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3df71-276"><paramref name="compareOptions" /> contém o sinalizador <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-276"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="3df71-277">A frase de entrada da operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-277">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="3df71-278">Uma combinação bit a bit dos valores de enumeração que descrevem o tipo de comparação a ser usada para a operação de reconhecimento emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="3df71-279">Emula a entrada de uma frase no reconhecedor de fala usando texto em vez de áudio para o reconhecimento de fala síncrono e especifica como o reconhecedor trata a comparação Unicode entre a frase e as gramáticas do reconhecimento de fala carregado.</span><span class="sxs-lookup"><span data-stu-id="3df71-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="3df71-280">O resultado da operação de reconhecimento ou <see langword="null" /> se a operação não for bem-sucedida ou o reconhecedor não estiver habilitado.</span><span class="sxs-lookup"><span data-stu-id="3df71-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-281">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="3df71-282">Usa o reconhecedor `compareOptions` quando ele aplica regras de gramática a frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="3df71-283">Os identificadores que são fornecidos com o Vista e Windows 7 Ignorar maiusculas e minúsculas se o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="3df71-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="3df71-284">O reconhecedor sempre ignora a largura de caractere e nunca ignora o tipo Kana.</span><span class="sxs-lookup"><span data-stu-id="3df71-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="3df71-285">O reconhecedor também ignora as novas linhas e espaço em branco extra e trata de pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="3df71-286">Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions> enumeração.</span><span class="sxs-lookup"><span data-stu-id="3df71-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-287">O reconhecedor não tem nenhuma gramática de reconhecimento de fala carregada.</span><span class="sxs-lookup"><span data-stu-id="3df71-287">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-288"><paramref name="inputText" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-288"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-289"><paramref name="inputText" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-289"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3df71-290"><paramref name="compareOptions" /> contém o sinalizador <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-290"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-291">Emula a entrada para o reconhecedor de fala usando o texto no lugar do áudio para o reconhecimento de fala assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-292">Esses métodos ignoram a entrada de áudio do sistema e forneça o texto para o reconhecedor como <xref:System.String> objetos ou como uma matriz de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="3df71-293">Isso pode ser útil quando você está testando ou depurando um aplicativo ou gramática.</span><span class="sxs-lookup"><span data-stu-id="3df71-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="3df71-294">Por exemplo, você pode usar a emulação para determinar se uma palavra é em uma gramática e quais semântica é retornada quando a palavra é reconhecida.</span><span class="sxs-lookup"><span data-stu-id="3df71-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="3df71-295">Use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> método para desabilitar a entrada de áudio para o mecanismo de reconhecimento de voz durante as operações de emulação.</span><span class="sxs-lookup"><span data-stu-id="3df71-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="3df71-296">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="3df71-297">Quando o reconhecedor conclui a operação de reconhecimento assíncrono, ele gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="3df71-298">O reconhecedor ignora novas linhas e espaço em branco extra e trata de pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3df71-299">O <xref:System.Speech.Recognition.RecognitionResult> objeto gerado pelo reconhecedor de fala em resposta à entrada emulada tem um valor de `null` para seu <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="3df71-300">Para emular reconhecimento síncrono, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="3df71-301">A entrada da operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-301">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="3df71-302">Emula a entrada de uma fase para o reconhecedor de fala usando o texto no lugar do áudio para o reconhecimento de fala assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-303">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="3df71-304">Quando o reconhecedor conclui a operação de reconhecimento assíncrono, ele gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="3df71-305">Os identificadores que são fornecidos com o Vista e Windows 7 Ignorar maiusculas e minúsculas e largura de caracteres ao aplicar regras de gramática para a frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="3df71-306">Para obter mais informações sobre esse tipo de comparação, consulte o <xref:System.Globalization.CompareOptions> valores de enumeração <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> e <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="3df71-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="3df71-307">Os identificadores também ignoram linhas novas e espaço em branco extra e tratam a pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-308">O exemplo de código a seguir é parte de um aplicativo de console que demonstra a entrada emulada assíncrona, os resultados de reconhecimento associados e os eventos associados gerados pelo reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="3df71-309">O exemplo gera a saída a seguir.</span><span class="sxs-lookup"><span data-stu-id="3df71-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-310">O reconhecedor não tem nenhuma gramática de reconhecimento de fala carregada ou o reconhecedor tem uma operação de reconhecimento assíncrono que ainda não está completa.</span><span class="sxs-lookup"><span data-stu-id="3df71-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-311"><paramref name="inputText" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-311"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-312"><paramref name="inputText" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-312"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="3df71-313">Uma matriz de unidades de palavra que contém a entrada da operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-313">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="3df71-314">Uma combinação bit a bit dos valores de enumeração que descrevem o tipo de comparação a ser usada para a operação de reconhecimento emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="3df71-315">Emula a entrada de palavras específicas no reconhecedor de fala usando uma matriz de objetos <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> em vez de áudio para o reconhecimento de fala assíncrono e especifica como o reconhecedor trata a comparação Unicode entre as palavras e as gramáticas do reconhecimento de fala carregado.</span><span class="sxs-lookup"><span data-stu-id="3df71-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-316">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="3df71-317">Quando o reconhecedor conclui a operação de reconhecimento assíncrono, ele gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="3df71-318">Usa o reconhecedor `compareOptions` quando ele aplica regras de gramática a frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="3df71-319">Os identificadores que são fornecidos com o Vista e Windows 7 Ignorar maiusculas e minúsculas se o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="3df71-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="3df71-320">Os reconhecedores tenham sempre ignorar a largura de caractere e nunca ignorar o tipo Kana.</span><span class="sxs-lookup"><span data-stu-id="3df71-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="3df71-321">Os identificadores também ignoram linhas novas e espaço em branco extra e tratam a pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="3df71-322">Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions> enumeração.</span><span class="sxs-lookup"><span data-stu-id="3df71-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-323">O reconhecedor não tem nenhuma gramática de reconhecimento de fala carregada ou o reconhecedor tem uma operação de reconhecimento assíncrono que ainda não está completa.</span><span class="sxs-lookup"><span data-stu-id="3df71-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-324"><paramref name="wordUnits" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-324"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-325"><paramref name="wordUnits" /> contém um ou mais elementos <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-325"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3df71-326"><paramref name="compareOptions" /> contém o sinalizador <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-326"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="3df71-327">A frase de entrada da operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-327">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="3df71-328">Uma combinação bit a bit dos valores de enumeração que descrevem o tipo de comparação a ser usada para a operação de reconhecimento emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="3df71-329">Emula a entrada de uma frase no reconhecedor de fala usando texto em vez de áudio para o reconhecimento de fala assíncrono e especifica como o reconhecedor trata a comparação Unicode entre a frase e as gramáticas do reconhecimento de fala carregado.</span><span class="sxs-lookup"><span data-stu-id="3df71-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-330">A gera do reconhecedor de fala a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos como se a operação de reconhecimento não é emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="3df71-331">Quando o reconhecedor conclui a operação de reconhecimento assíncrono, ele gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="3df71-332">Usa o reconhecedor `compareOptions` quando ele aplica regras de gramática a frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="3df71-333">Os identificadores que são fornecidos com o Vista e Windows 7 Ignorar maiusculas e minúsculas se o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> ou <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="3df71-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="3df71-334">Os reconhecedores tenham sempre ignorar a largura de caractere e nunca ignorar o tipo Kana.</span><span class="sxs-lookup"><span data-stu-id="3df71-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="3df71-335">Os identificadores também ignoram linhas novas e espaço em branco extra e tratam a pontuação como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="3df71-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="3df71-336">Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions> enumeração.</span><span class="sxs-lookup"><span data-stu-id="3df71-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-337">O reconhecedor não tem nenhuma gramática de reconhecimento de fala carregada ou o reconhecedor tem uma operação de reconhecimento assíncrono que ainda não está completa.</span><span class="sxs-lookup"><span data-stu-id="3df71-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-338"><paramref name="inputText" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-338"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-339"><paramref name="inputText" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-339"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3df71-340"><paramref name="compareOptions" /> contém o sinalizador <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> ou <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-340"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-341">Gerado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finaliza uma operação de reconhecimento assíncrono da entrada emulada.</span><span class="sxs-lookup"><span data-stu-id="3df71-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-342">Cada <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> método inicia uma operação de reconhecimento assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="3df71-343">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> aciona o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento quando ele finaliza a operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="3df71-344">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operação pode gerar o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="3df71-345">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento é o último evento do tipo que o reconhecedor gera para uma determinada operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="3df71-346">Se o reconhecimento emulado tiver sido bem-sucedida, você pode acessar o resultado de reconhecimento usando um destes procedimentos:</span><span class="sxs-lookup"><span data-stu-id="3df71-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="3df71-347">O <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> propriedade no <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> objeto no manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="3df71-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriedade na <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> objeto no manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="3df71-349">Se o reconhecimento emulado não for bem-sucedida, o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> não é gerado e o <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> será nulo.</span><span class="sxs-lookup"><span data-stu-id="3df71-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="3df71-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> deriva de <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="3df71-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="3df71-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> deriva de <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="3df71-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="3df71-352">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-353">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-354">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-355">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-355">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-356">O exemplo a seguir é parte de um aplicativo de console que carrega uma gramática de reconhecimento de fala e demonstra como entrada emulada assíncrona, os resultados de reconhecimento associados e os eventos associados gerados pelo reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-357">Obtém ou define o intervalo de silêncio que o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> aceitará ao final de uma entrada não ambígua antes de finalizar uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="3df71-358">A duração do intervalo de silêncio.</span><span class="sxs-lookup"><span data-stu-id="3df71-358">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-359">O reconhecedor de fala usa esse intervalo de tempo limite quando a entrada de reconhecimento é ambígua.</span><span class="sxs-lookup"><span data-stu-id="3df71-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="3df71-360">Por exemplo, para uma gramática de reconhecimento de fala que dá suporte ao reconhecimento de um "novo de jogos," ou "novo jogo", "novo de jogos," é uma entrada ambígua e "novo jogo" é uma entrada ambígua.</span><span class="sxs-lookup"><span data-stu-id="3df71-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="3df71-361">Essa propriedade determina quanto tempo o mecanismo de reconhecimento de fala deve esperar para entrada adicional antes de finalizar uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="3df71-362">O intervalo de tempo limite pode ser de 0 segundos para 10 segundos, inclusivos.</span><span class="sxs-lookup"><span data-stu-id="3df71-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="3df71-363">O padrão é 150 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="3df71-364">Para definir o intervalo de tempo limite para entrada ambígua, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3df71-365">Essa propriedade é definida como menor que 0 segundo ou maior que 10 segundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-365">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeoutAmbiguous : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-366">Obtém ou define o intervalo de silêncio que o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> aceitará ao final de uma entrada ambígua antes de finalizar uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="3df71-367">A duração do intervalo de silêncio.</span><span class="sxs-lookup"><span data-stu-id="3df71-367">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-368">O reconhecedor de fala usa esse intervalo de tempo limite quando a entrada de reconhecimento é ambígua.</span><span class="sxs-lookup"><span data-stu-id="3df71-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="3df71-369">Por exemplo, para uma gramática de reconhecimento de fala que dá suporte ao reconhecimento de um "novo de jogos," ou "novo jogo", "novo de jogos," é uma entrada ambígua e "novo jogo" é uma entrada ambígua.</span><span class="sxs-lookup"><span data-stu-id="3df71-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="3df71-370">Essa propriedade determina quanto tempo o mecanismo de reconhecimento de fala deve esperar para entrada adicional antes de finalizar uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="3df71-371">O intervalo de tempo limite pode ser de 0 segundos para 10 segundos, inclusivos.</span><span class="sxs-lookup"><span data-stu-id="3df71-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="3df71-372">O padrão é 500 milissegundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="3df71-373">Para definir o intervalo de tempo limite para entrada ambígua, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3df71-374">Essa propriedade é definida como menor que 0 segundo ou maior que 10 segundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-374">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-375">Obtém uma coleção de objetos <see cref="T:System.Speech.Recognition.Grammar" /> carregados nessa instância <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <value><span data-ttu-id="3df71-376">A coleção de objetos <see cref="T:System.Speech.Recognition.Grammar" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3df71-377">O exemplo a seguir gera informações para o console para cada gramática de reconhecimento de fala carregada atualmente por um reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3df71-378">Copie a coleção de gramática para evitar erros se a coleção é modificada enquanto esse método enumera os elementos da coleção.</span><span class="sxs-lookup"><span data-stu-id="3df71-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.InitialSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-379">Obtém ou define o intervalo de tempo durante o qual um <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> aceita entradas contendo apenas silêncio antes de finalizar o reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="3df71-380">A duração do intervalo de silêncio.</span><span class="sxs-lookup"><span data-stu-id="3df71-380">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-381">Cada reconhecedor de fala tem um algoritmo para distinguir entre silence e fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="3df71-382">Se a entrada do reconhecedor for silêncio durante o período de tempo limite de silêncio inicial, o reconhecedor finaliza essa operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="3df71-383">Para operações de reconhecimento assíncrono e emulação, gera o reconhecedor a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, onde o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> é de propriedade `true`e o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> é de propriedade `null`.</span><span class="sxs-lookup"><span data-stu-id="3df71-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="3df71-384">Para operações de reconhecimento síncrono e emulação, retorna o reconhecedor `null`, em vez de um válido <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="3df71-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="3df71-385">Se o intervalo de tempo limite de silêncio inicial é definido como 0, o reconhecedor não realiza uma verificação de tempo limite de silêncio inicial.</span><span class="sxs-lookup"><span data-stu-id="3df71-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="3df71-386">O intervalo de tempo limite pode ser qualquer valor não negativo.</span><span class="sxs-lookup"><span data-stu-id="3df71-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="3df71-387">O padrão é 0 segundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-388">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-389">O exemplo define o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades de um <xref:System.Speech.Recognition.SpeechRecognitionEngine> antes de iniciar o reconhecimento de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="3df71-390">Manipuladores para o reconhecedor de fala <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> eventos de saída de informações de evento para o console para demonstrar como o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades de um <xref:System.Speech.Recognition.SpeechRecognitionEngine> propriedades afetam as operações de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3df71-391">Esta propriedade está definida como menos de 0 segundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-391">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberSignature Language="F#" Value="static member InstalledRecognizers : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-392">Retorna as informações de todos os identificadores de fala instalados no sistema atual.</span><span class="sxs-lookup"><span data-stu-id="3df71-392">Returns information for all of the installed speech recognizers on the current system.</span></span></summary>
        <returns><span data-ttu-id="3df71-393">Uma coleção somente leitura dos objetos <see cref="T:System.Speech.Recognition.RecognizerInfo" /> que descrevem os reconhecedores instalados.</span><span class="sxs-lookup"><span data-stu-id="3df71-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-394">Para obter informações sobre o reconhecedor atual, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-395">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-396">O exemplo usa a coleção retornada pelo <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> método para localizar um reconhecedor de fala que dá suporte ao idioma inglês.</span><span class="sxs-lookup"><span data-stu-id="3df71-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="3df71-397">O objeto de gramática a ser carregado.</span><span class="sxs-lookup"><span data-stu-id="3df71-397">The grammar object to load.</span></span></param>
        <summary><span data-ttu-id="3df71-398">Carrega de forma síncrona um objeto <see cref="T:System.Speech.Recognition.Grammar" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-399">O reconhecedor gera uma exceção se o <xref:System.Speech.Recognition.Grammar> objeto já está carregado, está sendo carregado de forma assíncrona ou falhou ao ser carregado em nenhum reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="3df71-400">Não é possível carregar o mesmo <xref:System.Speech.Recognition.Grammar> objeto em várias instâncias do <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="3df71-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="3df71-401">Em vez disso, crie um novo <xref:System.Speech.Recognition.Grammar> para cada objeto <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância.</span><span class="sxs-lookup"><span data-stu-id="3df71-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="3df71-402">Se o reconhecedor estiver em execução, os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> para pausar o mecanismo de reconhecimento de fala antes do carregamento, descarregamento, habilitando ou desabilitando uma gramática.</span><span class="sxs-lookup"><span data-stu-id="3df71-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="3df71-403">Quando você carrega uma gramática, ele é habilitado por padrão.</span><span class="sxs-lookup"><span data-stu-id="3df71-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="3df71-404">Para desabilitar uma gramática de carregado, use o <xref:System.Speech.Recognition.Grammar.Enabled%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="3df71-405">Para carregar uma <xref:System.Speech.Recognition.Grammar> objeto de forma assíncrona, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-406">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-407">O exemplo cria um <xref:System.Speech.Recognition.DictationGrammar> e carrega-os em um reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-408"><paramref name="Grammar" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-408"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-409"><paramref name="Grammar" /> não está em um objeto válido.</span><span class="sxs-lookup"><span data-stu-id="3df71-409"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="3df71-410">A gramática de reconhecimento de fala a ser carregada.</span><span class="sxs-lookup"><span data-stu-id="3df71-410">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="3df71-411">Carrega de forma assíncrona uma gramática de reconhecimento de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-411">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-412">Quando o reconhecedor conclui o carregamento uma <xref:System.Speech.Recognition.Grammar> do objeto, ele gera um <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="3df71-413">O reconhecedor gera uma exceção se o <xref:System.Speech.Recognition.Grammar> objeto já está carregado, está sendo carregado de forma assíncrona ou falhou ao ser carregado em nenhum reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="3df71-414">Não é possível carregar o mesmo <xref:System.Speech.Recognition.Grammar> objeto em várias instâncias do <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="3df71-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="3df71-415">Em vez disso, crie um novo <xref:System.Speech.Recognition.Grammar> para cada objeto <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância.</span><span class="sxs-lookup"><span data-stu-id="3df71-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="3df71-416">Se o reconhecedor estiver em execução, os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> para pausar o mecanismo de reconhecimento de fala antes do carregamento, descarregamento, habilitando ou desabilitando uma gramática.</span><span class="sxs-lookup"><span data-stu-id="3df71-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="3df71-417">Quando você carrega uma gramática, ele é habilitado por padrão.</span><span class="sxs-lookup"><span data-stu-id="3df71-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="3df71-418">Para desabilitar uma gramática de carregado, use o <xref:System.Speech.Recognition.Grammar.Enabled%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="3df71-419">Para carregar uma gramática de reconhecimento de fala de forma síncrona, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-420"><paramref name="Grammar" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-420"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-421"><paramref name="Grammar" /> não está em um objeto válido.</span><span class="sxs-lookup"><span data-stu-id="3df71-421"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3df71-422">A operação assíncrona foi cancelada.</span><span class="sxs-lookup"><span data-stu-id="3df71-422">The asynchronous operation was canceled.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-423">Gerado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> termina o carregamento assíncrono de um <see cref="T:System.Speech.Recognition.Grammar" /> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-424">O reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método inicia uma operação assíncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="3df71-425">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> gera esse evento quando ele conclui a operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="3df71-426">Para obter o <xref:System.Speech.Recognition.Grammar> objeto que o reconhecedor carregado, use o <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> propriedade de associado <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="3df71-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="3df71-427">Para obter o atual <xref:System.Speech.Recognition.Grammar> objetos que o reconhecedor tiver sido carregado, use o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="3df71-428">Se o reconhecedor estiver em execução, os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> para pausar o mecanismo de reconhecimento de fala antes do carregamento, descarregamento, habilitando ou desabilitando uma gramática.</span><span class="sxs-lookup"><span data-stu-id="3df71-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="3df71-429">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-430">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-431">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-432">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-432">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-433">O exemplo a seguir cria um reconhecedor de fala no processo e, em seguida, cria dois tipos de gramáticas de reconhecimento de palavras específicas e para aceitar o ditado livre.</span><span class="sxs-lookup"><span data-stu-id="3df71-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="3df71-434">O exemplo constrói uma <xref:System.Speech.Recognition.Grammar> objeto de cada um das gramáticas do reconhecimento de fala concluídos, em seguida, carrega de forma assíncrona o <xref:System.Speech.Recognition.Grammar> objetos para o <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância.</span><span class="sxs-lookup"><span data-stu-id="3df71-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="3df71-435">Manipuladores para o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos gravar o nome no console o <xref:System.Speech.Recognition.Grammar> objeto que foi usado para realizar o reconhecimento e o texto de resultado do reconhecimento, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="3df71-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-436">Obtém ou define o número máximo de resultados alternativos de reconhecimento que o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> retorna para cada operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="3df71-437">O número de resultados alternativos a serem retornados.</span><span class="sxs-lookup"><span data-stu-id="3df71-437">The number of alternate results to return.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-438">O <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propriedade do <xref:System.Speech.Recognition.RecognitionResult> classe contém a coleção de <xref:System.Speech.Recognition.RecognizedPhrase> objetos que representam possíveis interpretações da entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="3df71-439">O valor padrão para <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> é 10.</span><span class="sxs-lookup"><span data-stu-id="3df71-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3df71-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> é definido com um valor menor que 0.</span><span class="sxs-lookup"><span data-stu-id="3df71-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberSignature Language="F#" Value="member this.QueryRecognizerSetting : string -&gt; obj" Usage="speechRecognitionEngine.QueryRecognizerSetting settingName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="3df71-441">O nome da configuração a ser retornada.</span><span class="sxs-lookup"><span data-stu-id="3df71-441">The name of the setting to return.</span></span></param>
        <summary><span data-ttu-id="3df71-442">Retorna os valores das configurações do reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-442">Returns the values of settings for the recognizer.</span></span></summary>
        <returns><span data-ttu-id="3df71-443">O valor da configuração.</span><span class="sxs-lookup"><span data-stu-id="3df71-443">The value of the setting.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-444">Configurações do reconhecedor podem conter a cadeia de caracteres, inteiro de 64 bits ou dados de endereço de memória.</span><span class="sxs-lookup"><span data-stu-id="3df71-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="3df71-445">A tabela a seguir descreve as configurações que são definidas para uma API do Microsoft Speech (SAPI)-reconhecedor em conformidade.</span><span class="sxs-lookup"><span data-stu-id="3df71-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="3df71-446">As configurações a seguir devem ter o mesmo intervalo para cada identificador que é compatível com a configuração.</span><span class="sxs-lookup"><span data-stu-id="3df71-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="3df71-447">Um identificador compatível com SAPI não é necessário para dar suporte a essas configurações e pode dar suporte a outras configurações.</span><span class="sxs-lookup"><span data-stu-id="3df71-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="3df71-448">Nome</span><span class="sxs-lookup"><span data-stu-id="3df71-448">Name</span></span>|<span data-ttu-id="3df71-449">Descrição</span><span class="sxs-lookup"><span data-stu-id="3df71-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="3df71-450">Especifica o consumo de CPU do reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="3df71-451">O intervalo é de 0 a 100.</span><span class="sxs-lookup"><span data-stu-id="3df71-451">The range is from 0 to 100.</span></span> <span data-ttu-id="3df71-452">O valor padrão é 50.</span><span class="sxs-lookup"><span data-stu-id="3df71-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="3df71-453">Indica o comprimento de silêncio no final da entrada não ambígua antes que o reconhecedor de fala conclui uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="3df71-454">O intervalo é de 0 a 10.000 milissegundos (ms).</span><span class="sxs-lookup"><span data-stu-id="3df71-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="3df71-455">Essa configuração corresponde do reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="3df71-456">Padrão = 150 ms.</span><span class="sxs-lookup"><span data-stu-id="3df71-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="3df71-457">Indica o comprimento de silêncio no final da entrada ambígua antes que o reconhecedor de fala conclui uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="3df71-458">O intervalo é de 0 a 10.000 ms.</span><span class="sxs-lookup"><span data-stu-id="3df71-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="3df71-459">Essa configuração corresponde do reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="3df71-460">Padrão = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="3df71-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="3df71-461">Indica se a adaptação do modelo acústico é ON (valor = `1`) ou OFF (valor = `0`).</span><span class="sxs-lookup"><span data-stu-id="3df71-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="3df71-462">O valor padrão é `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="3df71-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="3df71-463">Indica se a adaptação do plano de fundo é ON (valor = `1`) ou OFF (valor = `0`), e a persistir a configuração no registro.</span><span class="sxs-lookup"><span data-stu-id="3df71-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="3df71-464">O valor padrão é `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="3df71-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="3df71-465">Para atualizar uma configuração para o reconhecedor, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-466">O exemplo a seguir é parte de um aplicativo de console que gera os valores para um número das configurações definidas para o reconhecedor que dá suporte à localidade en-US.</span><span class="sxs-lookup"><span data-stu-id="3df71-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="3df71-467">O exemplo gera a saída a seguir.</span><span class="sxs-lookup"><span data-stu-id="3df71-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-468"><paramref name="settingName" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-468"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-469"><paramref name="settingName" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-469"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="3df71-470">O reconhecedor não tem uma configuração com esse nome.</span><span class="sxs-lookup"><span data-stu-id="3df71-470">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-471">Inicia uma operação de reconhecimento de fala síncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-471">Starts a synchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-472">Esses métodos executam uma operação de reconhecimento de único, síncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="3df71-473">O reconhecedor executa esta operação em relação a suas gramáticas de reconhecimento de fala carregados e habilitados.</span><span class="sxs-lookup"><span data-stu-id="3df71-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="3df71-474">Durante uma chamada para esse método, o reconhecedor pode disparar os eventos a seguir:</span><span class="sxs-lookup"><span data-stu-id="3df71-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="3df71-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="3df71-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="3df71-476">Gerado quando o reconhecedor detecta a entrada que podem ser identificadas como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="3df71-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="3df71-478">Gerado quando a entrada cria uma correspondência ambígua com um das gramáticas do Active Directory.</span><span class="sxs-lookup"><span data-stu-id="3df71-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="3df71-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="3df71-480">Gerado quando o reconhecedor Finaliza uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="3df71-481">O reconhecedor não gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento ao usar uma da <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="3df71-482">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> métodos retornam uma <xref:System.Speech.Recognition.RecognitionResult> objeto, ou `null` se a operação não for bem-sucedida ou o reconhecedor não estiver habilitado.</span><span class="sxs-lookup"><span data-stu-id="3df71-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="3df71-483">Uma operação síncrona de reconhecimento pode falhar pelos seguintes motivos:</span><span class="sxs-lookup"><span data-stu-id="3df71-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="3df71-484">Conversão de fala não for detectado antes dos intervalos de tempo limite expirarem para a <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades, ou para o `initialSilenceTimeout` parâmetro do <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="3df71-485">O mecanismo de reconhecimento de fala de detecta, mas não encontrar correspondências em qualquer um dos seus carregados e habilitados <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="3df71-486">Para modificar como o reconhecedor trata os horários de fala ou silêncio em relação ao reconhecimento, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="3df71-487">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> deve ter pelo menos um <xref:System.Speech.Recognition.Grammar> objeto carregado antes de executar o reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="3df71-488">Para carregar uma gramática de reconhecimento de fala, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-489">Para executar o reconhecimento assíncrono, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberSignature Language="F#" Value="member this.Recognize : unit -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-490">Executa uma operação de reconhecimento de fala síncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-490">Performs a synchronous speech recognition operation.</span></span></summary>
        <returns><span data-ttu-id="3df71-491">O resultado do reconhecimento para a entrada ou <see langword="null" /> se a operação não for bem-sucedida ou o reconhecedor não estiver habilitado.</span><span class="sxs-lookup"><span data-stu-id="3df71-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-492">Esse método executa uma operação de reconhecimento único.</span><span class="sxs-lookup"><span data-stu-id="3df71-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="3df71-493">O reconhecedor executa esta operação em relação a suas gramáticas de reconhecimento de fala carregados e habilitados.</span><span class="sxs-lookup"><span data-stu-id="3df71-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="3df71-494">Durante uma chamada para esse método, o reconhecedor pode disparar os eventos a seguir:</span><span class="sxs-lookup"><span data-stu-id="3df71-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="3df71-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="3df71-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="3df71-496">Gerado quando o reconhecedor detecta a entrada que podem ser identificadas como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="3df71-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="3df71-498">Gerado quando a entrada cria uma correspondência ambígua com um das gramáticas do Active Directory.</span><span class="sxs-lookup"><span data-stu-id="3df71-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="3df71-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="3df71-500">Gerado quando o reconhecedor Finaliza uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="3df71-501">O reconhecedor não gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento ao usar esse método.</span><span class="sxs-lookup"><span data-stu-id="3df71-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="3df71-502">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> método retorna um <xref:System.Speech.Recognition.RecognitionResult> objeto, ou `null` se a operação não for bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="3df71-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="3df71-503">Uma operação síncrona de reconhecimento pode falhar pelos seguintes motivos:</span><span class="sxs-lookup"><span data-stu-id="3df71-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="3df71-504">Conversão de fala não for detectado antes dos intervalos de tempo limite expirarem para a <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="3df71-505">O mecanismo de reconhecimento de fala de detecta, mas não encontrar correspondências em qualquer um dos seus carregados e habilitados <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="3df71-506">Para executar o reconhecimento assíncrono, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-507">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-508">O exemplo cria um <xref:System.Speech.Recognition.DictationGrammar>, carrega-os em um reconhecedor de fala no processo e executa uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="F#" Value="member this.Recognize : TimeSpan -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize initialSilenceTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout"><span data-ttu-id="3df71-509">O intervalo de tempo durante o qual um reconhecedor de fala aceita uma entrada contendo apenas silêncio antes de finalizar o reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span></span></param>
        <summary><span data-ttu-id="3df71-510">Executa uma operação síncrona de reconhecimento de fala com um período de tempo limite de silêncio inicial especificado.</span><span class="sxs-lookup"><span data-stu-id="3df71-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span></span></summary>
        <returns><span data-ttu-id="3df71-511">O resultado do reconhecimento para a entrada ou <see langword="null" /> se a operação não for bem-sucedida ou o reconhecedor não estiver habilitado.</span><span class="sxs-lookup"><span data-stu-id="3df71-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-512">Se o mecanismo de reconhecimento de fala detecta fala dentro do intervalo de tempo especificado por `initialSilenceTimeout` argumento, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> executa uma operação de reconhecimento de único e, em seguida, termina.</span><span class="sxs-lookup"><span data-stu-id="3df71-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="3df71-513">O `initialSilenceTimeout` parâmetro substitui o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="3df71-514">Durante uma chamada para esse método, o reconhecedor pode disparar os eventos a seguir:</span><span class="sxs-lookup"><span data-stu-id="3df71-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="3df71-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="3df71-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="3df71-516">Gerado quando o reconhecedor detecta a entrada que podem ser identificadas como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="3df71-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="3df71-518">Gerado quando a entrada cria uma correspondência ambígua com um das gramáticas do Active Directory.</span><span class="sxs-lookup"><span data-stu-id="3df71-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="3df71-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="3df71-520">Gerado quando o reconhecedor Finaliza uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="3df71-521">O reconhecedor não gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento ao usar esse método.</span><span class="sxs-lookup"><span data-stu-id="3df71-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="3df71-522">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> método retorna um <xref:System.Speech.Recognition.RecognitionResult> objeto, ou `null` se a operação não for bem-sucedida.</span><span class="sxs-lookup"><span data-stu-id="3df71-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="3df71-523">Uma operação síncrona de reconhecimento pode falhar pelos seguintes motivos:</span><span class="sxs-lookup"><span data-stu-id="3df71-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="3df71-524">Conversão de fala não for detectado antes dos intervalos de tempo limite expirarem para a <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou para o `initialSilenceTimeout` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="3df71-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="3df71-525">O mecanismo de reconhecimento de fala de detecta, mas não encontrar correspondências em qualquer um dos seus carregados e habilitados <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="3df71-526">Para executar o reconhecimento assíncrono, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-527">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-528">O exemplo cria um <xref:System.Speech.Recognition.DictationGrammar>, carrega-os em um reconhecedor de fala no processo e executa uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-529">Inicia uma operação de reconhecimento de fala assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-529">Starts an asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-530">Esses métodos executam único ou múltiplo, operações de reconhecimento assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="3df71-531">O reconhecedor executa cada operação em suas gramáticas de reconhecimento de fala carregados e habilitados.</span><span class="sxs-lookup"><span data-stu-id="3df71-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="3df71-532">Durante uma chamada para esse método, o reconhecedor pode disparar os eventos a seguir:</span><span class="sxs-lookup"><span data-stu-id="3df71-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="3df71-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="3df71-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="3df71-534">Gerado quando o reconhecedor detecta a entrada que podem ser identificadas como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="3df71-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="3df71-536">Gerado quando a entrada cria uma correspondência ambígua com um das gramáticas do Active Directory.</span><span class="sxs-lookup"><span data-stu-id="3df71-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="3df71-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="3df71-538">Gerado quando o reconhecedor Finaliza uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="3df71-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3df71-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="3df71-540">Gerado quando um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> conclusão da operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="3df71-541">Para recuperar o resultado de uma operação de reconhecimento assíncrono, anexar um manipulador de eventos para o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="3df71-542">O reconhecedor gera esse evento sempre que ele for concluído com êxito uma operação de reconhecimento de síncrona ou assíncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="3df71-543">Se o reconhecimento não for bem-sucedida, o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> propriedade na <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objeto, que você pode acessar o manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> eventos, será `null`.</span><span class="sxs-lookup"><span data-stu-id="3df71-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="3df71-544">Uma operação de reconhecimento assíncrono pode falhar pelos seguintes motivos:</span><span class="sxs-lookup"><span data-stu-id="3df71-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="3df71-545">Conversão de fala não for detectado antes dos intervalos de tempo limite expirarem para a <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="3df71-546">O mecanismo de reconhecimento de fala de detecta, mas não encontrar correspondências em qualquer um dos seus carregados e habilitados <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="3df71-547">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> deve ter pelo menos um <xref:System.Speech.Recognition.Grammar> objeto carregado antes de executar o reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="3df71-548">Para carregar uma gramática de reconhecimento de fala, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="3df71-549">Para modificar como o reconhecedor trata os horários de fala ou silêncio em relação ao reconhecimento, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="3df71-550">Para executar o reconhecimento de síncrono, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-551">Executa uma única operação de reconhecimento de fala síncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-551">Performs a single, asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-552">Esse método executa uma operação de reconhecimento assíncrono, único.</span><span class="sxs-lookup"><span data-stu-id="3df71-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="3df71-553">O reconhecedor executa a operação em relação a suas gramáticas de reconhecimento de fala carregados e habilitados.</span><span class="sxs-lookup"><span data-stu-id="3df71-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="3df71-554">Durante uma chamada para esse método, o reconhecedor pode disparar os eventos a seguir:</span><span class="sxs-lookup"><span data-stu-id="3df71-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="3df71-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="3df71-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="3df71-556">Gerado quando o reconhecedor detecta a entrada que podem ser identificadas como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="3df71-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="3df71-558">Gerado quando a entrada cria uma correspondência ambígua com um das gramáticas do Active Directory.</span><span class="sxs-lookup"><span data-stu-id="3df71-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="3df71-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="3df71-560">Gerado quando o reconhecedor Finaliza uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="3df71-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3df71-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="3df71-562">Gerado quando um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> conclusão da operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="3df71-563">Para recuperar o resultado de uma operação de reconhecimento assíncrono, anexar um manipulador de eventos para o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="3df71-564">O reconhecedor gera esse evento sempre que ele for concluído com êxito uma operação de reconhecimento de síncrona ou assíncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="3df71-565">Se o reconhecimento não for bem-sucedida, o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> propriedade na <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objeto, que você pode acessar o manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> eventos, será `null`.</span><span class="sxs-lookup"><span data-stu-id="3df71-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="3df71-566">Para executar o reconhecimento de síncrono, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-567">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala assíncrono básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="3df71-568">O exemplo cria um <xref:System.Speech.Recognition.DictationGrammar>, carrega-os em um reconhecedor de fala no processo e executa uma operação de reconhecimento assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="3df71-569">Manipuladores de eventos estão incluídos para demonstrar os eventos que o reconhecedor gera durante a operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : System.Speech.Recognition.RecognizeMode -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="3df71-570">Indica se uma ou várias operações de reconhecimento devem ser executadas.</span><span class="sxs-lookup"><span data-stu-id="3df71-570">Indicates whether to perform one or multiple recognition operations.</span></span></param>
        <summary><span data-ttu-id="3df71-571">Executa uma ou mais operações de reconhecimento de fala assíncronas.</span><span class="sxs-lookup"><span data-stu-id="3df71-571">Performs one or more asynchronous speech recognition operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-572">Se `mode` está <xref:System.Speech.Recognition.RecognizeMode.Multiple>, o reconhecedor continua a executar operações de reconhecimento assíncrono até que o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> método é chamado.</span><span class="sxs-lookup"><span data-stu-id="3df71-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="3df71-573">Durante uma chamada para esse método, o reconhecedor pode disparar os eventos a seguir:</span><span class="sxs-lookup"><span data-stu-id="3df71-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="3df71-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="3df71-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="3df71-575">Gerado quando o reconhecedor detecta a entrada que podem ser identificadas como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="3df71-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="3df71-577">Gerado quando a entrada cria uma correspondência ambígua com um das gramáticas do Active Directory.</span><span class="sxs-lookup"><span data-stu-id="3df71-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="3df71-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="3df71-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="3df71-579">Gerado quando o reconhecedor Finaliza uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="3df71-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="3df71-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="3df71-581">Gerado quando um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> conclusão da operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="3df71-582">Para recuperar o resultado de uma operação de reconhecimento assíncrono, anexar um manipulador de eventos para o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="3df71-583">O reconhecedor gera esse evento sempre que ele for concluído com êxito uma operação de reconhecimento de síncrona ou assíncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="3df71-584">Se o reconhecimento não for bem-sucedida, o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> propriedade na <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objeto, que você pode acessar o manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> eventos, será `null`.</span><span class="sxs-lookup"><span data-stu-id="3df71-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="3df71-585">Uma operação de reconhecimento assíncrono pode falhar pelos seguintes motivos:</span><span class="sxs-lookup"><span data-stu-id="3df71-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="3df71-586">Conversão de fala não for detectado antes dos intervalos de tempo limite expirarem para a <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="3df71-587">O mecanismo de reconhecimento de fala de detecta, mas não encontrar correspondências em qualquer um dos seus carregados e habilitados <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="3df71-588">Para executar o reconhecimento de síncrono, use um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-589">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala assíncrono básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="3df71-590">O exemplo cria um <xref:System.Speech.Recognition.DictationGrammar>, carrega-os em um reconhecedor de fala no processo e executa várias operações de reconhecimento assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="3df71-591">As operações assíncronas são canceladas após 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="3df71-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="3df71-592">Manipuladores de eventos estão incluídos para demonstrar os eventos que o reconhecedor gera durante a operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncCancel : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-593">Encerra o reconhecimento assíncrono sem esperar que a operação de reconhecimento atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="3df71-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-594">Esse método imediatamente finaliza o reconhecimento assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="3df71-595">Se a operação de reconhecimento assíncrono atual está recebendo entrada, a entrada está truncada e a conclusão da operação com a entrada existente.</span><span class="sxs-lookup"><span data-stu-id="3df71-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="3df71-596">Gera o reconhecedor a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento quando uma operação assíncrona é cancelada e define o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriedade do <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> para `true`.</span><span class="sxs-lookup"><span data-stu-id="3df71-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="3df71-597">Esse método cancela as operações assíncronas iniciadas pela <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="3df71-598">Para interromper o reconhecimento assíncrono sem truncamento de entrada, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-599">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o uso do <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="3df71-600">O exemplo cria e carrega uma gramática de reconhecimento de fala, inicia uma operação de reconhecimento assíncrono contínua e, em seguida, faz uma pausa 2 segundos antes que ele cancela a operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="3df71-601">O reconhecedor recebe entrada do arquivo, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="3df71-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="3df71-602">Manipuladores de eventos estão incluídos para demonstrar os eventos que o reconhecedor gera durante a operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncStop : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-603">Interrompe o reconhecimento assíncrono após a conclusão da operação de reconhecimento atual.</span><span class="sxs-lookup"><span data-stu-id="3df71-603">Stops asynchronous recognition after the current recognition operation completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-604">Esse método finaliza o reconhecimento assíncrono sem truncamento de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="3df71-605">Se a operação de reconhecimento assíncrono atual está recebendo entrada, o reconhecedor continua a aceitar a entrada até que a operação de reconhecimento atual seja concluída.</span><span class="sxs-lookup"><span data-stu-id="3df71-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="3df71-606">Gera o reconhecedor a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento quando uma operação assíncrona for interrompida e define o <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriedade do <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> para `true`.</span><span class="sxs-lookup"><span data-stu-id="3df71-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="3df71-607">Esse método interrompe as operações assíncronas iniciadas pela <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="3df71-608">Para cancelar imediatamente o reconhecimento assíncrono com apenas a entrada existente, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-609">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o uso do <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="3df71-610">O exemplo cria e carrega uma gramática de reconhecimento de fala, inicia uma operação de reconhecimento assíncrono contínua e, em seguida, faz uma pausa 2 segundos antes de parar a operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="3df71-611">O reconhecedor recebe entrada do arquivo, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="3df71-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="3df71-612">Manipuladores de eventos estão incluídos para demonstrar os eventos que o reconhecedor gera durante a operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.RecognizeCompleted : EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " Usage="member this.RecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-613">Acionado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finaliza uma operação assíncrona de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-614">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> do objeto <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> método inicia uma operação de reconhecimento assíncrono.</span><span class="sxs-lookup"><span data-stu-id="3df71-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="3df71-615">Quando o reconhecedor finaliza a operação assíncrona, ele gera esse evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="3df71-616">Usando o manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, você pode acessar o <xref:System.Speech.Recognition.RecognitionResult> no <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="3df71-617">Se não tiver sido bem-sucedida, reconhecimento <xref:System.Speech.Recognition.RecognitionResult> será `null`.</span><span class="sxs-lookup"><span data-stu-id="3df71-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="3df71-618">Para determinar se um tempo limite ou uma interrupção na entrada de áudio causado o reconhecimento de falha, você pode acessar as propriedades para <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, ou <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span><span class="sxs-lookup"><span data-stu-id="3df71-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="3df71-619">Consulte o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> classe para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="3df71-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="3df71-620">Para obter detalhes sobre os melhores candidatos de reconhecimento rejeitadas, anexar um manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="3df71-621">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-622">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-623">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-624">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-624">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-625">O exemplo a seguir reconhece frases como "Exibem a lista de artistas na categoria jazz" ou "Exibem aqui álbuns".</span><span class="sxs-lookup"><span data-stu-id="3df71-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="3df71-626">O exemplo usa um manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento para exibir informações sobre os resultados do reconhecimento de no console.</span><span class="sxs-lookup"><span data-stu-id="3df71-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-627">Obtém o local atual do <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> na entrada de áudio que está sendo processada.</span><span class="sxs-lookup"><span data-stu-id="3df71-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="3df71-628">A posição do reconhecedor na entrada de áudio que está sendo processada.</span><span class="sxs-lookup"><span data-stu-id="3df71-628">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-629">A posição de áudio é específica para cada reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="3df71-630">O valor zero de um fluxo de entrada é estabelecido quando ele está habilitado.</span><span class="sxs-lookup"><span data-stu-id="3df71-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="3df71-631">O <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> referências de propriedade a <xref:System.Speech.Recognition.SpeechRecognitionEngine> posição do objeto dentro de sua entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="3df71-632">Por outro lado, o <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriedade faz referência a posição do dispositivo de entrada no seu fluxo de áudio gerado.</span><span class="sxs-lookup"><span data-stu-id="3df71-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="3df71-633">Essas posições podem ser diferentes.</span><span class="sxs-lookup"><span data-stu-id="3df71-633">These positions can be different.</span></span> <span data-ttu-id="3df71-634">Por exemplo, se o reconhecedor recebeu de entrada para as quais ele não tem ainda gerado de um resultado de reconhecimento e em seguida, o valor da <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriedade é menor que o valor da <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-635">Obtém informações sobre a instância atual de <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="3df71-636">Informações sobre o reconhecedor de fala atual.</span><span class="sxs-lookup"><span data-stu-id="3df71-636">Information about the current speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-637">Para obter informações sobre todos os reconhecedores de fala instalados para o sistema atual, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-638">O exemplo a seguir obtém uma lista parcial de dados para o mecanismo de reconhecimento de fala no processo atual.</span><span class="sxs-lookup"><span data-stu-id="3df71-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="3df71-639">Para obter mais informações, consulte <xref:System.Speech.Recognition.RecognizerInfo>.</span><span class="sxs-lookup"><span data-stu-id="3df71-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-640">Gerado quando um <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> em execução pausa para aceitar modificações.</span><span class="sxs-lookup"><span data-stu-id="3df71-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-641">Os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> para pausar uma instância em execução <xref:System.Speech.Recognition.SpeechRecognitionEngine> antes de modificar suas configurações ou seus <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="3df71-642">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> gera esse evento quando ele estiver pronto para aceitar modificações.</span><span class="sxs-lookup"><span data-stu-id="3df71-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="3df71-643">Por exemplo, embora o <xref:System.Speech.Recognition.SpeechRecognitionEngine> está em pausa, você pode carregar, descarregar, habilitar e desabilitar <xref:System.Speech.Recognition.Grammar> objetos e modificar os valores para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="3df71-644">Para obter mais informações, consulte o método <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="3df71-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-645">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-646">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-647">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-648">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-648">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-649">O exemplo a seguir mostra um aplicativo de console que carrega e descarrega <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="3df71-650">O aplicativo usa o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método para solicitar o mecanismo de reconhecimento de fala para pausar para que ele possa receber uma atualização.</span><span class="sxs-lookup"><span data-stu-id="3df71-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="3df71-651">O aplicativo e em seguida, carrega ou descarrega uma <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="3df71-652">Em cada atualização, um manipulador para <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> do evento que grava o nome e o status de carregado atualmente <xref:System.Speech.Recognition.Grammar> objetos no console.</span><span class="sxs-lookup"><span data-stu-id="3df71-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="3df71-653">Como as gramáticas são carregadas e descarregadas, o aplicativo pela primeira vez reconhece os nomes de animais de farm, em seguida, os nomes de animais de farm e os nomes de frutas, em seguida, somente os nomes de frutas.</span><span class="sxs-lookup"><span data-stu-id="3df71-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-654">Solicita que o reconhecedor pause para atualizar seu estado.</span><span class="sxs-lookup"><span data-stu-id="3df71-654">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-655">Use esse método para sincronizar as alterações para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="3df71-656">Por exemplo, se você carregar ou descarrega uma gramática de reconhecimento de fala enquanto o reconhecedor está processando a entrada, use esse método e o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento para sincronizar o comportamento do seu aplicativo com o estado do reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="3df71-657">Quando este método é chamado, o reconhecedor pausa ou conclui a operações assíncronas e gera um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="3df71-658">Um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> pode modificar o estado do reconhecedor durante as operações de reconhecimento de manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="3df71-659">Ao lidar com <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventos, o reconhecedor pausa até que o manipulador de eventos retorna.</span><span class="sxs-lookup"><span data-stu-id="3df71-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3df71-660">Se a entrada para o reconhecedor for alterada antes da reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, a solicitação é descartado.</span><span class="sxs-lookup"><span data-stu-id="3df71-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="3df71-661">Quando este método é chamado:</span><span class="sxs-lookup"><span data-stu-id="3df71-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="3df71-662">Se o reconhecedor não está processando a entrada, o reconhecedor gera imediatamente o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="3df71-663">Se o reconhecedor está processando a entrada que consiste em silêncio ou ruído de fundo, o reconhecedor pause a operação de reconhecimento e gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="3df71-664">Se o reconhecedor está processando a entrada não consiste em silêncio ou ruído de fundo, o reconhecedor conclui a operação de reconhecimento e, em seguida, gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="3df71-665">Enquanto o reconhecedor trata a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventos:</span><span class="sxs-lookup"><span data-stu-id="3df71-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="3df71-666">O reconhecedor não processa a entrada e o valor da <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> propriedade permanece o mesmo.</span><span class="sxs-lookup"><span data-stu-id="3df71-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="3df71-667">O reconhecedor continua a coletar entrada e o valor da <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> propriedade pode ser alterada.</span><span class="sxs-lookup"><span data-stu-id="3df71-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-668">Solicita que o reconhecedor pause para atualizar seu estado.</span><span class="sxs-lookup"><span data-stu-id="3df71-668">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-669">Quando o reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, o <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propriedade da <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> é `null`.</span><span class="sxs-lookup"><span data-stu-id="3df71-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="3df71-670">Para fornecer um token de usuário, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="3df71-671">Para especificar um deslocamento de posição de áudio, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-672">O exemplo a seguir mostra um aplicativo de console que carrega e descarrega <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="3df71-673">O aplicativo usa o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método para solicitar o mecanismo de reconhecimento de fala para pausar para que ele possa receber uma atualização.</span><span class="sxs-lookup"><span data-stu-id="3df71-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="3df71-674">O aplicativo e em seguida, carrega ou descarrega uma <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="3df71-675">Em cada atualização, um manipulador para <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> do evento que grava o nome e o status de carregado atualmente <xref:System.Speech.Recognition.Grammar> objetos no console.</span><span class="sxs-lookup"><span data-stu-id="3df71-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="3df71-676">Como as gramáticas são carregadas e descarregadas, o aplicativo pela primeira vez reconhece os nomes de animais de farm, em seguida, os nomes de animais de farm e os nomes de frutas, em seguida, somente os nomes de frutas.</span><span class="sxs-lookup"><span data-stu-id="3df71-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="3df71-677">Informações definidas pelo usuário que contêm informações da operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-677">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="3df71-678">Solicita que o reconhecedor pause para atualizar seu estado e forneça um token de usuário para o evento associado.</span><span class="sxs-lookup"><span data-stu-id="3df71-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-679">Quando o reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, o <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propriedade da <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contém o valor da `userToken` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="3df71-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="3df71-680">Para especificar um deslocamento de posição de áudio, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="3df71-681">Informações definidas pelo usuário que contêm informações da operação.</span><span class="sxs-lookup"><span data-stu-id="3df71-681">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="3df71-682">O deslocamento do <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> atual para atrasar a solicitação.</span><span class="sxs-lookup"><span data-stu-id="3df71-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="3df71-683">Solicita que o reconhecedor pause para atualizar seu estado e forneça deslocamento e um token de usuário para o evento associado.</span><span class="sxs-lookup"><span data-stu-id="3df71-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-684">O reconhecedor não inicia a solicitação de atualização do reconhecedor até que o reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> é igual a atual <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span><span class="sxs-lookup"><span data-stu-id="3df71-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="3df71-685">Quando o reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, o <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propriedade da <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contém o valor da `userToken` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="3df71-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberSignature Language="F#" Value="member this.SetInputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechRecognitionEngine.SetInputToAudioStream (audioSource, audioFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="3df71-686">O fluxo de entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-686">The audio input stream.</span></span></param>
        <param name="audioFormat"><span data-ttu-id="3df71-687">O formato da entrada de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-687">The format of the audio input.</span></span></param>
        <summary><span data-ttu-id="3df71-688">Configura o objeto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> para receber entrada de um fluxo de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-689">Se o reconhecedor atinge o final do fluxo de entrada durante uma operação de reconhecimento, a operação de reconhecimento finaliza com a entrada disponível.</span><span class="sxs-lookup"><span data-stu-id="3df71-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="3df71-690">Todas as operações subsequentes de reconhecimento podem gerar uma exceção, a menos que você atualize a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-691">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-692">O exemplo usa a entrada de um arquivo de áudio, example.wav, que contém as frases, "Testando testando um dois três" e "mister cooper", separados por uma pausa.</span><span class="sxs-lookup"><span data-stu-id="3df71-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="3df71-693">O exemplo gera a saída a seguir.</span><span class="sxs-lookup"><span data-stu-id="3df71-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetInputToDefaultAudioDevice : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-694">Configura o objeto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> para receber a entrada do dispositivo de áudio padrão.</span><span class="sxs-lookup"><span data-stu-id="3df71-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3df71-695">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o reconhecimento de fala básico.</span><span class="sxs-lookup"><span data-stu-id="3df71-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="3df71-696">O exemplo usa a saída do dispositivo de áudio padrão, executa várias operações de reconhecimento assíncrono e sai quando um usuário utters a frase "exit".</span><span class="sxs-lookup"><span data-stu-id="3df71-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetInputToNull : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-697">Desabilita a entrada para o reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-697">Disables the input to the speech recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-698">Configurar o <xref:System.Speech.Recognition.SpeechRecognitionEngine> objeto para nenhuma entrada ao usar o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos, ou ao fazer um mecanismo de reconhecimento temporariamente off-line.</span><span class="sxs-lookup"><span data-stu-id="3df71-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveFile : string -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="3df71-699">O caminho do arquivo a ser usado como entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-699">The path of the file to use as input.</span></span></param>
        <summary><span data-ttu-id="3df71-700">Configura o objeto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> para receber entrada de um arquivo de formato de áudio Waveform (.wav).</span><span class="sxs-lookup"><span data-stu-id="3df71-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-701">Se o reconhecedor atinge o final do arquivo de entrada durante uma operação de reconhecimento, a operação de reconhecimento finaliza com a entrada disponível.</span><span class="sxs-lookup"><span data-stu-id="3df71-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="3df71-702">Todas as operações subsequentes de reconhecimento podem gerar uma exceção, a menos que você atualize a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-703">O exemplo a seguir executa o reconhecimento de áudio em um arquivo. wav e grava o texto reconhecido no console.</span><span class="sxs-lookup"><span data-stu-id="3df71-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveStream audioSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="3df71-704">O fluxo que contém os dados de áudio.</span><span class="sxs-lookup"><span data-stu-id="3df71-704">The stream containing the audio data.</span></span></param>
        <summary><span data-ttu-id="3df71-705">Configura o objeto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> para receber a entrada de um fluxo que contém dados de formato de áudio Waveform (.wav).</span><span class="sxs-lookup"><span data-stu-id="3df71-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-706">Se o reconhecedor atinge o final do fluxo de entrada durante uma operação de reconhecimento, a operação de reconhecimento finaliza com a entrada disponível.</span><span class="sxs-lookup"><span data-stu-id="3df71-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="3df71-707">Todas as operações subsequentes de reconhecimento podem gerar uma exceção, a menos que você atualize a entrada para o reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-708">Gerado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detecta a entradas que podem ser identificadas como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-709">Cada reconhecedor de fala tem um algoritmo para distinguir entre silence e fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="3df71-710">Quando o <xref:System.Speech.Recognition.SpeechRecognitionEngine> executa uma operação de reconhecimento de fala, ele gera o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento quando seu algoritmo identifica a entrada como fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="3df71-711">O <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> propriedade de associado <xref:System.Speech.Recognition.SpeechDetectedEventArgs> objeto indica o local no fluxo de entrada em que o reconhecedor detectado fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="3df71-712">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> gera a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento antes que ele gere qualquer um dos <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="3df71-713">Para obter mais informações, consulte o <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="3df71-714">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-715">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-716">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-717">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-717">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-718">O exemplo a seguir é parte de um aplicativo de console para a escolha de cidades de origem e destino para um voo.</span><span class="sxs-lookup"><span data-stu-id="3df71-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="3df71-719">O aplicativo reconhece frases como "Eu quero Deslizar Miami para Chicago."</span><span class="sxs-lookup"><span data-stu-id="3df71-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="3df71-720">O exemplo usa o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento para relatório de <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> a cada hora de fala é detectada.</span><span class="sxs-lookup"><span data-stu-id="3df71-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-721">Gerada quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> tiver reconhecido uma palavra ou palavras que podem ser um componente de várias frases completas em uma gramática.</span><span class="sxs-lookup"><span data-stu-id="3df71-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-722">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> gera vários <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> eventos como ela tenta identificar uma frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="3df71-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="3df71-723">Você pode acessar o texto de frases parcialmente reconhecidos na <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriedade do <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> objeto no manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="3df71-724">Normalmente, manipular esses eventos só é útil para depuração.</span><span class="sxs-lookup"><span data-stu-id="3df71-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="3df71-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> deriva de <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="3df71-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="3df71-726">Para obter mais informações, consulte o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedade e o <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="3df71-727">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-728">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-729">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-730">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-730">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-731">O exemplo a seguir reconhece frases como "Display a lista de artistas na categoria jazz".</span><span class="sxs-lookup"><span data-stu-id="3df71-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="3df71-732">O exemplo usa o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> evento a ser exibido fragmentos de frase incompleta no console conforme eles são reconhecidos.</span><span class="sxs-lookup"><span data-stu-id="3df71-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-733">Gerado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> recebe uma entrada que não corresponde a nenhum de seus objetos <see cref="T:System.Speech.Recognition.Grammar" /> carregados e habilitados.</span><span class="sxs-lookup"><span data-stu-id="3df71-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-734">O reconhecedor gera esse evento se ele determinar que entrada não corresponde com confiança suficiente, qualquer um dos seus carregados e habilitados <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="3df71-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="3df71-735">O <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriedade do <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contém o rejeitadas <xref:System.Speech.Recognition.RecognitionResult> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="3df71-736">Você pode usar o manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> evento para recuperar o reconhecimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> que foram rejeitadas e seus <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> pontuações.</span><span class="sxs-lookup"><span data-stu-id="3df71-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="3df71-737">Se seu aplicativo estiver usando um <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância, você pode modificar o nível de confiança na qual fala entrada aceito ou rejeitada com um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="3df71-738">Você pode modificar como o reconhecimento da fala responde a não-entrada de voz usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="3df71-739">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-740">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-741">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-742">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-742">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-743">O exemplo a seguir reconhece frases como "Exibem a lista de artistas na categoria jazz" ou "Exibem aqui álbuns".</span><span class="sxs-lookup"><span data-stu-id="3df71-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="3df71-744">O exemplo usa um manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> evento para exibir uma notificação no console quando a fala de entrada não pode ser correspondido ao conteúdo da gramática com suficiente <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> para produzir um reconhecimento bem-sucedido.</span><span class="sxs-lookup"><span data-stu-id="3df71-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="3df71-745">O manipulador também exibe o resultado de reconhecimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> que foram rejeitadas devido a pontuações de confiança baixa.</span><span class="sxs-lookup"><span data-stu-id="3df71-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3df71-746">Gerado quando o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> recebe uma entrada que corresponde a um de seus objetos <see cref="T:System.Speech.Recognition.Grammar" /> carregados e habilitados.</span><span class="sxs-lookup"><span data-stu-id="3df71-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-747">Você pode iniciar uma operação de reconhecimento usando um dos <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="3df71-748">Gera o reconhecedor a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento se ele determinar que entrada corresponde a um dos seus carregado <xref:System.Speech.Recognition.Grammar> objetos com um nível suficiente de confiança para constituir um reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="3df71-749">O <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propriedade do <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contém o aceitos <xref:System.Speech.Recognition.RecognitionResult> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="3df71-750">Manipuladores de <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos podem obter a frase reconhecida, bem como uma lista de reconhecimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> com pontuações de confiança inferiores.</span><span class="sxs-lookup"><span data-stu-id="3df71-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="3df71-751">Se seu aplicativo estiver usando um <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância, você pode modificar o nível de confiança na qual fala entrada aceito ou rejeitada com um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="3df71-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="3df71-752">Você pode modificar como o reconhecimento da fala responde a não-entrada de voz usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="3df71-753">Quando o reconhecedor recebe entrada que corresponde a uma gramática, o <xref:System.Speech.Recognition.Grammar> objeto pode disparar seu <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="3df71-754">O <xref:System.Speech.Recognition.Grammar> do objeto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> é gerado antes do reconhecedor de fala <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="3df71-755">As tarefas específicas para uma gramática específica devem ser sempre executadas por um manipulador para o <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="3df71-756">Quando você cria um <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegado, você identificar o método que manipulará o evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="3df71-757">Para associar o evento com o manipulador de eventos, adicione uma instância do delegado ao evento.</span><span class="sxs-lookup"><span data-stu-id="3df71-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="3df71-758">O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o representante.</span><span class="sxs-lookup"><span data-stu-id="3df71-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="3df71-759">Para obter mais informações sobre delegados de manipulador de eventos, consulte [delegados e eventos](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="3df71-759">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-760">O exemplo a seguir é parte de um aplicativo de console que cria a gramática de reconhecimento de fala, construções de um <xref:System.Speech.Recognition.Grammar> do objeto e carrega-o no <xref:System.Speech.Recognition.SpeechRecognitionEngine> para realizar o reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="3df71-761">O exemplo demonstra a entrada de fala para um <xref:System.Speech.Recognition.SpeechRecognitionEngine>, os resultados de reconhecimento associados e os eventos associados gerados pelo reconhecedor de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="3df71-762">Falado de entrada, como "Eu quero voo de Chicago para Miami" disparará uma <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="3df71-763">Falando a frase "Voar me de Houston para Chicago" não disparará um <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="3df71-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="3df71-764">O exemplo usa um manipulador para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento a ser exibido com êxito reconhecido frases e a semântica que eles contêm no console.</span><span class="sxs-lookup"><span data-stu-id="3df71-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognitionEngine.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3df71-765">Descarrega todos os objetos <see cref="T:System.Speech.Recognition.Grammar" /> do reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-766">Se o reconhecedor no momento está carregando um <xref:System.Speech.Recognition.Grammar> assincronamente, esse método aguardará até o <xref:System.Speech.Recognition.Grammar> é carregado, antes de ele descarrega todos os <xref:System.Speech.Recognition.Grammar> objetos do <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância.</span><span class="sxs-lookup"><span data-stu-id="3df71-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="3df71-767">Para descarregar uma gramática específica, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-768">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o carregamento síncrono e o descarregamento de gramáticas de reconhecimento de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="3df71-769">O objeto de gramática a ser descarregado.</span><span class="sxs-lookup"><span data-stu-id="3df71-769">The grammar object to unload.</span></span></param>
        <summary><span data-ttu-id="3df71-770">Descarrega um objeto <see cref="T:System.Speech.Recognition.Grammar" /> especificado da instância <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-771">Se o reconhecedor estiver em execução, os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> para pausar a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância antes de carregar, descarregar, habilitando ou desabilitando um <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="3df71-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="3df71-772">Descarregar todo <xref:System.Speech.Recognition.Grammar> objetos, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-773">O exemplo a seguir mostra parte de um aplicativo de console que demonstra o carregamento síncrono e o descarregamento de gramáticas de reconhecimento de fala.</span><span class="sxs-lookup"><span data-stu-id="3df71-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-774"><paramref name="Grammar" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-774"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3df71-775">A gramática não está carregada neste reconhecedor ou este reconhecedor no momento está carregando a gramática de forma assíncrona.</span><span class="sxs-lookup"><span data-stu-id="3df71-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3df71-776">Atualiza o valor de uma configuração do reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-776">Updates the value of a setting for the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-777">Configurações do reconhecedor podem conter a cadeia de caracteres, inteiro de 64 bits ou dados de endereço de memória.</span><span class="sxs-lookup"><span data-stu-id="3df71-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="3df71-778">A tabela a seguir descreve as configurações que são definidas para uma API do Microsoft Speech (SAPI)-reconhecedor em conformidade.</span><span class="sxs-lookup"><span data-stu-id="3df71-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="3df71-779">As configurações a seguir devem ter o mesmo intervalo para cada identificador que é compatível com a configuração.</span><span class="sxs-lookup"><span data-stu-id="3df71-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="3df71-780">Um identificador compatível com SAPI não é necessário para dar suporte a essas configurações e pode dar suporte a outras configurações.</span><span class="sxs-lookup"><span data-stu-id="3df71-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="3df71-781">Nome</span><span class="sxs-lookup"><span data-stu-id="3df71-781">Name</span></span>|<span data-ttu-id="3df71-782">Descrição</span><span class="sxs-lookup"><span data-stu-id="3df71-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="3df71-783">Especifica o consumo de CPU do reconhecedor.</span><span class="sxs-lookup"><span data-stu-id="3df71-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="3df71-784">O intervalo é de 0 a 100.</span><span class="sxs-lookup"><span data-stu-id="3df71-784">The range is from 0 to 100.</span></span> <span data-ttu-id="3df71-785">O valor padrão é 50.</span><span class="sxs-lookup"><span data-stu-id="3df71-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="3df71-786">Indica o comprimento de silêncio no final da entrada não ambígua antes que o reconhecedor de fala conclui uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="3df71-787">O intervalo é de 0 a 10.000 milissegundos (ms).</span><span class="sxs-lookup"><span data-stu-id="3df71-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="3df71-788">Essa configuração corresponde do reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="3df71-789">Padrão = 150 ms.</span><span class="sxs-lookup"><span data-stu-id="3df71-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="3df71-790">Indica o comprimento de latência em milissegundos (ms) no final da entrada ambígua antes que o reconhecedor de fala conclui uma operação de reconhecimento.</span><span class="sxs-lookup"><span data-stu-id="3df71-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="3df71-791">O intervalo é de 0 a 10.000 ms.</span><span class="sxs-lookup"><span data-stu-id="3df71-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="3df71-792">Essa configuração corresponde do reconhecedor <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="3df71-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="3df71-793">Padrão = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="3df71-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="3df71-794">Indica se a adaptação do modelo acústico é ON (valor = `1`) ou OFF (valor = `0`).</span><span class="sxs-lookup"><span data-stu-id="3df71-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="3df71-795">O valor padrão é `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="3df71-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="3df71-796">Indica se a adaptação do plano de fundo é ON (valor = `1`) ou OFF (valor = `0`), e a persistir a configuração no registro.</span><span class="sxs-lookup"><span data-stu-id="3df71-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="3df71-797">O valor padrão é `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="3df71-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="3df71-798">Para retornar uma das configurações do reconhecedor, use o <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3df71-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="3df71-799">Com exceção de `PersistedBackgroundAdaptation`, os valores de propriedade definidos usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos permanecem em vigor somente para a instância atual do <xref:System.Speech.Recognition.SpeechRecognitionEngine>, após o qual reverter as configurações padrão.</span><span class="sxs-lookup"><span data-stu-id="3df71-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="3df71-800">Você pode modificar como o reconhecimento da fala responde a não-entrada de voz usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="3df71-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * int -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="3df71-801">O nome da configuração a ser atualizada.</span><span class="sxs-lookup"><span data-stu-id="3df71-801">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="3df71-802">O novo valor da configuração.</span><span class="sxs-lookup"><span data-stu-id="3df71-802">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="3df71-803">Atualiza a configuração especificada para o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> com o valor inteiro especificado.</span><span class="sxs-lookup"><span data-stu-id="3df71-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-804">Com exceção de `PersistedBackgroundAdaptation`, os valores de propriedade definidos usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> método permanecem em vigor somente para a instância atual do <xref:System.Speech.Recognition.SpeechRecognitionEngine>, após o qual reverter as configurações padrão.</span><span class="sxs-lookup"><span data-stu-id="3df71-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="3df71-805">Consulte <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> para obter descrições de configurações com suporte.</span><span class="sxs-lookup"><span data-stu-id="3df71-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3df71-806">O exemplo a seguir é parte de um aplicativo de console que gera os valores para um número das configurações definidas para o reconhecedor que dá suporte à localidade en-US.</span><span class="sxs-lookup"><span data-stu-id="3df71-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="3df71-807">O exemplo atualiza as configurações de nível de confiança e, em seguida, consulta o reconhecedor para verificar os valores atualizados.</span><span class="sxs-lookup"><span data-stu-id="3df71-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="3df71-808">O exemplo gera a saída a seguir.</span><span class="sxs-lookup"><span data-stu-id="3df71-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-809"><paramref name="settingName" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-809"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-810"><paramref name="settingName" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-810"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="3df71-811">O reconhecedor não tem uma configuração com esse nome.</span><span class="sxs-lookup"><span data-stu-id="3df71-811">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * string -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="3df71-812">O nome da configuração a ser atualizada.</span><span class="sxs-lookup"><span data-stu-id="3df71-812">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="3df71-813">O novo valor da configuração.</span><span class="sxs-lookup"><span data-stu-id="3df71-813">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="3df71-814">Atualiza a configuração de mecanismo de reconhecimento de fala especificado com o valor de cadeia de caracteres especificada.</span><span class="sxs-lookup"><span data-stu-id="3df71-814">Updates the specified speech recognition engine setting with the specified string value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3df71-815">Com exceção de `PersistedBackgroundAdaptation`, os valores de propriedade definidos usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> método permanecem em vigor somente para a instância atual do <xref:System.Speech.Recognition.SpeechRecognitionEngine>, após o qual reverter as configurações padrão.</span><span class="sxs-lookup"><span data-stu-id="3df71-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="3df71-816">Consulte <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> para obter descrições de configurações com suporte.</span><span class="sxs-lookup"><span data-stu-id="3df71-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3df71-817"><paramref name="settingName" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3df71-817"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3df71-818"><paramref name="settingName" /> é a cadeia de caracteres vazia ("").</span><span class="sxs-lookup"><span data-stu-id="3df71-818"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="3df71-819">O reconhecedor não tem uma configuração com esse nome.</span><span class="sxs-lookup"><span data-stu-id="3df71-819">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>