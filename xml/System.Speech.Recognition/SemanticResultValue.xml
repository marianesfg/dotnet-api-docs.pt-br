<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="653a138a06a6f44dd5fd94ba82b6a4bf339e421e" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48732693" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um valor semântico e opcionalmente associa o valor a um componente da gramática de reconhecimento de fala.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uso de <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> objetos, em conjunto com <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices>, a maneira mais fácil para criar uma estrutura semântica para um <xref:System.Speech.Recognition.Grammar>. Informações semânticas de uma frase são acessadas por meio da obtenção de uma instância do <xref:System.Speech.Recognition.SemanticValue>, por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propriedade em <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
> [!NOTE]
>  Valores de gerenciados pelo <xref:System.Speech.Recognition.SemanticResultValue> objetos são definidos pelo <xref:System.Object> instâncias passado para seus construtores. O tipo subjacente deste <xref:System.Object> deve ser `bool`, `int`, `float`, ou `string`. Qualquer outro tipo impedirá a construção de uma <xref:System.Speech.Recognition.Grammar> de instância com o <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 O uso típico de um <xref:System.Speech.Recognition.SemanticResultValue> instância associa a instância um componente reconhecível de uma <xref:System.Speech.Recognition.Grammar>, como uma expressão, uma regra ou um <xref:System.Speech.Recognition.Choices> objeto. Se o componente associado for usado como parte de uma operação de reconhecimento, o <xref:System.Speech.Recognition.SemanticResultValue> é usado para definir um valor na semântica da frase retornada.  
  
 Há dois métodos básicos para a associação de um <xref:System.Speech.Recognition.SemanticResultValue> instância com um elemento de gramática, dependendo do construtor usado para criar o <xref:System.Speech.Recognition.SemanticResultValue>.  
  
-   Se apenas o valor (especificado por uma instância do <xref:System.Object>) é usado para construir uma <xref:System.Speech.Recognition.SemanticResultValue> objeto, o <xref:System.Speech.Recognition.SemanticResultValue> está associada com o componente de gramática que a antecedem, além um <xref:System.Speech.Recognition.GrammarBuilder> objeto.  
  
     Por exemplo, no fragmento de código abaixo, se um <xref:System.Speech.Recognition.Grammar> construída usando este <xref:System.Speech.Recognition.GrammarBuilder> instância reconhece a palavra "em segundo plano", um valor de `true` é definido na semântica frase reconhecida.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Para obter mais informações, consulte a descrição de <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Se uma expressão de valor de cadeia de caracteres ou um específico <xref:System.Speech.Recognition.GrammarBuilder> instância é usado, juntamente com um <xref:System.Object> que especifica um <xref:System.Speech.Recognition.SemanticResultValue> de valor, que o valor é automaticamente associado com a frase de valor de cadeia de caracteres ou o <xref:System.Speech.Recognition.GrammarBuilder> instância.  Se a frase ou <xref:System.Speech.Recognition.GrammarBuilder> objeto é usado no processo de reconhecimento, o valor será atribuído a semântica da frase reconhecida.  
  
     O exemplo a seguir ilustra isso e é funcionalmente equivalente ao exemplo anterior, que é usada nas chamadas explícitas <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> e <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>. Se a lógica de reconhecimento usa a palavra "em segundo plano", o valor `true` será adicionado na semântica reconhecido.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Para obter mais informações, consulte a descrição da <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> e <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.  
  
 A ser usado por um <xref:System.Speech.Recognition.Grammar> no reconhecimento, todos os <xref:System.Speech.Recognition.SemanticResultValue> instâncias devem ser associadas um dos <xref:System.Speech.Recognition.SemanticValue> objetos usados pelo que <xref:System.Speech.Recognition.Grammar>. Isso é feito por meio de uma chave semântica com associação a <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Chaves semânticas podem ser explicitamente associadas a um <xref:System.Speech.Recognition.SemanticResultValue>, usando um <xref:System.Speech.Recognition.SemanticResultKey> objeto.  <xref:System.Speech.Recognition.SemanticResultValue> não foi explicitamente anexadas a uma chave de instâncias são anexadas para a chave de raiz padrão do <xref:System.Speech.Recognition.SemanticValue>.  
  
 Depois de um <xref:System.Speech.Recognition.SemanticResultValue> foi usado para definir o <xref:System.Speech.Recognition.SemanticValue.Value%2A>, se ele é marcado com a chave de raiz padrão ou por meio de qualquer determinado <xref:System.Speech.Recognition.SemanticResultKey>, esse valor não deve ser modificado ou ocorrerá uma exceção durante operações de reconhecimento.  
  
 O exemplo a seguir causará uma exceção, pois ele define e, em seguida, modifica a raiz <xref:System.Speech.Recognition.SemanticValue.Value%2A> de um <xref:System.Speech.Recognition.Grammar>.  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 Por outro lado, o código no exemplo a seguir é permitido. Embora ele define várias instâncias do <xref:System.Speech.Recognition.SemanticResultValue>, eles são incluídos em um <xref:System.Speech.Recognition.Choices> objeto e será apenas um nunca usado para definir o valor da chave `bgOrfgText`.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 O exemplo a seguir retorna um <xref:System.Speech.Recognition.Grammar> que reconhece o comando "Set/alteração/Alter primeiro e segundo plano... [lista de cores] ".  <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> instâncias (em conjunto com <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> objetos) são usadas para definir a semântica que pode ser analisada no reconhecimento.  A semântica analisada determinará a cor que foi solicitada e se o primeiro ou segundo plano deve ser modificada.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Usando um SemanticResultKey para extrair um SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `SemanticResultValue` construtores suporte à especificação de um <xref:System.Object> instância com um tipo de dados subjacentes `bool`, `int`, `float`, ou `string`.  
  
 Um construtor pode criar um `SemanticResultValue` instância em qualquer uma das duas circunstâncias:  
  
-   O `SemanticResultValue` instância deve ser explicitamente associada um elemento de gramática ao usar um <xref:System.Speech.Recognition.GrammarBuilder> para construir um <xref:System.Speech.Recognition.Grammar>.  
  
-   O `SemanticResultValue` já está associado uma frase de valor de cadeia de caracteres ou um <xref:System.Speech.Recognition.GrammarBuilder> objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O valor gerenciado pelo <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Deve ser do tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> ou <see langword="string" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> e especifica um valor semântico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um `SemanticResultValue` retornado por este construtor não está associado a qualquer elemento de gramática específica. A associação deve ser tornada explícita usando a instância do `SemanticResultValue` em conjunto com <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Por exemplo, no fragmento de código abaixo, se um <xref:System.Speech.Recognition.Grammar> construída usando este <xref:System.Speech.Recognition.GrammarBuilder> instância reconhece a palavra "em segundo plano", um valor de `true` é definido na semântica frase reconhecida.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 O exemplo a seguir retorna um <xref:System.Speech.Recognition.Grammar> que reconhece o comando "Set/alteração/Alter primeiro e segundo plano... [lista de cores] ". <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> instâncias (em conjunto com <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> objetos) são usadas para definir a semântica que pode ser analisada no reconhecimento.  A semântica analisada determinará a cor que foi solicitada e se o primeiro ou segundo plano deve ser modificada.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Um componente de gramática a ser usado no reconhecimento.</param>
        <param name="value">O valor gerenciado pelo <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Deve ser do tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> ou <see langword="string" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> e associa um valor semântico a um objeto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o elemento de gramática especificado por <xref:System.Speech.Recognition.GrammarBuilder> é usado na lógica de reconhecimento, `value` será definida na semântica da saída reconhecida.  
  
 No fragmento de código abaixo, se a lógica de reconhecimento é construído com o <xref:System.Speech.Recognition.GrammarBuilder> instância (`myGb`) usa o <xref:System.Speech.Recognition.Choices> objeto (`myChoice`) identificar de entrada, o valor `true` é adicionado para a semântica reconhecida.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 Como <xref:System.Speech.Recognition.GrammarBuilder> dá suporte à conversão implícita para <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, e <xref:System.Speech.Recognition.SemanticResultKey>, esse construtor pode usá-los também.  
  
   
  
## Examples  
 O exemplo a seguir retorna um <xref:System.Speech.Recognition.Grammar> que reconhece o comando "Set/alteração/Alter primeiro e segundo plano... [lista de cores] ". <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> instâncias (em conjunto com <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> objetos) são usadas para definir a semântica que pode ser analisada no reconhecimento.  A semântica analisada determinará a cor que foi solicitada e se o primeiro ou segundo plano deve ser modificada.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Uma frase para ser usada no reconhecimento.</param>
        <param name="value">O valor gerenciado pelo <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Deve ser do tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> ou <see langword="string" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> e associa um valor semântico a um objeto <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a cadeia de caracteres especificada por `phrase` é usado na lógica de reconhecimento, `value` será definida na semântica da saída reconhecida.  
  
 No seguinte fragmento de código, se a lógica de reconhecimento construído com o <xref:System.Speech.Recognition.GrammarBuilder> instância (`myGb`) usa a cadeia de caracteres "Meu hipoteca" identificar de entrada, o valor `true` será adicionado na semântica reconhecido.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 O exemplo a seguir retorna um <xref:System.Speech.Recognition.Grammar> que reconhece o comando "Set/alteração/Alter primeiro e segundo plano... [lista de cores] ". <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> instâncias (em conjunto com <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> objetos) são usadas para definir a semântica que pode ser analisada no reconhecimento.  A semântica analisada determinará a cor que foi solicitada e se o primeiro ou segundo plano deve ser modificada.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma instância de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construída com base na instância de <see cref="T:System.Speech.Recognition.SemanticResultValue" /> atual.</summary>
        <returns>Retorna uma instância de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construída com base na instância de <see cref="T:System.Speech.Recognition.SemanticResultValue" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O uso de <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> é equivalente a usar o <xref:System.Speech.Recognition.GrammarBuilder> construtor que usa um <xref:System.Speech.Recognition.SemanticResultValue> como um argumento (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).  
  
   
  
## Examples  
 O exemplo a seguir cria <xref:System.Speech.Recognition.Grammar> objetos que dão suporte a comandos para alterar a cor do plano de fundo.  
  
 Um <xref:System.Speech.Recognition.Choices> objeto (`colorChoice`) que contém a lista de opções de cores do plano de fundo é preenchida usando a <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> método com <xref:System.Speech.Recognition.GrammarBuilder> instâncias que são obtidas a partir o <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> método no `SemanticResultValue` objetos criados cadeias de caracteres de cor.  
  
 Um <xref:System.Speech.Recognition.GrammarBuilder> , em seguida, é obtida chamando <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> em um <xref:System.Speech.Recognition.SemanticResultKey> instância, que será usada para as opções de semânticas em da chave a `colorChoice` instância.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>