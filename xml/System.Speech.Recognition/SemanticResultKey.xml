<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a8b6fbce71937b97c8c66f7bac8e781c2f7f3e49" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52254074" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Associa uma cadeia de caracteres chave com valores <see cref="T:System.Speech.Recognition.SemanticResultValue" /> para definir objetos <see cref="T:System.Speech.Recognition.SemanticValue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A unidade básica de expressão de semântica em System. Speech é o <xref:System.Speech.Recognition.SemanticValue>, que é um par chave/valor.  
  
 Usando o <xref:System.Speech.Recognition.SemanticResultKey> objetos, você marca <xref:System.Speech.Recognition.SemanticResultValue> instâncias contidas na <xref:System.Speech.Recognition.GrammarBuilder> objetos e cadeias de caracteres de modo que os valores podem ser acessados prontamente de <xref:System.Speech.Recognition.SemanticValue> instâncias no reconhecimento.  
  
 Você pode usar <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> objetos, em conjunto com <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> objetos, para definir a estrutura de semântica de uma gramática de reconhecimento de fala. Para acessar as informações semânticas em um resultado de reconhecimento, obtenha uma instância de <xref:System.Speech.Recognition.SemanticValue> por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propriedade em <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
  
## Examples  
 O exemplo a seguir cria um <xref:System.Speech.Recognition.Grammar> para reconhecer a entrada de senha do formulário "minha senha é...", em que a entrada real é correspondida com um caractere curinga.  
  
 O caractere curinga é marcado com uma chave semântica e o <xref:System.Speech.Recognition.Grammar.SpeechRecognized> manipulador verifica a presença da marca para verificar se uma entrada de senha foi enviado.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Usando um SemanticResultKey para extrair um SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Constrói uma instância de <see cref="T:System.Speech.Recognition.SemanticResultKey" /> e associa a chave com componentes de gramática.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os construtores <xref:System.Speech.Recognition.SemanticResultKey> especificar uma marca de texto (a chave semântica) e um conjunto de componentes de gramática para adicionar a uma gramática de reconhecimento de fala.  
  
 A gramática de componentes podem ser especificado como uma matriz de <xref:System.Speech.Recognition.GrammarBuilder> objetos, ou como uma matriz de <xref:System.String> instâncias.  
  
 Se os componentes de gramática são usados no reconhecimento, você poderá acessar retornado <xref:System.Speech.Recognition.SemanticValue> usando a marca de texto fornecida ao construtor do <xref:System.Speech.Recognition.SemanticResultKey> como uma chave semântica. O <xref:System.Speech.Recognition.SemanticValue.Value%2A> propriedade do <xref:System.Speech.Recognition.SemanticValue> instância será determinada pelos componentes de gramática usados na definição de <xref:System.Speech.Recognition.SemanticResultKey>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">A marca a ser usada como uma chave semântica para acessar a instância de <see cref="T:System.Speech.Recognition.SemanticValue" /> associada aos objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> especificados pelo argumento <paramref name="builders" />.</param>
        <param name="builders">Uma matriz de componentes de gramática que será associada a um objeto <see cref="T:System.Speech.Recognition.SemanticValue" /> acessível com a marca definida em <paramref name="semanticResultKey" />.</param>
        <summary>Atribui uma chave semântica a um ou mais objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> usados para criar uma gramática de reconhecimento de fala.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Devido a conversões implícitas, o `builders` argumento suporta <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, e <xref:System.String> objetos também. Para obter mais informações sobre conversões implícitas, consulte <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.  
  
 Ao executar uma operação de reconhecimento, os <xref:System.Speech.Recognition.GrammarBuilder> objetos fornecidos no `builders` argumento são tratados como sequencial. Por exemplo, se o seguinte <xref:System.Speech.Recognition.SemanticResultValue> é usado para construir um <xref:System.Speech.Recognition.Grammar>, entrada para o mecanismo de reconhecimento deve conter as palavras "a raposa marrom" na sequência a ser reconhecido.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 O `semanticResultKey` argumento contém a marca usada para acessar o <xref:System.Speech.Recognition.SemanticValue> que pode ser retornado.  
  
 O <xref:System.Speech.Recognition.SemanticValue.Value%2A> do <xref:System.Speech.Recognition.SemanticValue> é determinado pelo <xref:System.Speech.Recognition.GrammarBuilder> instâncias fornecidas pelo `builders` parâmetro.  
  
 Se o <xref:System.Speech.Recognition.GrammarBuilder> objetos não contêm nenhuma instância de definição do <xref:System.Speech.Recognition.SemanticResultValue>, o valor da <xref:System.Speech.Recognition.SemanticValue> é `null`.  
  
 Se o <xref:System.Speech.Recognition.GrammarBuilder> objetos fornecidos na `builders` parâmetro fornecem um sem marcas (não associada a um <xref:System.Speech.Recognition.SemanticResultKey> objeto) <xref:System.Speech.Recognition.SemanticResultValue> instância que é usada pela lógica de reconhecimento, aquela instância do <xref:System.Speech.Recognition.SemanticResultValue> definirá o <xref:System.Speech.Recognition.SemanticValue.Value%2A>propriedade do <xref:System.Speech.Recognition.SemanticValue> que é produzido.  
  
 Deve haver uma e apenas um, sem marcas <xref:System.Speech.Recognition.SemanticResultValue> da instância na <xref:System.Speech.Recognition.GrammarBuilder> objetos especificados pelo `builders` parâmetro. Se várias instâncias sem marcas <xref:System.Speech.Recognition.SemanticResultValue> estão associados a <xref:System.Speech.Recognition.SemanticResultKey>, cada tentará o conjunto o valor da <xref:System.Speech.Recognition.SemanticValue> produzido no resultado do reconhecimento. Isso não é permitido e o reconhecedor gerará uma exceção quando ele tenta usar um <xref:System.Speech.Recognition.Grammar> criado usando como um <xref:System.Speech.Recognition.SemanticResultKey> instância.  
  
 Instâncias do <xref:System.Speech.Recognition.SemanticResultValue> contidos na <xref:System.Speech.Recognition.GrammarBuilder> objetos especificados pelo `builders` parâmetro e já está associado a outro <xref:System.Speech.Recognition.SemanticResultKey> não têm efeito sobre atual <xref:System.Speech.Recognition.SemanticResultKey> instância.  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.Speech.Recognition.Grammar> para reconhecer a entrada de senha do formulário "minha senha é...", em que a entrada real é correspondida com um caractere curinga.  
  
 O caractere curinga é marcado por um <xref:System.Speech.Recognition.SpeechRecognizer> cujo valor da chave é "Password". O <xref:System.Speech.Recognition.Grammar.SpeechRecognized> manipulador verifica a presença da marca, obtém a entrada de áudio da senha e verifica a senha.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">A marca a ser usada para acessar a instância de <see cref="T:System.Speech.Recognition.SemanticValue" /> associada aos objetos <see cref="T:System.String" /> especificados pelo argumento <paramref name="phrases" />.</param>
        <param name="phrases">Um ou mais objetos <see cref="T:System.String" />, cujo texto concatenado será associado a um objeto <see cref="T:System.Speech.Recognition.SemanticValue" /> acessível com a marca definida em <paramref name="semanticResultKey" />.</param>
        <summary>Atribui uma chave semântica a uma ou mais instâncias de <see cref="T:System.String" /> usadas para criar uma gramática de reconhecimento de fala.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao executar uma operação de reconhecimento, os <xref:System.String> objetos usados no `phrases` parâmetro são tratados como sequencial. Por exemplo, se o seguinte <xref:System.Speech.Recognition.SemanticResultValue> é usado para construir um <xref:System.Speech.Recognition.Grammar>, entrada para o mecanismo de reconhecimento deve conter as palavras "a raposa marrom" na sequência a ser reconhecido.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 O `semanticResultKey` argumento determina a chave usada para acessar o <xref:System.Speech.Recognition.SemanticValue> que pode ser retornado.  
  
 Se você construir um <xref:System.Speech.Recognition.Grammar> usando um <xref:System.Speech.Recognition.GrammarBuilder> objeto que contém uma chave semântica com uma matriz de objetos de cadeia de caracteres, o <xref:System.Speech.Recognition.SemanticValue.Value%2A> da <xref:System.Speech.Recognition.SemanticValue> produzida por uma operação de reconhecimento será a cadeia de caracteres usada no reconhecimento. No exemplo anterior, isso significa que <xref:System.Speech.Recognition.SemanticValue.Value%2A> seria "a raposa marrom".  
  
   
  
## Examples  
 O exemplo a seguir cria uma <xref:System.Speech.Recognition.Grammar> de um <xref:System.Speech.Recognition.GrammarBuilder> objeto que usa um <xref:System.Speech.Recognition.SemanticResultKey>, que é definido por uma matriz de <xref:System.String> objetos.  
  
 Um mecanismo de reconhecimento usando a <xref:System.Speech.Recognition.Grammar> criado irá reconhecer a frase "color zero de vermelho para azul verde". A semântica do <xref:System.Speech.Recognition.RecognizedPhrase> retornado pelo reconhecimento conterá um <xref:System.Speech.Recognition.SemanticValue> com um <xref:System.Speech.Recognition.SemanticValue.Value%2A> de "vermelho verde azul". Você pode acessar o <xref:System.Speech.Recognition.SemanticValue> usando a marca de "código".  
  
 Devido a `SemanticResultValue("zero", 5)` acrescentado ao <xref:System.Speech.Recognition.GrammarBuilder>, a raiz <xref:System.Speech.Recognition.SemanticValue> do objeto no <xref:System.Speech.Recognition.RecognizedPhrase> terá um valor de 5.  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma instância de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construída com base na instância de <see cref="T:System.Speech.Recognition.SemanticResultKey" /> atual.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O uso de <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> é equivalente a usar o <xref:System.Speech.Recognition.GrammarBuilder> construtor que usa <xref:System.Speech.Recognition.SemanticResultKey> como um argumento (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.Speech.Recognition.Grammar> objeto que dá suporte a comandos para alterar a cor do plano de fundo.  
  
 Um <xref:System.Speech.Recognition.Choices> objeto (`colorChoice`) que contém a lista de opções de cores do plano de fundo é preenchida usando a <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> método com <xref:System.Speech.Recognition.GrammarBuilder> instâncias. O <xref:System.Speech.Recognition.GrammarBuilder> instâncias são obtidas por meio de <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> método no <xref:System.Speech.Recognition.SemanticResultValue> objetos criados de cadeias de caracteres de cor.  
  
 Um <xref:System.Speech.Recognition.GrammarBuilder> , em seguida, é obtida chamando <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> em um <xref:System.Speech.Recognition.SemanticResultKey> instância, que será usada para as opções de semânticas em da chave `colorChoice`.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>