<Type Name="RecognizerUpdateReachedEventArgs" FullName="System.Speech.Recognition.RecognizerUpdateReachedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ea19e8bdef514ba770f3641a366ce82b9841a36" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610480" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizerUpdateReachedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RecognizerUpdateReachedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizerUpdateReachedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizerUpdateReachedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type RecognizerUpdateReachedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c3704-101">Retorna os dados de um evento <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" /> ou <see cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c3704-101">Returns data from a <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" /> or a <see cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3704-102">`RecognizerUpdateReached` os eventos fornecem um mecanismo para pausar um mecanismo de reconhecimento de fala para aplicar modificações atômicas e síncronas, como o carregamento e descarregamento de gramáticas.</span><span class="sxs-lookup"><span data-stu-id="c3704-102">`RecognizerUpdateReached` events provide a mechanism for pausing a speech recognition engine to apply atomic and synchronous modifications, such as loading and unloading grammars.</span></span>  
  
 <span data-ttu-id="c3704-103">Se seu aplicativo estiver usando um <xref:System.Speech.Recognition.SpeechRecognitionEngine> para gerenciar o reconhecimento de instância, ele pode usar uma da <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> métodos para solicitar que o mecanismo de pausa para receber uma atualização.</span><span class="sxs-lookup"><span data-stu-id="c3704-103">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance to manage recognition, it can use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> methods to request that the engine pauses to receive an update.</span></span> <span data-ttu-id="c3704-104">O <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância gera um <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> eventos quando ele estiver pronto para a atualização.</span><span class="sxs-lookup"><span data-stu-id="c3704-104">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> event when it is ready for the update.</span></span>  
  
 <span data-ttu-id="c3704-105">Enquanto um <xref:System.Speech.Recognition.SpeechRecognitionEngine> instância está em pausa, você pode carregar, descarregar, habilitar e desabilitar <xref:System.Speech.Recognition.Grammar> objetos e modificar os valores para o <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="c3704-105">While a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span>  
  
 <span data-ttu-id="c3704-106">Se seu aplicativo estiver usando um <xref:System.Speech.Recognition.SpeechRecognizer> para gerenciar o reconhecimento de instância, ele pode usar uma da <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> métodos para solicitar que o mecanismo de pausa para receber uma atualização.</span><span class="sxs-lookup"><span data-stu-id="c3704-106">If your application is using a <xref:System.Speech.Recognition.SpeechRecognizer> instance to manage recognition, it can use one of the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> methods to request that the engine pauses to receive an update.</span></span> <span data-ttu-id="c3704-107">O <xref:System.Speech.Recognition.SpeechRecognizer> instância gera um <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> eventos quando ele estiver pronto para a atualização.</span><span class="sxs-lookup"><span data-stu-id="c3704-107">The <xref:System.Speech.Recognition.SpeechRecognizer> instance raises a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> event when it is ready for the update.</span></span>  
  
 <span data-ttu-id="c3704-108">Enquanto um <xref:System.Speech.Recognition.SpeechRecognizer> instância está em pausa, você pode carregar, descarregar, habilitar e desabilitar <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="c3704-108">While a <xref:System.Speech.Recognition.SpeechRecognizer> instance is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c3704-109">Ao manipular <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> e <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> eventos, um mecanismo de reconhecimento de pausa até que o manipulador de eventos retorna.</span><span class="sxs-lookup"><span data-stu-id="c3704-109">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> and  <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached?displayProperty=nameWithType> events, a recognition engine pauses until the event handler returns.</span></span>  
  
 <span data-ttu-id="c3704-110"><xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> deriva de <xref:System.EventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c3704-110"><xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> derives from <xref:System.EventArgs>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3704-111">O exemplo a seguir mostra um aplicativo de console que carrega e descarrega <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="c3704-111">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c3704-112">O aplicativo usa o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método para solicitar o mecanismo de reconhecimento de fala para pausar para que ele possa receber uma atualização.</span><span class="sxs-lookup"><span data-stu-id="c3704-112">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="c3704-113">O aplicativo e em seguida, carrega ou descarrega uma <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="c3704-113">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="c3704-114">Em cada atualização, um manipulador para <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> do evento que grava o nome e o status de carregado atualmente <xref:System.Speech.Recognition.Grammar> objetos no console.</span><span class="sxs-lookup"><span data-stu-id="c3704-114">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="c3704-115">Como as gramáticas são carregadas e descarregadas, o aplicativo pela primeira vez reconhece os nomes de animais de farm, em seguida, os nomes de animais de farm e os nomes de frutas, em seguida, somente os nomes de frutas.</span><span class="sxs-lookup"><span data-stu-id="c3704-115">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
    <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
    <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3704-116">Obtém a posição do áudio associada ao evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3704-116">Gets the audio position associated with the event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3704-117">Retorna o local dentro do buffer de fala de um <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> ou um <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> quando ele faz uma pausa e gera um <c>RecognizerUpdateReached</c> eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3704-117">Returns the location within the speech buffer of a <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> or a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> when it pauses and raises a <c>RecognizerUpdateReached</c> event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3704-118">Os aplicativos podem usar o local indicado pelo <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition%2A> para acessar a entrada de áudio que ocorreu enquanto o mecanismo de reconhecimento estava em pausa.</span><span class="sxs-lookup"><span data-stu-id="c3704-118">Applications can use the location indicated by <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition%2A> to access audio input that occurred while the recognition engine was paused.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public object UserToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserToken" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserToken As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserToken { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserToken : obj" Usage="System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c3704-119">Obtém o <c>UserToken</c> passado para o sistema quando um aplicativo chama <see cref="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" /> ou <see cref="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3704-119">Gets the <c>UserToken</c> passed to the system when an application calls <see cref="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" /> or <see cref="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c3704-120">Retorna um objeto que contém o <c>UserToken</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3704-120">Returns an object that contains the <c>UserToken</c>.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3704-121">Um aplicativo especifica um `UserToken` quando ele solicita a geração de um `RecognizerUpdateReached` evento chamando um dos <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> ou <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> métodos que usam um `userToken` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="c3704-121">An application specifies a `UserToken` when it requests the generation of a `RecognizerUpdateReached` event by calling one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A?displayProperty=nameWithType> methods that take a `userToken` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3704-122">O exemplo a seguir mostra um aplicativo de console que carrega e descarrega <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="c3704-122">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c3704-123">O aplicativo usa o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> método para solicitar o mecanismo de reconhecimento de fala para pausar para que ele possa receber uma atualização.</span><span class="sxs-lookup"><span data-stu-id="c3704-123">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="c3704-124">O método passa um <xref:System.String> do objeto para o `userToken` parâmetro que descreve o que o aplicativo reconheça após a atualização.</span><span class="sxs-lookup"><span data-stu-id="c3704-124">The method passes in a <xref:System.String> object for the `userToken` parameter that describes what the application will recognize after the update.</span></span> <span data-ttu-id="c3704-125">O aplicativo e em seguida, carrega ou descarrega uma <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="c3704-125">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="c3704-126">Em cada atualização, um manipulador para <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> evento grava o conteúdo do `userToken` no console.</span><span class="sxs-lookup"><span data-stu-id="c3704-126">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached?displayProperty=nameWithType> event writes the contents of `userToken` to the console.</span></span> <span data-ttu-id="c3704-127">Como as gramáticas são carregadas e descarregadas, o aplicativo pela primeira vez reconhece os nomes de animais de farm, em seguida, os nomes de animais de farm e os nomes de frutas, em seguida, somente os nomes de frutas.</span><span class="sxs-lookup"><span data-stu-id="c3704-127">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the farmAnimals grammar  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start continuous, asynchronous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous recognition...");  
        Console.WriteLine("  Farm animals will now be recognized.");  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Load the Fruit grammar.  
        string activeGrammars = "Farm animals and fruits will now be recognized.";  
        recognizer.RequestRecognizerUpdate(activeGrammars);  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Console.WriteLine();  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Unload the Farm grammar.  
        string onlyFruit = "Only fruits will now be recognized.";  
        recognizer.RequestRecognizerUpdate(onlyFruit);  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, describe what the application will recognize next.  
    public static void recognizer_RecognizerUpdateReached(object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine("  Update reached: " + e.UserToken);  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      </Docs>
    </Member>
  </Members>
</Type>