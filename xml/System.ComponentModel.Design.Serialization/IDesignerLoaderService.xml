<Type Name="IDesignerLoaderService" FullName="System.ComponentModel.Design.Serialization.IDesignerLoaderService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91be6fb648bf803bf38fa96e6ee194581f86547f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37698553" /></Metadata><TypeSignature Language="C#" Value="public interface IDesignerLoaderService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerLoaderService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerLoaderService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerLoaderService" />
  <TypeSignature Language="F#" Value="type IDesignerLoaderService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="de37e-101">Fornece uma interface que pode estender um carregador de designer para dar suporte a carregamento assíncrono de componentes externos.</span><span class="sxs-lookup"><span data-stu-id="de37e-101">Provides an interface that can extend a designer loader to support asynchronous loading of external components.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de37e-102">Um <xref:System.ComponentModel.Design.Serialization.DesignerLoader> pode implementar essa interface para gerenciar o carregamento de designer que envolve componentes externos.</span><span class="sxs-lookup"><span data-stu-id="de37e-102">A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components.</span></span> <span data-ttu-id="de37e-103">Essa interface também permite que componentes externos iniciar um recarregamento da superfície de design, chamando <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>.</span><span class="sxs-lookup"><span data-stu-id="de37e-103">This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>.</span></span> <span data-ttu-id="de37e-104">Não tem um carregador de designer implementar esta interface, se ele não exija o suporte para o carregamento assíncrono.</span><span class="sxs-lookup"><span data-stu-id="de37e-104">A designer loader does not have to implement this interface if it does not require support for asynchronous loading.</span></span>  
  
 <span data-ttu-id="de37e-105">Designer de carregamento usando uma implementação personalizada do <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> pode ocorrer em uma variedade de formas.</span><span class="sxs-lookup"><span data-stu-id="de37e-105">Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways.</span></span> <span data-ttu-id="de37e-106">Componentes externos, às vezes, estão envolvidos no processo de carregamento.</span><span class="sxs-lookup"><span data-stu-id="de37e-106">Sometimes external components are involved in the loading process.</span></span> <span data-ttu-id="de37e-107">Para facilitar o carregamento com dependências externas, a interface do serviço de carregador de designer fornece um mecanismo que determina quando o carregamento for concluído e permite que cada parte de carregamento para sinalizar que foi concluída.</span><span class="sxs-lookup"><span data-stu-id="de37e-107">To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed.</span></span> <span data-ttu-id="de37e-108">O <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> normalmente determina quando o carregamento for concluído, testando um contador que controla o número de dependências de carga restante.</span><span class="sxs-lookup"><span data-stu-id="de37e-108">The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining.</span></span> <span data-ttu-id="de37e-109">Quando cada parte da carga for concluído, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> é chamado e o serviço diminui o contador.</span><span class="sxs-lookup"><span data-stu-id="de37e-109">When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter.</span></span> <span data-ttu-id="de37e-110">Para definir o número de processos de carregamento dependente, chame <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> uma vez para cada processo de carregamento que chama <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> quando o carregamento for concluído.</span><span class="sxs-lookup"><span data-stu-id="de37e-110">To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete.</span></span> <span data-ttu-id="de37e-111">Quando o carregamento final estiver concluído, as chamadas de serviço <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> no host do carregador.</span><span class="sxs-lookup"><span data-stu-id="de37e-111">When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddLoadDependency">
      <MemberSignature Language="C#" Value="public void AddLoadDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLoadDependency() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLoadDependency ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLoadDependency();" />
      <MemberSignature Language="F#" Value="abstract member AddLoadDependency : unit -&gt; unit" Usage="iDesignerLoaderService.AddLoadDependency " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de37e-112">Registra um componente externo como parte do processo de carregamento gerenciado por essa interface.</span><span class="sxs-lookup"><span data-stu-id="de37e-112">Registers an external component as part of the load process managed by this interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de37e-113">Chamar <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> uma vez para cada objeto externo que participam do processo de carregamento.</span><span class="sxs-lookup"><span data-stu-id="de37e-113">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process.</span></span> <span data-ttu-id="de37e-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> é chamado quando o trabalho do processo de carga é feito.</span><span class="sxs-lookup"><span data-stu-id="de37e-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependentLoadComplete">
      <MemberSignature Language="C#" Value="public void DependentLoadComplete (bool successful, System.Collections.ICollection errorCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DependentLoadComplete(bool successful, class System.Collections.ICollection errorCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DependentLoadComplete (successful As Boolean, errorCollection As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DependentLoadComplete(bool successful, System::Collections::ICollection ^ errorCollection);" />
      <MemberSignature Language="F#" Value="abstract member DependentLoadComplete : bool * System.Collections.ICollection -&gt; unit" Usage="iDesignerLoaderService.DependentLoadComplete (successful, errorCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="successful" Type="System.Boolean" />
        <Parameter Name="errorCollection" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="successful"><span data-ttu-id="de37e-115"><see langword="true" /> se a carga do designer for bem-sucedida; <see langword="false" /> se erros tiverem impedido a conclusão do carregamento.</span><span class="sxs-lookup"><span data-stu-id="de37e-115"><see langword="true" /> if the load of the designer is successful; <see langword="false" /> if errors prevented the load from finishing.</span></span></param>
        <param name="errorCollection"><span data-ttu-id="de37e-116">Uma coleção de erros que ocorreram durante o carregamento, se houver.</span><span class="sxs-lookup"><span data-stu-id="de37e-116">A collection of errors that occurred during the load, if any.</span></span> <span data-ttu-id="de37e-117">Se não tiverem ocorrido erros, passe uma coleção vazia ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="de37e-117">If no errors occurred, pass either an empty collection or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="de37e-118">Assinala que um carregamento dependente foi concluído.</span><span class="sxs-lookup"><span data-stu-id="de37e-118">Signals that a dependent load has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de37e-119">Esse método é chamado para sinalizar que uma operação de carregamento dependente foi concluída.</span><span class="sxs-lookup"><span data-stu-id="de37e-119">This method is called to signal that a dependent loading operation has completed.</span></span> <span data-ttu-id="de37e-120">Chame <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> uma vez para cada processo que foi registrado por meio da chamada <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, que já foi concluída.</span><span class="sxs-lookup"><span data-stu-id="de37e-120">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.</span></span>  
  
 <span data-ttu-id="de37e-121">Se a carga dependente for bem-sucedido, o chamador define o `successful` parâmetro para `true` e passa uma coleção vazia ou `null` para o `errorCollection` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="de37e-121">If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter.</span></span> <span data-ttu-id="de37e-122">Se a carga dependente encontrar erros, o chamador define o `successful` parâmetro para `false` e passa uma coleção de exceções que indicam o motivo ou os motivos da falha para o `errorCollection` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="de37e-122">If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public bool Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload" />
      <MemberSignature Language="VB.NET" Value="Public Function Reload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reload();" />
      <MemberSignature Language="F#" Value="abstract member Reload : unit -&gt; bool" Usage="iDesignerLoaderService.Reload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de37e-123">Recarrega o documento de design.</span><span class="sxs-lookup"><span data-stu-id="de37e-123">Reloads the design document.</span></span></summary>
        <returns><span data-ttu-id="de37e-124"><see langword="true" /> se a solicitação de recarregamento for aceita ou <see langword="false" /> se o carregador não permitir o recarregamento.</span><span class="sxs-lookup"><span data-stu-id="de37e-124"><see langword="true" /> if the reload request is accepted, or <see langword="false" /> if the loader does not allow the reload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de37e-125">Qualquer objeto pode chamar esse método para solicitar que o recarregamento do carregador do documento de design.</span><span class="sxs-lookup"><span data-stu-id="de37e-125">Any object can call this method to request that the loader reload the design document.</span></span> <span data-ttu-id="de37e-126">Se o carregador dá suporte ao recarregamento e está em conformidade com o recarregamento, o carregador do designer pode retornar `true`.</span><span class="sxs-lookup"><span data-stu-id="de37e-126">If the loader supports reloading and complies with the reload, the designer loader can return `true`.</span></span> <span data-ttu-id="de37e-127">Caso contrário, retornará `false`, indicando que a recarga não ocorrerá.</span><span class="sxs-lookup"><span data-stu-id="de37e-127">Otherwise, it returns `false`, indicating that the reload will not occur.</span></span> <span data-ttu-id="de37e-128">Os chamadores não podem contar com o recarregamento acontecendo imediatamente; o carregador do designer pode agendá-la para outro momento, ou ele poderá tentar recarregar ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="de37e-128">Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.</span></span>  
  
 <span data-ttu-id="de37e-129">O chamador pode exibir uma mensagem para o usuário se o designer não pode ser recarregado.</span><span class="sxs-lookup"><span data-stu-id="de37e-129">The caller can display a message to the user if the designer cannot be reloaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>