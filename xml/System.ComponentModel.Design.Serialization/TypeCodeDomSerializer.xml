<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f14e9f0b34bf08ae3d85680b5436c08133c23ff1" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55356373" /></Metadata><TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="19091-101">Serializa um objeto para um novo tipo.</span><span class="sxs-lookup"><span data-stu-id="19091-101">Serializes an object to a new type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19091-102">O <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> classe executa as mesmas tarefas que um <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, mas serializar um objeto por meio dessa classe define um novo tipo.</span><span class="sxs-lookup"><span data-stu-id="19091-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb"><span data-ttu-id="19091-103">Geração e compilação de código-fonte dinâmico</span><span class="sxs-lookup"><span data-stu-id="19091-103">Dynamic Source Code Generation and Compilation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19091-104">Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />.</span><span class="sxs-lookup"><span data-stu-id="19091-104">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="19091-105">O gerenciador de serialização a ser usado para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-105">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="19091-106">Declaração de tipo a ser usada para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-106">Type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="19091-107">Desserializa a declaração de tipo especificada.</span><span class="sxs-lookup"><span data-stu-id="19091-107">Deserializes the given type declaration.</span></span></summary>
        <returns><span data-ttu-id="19091-108">O objeto raiz.</span><span class="sxs-lookup"><span data-stu-id="19091-108">The root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19091-109">O <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> método desserializa uma declaração de tipo de código serializado anteriormente.</span><span class="sxs-lookup"><span data-stu-id="19091-109">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="19091-110">A tabela a seguir mostra que a implementação do padrão de tarefas executa.</span><span class="sxs-lookup"><span data-stu-id="19091-110">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="19091-111">Tarefa</span><span class="sxs-lookup"><span data-stu-id="19091-111">Task</span></span>|<span data-ttu-id="19091-112">Descrição</span><span class="sxs-lookup"><span data-stu-id="19091-112">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="19091-113">Verificações de maiusculas e minúsculas</span><span class="sxs-lookup"><span data-stu-id="19091-113">Case Sensitivity Checks</span></span>|<span data-ttu-id="19091-114">A implementação procura um <xref:System.CodeDom.Compiler.CodeDomProvider> service para decidir se deve tratar os membros que diferencia maiusculas de minúsculas ou maiusculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="19091-114">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="19091-115">Classificação de instrução</span><span class="sxs-lookup"><span data-stu-id="19091-115">Statement Sorting</span></span>|<span data-ttu-id="19091-116">Todas as variáveis de membro e variáveis locais de métodos init são armazenadas em uma tabela.</span><span class="sxs-lookup"><span data-stu-id="19091-116">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="19091-117">Em seguida, cada instrução em um método init é adicionada a uma coleção de instrução agrupada de acordo com seu lado esquerdo, para que todas as instruções de atribuição ou operando em uma determinada variável estão agrupadas sob essa variável.</span><span class="sxs-lookup"><span data-stu-id="19091-117">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="19091-118">Variáveis que não têm a nenhuma instrução são descartadas.</span><span class="sxs-lookup"><span data-stu-id="19091-118">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="19091-119">Desserialização</span><span class="sxs-lookup"><span data-stu-id="19091-119">Deserialization</span></span>|<span data-ttu-id="19091-120">As coleções de instrução para cada variável são desserializadas de acordo com a variável.</span><span class="sxs-lookup"><span data-stu-id="19091-120">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="19091-121">A tabela a seguir mostra os serviços a <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> requer o método.</span><span class="sxs-lookup"><span data-stu-id="19091-121">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="19091-122">Serviço</span><span class="sxs-lookup"><span data-stu-id="19091-122">Service</span></span>|<span data-ttu-id="19091-123">Descrição</span><span class="sxs-lookup"><span data-stu-id="19091-123">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="19091-124">Embora não seja estritamente necessário, o serviço, se disponível, é usado para determinar se a serialização deve estar entre maiusculas e minúsculas ou maiusculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="19091-124">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="19091-125">Se um objeto não existe na tabela de nome durante a desserialização, uma consulta para <xref:System.ComponentModel.IContainer> é feita.</span><span class="sxs-lookup"><span data-stu-id="19091-125">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="19091-126">Se essa consulta for bem-sucedida, o contêiner é verificado para o objeto.</span><span class="sxs-lookup"><span data-stu-id="19091-126">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="19091-127">O contêiner também é usado como um substituto para qualquer argumento de recipiente necessário pelos componentes.</span><span class="sxs-lookup"><span data-stu-id="19091-127">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="19091-128"><paramref name="manager" /> ou <paramref name="typeDecl" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="19091-128"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb"><span data-ttu-id="19091-129">Geração e compilação de código-fonte dinâmico</span><span class="sxs-lookup"><span data-stu-id="19091-129">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="19091-130">O gerenciador de serialização a ser usado para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-130">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="19091-131">A declaração de tipo a ser usada para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-131">The type declaration to use for serialization.</span></span></param>
        <param name="value"><span data-ttu-id="19091-132">O valor a ser usado para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-132">The value to use for serialization.</span></span></param>
        <summary><span data-ttu-id="19091-133">Retorna o método em que as instruções usadas para serializar o membro são armazenadas.</span><span class="sxs-lookup"><span data-stu-id="19091-133">Returns the method where statements used to serialize a member are stored.</span></span></summary>
        <returns><span data-ttu-id="19091-134">O método usado para emitir todo o código de inicialização para o membro especificado.</span><span class="sxs-lookup"><span data-stu-id="19091-134">The method used to emit all of the initialization code for the given member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19091-135">O <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> método retorna o método para emitir todo o código de inicialização para o membro especificado.</span><span class="sxs-lookup"><span data-stu-id="19091-135">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="19091-136">A implementação padrão retorna um construtor vazio.</span><span class="sxs-lookup"><span data-stu-id="19091-136">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="19091-137">Se o mesmo método será retornado para vários valores, a mesma instância do método deve ser retornada.</span><span class="sxs-lookup"><span data-stu-id="19091-137">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="19091-138">Você pode usar o <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dicionário se lembrar de métodos que você criou.</span><span class="sxs-lookup"><span data-stu-id="19091-138">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="19091-139">O `typeDecl` parâmetro também pode ser usado para adicionar métodos de infra-estrutura.</span><span class="sxs-lookup"><span data-stu-id="19091-139">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="19091-140">Por exemplo, se você quiser emitir um método separado para cada objeto, você precisa de um único método que chama todos esses métodos por sua vez.</span><span class="sxs-lookup"><span data-stu-id="19091-140">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="19091-141">Esse método pode ser adicionado à declaração de tipo de código, conforme necessário.</span><span class="sxs-lookup"><span data-stu-id="19091-141">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="19091-142"><paramref name="manager" />, <paramref name="typeDecl" /> ou <paramref name="value" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="19091-142"><paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb"><span data-ttu-id="19091-143">Geração e compilação de código-fonte dinâmico</span><span class="sxs-lookup"><span data-stu-id="19091-143">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="19091-144">O gerenciador de serialização a ser usado para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-144">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="19091-145">A declaração de tipo a ser usada para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-145">The type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="19091-146">Retorna uma matriz de métodos a ser interpretada durante a desserialização.</span><span class="sxs-lookup"><span data-stu-id="19091-146">Returns an array of methods to be interpreted during deserialization.</span></span></summary>
        <returns><span data-ttu-id="19091-147">Uma matriz <see cref="T:System.CodeDom.CodeMemberMethod" /> de métodos a ser interpretada durante a desserialização.</span><span class="sxs-lookup"><span data-stu-id="19091-147">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19091-148">A implementação padrão retorna uma matriz de elemento único com o construtor nele.</span><span class="sxs-lookup"><span data-stu-id="19091-148">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="19091-149"><paramref name="manager" /> ou <paramref name="typeDecl" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="19091-149"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb"><span data-ttu-id="19091-150">Geração e compilação de código-fonte dinâmico</span><span class="sxs-lookup"><span data-stu-id="19091-150">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="19091-151">O gerenciador de serialização a ser usado para serialização.</span><span class="sxs-lookup"><span data-stu-id="19091-151">The serialization manager to use for serialization.</span></span></param>
        <param name="root"><span data-ttu-id="19091-152">O objeto a ser serializado.</span><span class="sxs-lookup"><span data-stu-id="19091-152">The object to serialize.</span></span></param>
        <param name="members"><span data-ttu-id="19091-153">Coleção opcional de membros.</span><span class="sxs-lookup"><span data-stu-id="19091-153">Optional collection of members.</span></span> <span data-ttu-id="19091-154">Pode ser <see langword="null" /> ou vazio.</span><span class="sxs-lookup"><span data-stu-id="19091-154">Can be <see langword="null" /> or empty.</span></span></param>
        <summary><span data-ttu-id="19091-155">Serializa a raiz do objeto, criando uma nova declaração de tipo que define a raiz.</span><span class="sxs-lookup"><span data-stu-id="19091-155">Serializes the object root by creating a new type declaration that defines root.</span></span></summary>
        <returns><span data-ttu-id="19091-156">Um <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que define o objeto raiz.</span><span class="sxs-lookup"><span data-stu-id="19091-156">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19091-157">O <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> método serializa o objeto raiz fornecido e a coleção opcional de membros para criar uma nova definição de tipo.</span><span class="sxs-lookup"><span data-stu-id="19091-157">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="19091-158">Se o `members` coleção contiver valores, esses valores são serializados.</span><span class="sxs-lookup"><span data-stu-id="19091-158">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="19091-159">Valores em si podem serializar como variáveis locais ou variáveis de membro.</span><span class="sxs-lookup"><span data-stu-id="19091-159">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="19091-160">Essa determinação é feita por meio de pesquisa para uma propriedade de extensão no objeto chamado `GenerateMember`.</span><span class="sxs-lookup"><span data-stu-id="19091-160">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="19091-161">Se `true`, um membro é gerado.</span><span class="sxs-lookup"><span data-stu-id="19091-161">If `true`, a member is generated.</span></span> <span data-ttu-id="19091-162">Caso contrário, uma variável local é gerada.</span><span class="sxs-lookup"><span data-stu-id="19091-162">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="19091-163">Para sua conveniência, o `members` coleção pode conter o objeto raiz.</span><span class="sxs-lookup"><span data-stu-id="19091-163">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="19091-164">Nesse caso, o objeto raiz também não é adicionado como um membro ou uma variável local.</span><span class="sxs-lookup"><span data-stu-id="19091-164">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="19091-165">O nome do tipo retornado é obtido do nome do objeto raiz, se fosse um objeto nomeado.</span><span class="sxs-lookup"><span data-stu-id="19091-165">The name of the returned type is taken from the root object's name, if it was a named object.</span></span> <span data-ttu-id="19091-166">Caso contrário, um nome é gerado do nome do tipo simples da classe raiz.</span><span class="sxs-lookup"><span data-stu-id="19091-166">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="19091-167">A tabela a seguir mostra as tarefas executadas pela implementação do padrão de <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="19091-167">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="19091-168">Tarefa</span><span class="sxs-lookup"><span data-stu-id="19091-168">Task</span></span>|<span data-ttu-id="19091-169">Descrição</span><span class="sxs-lookup"><span data-stu-id="19091-169">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="19091-170">A propagação de contexto</span><span class="sxs-lookup"><span data-stu-id="19091-170">Context Seeding</span></span>|<span data-ttu-id="19091-171">O contexto de serialização é inicializado com dados incluindo a <xref:System.ComponentModel.Design.Serialization.RootContext> e <xref:System.CodeDom.CodeTypeDeclaration></span><span class="sxs-lookup"><span data-stu-id="19091-171">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="19091-172">Serialização de membro</span><span class="sxs-lookup"><span data-stu-id="19091-172">Member Serialization</span></span>|<span data-ttu-id="19091-173">Em seguida, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> apresenta todos os membros e chamadas <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span><span class="sxs-lookup"><span data-stu-id="19091-173">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="19091-174">Porque a serialização é feita oportunamente em <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, isso garante que a serialização não é feita duas vezes.</span><span class="sxs-lookup"><span data-stu-id="19091-174">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="19091-175">Serialização de raiz</span><span class="sxs-lookup"><span data-stu-id="19091-175">Root Serialization</span></span>|<span data-ttu-id="19091-176">Em seguida, o objeto raiz é serializado e suas declarações são adicionadas à coleção de instrução.</span><span class="sxs-lookup"><span data-stu-id="19091-176">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="19091-177">Integração de instrução</span><span class="sxs-lookup"><span data-stu-id="19091-177">Statement Integration</span></span>|<span data-ttu-id="19091-178">Depois que todos os objetos são serializados, os <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> método ordena as instruções e os adiciona a um método retornado de <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span><span class="sxs-lookup"><span data-stu-id="19091-178">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="19091-179">Por fim, um construtor é gerado que chama todos os métodos retornados de <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span><span class="sxs-lookup"><span data-stu-id="19091-179">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="19091-180">A tabela a seguir mostra os objetos a <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> método coloca na pilha de contexto.</span><span class="sxs-lookup"><span data-stu-id="19091-180">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="19091-181">Instância</span><span class="sxs-lookup"><span data-stu-id="19091-181">Instance</span></span>|<span data-ttu-id="19091-182">Descrição</span><span class="sxs-lookup"><span data-stu-id="19091-182">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="19091-183">Este serializador.</span><span class="sxs-lookup"><span data-stu-id="19091-183">This serializer.</span></span> <span data-ttu-id="19091-184">Derivando de classes pode ser útil para adicionar propriedades públicas para esta classe.</span><span class="sxs-lookup"><span data-stu-id="19091-184">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="19091-185">O tipo que está sendo criado.</span><span class="sxs-lookup"><span data-stu-id="19091-185">The type being created.</span></span> <span data-ttu-id="19091-186">A maioria dos objetos não é necessário acesso direto a esta.</span><span class="sxs-lookup"><span data-stu-id="19091-186">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="19091-187"><paramref name="manager" /> ou <paramref name="root" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="19091-187"><paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb"><span data-ttu-id="19091-188">Geração e compilação de código-fonte dinâmico</span><span class="sxs-lookup"><span data-stu-id="19091-188">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>