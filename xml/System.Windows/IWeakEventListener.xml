<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56c23c281fad327a8782e15b932a4c0347858871" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64185571" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornece suporte de escuta de eventos para as classes que esperam receber eventos por meio do padrão WeakEvent e um <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.WeakEventManager> (um dispatcher) encaminha a um evento chamando o <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> método em classes que implementam essa interface, e que foram adicionados como ouvintes chamando <xref:System.Windows.WeakEventManager> métodos com antecedência.  
  
 O principal motivo para seguir o padrão WeakEvent é quando a origem do evento tem um tempo de vida do objeto que é potencialmente independente dos ouvintes de evento. Usando a central de eventos de expedição de um <xref:System.Windows.WeakEventManager> permite que os manipuladores ouvintes de ter seu lixo coletado (ou limpos manualmente), mesmo que o tempo de vida do objeto de origem ultrapassa os ouvintes. Por outro lado, um vínculo de evento normal usando `+=` ou sintaxe de evento equivalente do idioma específico faz com que a fonte ainda potencialmente conectado manter uma referência forte para os manipuladores. Isso impede que as referências de ouvinte de serem lixo coletado no momento oportuno.  
  
 Uma situação comum em que as relações entre fontes e ouvintes sugere o uso desse padrão é a manipulação de eventos de atualização provenientes de fontes para associações de dados.  
  
 Você pode usar o padrão WeakEvent para escutar eventos que são externos ao seu aplicativo. Você só precisa definir um <xref:System.Windows.WeakEventManager> para ele, fornecer um comportamento de escutando no <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>e usar o <xref:System.Windows.WeakEventManager> anexar o manipulador faz referência em vez de `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">O tipo do <see cref="T:System.Windows.WeakEventManager" /> que chama esse método.</param>
        <param name="sender">O objeto que originou o evento.</param>
        <param name="e">Dados do evento.</param>
        <summary>Recebe eventos do gerenciador de eventos centralizado.</summary>
        <returns><see langword="true" /> se o ouvinte tratou o evento. É considerado um erro pela manipulação de <see cref="T:System.Windows.WeakEventManager" /> em [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] para registrar um ouvinte para um evento que o ouvinte não manipula. De qualquer forma, o método deverá retornar <see langword="false" /> se receber um evento que não reconhece ou trata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir implementa <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> para fornecer suporte a padrão WeakEvent para dois eventos hipotéticos `ClockwiseSpin` e `CounterclockwiseSpin` que possuem um dedicado <xref:System.Windows.WeakEventManager> (não mostrado). Essa implementação chama de stubs de manipuladores de classe para cada evento com suporte, a conversão dos dados de evento (nesse caso, os dois eventos compartilham um tipo de dados de evento `SpinEventArgs`). A implementação retorna `false` se o evento recebido não é aquele que é esperado.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Este método destina-se para receber todos os eventos possíveis em que o destinatário está em uma lista de escuta. Especialmente se implementar para uma classe que está escutando para mais de um evento, você deve verificar o tipo de entrada <paramref name="managerType" /> parâmetro para saber a chamada de evento que corresponde à. Isso ocorre porque cada evento que deve ser parte do padrão deve ter um dedicado <see cref="T:System.Windows.WeakEventManager" />. Além disso, o <paramref name="e" /> parâmetro é digitado como geral <see cref="T:System.EventArgs" />. Portanto, em ordem, obtenha as propriedades específicas fora os dados do evento, sua implementação será preciso converter para o tipo de dados de evento específico.  
  
Normalmente, depois de verificar a identidade de evento com base no <see cref="T:System.Windows.WeakEventManager" /> tipo, sua implementação deve chamar um manipulador de classe privada. Seu manipulador de classe perfeitamente poderia ser o mesmo manipulador da classe que é usado para manipular esse evento para os ouvintes que são adicionados por meio do padrão de evento convencional de adicionar por meio de <see langword="+=" /> para o evento no remetente. A seção de exemplo a seguir fornece um modelo de implementação aproximada.</para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>