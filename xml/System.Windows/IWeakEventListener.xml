<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IWeakEventListener.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53a1bf86fcc21c642d34254ee3721d50b914beee5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a1bf86fcc21c642d34254ee3721d50b914beee5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.IWeakEventListener">
          <source>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">Fornece suporte de escuta de eventos para as classes que esperam receber eventos por meio do padrão WeakEvent e um <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (a dispatcher) forwards an event by calling the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> method on classes that implement this interface, and that have been added as listeners by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods beforehand.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (um distribuidor) encaminha a um evento chamando o <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> método em classes que implementam esta interface e que foram adicionados como ouvintes chamando <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> métodos com antecedência.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</source>
          <target state="translated">A principal razão para seguir o padrão WeakEvent ocorre quando a origem do evento tem um tempo de vida do objeto que é potencialmente independente de ouvintes de eventos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>Using the central event dispatching of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</source>
          <target state="translated">Usando a central de eventos de distribuição de um <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> permite que os manipuladores para ouvintes para ser lixo coletado (ou limpos manualmente) mesmo se o tempo de vida do objeto de origem, ultrapassa os ouvintes.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>By contrast, a normal event hookup using <ph id="ph1">`+=`</ph> or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</source>
          <target state="translated">Por outro lado, uma conexão de evento normal usando <ph id="ph1">`+=`</ph> ou evento específico do idioma equivalente sintaxe faz com que a fonte potencialmente conectado ainda manter uma referência forte para os manipuladores.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>This keeps the listener references from being garbage collected in a timely fashion.</source>
          <target state="translated">Isso impede que as referências de ouvinte sejam limpos regularmente.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</source>
          <target state="translated">Uma situação comum em que as relações entre as origens e os ouvintes sugere o uso desse padrão é a manipulação de eventos de atualização provenientes de fontes para associações de dados.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You can use the WeakEvent pattern to listen for events that are external to your application.</source>
          <target state="translated">Você pode usar o padrão WeakEvent para escutar eventos que são externos ao seu aplicativo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You only need to define a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> for it, provide listening behavior in <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>, and use the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> to attach the handler references rather than <ph id="ph4">`+=`</ph>.</source>
          <target state="translated">Você só precisa definir um <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> , fornecer um comportamento de escutando em <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>e usar o <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> anexar o manipulador faz referência em vez de <ph id="ph4">`+=`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> calling this method.</source>
          <target state="translated">O tipo do <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> que chama esse método.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Object that originated the event.</source>
          <target state="translated">O objeto que originou o evento.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Event data.</source>
          <target state="translated">Dados do evento.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Receives events from the centralized event manager.</source>
          <target state="translated">Recebe eventos do gerenciador de eventos centralizado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the listener handled the event.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o ouvinte tratou o evento.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>It is considered an error by the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> handling in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> to register a listener for an event that the listener does not handle.</source>
          <target state="translated">É considerado um erro pela manipulação de <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> em <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> para registrar um ouvinte para um evento que o ouvinte não manipula.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Regardless, the method should return <ph id="ph1">&lt;see langword="false" /&gt;</ph> if it receives an event that it does not recognize or handle.</source>
          <target state="translated">De qualquer forma, o método deverá retornar <ph id="ph1">&lt;see langword="false" /&gt;</ph> se receber um evento que não reconhece ou trata.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> to provide WeakEvent pattern support for two hypothetical events <ph id="ph2">`ClockwiseSpin`</ph> and <ph id="ph3">`CounterclockwiseSpin`</ph> that each have a dedicated <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (not shown).</source>
          <target state="translated">O exemplo a seguir implementa <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> para fornecer suporte a padrão WeakEvent para dois eventos hipotéticos <ph id="ph2">`ClockwiseSpin`</ph> e <ph id="ph3">`CounterclockwiseSpin`</ph> com cada uma dedicada <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (não mostrado).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type <ph id="ph1">`SpinEventArgs`</ph>).</source>
          <target state="translated">Essa implementação chama stubs de manipuladores de classe para cada evento com suporte, a conversão dos dados de evento (nesse caso, os dois eventos compartilham um tipo de dados de evento <ph id="ph1">`SpinEventArgs`</ph>).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The implementation returns <ph id="ph1">`false`</ph> if the event received is not one that is expected.</source>
          <target state="translated">A implementação retorna <ph id="ph1">`false`</ph> se o evento recebido não é um que é esperado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This method is intended to receive all possible events where the receiver is in a listener list.</source>
          <target state="translated">Este método destina-se para receber todos os possíveis eventos em que o destinatário está em uma lista de escuta.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> parameter in order to know which event the call corresponds to.</source>
          <target state="translated">Especialmente se a implementação de uma classe que está escutando para mais de um evento, você deve verificar o tipo de entrada <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> parâmetro para saber a chamada de evento que corresponde à.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This is why each event that is to be part of the pattern must have a dedicated <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">Isso é porque cada evento que deve ser parte do padrão deve ter um dedicado <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Also, the <ph id="ph1">&lt;paramref name="e" /&gt;</ph> parameter is typed as the general <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>.</source>
          <target state="translated">Além disso, o <ph id="ph1">&lt;paramref name="e" /&gt;</ph> parâmetro seja tipado como gerais <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</source>
          <target state="translated">Portanto, em ordem, obtenha as propriedades específicas sem os dados do evento, sua implementação precisa converter para o tipo de dados de evento específico.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Typically, after checking for the identity of the event based on the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> type, your implementation should call a private class handler.</source>
          <target state="translated">Normalmente, depois de verificar a identidade de evento com base no <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> tipo, sua implementação deve chamar um manipulador de classe particular.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <ph id="ph1">&lt;see langword="+=" /&gt;</ph> to the event on the sender.</source>
          <target state="translated">O manipulador de classe perfeitamente pode ser o mesmo manipulador da classe que é usado para manipular o evento para ouvintes que são adicionados através do padrão de evento convencional de adição de <ph id="ph1">&lt;see langword="+=" /&gt;</ph> o evento no remetente.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example section provides a rough implementation template.</source>
          <target state="translated">A seção de exemplo a seguir fornece um modelo de implementação aproximada.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>