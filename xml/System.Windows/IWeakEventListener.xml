<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a1bf86fcc21c642d34254ee3721d50b914beee5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676100" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d9f11-101">Fornece suporte de escuta de eventos para as classes que esperam receber eventos por meio do padrão WeakEvent e um <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9f11-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9f11-102">O <xref:System.Windows.WeakEventManager> (um distribuidor) encaminha a um evento chamando o <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> método em classes que implementam esta interface e que foram adicionados como ouvintes chamando <xref:System.Windows.WeakEventManager> métodos com antecedência.</span><span class="sxs-lookup"><span data-stu-id="d9f11-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="d9f11-103">A principal razão para seguir o padrão WeakEvent ocorre quando a origem do evento tem um tempo de vida do objeto que é potencialmente independente de ouvintes de eventos.</span><span class="sxs-lookup"><span data-stu-id="d9f11-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="d9f11-104">Usando a central de eventos de distribuição de um <xref:System.Windows.WeakEventManager> permite que os manipuladores para ouvintes para ser lixo coletado (ou limpos manualmente) mesmo se o tempo de vida do objeto de origem, ultrapassa os ouvintes.</span><span class="sxs-lookup"><span data-stu-id="d9f11-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="d9f11-105">Por outro lado, uma conexão de evento normal usando `+=` ou evento específico do idioma equivalente sintaxe faz com que a fonte potencialmente conectado ainda manter uma referência forte para os manipuladores.</span><span class="sxs-lookup"><span data-stu-id="d9f11-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="d9f11-106">Isso impede que as referências de ouvinte sejam limpos regularmente.</span><span class="sxs-lookup"><span data-stu-id="d9f11-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="d9f11-107">Uma situação comum em que as relações entre as origens e os ouvintes sugere o uso desse padrão é a manipulação de eventos de atualização provenientes de fontes para associações de dados.</span><span class="sxs-lookup"><span data-stu-id="d9f11-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="d9f11-108">Você pode usar o padrão WeakEvent para escutar eventos que são externos ao seu aplicativo.</span><span class="sxs-lookup"><span data-stu-id="d9f11-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="d9f11-109">Você só precisa definir um <xref:System.Windows.WeakEventManager> , fornecer um comportamento de escutando em <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>e usar o <xref:System.Windows.WeakEventManager> anexar o manipulador faz referência em vez de `+=`.</span><span class="sxs-lookup"><span data-stu-id="d9f11-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="d9f11-110">O tipo do <see cref="T:System.Windows.WeakEventManager" /> que chama esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9f11-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span>
          </span>
        </param>
        <param name="sender">
          <span data-ttu-id="d9f11-111">O objeto que originou o evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9f11-111">Object that originated the event.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="d9f11-112">Dados do evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9f11-112">Event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9f11-113">Recebe eventos do gerenciador de eventos centralizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9f11-113">Receives events from the centralized event manager.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d9f11-114">
            <see langword="true" /> se o ouvinte tratou o evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9f11-114">
              <see langword="true" /> if the listener handled the event.</span>
          </span>
          <span data-ttu-id="d9f11-115">É considerado um erro pela manipulação de <see cref="T:System.Windows.WeakEventManager" /> em [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] para registrar um ouvinte para um evento que o ouvinte não manipula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9f11-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span>
          </span>
          <span data-ttu-id="d9f11-116">De qualquer forma, o método deverá retornar <see langword="false" /> se receber um evento que não reconhece ou trata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9f11-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d9f11-117">O exemplo a seguir implementa <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> para fornecer suporte a padrão WeakEvent para dois eventos hipotéticos `ClockwiseSpin` e `CounterclockwiseSpin` com cada uma dedicada <xref:System.Windows.WeakEventManager> (não mostrado).</span><span class="sxs-lookup"><span data-stu-id="d9f11-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="d9f11-118">Essa implementação chama stubs de manipuladores de classe para cada evento com suporte, a conversão dos dados de evento (nesse caso, os dois eventos compartilham um tipo de dados de evento `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="d9f11-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="d9f11-119">A implementação retorna `false` se o evento recebido não é um que é esperado.</span><span class="sxs-lookup"><span data-stu-id="d9f11-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d9f11-120">Este método destina-se para receber todos os possíveis eventos em que o destinatário está em uma lista de escuta.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-120">This method is intended to receive all possible events where the receiver is in a listener list.</span>
            </span>
            <span data-ttu-id="d9f11-121">Especialmente se a implementação de uma classe que está escutando para mais de um evento, você deve verificar o tipo de entrada <paramref name="managerType" /> parâmetro para saber a chamada de evento que corresponde à.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span>
            </span>
            <span data-ttu-id="d9f11-122">Isso é porque cada evento que deve ser parte do padrão deve ter um dedicado <see cref="T:System.Windows.WeakEventManager" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span>
            </span>
            <span data-ttu-id="d9f11-123">Além disso, o <paramref name="e" /> parâmetro seja tipado como gerais <see cref="T:System.EventArgs" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span>
            </span>
            <span data-ttu-id="d9f11-124">Portanto, em ordem, obtenha as propriedades específicas sem os dados do evento, sua implementação precisa converter para o tipo de dados de evento específico.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span>
            </span>
            <span data-ttu-id="d9f11-125">Normalmente, depois de verificar a identidade de evento com base no <see cref="T:System.Windows.WeakEventManager" /> tipo, sua implementação deve chamar um manipulador de classe particular.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span>
            </span>
            <span data-ttu-id="d9f11-126">O manipulador de classe perfeitamente pode ser o mesmo manipulador da classe que é usado para manipular o evento para ouvintes que são adicionados através do padrão de evento convencional de adição de <see langword="+=" /> o evento no remetente.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span>
            </span>
            <span data-ttu-id="d9f11-127">A seção de exemplo a seguir fornece um modelo de implementação aproximada.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9f11-127">The following example section provides a rough implementation template.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>