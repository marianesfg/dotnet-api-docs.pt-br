<Type Name="Vector" FullName="System.Windows.Vector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3f669a030721170f3f33bf41d5f10027cd77c8ec" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52204493" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <TypeSignature Language="F#" Value="type Vector = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8b110-101">Representa um deslocamento de espaço 2D.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b110-101">Represents a displacement in 2-D space.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-102">Um <xref:System.Windows.Point> representa uma posição fixa, mas um <xref:System.Windows.Vector> representa uma direção e uma magnitude (por exemplo, velocidade ou aceleração).</span><span class="sxs-lookup"><span data-stu-id="8b110-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="8b110-103">Assim, os pontos de extremidade de um segmento de linha são pontos, mas seu diferença é um vector; ou seja, a direção e o comprimento dessa linha segmento.</span><span class="sxs-lookup"><span data-stu-id="8b110-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="8b110-104">No XAML, o delimitador entre o <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> valores de um <xref:System.Windows.Vector> pode ser uma vírgula ou um espaço.</span><span class="sxs-lookup"><span data-stu-id="8b110-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="8b110-105">Algumas culturas podem usar o caractere de vírgula como delimitador em vez do caractere de ponto decimal.</span><span class="sxs-lookup"><span data-stu-id="8b110-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="8b110-106">XAML de processamento para a cultura invariável padrão é en-US, na maioria das implementações de processador XAML e espera que o período como o delimitador de decimal.</span><span class="sxs-lookup"><span data-stu-id="8b110-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="8b110-107">Você deve evitar usar o caractere de vírgula como delimitador decimal se especificando um <xref:System.Windows.Vector> em XAML, porque que entrarão em conflito com a conversão de tipo de cadeia de caracteres de um <xref:System.Windows.Vector> valor no atributo de <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> componentes.</span><span class="sxs-lookup"><span data-stu-id="8b110-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="8b110-108">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="8b110-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8b110-109">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="8b110-109">XAML Values</span></span>  
 <span data-ttu-id="8b110-110">*x*</span><span class="sxs-lookup"><span data-stu-id="8b110-110">*x*</span></span>  
 <span data-ttu-id="8b110-111">Do vetor componente X.</span><span class="sxs-lookup"><span data-stu-id="8b110-111">The vector's X component.</span></span> <span data-ttu-id="8b110-112">Para obter mais informações, consulte a propriedade <xref:System.Windows.Vector.X%2A>.</span><span class="sxs-lookup"><span data-stu-id="8b110-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="8b110-113">*y*</span><span class="sxs-lookup"><span data-stu-id="8b110-113">*y*</span></span>  
 <span data-ttu-id="8b110-114">Componente de Y do vetor.</span><span class="sxs-lookup"><span data-stu-id="8b110-114">The vector's Y component.</span></span> <span data-ttu-id="8b110-115">Para obter mais informações, consulte a propriedade <xref:System.Windows.Vector.Y%2A>.</span><span class="sxs-lookup"><span data-stu-id="8b110-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-116">O exemplo a seguir mostra como adicionar dois <xref:System.Windows.Vector> estruturas.</span><span class="sxs-lookup"><span data-stu-id="8b110-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberSignature Language="F#" Value="new System.Windows.Vector : double * double -&gt; System.Windows.Vector" Usage="new System.Windows.Vector (x, y)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="8b110-117">O deslocamento de <see cref="P:System.Windows.Vector.X" /> do novo <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="8b110-118">O deslocamento de <see cref="P:System.Windows.Vector.Y" /> do novo <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-119">Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-120">O exemplo a seguir mostra como criar dois vetores e adicioná-los juntos.</span><span class="sxs-lookup"><span data-stu-id="8b110-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-121">Adiciona um vetor para um ponto ou para outro vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-121">Adds a vector to a point or to another vector.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="System.Windows.Vector.Add (vector, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-122">O valor para converter o ponto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-122">The amount to translate the specified point.</span>
          </span>
        </param>
        <param name="point">
          <span data-ttu-id="8b110-123">O ponto a ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-123">The point to translate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-124">Move o ponto especificado pelo vetor especificado e retorna o ponto resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-124">Translates the specified point by the specified vector and returns the resulting point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-125">O resultado de converter <paramref name="point" /> por <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-126">O exemplo a seguir mostra como usar esse método para adicionar um <xref:System.Windows.Point> estrutura para um <xref:System.Windows.Vector> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Add (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-127">O primeiro vetor a ser adicionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-127">The first vector to add.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-128">O segundo vetor a ser adicionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-128">The second vector to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-129">Adiciona dois vetores e retorna o resultado como uma estrutura de <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-130">A soma de <paramref name="vector1" /> e <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-131">O exemplo a seguir mostra como usar esse método para adicionar dois <xref:System.Windows.Vector> estruturas.</span><span class="sxs-lookup"><span data-stu-id="8b110-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member AngleBetween : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.AngleBetween (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-132">O primeiro vetor a ser avaliado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-132">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-133">O segundo vetor a ser avaliado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-133">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-134">Recupera o ângulo, expressado em graus, entre os dois vetores especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-135">O ângulo, em graus, entre <paramref name="vector1" /> e <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-136">O exemplo a seguir mostra como usar esse método para obter o ângulo entre dois <xref:System.Windows.Vector> estruturas.</span><span class="sxs-lookup"><span data-stu-id="8b110-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member CrossProduct : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.CrossProduct (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-137">O primeiro vetor a ser avaliado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-137">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-138">O segundo vetor a ser avaliado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-138">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-139">Calcula o produto cruzado de dois vetores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-139">Calculates the cross product of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-140">O produto cruzado de <paramref name="vector1" /> e <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
          <span data-ttu-id="8b110-141">A fórmula a seguir é usada para calcular o produto cruzado:</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-141">The following formula is used to calculate the cross product:</span>
          </span>
          <span data-ttu-id="8b110-142">
            <c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-142">
              <c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-143">O exemplo a seguir mostra como usar esse método para calcular o produto cruzado de dois <xref:System.Windows.Vector> estruturas.</span><span class="sxs-lookup"><span data-stu-id="8b110-143">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Determinant : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Determinant (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-144">O primeiro vetor a ser avaliado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-144">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-145">O segundo vetor a ser avaliado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-145">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-146">Calcula o determinante de dois vetores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-146">Calculates the determinant of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-147">O determinante de <paramref name="vector1" /> e <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-147">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-148">O exemplo a seguir mostra como calcular o determinante de dois <xref:System.Windows.Vector> estruturas.</span><span class="sxs-lookup"><span data-stu-id="8b110-148">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Divide (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-149">A estrutura de vetor a ser dividida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-149">The vector structure to divide.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="8b110-150">A quantidade pela qual <paramref name="vector" /> é dividido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-150">The amount by which <paramref name="vector" /> is divided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-151">Divide o vetor especificado pelo escalar especificado e retorna o resultado como um <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-151">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-152">O resultado da divisão de <paramref name="vector" /> por <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-152">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-153">O exemplo a seguir mostra como usar esse método para dividir um <xref:System.Windows.Vector> por um escalar.</span><span class="sxs-lookup"><span data-stu-id="8b110-153">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-154">Compara dois vetores quanto à igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-154">Compares two vectors for equality.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-155">Um vetor <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> propriedades são descritas usando <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="8b110-155">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="8b110-156">Porque o valor de uma <xref:System.Double> podem perder a precisão quando operações aritméticas são executadas nele, uma comparação entre dois <xref:System.Double> estruturas que são logicamente iguais poderá falhar.</span><span class="sxs-lookup"><span data-stu-id="8b110-156">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="vector.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="8b110-157">O vetor a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-157">The vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-158">Determina se o <see cref="T:System.Object" /> especificado é uma estrutura <see cref="T:System.Windows.Vector" /> e, se sim, se ele tem os mesmos valores de <see cref="P:System.Windows.Vector.X" /> e de <see cref="P:System.Windows.Vector.Y" /> que esse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-158">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-159">
            <see langword="true" /> se <paramref name="o" /> for um <see cref="T:System.Windows.Vector" /> e tiver os mesmos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que esse vetor, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-159">
              <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-160">Um vetor <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> propriedades são descritas usando <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="8b110-160">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="8b110-161">Porque o valor de uma <xref:System.Double> podem perder a precisão quando operações aritméticas são executadas nele, uma comparação entre dois <xref:System.Windows.Vector> estruturas que são logicamente iguais poderá falhar.</span><span class="sxs-lookup"><span data-stu-id="8b110-161">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-162">O exemplo a seguir mostra como usar esse método para verificar se um <xref:System.Windows.Vector> e um <xref:System.Object> são iguais.</span><span class="sxs-lookup"><span data-stu-id="8b110-162">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Vector -&gt; bool" Usage="vector.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="8b110-163">O vetor a ser comparado com esse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-163">The vector to compare with this vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-164">Compara dois vetores quanto à igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-164">Compares two vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-165">
            <see langword="true" /> se <paramref name="value" /> tem os mesmos valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que esse vetor; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-165">
              <see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-166">Um vetor <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> propriedades são descritas usando <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="8b110-166">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="8b110-167">Porque o valor de uma <xref:System.Double> podem perder a precisão quando operações aritméticas são executadas nele, uma comparação entre dois <xref:System.Windows.Vector> estruturas que são logicamente iguais poderá falhar.</span><span class="sxs-lookup"><span data-stu-id="8b110-167">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-168">O exemplo a seguir mostra como usar esse método para verificar se dois <xref:System.Windows.Vector> estruturas forem iguais.</span><span class="sxs-lookup"><span data-stu-id="8b110-168">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.Equals (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-169">O primeiro vetor a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-169">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-170">O segundo vetor a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-170">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-171">Compara os dois vetores especificados quanto à igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-171">Compares the two specified vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-172">
            <see langword="true" /> se os componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> do <paramref name="vector1" /> e do <paramref name="vector2" /> forem iguais, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-172">
              <see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-173">Um vetor <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> propriedades são descritas usando <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="8b110-173">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="8b110-174">Porque o valor de uma <xref:System.Double> podem perder a precisão quando operações aritméticas são executadas nele, uma comparação entre dois <xref:System.Double> estruturas que são logicamente iguais poderá falhar.</span><span class="sxs-lookup"><span data-stu-id="8b110-174">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-175">O exemplo a seguir mostra como usar esse método para verificar se dois <xref:System.Windows.Vector> estruturas forem iguais.</span><span class="sxs-lookup"><span data-stu-id="8b110-175">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="vector.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b110-176">Retorna o código hash desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-176">Returns the hash code for this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-177">O código hash para essa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-177">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-178">O exemplo a seguir mostra como obter o código hash de um <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="8b110-178">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : double" Usage="System.Windows.Vector.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-179">Obtém o tamanho desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-179">Gets the length of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b110-180">O tamanho desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-180">The length of this vector.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-181">O comprimento de um vetor, às vezes é chamado da magnitude.</span><span class="sxs-lookup"><span data-stu-id="8b110-181">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-182">A exemplo a seguir mostra como usa essa propriedade para obter o comprimento de um vetor.</span><span class="sxs-lookup"><span data-stu-id="8b110-182">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberSignature Language="F#" Value="member this.LengthSquared : double" Usage="System.Windows.Vector.LengthSquared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-183">Obtém o quadrado do comprimento desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-183">Gets the square of the length of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b110-184">O quadrado do <see cref="P:System.Windows.Vector.Length" /> desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-184">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-185">O comprimento de um vetor, às vezes é chamado de sua magnitude.</span><span class="sxs-lookup"><span data-stu-id="8b110-185">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-186">O exemplo a seguir mostra como usar essa propriedade para obter o quadrado do comprimento de um vetor.</span><span class="sxs-lookup"><span data-stu-id="8b110-186">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-187">Multiplica o vetor especificado pelo <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" /> ou <see cref="T:System.Windows.Vector" /> especificado e retorna o resultado como um <see cref="T:System.Windows.Vector" /> ou <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-187">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member Multiply : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (scalar, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">
          <span data-ttu-id="8b110-188">O escalar a se multiplicar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-188">The scalar to multiply.</span>
          </span>
        </param>
        <param name="vector">
          <span data-ttu-id="8b110-189">O vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-189">The vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-190">Multiplica o escalar especificado pelo vetor especificado e retorna o <see cref="T:System.Windows.Vector" /> resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-190">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-191">O resultado da multiplicação de <paramref name="scalar" /> por <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-191">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-192">O exemplo a seguir mostra como usar esse método para multiplicar um escalar por um <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="8b110-192">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-193">O vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-193">The vector to multiply.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="8b110-194">O escalar a se multiplicar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-194">The scalar to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-195">Multiplica o vetor especificado pelo escalar especificado e retorna o <see cref="T:System.Windows.Vector" /> resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-195">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-196">O resultado da multiplicação de <paramref name="vector" /> por <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-196">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-197">O exemplo a seguir mostra como usar esse método para multiplicar um <xref:System.Windows.Vector> por um escalar.</span><span class="sxs-lookup"><span data-stu-id="8b110-197">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-198">A estrutura de vetor a transformar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-198">The vector structure to transform.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="8b110-199">A transformação a ser aplicada em <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-199">The transformation to apply to <paramref name="vector" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-200">Transforma o espaço de coordenadas do vetor especificado usando a <see cref="T:System.Windows.Media.Matrix" /> especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-200">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-201">O resultado da transformar <paramref name="vector" /> em <paramref name="matrix" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-201">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-202">O exemplo a seguir mostra como usar esse método para multiplicar uma <xref:System.Windows.Vector> por um <xref:System.Windows.Media.Matrix>.</span><span class="sxs-lookup"><span data-stu-id="8b110-202">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Multiply (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-203">O primeiro vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-203">The first vector to multiply.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-204">A segunda estrutura do vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-204">The second vector structure to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-205">Calcula o produto escalar de dois vetores e retorna o resultado como <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-205">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-206">Um <see cref="T:System.Double" /> que contém o produto escalar de <paramref name="vector1" /> e <paramref name="vector2" />, que é calculado utilizando a seguinte fórmula:</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-206">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span>
          </span>
          <span data-ttu-id="8b110-207">
            <c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-207">
              <c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-208">O exemplo a seguir mostra como usar esse método para multiplicar uma <xref:System.Windows.Vector> por um <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="8b110-208">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberSignature Language="F#" Value="member this.Negate : unit -&gt; unit" Usage="vector.Negate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b110-209">Nega este vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-209">Negates this vector.</span>
          </span>
          <span data-ttu-id="8b110-210">O vetor tem a mesma magnitude de antes, mas sua direção agora é oposta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-210">The vector has the same magnitude as before, but its direction is now opposite.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-211">O exemplo a seguir mostra como usar esse método para negar um vetor.</span><span class="sxs-lookup"><span data-stu-id="8b110-211">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; unit" Usage="vector.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b110-212">Normaliza esse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-212">Normalizes this vector.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-213">Um vetor normalizado mantém sua direção, mas seu <xref:System.Windows.Vector.Length%2A> torna-se 1.</span><span class="sxs-lookup"><span data-stu-id="8b110-213">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="8b110-214">O vetor resultante é frequentemente chamado de um vetor de unidade.</span><span class="sxs-lookup"><span data-stu-id="8b110-214">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="8b110-215">Um vetor é normalizado dividindo-se o vetor por seu próprio <xref:System.Windows.Vector.Length%2A>.</span><span class="sxs-lookup"><span data-stu-id="8b110-215">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-216">O exemplo a seguir mostra como usar esse método para normalizar um vetor.</span><span class="sxs-lookup"><span data-stu-id="8b110-216">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-217">Adiciona um vetor para um ponto ou para outro vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-217">Adds a vector to a point or to another vector.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="vector + point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-218">O vetor usado para converter <paramref name="point" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-218">The vector used to translate <paramref name="point" />.</span>
          </span>
        </param>
        <param name="point">
          <span data-ttu-id="8b110-219">O ponto a ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-219">The point to translate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-220">Converte um ponto pelo vetor especificado e retorna o ponto resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-220">Translates a point by the specified vector and returns the resulting point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-221">O resultado de converter <paramref name="point" /> por <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-221">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-222">O exemplo a seguir mostra como usar esse operador (+) para converter um <xref:System.Windows.Point> estrutura para um <xref:System.Windows.Vector> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-222">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 + vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-223">O primeiro vetor a ser adicionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-223">The first vector to add.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-224">O segundo vetor a ser adicionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-224">The second vector to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-225">Adiciona dois vetores e retorna o resultado como um vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-225">Adds two vectors and returns the result as a vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-226">A soma de <paramref name="vector1" /> e <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-226">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-227">O exemplo a seguir mostra como usar esse operador (+) para adicionar dois <xref:System.Windows.Vector> estruturas e retornar um <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="8b110-227">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector / scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-228">O vetor a ser dividido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-228">The vector to divide.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="8b110-229">O escalar pelo qual <paramref name="vector" /> será dividido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-229">The scalar by which <paramref name="vector" /> will be divided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-230">Divide o vetor especificado pelo escalar especificado e retorna o vetor resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-230">Divides the specified vector by the specified scalar and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-231">O resultado da divisão de <paramref name="vector" /> por <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-231">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-232">O exemplo a seguir mostra como usar esse operador (/) para dividir um <xref:System.Windows.Vector> estrutura por um escalar.</span><span class="sxs-lookup"><span data-stu-id="8b110-232">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="vector1 = vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-233">O primeiro vetor a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-233">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-234">O segundo vetor a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-234">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-235">Compara dois vetores quanto à igualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-235">Compares two vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-236">
            <see langword="true" /> se os componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> e <paramref name="vector2" /> forem iguais; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-236">
              <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-237">Um vetor <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> propriedades são descritas usando <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="8b110-237">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="8b110-238">Porque o valor de uma <xref:System.Double> podem perder a precisão quando operações aritméticas são executadas nele, uma comparação entre dois <xref:System.Windows.Vector> estruturas que são logicamente iguais poderá falhar.</span><span class="sxs-lookup"><span data-stu-id="8b110-238">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-239">O exemplo a seguir mostra como usar esse operador (= =) para verificar se dois <xref:System.Windows.Vector> estruturas forem iguais.</span><span class="sxs-lookup"><span data-stu-id="8b110-239">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-240">Converte um vetor em um <see cref="T:System.Windows.Size" /> ou em um <see cref="T:System.Windows.Point" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-240">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Point" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-241">O vetor a ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-241">The vector to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-242">Cria um <see cref="T:System.Windows.Point" /> com os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-242">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-243">Um ponto com os valores de coordenada <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> iguais aos valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de deslocamento do <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-243">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-244">O exemplo a seguir mostra como converter um <xref:System.Windows.Vector> em um <xref:System.Windows.Point>.</span><span class="sxs-lookup"><span data-stu-id="8b110-244">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Size" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-245">O vetor a ser convertido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-245">The vector to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-246">Cria um <see cref="T:System.Windows.Size" /> usando os deslocamentos desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-246">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-247">Um <see cref="T:System.Windows.Size" /> com uma <see cref="P:System.Windows.Size.Width" /> igual ao valor absoluto da propriedade <see cref="P:System.Windows.Vector.X" /> desse vetor e uma <see cref="P:System.Windows.Size.Height" /> igual ao valor absoluto da propriedade <see cref="P:System.Windows.Vector.Y" /> desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-247">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-248">O exemplo a seguir mostra como converter explicitamente um <xref:System.Windows.Vector> em um <xref:System.Windows.Size>.</span><span class="sxs-lookup"><span data-stu-id="8b110-248">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.op_Inequality (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-249">O primeiro vetor a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-249">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-250">O segundo vetor a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-250">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-251">Compara dois vetores quanto à desigualdade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-251">Compares two vectors for inequality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-252">
            <see langword="true" /> se os componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> e <paramref name="vector2" /> forem diferentes, caso contrário <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-252">
              <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b110-253">Um vetor <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> propriedades são descritas usando <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="8b110-253">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="8b110-254">Porque o valor de uma <xref:System.Double> podem perder a precisão quando operações aritméticas são executadas nele, uma comparação entre dois <xref:System.Windows.Vector> estruturas que são logicamente iguais poderá falhar.</span><span class="sxs-lookup"><span data-stu-id="8b110-254">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b110-255">O exemplo a seguir mostra como usar esse operador (! =) para verificar se dois <xref:System.Windows.Vector> estruturas não são iguais.</span><span class="sxs-lookup"><span data-stu-id="8b110-255">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-256">Multiplica o <see cref="T:System.Windows.Vector" /> especificado pelo <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" /> ou <see cref="T:System.Windows.Vector" /> especificado e retorna o resultado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-256">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="scalar * vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">
          <span data-ttu-id="8b110-257">O escalar a se multiplicar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-257">The scalar to multiply.</span>
          </span>
        </param>
        <param name="vector">
          <span data-ttu-id="8b110-258">O vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-258">The vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-259">Multiplica o escalar especificado pelo vetor especificado e retorna o vetor resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-259">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-260">O resultado da multiplicação de <paramref name="scalar" /> por <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-260">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-261">O exemplo a seguir mostra como usar esse operador (\*) para multiplicar um escalar por um <xref:System.Windows.Vector> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-261">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector * scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-262">O vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-262">The vector to multiply.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="8b110-263">O escalar a se multiplicar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-263">The scalar to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-264">Multiplica o vetor especificado pelo escalar especificado e retorna o vetor resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-264">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-265">O resultado da multiplicação de <paramref name="vector" /> por <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-265">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-266">O exemplo a seguir mostra como usar esse operador (\*) para multiplicar um <xref:System.Windows.Vector> estrutura por um escalar.</span><span class="sxs-lookup"><span data-stu-id="8b110-266">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="vector * matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-267">O vetor a ser transformado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-267">The vector to transform.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="8b110-268">A transformação a ser aplicada em <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-268">The transformation to apply to <paramref name="vector" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-269">Transforma o espaço de coordenadas do vetor especificado usando a <see cref="T:System.Windows.Media.Matrix" /> especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-269">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-270">O resultado da transformar <paramref name="vector" /> em <paramref name="matrix" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-270">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-271">O exemplo a seguir mostra como usar esse operador (\*) para multiplicar uma <xref:System.Windows.Vector> estrutura por um <xref:System.Windows.Media.Matrix> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-271">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="vector1 * vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-272">O primeiro vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-272">The first vector to multiply.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-273">O segundo vetor a ser multiplicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-273">The second vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-274">Calcula o produto escalar das duas estruturas de vetor especificadas e retorna o resultado como um <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-274">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-275">Retorna um <see cref="T:System.Double" /> que contém o produto escalar de <paramref name="vector1" /> e <paramref name="vector2" />, que é calculado utilizando a seguinte fórmula:</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-275">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span>
          </span>
          <span data-ttu-id="8b110-276">
            <c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-276">
              <c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-277">O exemplo a seguir mostra como usar esse operador (\*) para multiplicar uma <xref:System.Windows.Vector> estrutura por um <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="8b110-277">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 - vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-278">O vetor do qual <paramref name="vector2" /> é subtraído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-278">The vector from which <paramref name="vector2" /> is subtracted.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-279">O vetor a ser subtraído de <paramref name="vector1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-279">The vector to subtract from <paramref name="vector1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-280">Subtrai um vetor especificado de outro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-280">Subtracts one specified vector from another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-281">A diferença entre <paramref name="vector1" /> e <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-281">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-282">O exemplo a seguir mostra como usar esse operador (-) para subtrair um <xref:System.Windows.Vector> estrutura de um <xref:System.Windows.Vector> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-282">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Windows.Vector -&gt; System.Windows.Vector" Usage="- vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="8b110-283">O vetor a ser negado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-283">The vector to negate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-284">Nega o vetor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-284">Negates the specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-285">Um vetor com os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> opostos aos valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-285">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-286">O exemplo a seguir mostra como usar esse operador de negação para negar uma <xref:System.Windows.Vector> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-286">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="8b110-287">A representação de cadeia de caracteres do vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-287">The string representation of the vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-288">Converte uma representação de cadeia de caracteres de um vetor na estrutura <see cref="T:System.Windows.Vector" /> equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-288">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-289">A estrutura <see cref="T:System.Windows.Vector" /> equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-289">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-290">O exemplo a seguir mostra como usar esse método para converter uma representação de cadeia de caracteres de um vetor em uma <xref:System.Windows.Vector> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-290">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Subtract (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="8b110-291">O vetor do qual <paramref name="vector2" /> é subtraído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-291">The vector from which <paramref name="vector2" /> is subtracted.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="8b110-292">O vetor a ser subtraído de <paramref name="vector1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-292">The vector to subtract from <paramref name="vector1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-293">Subtrai o vetor especificado de outro vetor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-293">Subtracts the specified vector from another specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-294">A diferença entre <paramref name="vector1" /> e <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-294">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-295">O exemplo a seguir mostra como usar esse método para subtrair um <xref:System.Windows.Vector> estrutura de um <xref:System.Windows.Vector> estrutura.</span><span class="sxs-lookup"><span data-stu-id="8b110-295">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="8b110-296">A cadeia de caracteres que especifica o formato a ser usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-296">The string specifying the format to use.</span>
          </span>
          <span data-ttu-id="8b110-297">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-297">-or-</span>
          </span>
          <span data-ttu-id="8b110-298">
            <see langword="null" /> para usar o formato padrão definido para o tipo da implementação <see cref="T:System.IFormattable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-298">
              <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="8b110-299">O <see langword="IFormatProvider" /> a ser usado para formatar o valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-299">The <see langword="IFormatProvider" /> to use to format the value.</span>
          </span>
          <span data-ttu-id="8b110-300">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-300">-or-</span>
          </span>
          <span data-ttu-id="8b110-301">
            <see langword="null" /> para obter as informações de formato numérico da configuração de localidade atual do sistema operacional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-301">
              <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-302">Este membro dá suporte à infraestrutura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] e não se destina a ser usado diretamente do código.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-302">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span>
          </span>
          <span data-ttu-id="8b110-303">Para obter uma descrição desse membro, consulte <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-303">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-304">Uma cadeia de caracteres que contém o valor da instância atual no formato especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-304">A string containing the value of the current instance in the specified format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-305">Retorna a representação de cadeia de caracteres dessa estrutura <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="vector.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b110-306">Retorna a representação de cadeia de caracteres dessa estrutura <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-306">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-307">Uma cadeia de caracteres que representa os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> desse <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-307">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-308">O exemplo a seguir mostra como usar esse método para obter uma representação de cadeia de caracteres de um <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="8b110-308">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="vector.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="8b110-309">As informações de formatação específicas da cultura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-309">The culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b110-310">Retorna a representação de cadeia de caracteres desta estrutura <see cref="T:System.Windows.Vector" /> com as informações de formatação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-310">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b110-311">Uma cadeia de caracteres que representa os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> desse <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-311">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Vector.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-312">Obtém ou define o componente <see cref="P:System.Windows.Vector.X" /> desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-312">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b110-313">O <see cref="P:System.Windows.Vector.X" /> componente desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-313">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span>
          </span>
          <span data-ttu-id="8b110-314">O valor padrão é 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-314">The default value is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-315">O exemplo a seguir mostra como verificar dois <xref:System.Windows.Vector> estruturas quanto à igualdade.</span><span class="sxs-lookup"><span data-stu-id="8b110-315">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Vector.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b110-316">Obtém ou define o componente <see cref="P:System.Windows.Vector.Y" /> desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-316">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b110-317">O <see cref="P:System.Windows.Vector.Y" /> componente desse vetor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-317">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span>
          </span>
          <span data-ttu-id="8b110-318">O valor padrão é 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b110-318">The default value is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8b110-319">O exemplo a seguir mostra como verificar dois <xref:System.Windows.Vector> estruturas quanto à igualdade.</span><span class="sxs-lookup"><span data-stu-id="8b110-319">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>