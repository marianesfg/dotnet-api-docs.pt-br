<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="69854c4988a3465fe13653f0b1e971ffe855f5ee" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55347689" /></Metadata><TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Windows.UIElement" /> é uma classe base para implementações no nível do núcleo WPF baseada em elementos WPF (Windows Presentation Foundation) e características de apresentação básicas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement> Fornece um ponto de partida para características de layout do elemento e também expõe métodos virtuais que as classes derivadas podem substituir, que pode influenciar o layout, renderização de elementos de comportamento do elemento e seus filhos.  
  
 Grande parte da entrada e concentrando-se o comportamento de elementos em geral também é definida no <xref:System.Windows.UIElement> classe. Isso inclui os eventos de teclado, mouse e entrada de caneta e propriedades de status relacionadas. Muitos desses eventos são eventos roteados e muitos dos eventos relacionados à entrada tem ambas as uma bolha roteamento de versão, bem como uma versão de túnel do evento. Esses eventos emparelhados normalmente são os eventos de maior interesse para autores de controle.  
  
 <xref:System.Windows.UIElement> também inclui [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] que se relacionam com o [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modelo de evento, incluindo os métodos que podem gerar especificados eventos roteados que são originados de uma instância do elemento.  
  
 Em termos de arquitetura, <xref:System.Windows.UIElement> pode ser considerado aproximadamente equivalente a um identificador de janela no [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programação ou um elemento em [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] de programação. <xref:System.Windows.UIElement> é um elemento base no nível de núcleo do WPF.  
  
 Um <xref:System.Windows.UIElement> tem os seguintes recursos que são especificamente definidos pela <xref:System.Windows.UIElement> classe:  
  
-   Podem ser processados como um elemento filho (<xref:System.Windows.UIElement> deriva <xref:System.Windows.Media.Visual>, uma classe de elementos gráficos de nível alto)  
  
-   Contém a lógica que é usada para dimensionar e posicionar elementos filho possíveis de um <xref:System.Windows.UIElement> (quando interpretada por um sistema de layout)  
  
-   Pode responder à entrada do usuário (incluindo o controle do qual entrada é obtendo enviada por meio da manipulação do evento de roteamento ou roteamento de comandos)  
  
-   Pode gerar eventos roteados que percorrem uma rota através da árvore de elementos lógicos  
  
-   Dá suporte a alguns aspectos do sistema de animação  
  
 <xref:System.Windows.FrameworkElement> é a classe de implementação de nível de estrutura do WPF se baseia no <xref:System.Windows.UIElement>e adiciona as interações específicas com o nível de framework WPF. <xref:System.Windows.FrameworkElement> Adiciona e define os seguintes recursos:  
  
-   Características de layout de adicionais específicas da estrutura  
  
-   Suporte para gerar relatórios sobre as propriedades de metadados mais avançados  
  
-   Implementação de classe específica de determinadas classes base e suas propriedades anexadas de entrada ou eventos anexados  
  
-   Suporte de estilo  
  
-   Suporte adicional de animação  
  
 Outro relacionado a classe é <xref:System.Windows.ContentElement>. O <xref:System.Windows.ContentElement> classe implementa muitos dos mesmos participantes que <xref:System.Windows.UIElement>; a diferença entre essas duas classes tem seu pretendido é colocar no modelo de conteúdo geral. Um <xref:System.Windows.UIElement> classe derivada normalmente define um modelo de conteúdo relativamente rígido, que significa que há restrições sobre quais elementos podem ser elementos filho na marcação. Pode haver capacidade para faz menos restritiva do conteúdo de filho de um <xref:System.Windows.UIElement>, mas essa capacidade normalmente é centralizada em Propriedades de conteúdo designadas. Um <xref:System.Windows.ContentElement> classe derivada normalmente não é o mais restritivo sobre o conteúdo para dar suporte a cenários, como documentos de formato de fluxo.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A> estado afeta todas as entradas de tratamento por esse elemento. Não participam de teste de clique de elementos que não são visíveis e não recebem eventos de entrada, mesmo se o mouse estiver sobre os limites nos quais o elemento pode ser se eram visíveis.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Criar uma nova instância que é realmente do tipo <xref:System.Windows.UIElement> é incomum no código do aplicativo, porque <xref:System.Windows.UIElement> é um elemento base. Ver [visão geral de elementos de Base](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adiciona um manipulador de eventos roteados de um evento roteado especificado, adicionando o manipulador à coleção de manipuladores no elemento atual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Um identificador do evento roteado a ser manipulado.</param>
        <param name="handler">Uma referência à implementação do manipulador.</param>
        <summary>Adiciona um manipulador de eventos roteados de um evento roteado especificado, adicionando o manipulador à coleção de manipuladores no elemento atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode adicionar o mesmo manipulador para o mesmo evento várias vezes sem gerar uma exceção. No entanto, o manipulador é realmente chamado várias vezes quando o evento é manipulado. Portanto, considere como esse comportamento pode ter efeitos colaterais que deve ser considerados em sua implementação do manipulador.  
  
 Você normalmente usa esse método para fornecer a implementação do acessador "Adicionar" para o [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] padrão de acesso do evento de um evento roteado personalizado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Um identificador do evento roteado a ser manipulado.</param>
        <param name="handler">Uma referência à implementação do manipulador.</param>
        <param name="handledEventsToo"><see langword="true" /> para registrar o manipulador de modo que ele seja invocado mesmo quando o evento roteado estiver marcado como tratado nos dados do evento; <see langword="false" /> para registrar o manipulador com a condição padrão que não será chamado se o evento roteado já estiver marcado como tratado.  
  
O padrão é <see langword="false" />.  
  
Não solicite sempre para tratar novamente um evento roteado.</param>
        <summary>Adiciona um manipulador de eventos roteados de um evento roteado especificado, adicionando o manipulador à coleção de manipuladores no elemento atual. Especifique <paramref name="handledEventsToo" /> como <see langword="true" /> para que o manipulador fornecido seja invocado para eventos roteados que já tenham sido marcados como manipulados por outro elemento na rota de evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Processamento de eventos de entrada de baixo nível em uma forma prática é uma tarefa complexa. Muitos controles que implementam o comportamento em que um determinado evento é marcado como manipulado e é substituído por outro evento mais intuitivo. Em geral, um controle só será marcar um evento de entrada de plataforma como manipulado, se houver algum intenção de design para fazer isso. Em determinados cenários, as intenções de design não podem ser o que requer sua manipulação específica do evento de entrada. É para esses cenários que registrar manipuladores com `handledEventsToo` como `true` é apropriado. Mas você não deve fazer isso regularmente. Invocar manipuladores em resposta a todos os eventos, mesmo se manipulado complicar a sua própria lógica de processamento de eventos do aplicativo. Você poderá ver uma diminuição no desempenho se a lógica de manipulador é significativa. Você deve reservar o uso de anexar manipuladores de eventos já manipulado para situações em que você já tenha descoberto durante o processo de desenvolvimento que certos controles estão lidando com eventos que deseja processar com a lógica do aplicativo.  
  
 Outra técnica para evitar o comportamento de determinadas combinações de controle de eventos de manipulação de classe é usar a alternativa de visualização do evento. Por exemplo, se <xref:System.Windows.UIElement.MouseLeftButtonDown> está marcado como manipulado pela manipulação de classe, você poderá adicionar manipuladores para <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> em vez disso.  
  
 Você pode adicionar o mesmo manipulador para o mesmo evento várias vezes sem gerar uma exceção. No entanto, o manipulador é realmente chamado várias vezes quando o evento é manipulado. Portanto, considere como esse comportamento pode ter efeitos colaterais que deve ser considerados em sua implementação do manipulador.  
  
 Você normalmente usa esse método para fornecer a implementação do acessador "Adicionar" para o [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] padrão de acesso do evento de um evento roteado personalizado.  
  
   
  
## Examples  
 O exemplo a seguir implementa um manipulador invocado na <xref:System.Windows.FrameworkElement.Initialized> evento em uma página que anexa um manipulador definido para um dos elementos nomeados na página usando `handledEventsToo` `true`. Esse manipulador seria invocado mesmo se os dados do evento compartilhado como tratado antes de alcançar o elemento de manipulação na rota de marcado de outro elemento ao longo da rota.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">A rota de eventos à qual os manipuladores são adicionados.</param>
        <param name="e">Os dados de evento usados para adicionar os manipuladores. Esse método usa a propriedade <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> dos dados do evento para criar os manipuladores.</param>
        <summary>Adiciona manipuladores ao <see cref="T:System.Windows.EventRoute" /> especificado para a coleção do manipulador de eventos <see cref="T:System.Windows.UIElement" /> atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser usado pelos elementos de host de conteúdo (aqueles que implementam <xref:System.Windows.IContentHost> ou aquelas que não) para adicionar manipuladores para os elementos filho para o <xref:System.Windows.EventRoute>. Normalmente, isso não é necessário para <xref:System.Windows.UIElement>, pois os manipuladores são adicionados automaticamente para todos os elementos encontrados em uma árvore lógica concluída. No entanto, em alguns casos em que <xref:System.Windows.ContentElement> e <xref:System.Windows.UIElement> são misturados na modelado árvores, elementos que vem a necessidade de modelo a ser adicionado a uma rota de intervenção. Ambos <xref:System.Windows.ContentElement> e <xref:System.Windows.UIElement> dar suporte a uma versão desse método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor indicando se um elemento pode ser usado como o destino de uma operação de arrastar e soltar.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se um elemento pode ser usado como o destino de uma operação do tipo "arrastar e soltar"; caso contrário, <see langword="false" />. O valor padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operações de arrastar e soltar não são habilitadas por padrão e deve ser habilitadas, deliberadamente, definindo <xref:System.Windows.UIElement.AllowDrop%2A> para `true`. Além dessa configuração básica, o comportamento de arrastar e soltar é inteiramente específico da implementação e não é definido pelo <xref:System.Windows.UIElement> ou qualquer outra classe de elemento base. Alguns controles, por exemplo, <xref:System.Windows.Controls.RichTextBox>, têm um comportamento padrão. Para obter mais informações sobre o arrastar e soltar, consulte [arrastar e soltar de visão geral da](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement> substitui os metadados para essa propriedade de dependência em sua implementação. Especificamente, <xref:System.Windows.FrameworkElement> designa a essa propriedade para permitir a herança de valor de propriedade (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> é `true` nos metadados). Herança do valor da propriedade neste contexto significa que, se não houver elementos filho com nenhum outro valor para <xref:System.Windows.UIElement.AllowDrop%2A> atribuído por meio de estilos, o valor do elemento pai mais próximo com esse valor atribuído (novamente, seja em estilos, por padrão ou valores locais valores, ou um valor local), em seguida, o valor do elemento pai será atribuído a todos os elementos filho não anteriormente atribuído pelo sistema de propriedades. Na prática, isso significa que você pode especificar se deseja permitir operações de descarte no elemento raiz e que o valor será propagado para todos os elementos filho que têm não especificamente atribuído como `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.AllowDropProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo de marcação a seguir define o <xref:System.Windows.UIElement.AllowDrop%2A> propriedade `true` usando um atributo em uma <xref:System.Windows.Controls.TextBox>, bem como definir algum outro relacionadas a propriedades que permitem que na agregação <xref:System.Windows.Controls.TextBox> para ser o destino de um objeto de dados de texto de várias linhas quando ela é arrastada. Para o exemplo completo, consulte [carregue uma amostra de arquivo descartado](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.AllowDrop" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aplica uma animação a uma propriedade de dependência especificada neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está selado e não pode ser substituído.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">O identificador para a propriedade a ser animada.</param>
        <param name="clock">O relógio de animação que controla e declara a animação.</param>
        <summary>Aplica uma animação a uma propriedade de dependência especificada neste elemento. Todas as animações existentes são interrompidas e substituídas pela nova animação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para remover uma animação de uma propriedade, especifique o identificador para essa propriedade como `dp` e especifique `clock` como `null`. Isso remove a animação e a propriedade animada é definida como seu valor de base. No entanto, o relógio de animação originalmente associado não será interrompido. Todas as outras animações atribuídas a esse relógio continuará a ser executado.  
  
   
  
## Examples  
 No exemplo a seguir, uma <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` tiver uma animação de medição de tempo específico aplicada a ele, chamando <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">A propriedade a ser animada.</param>
        <param name="clock">O relógio de animação que controla e declara a animação.</param>
        <param name="handoffBehavior">Um valor da enumeração. O padrão é <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, que interromperá a animação existente, substituindo-a pela nova.</param>
        <summary>Aplica uma animação a uma propriedade de dependência especificada nesse elemento, com a capacidade de especificar o que ocorrerá se a propriedade já tiver uma animação em execução.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para remover uma animação de uma propriedade, especifique o identificador para essa propriedade como `dp` e especifique `clock` como `null`. Isso remove a animação e a propriedade animada é definida como seu valor de base. No entanto, o relógio de animação originalmente associado não será interrompido. Todas as outras animações atribuídas a esse relógio continuará a ser executado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se pelo menos um toque é capturado para esse elemento.</summary>
        <value><see langword="true" /> se pelo menos um toque for capturado para esse elemento; caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se ao menos um toque é capturado nesse elemento ou elementos filho na sua árvore visual.</summary>
        <value><see langword="true" /> Se pelo menos um toque é capturado para esse elemento ou elementos filho na árvore visual; Caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se pelo menos um toque é feito sobre esse elemento.</summary>
        <value><see langword="true" /> se pelo menos um toque for pressionado sobre esse elemento; caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se pelo menos um toque for pressionado sobre esse elemento ou elementos filho na sua árvore visual.</summary>
        <value><see langword="true" /> se pelo menos um toque for pressionado sobre esse elemento ou elementos filho na sua árvore visual; caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">O tamanho final que o elemento pai computa para o filho, fornecido como uma instância <see cref="T:System.Windows.Rect" />.</param>
        <summary>Posiciona elementos filho e determina um tamanho para um <see cref="T:System.Windows.UIElement" />. Elementos pai chamam esse método de sua própria implementação <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (ou um equivalente no nível de estrutura WPF) para formar uma atualização de layout recursiva. Esse método constitui a segunda passagem de uma atualização de layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para o elemento de nível de estrutura WPF derivando de cenários, o comportamento para <xref:System.Windows.UIElement.Arrange%2A> não deve (e não for possível, a menos que você de sombra) ser alterado. Em vez disso, você deve substituir o <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementação em sua classe. Sua <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementação é chamada internamente por <xref:System.Windows.UIElement.Arrange%2A> como parte das operações de layout de nível de framework WPF padrão. Sua <xref:System.Windows.UIElement.ArrangeCore%2A> implementação também deve chamar <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> em cada elemento filho, se ele tiver elementos filho.  
  
 Para o elemento de nível de núcleo do WPF derivando de cenários, o comportamento para <xref:System.Windows.UIElement.Arrange%2A> não deve (e não for possível, a menos que você de sombra) ser alterado. Em vez disso, você deve substituir <xref:System.Windows.UIElement.ArrangeCore%2A> em sua classe. Sua <xref:System.Windows.UIElement.ArrangeCore%2A> implementação é chamada internamente por <xref:System.Windows.UIElement.Arrange%2A> como parte das operações de layout de nível de framework WPF padrão. No entanto, isso pressupõe que você estiver usando o layout de nível de framework WPF e seu sistema de layout, que geralmente não é o caso se você estiver derivando especificamente os elementos em nível de núcleo do WPF a <xref:System.Windows.UIElement> classe de elemento base. Sua <xref:System.Windows.UIElement.ArrangeCore%2A> implementação também deve chamar <xref:System.Windows.UIElement.Arrange%2A> em cada elemento filho, se ele tiver elementos filho. Observe que o cenário de nível de núcleo do WPF implica que você não estiver usando um <xref:System.Windows.FrameworkElement> derivado de classe, pois <xref:System.Windows.FrameworkElement> selos <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 O cálculo de posicionamento de layout de nível de framework WPF no [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consiste em um <xref:System.Windows.UIElement.Measure%2A> chamar e um <xref:System.Windows.UIElement.Arrange%2A> chamar. Durante o <xref:System.Windows.UIElement.Measure%2A> chamada, o sistema de layout determina os requisitos de tamanho de um elemento usando um fornecido <xref:System.Windows.Size> (`availableSize`) argumento. Durante o <xref:System.Windows.UIElement.Arrange%2A> chamada, o sistema de layout finaliza o tamanho e posição de um elemento da caixa delimitadora.  Veja [Layout](~/docs/framework/wpf/advanced/layout.md) para obter mais informações.  
  
 `availableSize` pode ser qualquer número entre zero e infinito. O mínimo de retorno de elementos a ser dispostos <xref:System.Windows.Size> eles exigem por meio do `availableSize` parâmetro.  
  
 Quando um layout é instanciado pela primeira vez, ele sempre recebe um <xref:System.Windows.UIElement.Measure%2A> chame antes <xref:System.Windows.UIElement.Arrange%2A>. No entanto, após a primeira passagem de layout, ele poderá receber um <xref:System.Windows.UIElement.Arrange%2A> chamar sem uma <xref:System.Windows.UIElement.Measure%2A>; isso pode acontecer quando uma propriedade que afete apenas <xref:System.Windows.UIElement.Arrange%2A> é alterado (por exemplo, o alinhamento), ou quando o pai recebe um <xref:System.Windows.UIElement.Arrange%2A> sem um <xref:System.Windows.UIElement.Measure%2A>. Um <xref:System.Windows.UIElement.Measure%2A> chamada invalidará automaticamente um <xref:System.Windows.UIElement.Arrange%2A> chamar.  
  
 As atualizações de layout geralmente ocorrem assincronamente (em um horário determinado pelo sistema de layout). Um elemento pode não refletir imediatamente as alterações nas propriedades que afetam o dimensionamento de elemento (como <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  As atualizações de layout podem ser forçadas usando o <xref:System.Windows.UIElement.UpdateLayout%2A> método; no entanto, chamar essa função não é recomendado, pois normalmente é desnecessário e pode causar baixo desempenho. Em muitas situações em que chamar <xref:System.Windows.UIElement.UpdateLayout%2A> pode ser apropriado, o sistema de layout provavelmente já processará as atualizações. O sistema de layout pode processar as alterações de layout de uma maneira que pode otimizar todas as atualizações necessárias como parte de um pacote.  
  
 O sistema de layout mantém duas filas separadas dos layouts inválidos, um para <xref:System.Windows.UIElement.Measure%2A> e outro para <xref:System.Windows.UIElement.Arrange%2A>. A fila de layout é classificada com base na ordem dos elementos na árvore visual. São mais alto na árvore de elementos na parte superior da fila, para evitar layouts redundantes causados por alterações repetidas em pais. Entradas duplicadas são automaticamente removidas da fila e os elementos são automaticamente removidos da fila se eles já são válidos.  
  
 Ao atualizar o layout, o <xref:System.Windows.UIElement.Measure%2A> fila é esvaziada primeiro, seguido de <xref:System.Windows.UIElement.Arrange%2A> fila. Um elemento na <xref:System.Windows.UIElement.Arrange%2A> fila nunca será organizada se não houver um elemento no <xref:System.Windows.UIElement.Measure%2A> fila.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">A área final no pai que esse elemento deve usar para organizar a si próprio e seus filhos.</param>
        <summary>Define o modelo para a definição de layout de disposição de nível de núcleo do WPF.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Substituir esse método só é apropriado se você estiver derivando no nível de núcleo do WPF, e você não estiver usando o sistema de layout de nível de estrutura do WPF e <xref:System.Windows.FrameworkElement> derivado de classe, pois <xref:System.Windows.FrameworkElement> selos <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Se você estiver usando o sistema de layout de nível de framework WPF, o método apropriado para substituir layout específicas de classe de organizar o comportamento é <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A> implementações devem chamar a implementação base para retornar um tamanho, em seguida, chame o <xref:System.Windows.UIElement.Arrange%2A> método de cada elemento filho visíveis e reconciliar os tamanhos retornados por essas <xref:System.Windows.UIElement.Arrange%2A> chamadas com o tamanho da implementação base. A lógica para o aspecto de reconciliação de um <xref:System.Windows.UIElement.ArrangeCore%2A> implementação pode variar, dependendo das características do elemento de layout. No modelo de exemplo a seguir, `VisualChildren` é uma propriedade hipotética que seu elemento pode definir para ajudar a enumerar seu conteúdo; <xref:System.Windows.UIElement> não define nas coleções de conteúdo nesse nível, a arquitetura de nível de framework WPF adia o comportamento do conteúdo para elementos derivados, como controles específicos ou classes base de controle.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Se você estiver desenvolvendo elementos no nível de núcleo do WPF, você deve substituir esse método para dar seu elemento de nível de núcleo do WPF em um único organizar o comportamento de layout ou tornar o layout adequado decisões sobre os elementos filho de seus elementos. Uma substituição pode ser necessária se os elementos filho não são reconhecidos de um padrão definido como um <see cref="T:System.Windows.Controls.ItemCollection" />.  
  
Um elemento pai deve chamar a classe específica <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> em cada elemento filho, caso contrário, esses elementos filho não são renderizados.</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia uma animação de uma propriedade animada especificada neste elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">A propriedade a ser animada, que é especificada como um identificador da propriedade de dependência.</param>
        <param name="animation">A linha do tempo da animação a ser iniciada.</param>
        <summary>Inicia uma animação de uma propriedade animada especificada neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você verifica se uma propriedade é animada, observe que a animação começará e ser considerada animado quando o primeiro quadro além do ponto de partida sem animação é renderizado.  
  
 Se o <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> para `animation` é `null`, todas as animações atuais serão removidas e o valor atual da propriedade é mantido.  
  
 Se todo o `animation` valor é `null`, todas as animações serão removidas da propriedade e o valor da propriedade será revertido para seu valor de base. No entanto, a linha do tempo de animação originalmente associado não será interrompida. Todas as outras animações atribuídas a essa linha do tempo, continuará a ser executado.  
  
   
  
## Examples  
 O exemplo a seguir cria uma animação, atribui a ele e, em seguida, chama <xref:System.Windows.UIElement.BeginAnimation%2A> para iniciá-lo.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">A propriedade a ser animada, que é especificada como o identificador da propriedade de dependência.</param>
        <param name="animation">A linha do tempo da animação a ser aplicada.</param>
        <param name="handoffBehavior">Um valor de enumeração que especifica como a nova animação interage com todas as animações atuais (em execução) que já estão afetando o valor da propriedade.</param>
        <summary>Inicia uma animação específica para uma propriedade animada especificada neste elemento, com a opção de especificar o que acontece se a propriedade já tiver uma animação em execução.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você verifica se uma propriedade é animada, observe que a animação começará e ser considerada animado quando o primeiro quadro além do ponto de partida sem animação é renderizado.  
  
 Se o <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> para `animation` é `null`, todas as animações atuais serão removidas e o valor atual da propriedade é mantido.  
  
 Se todo o `animation` valor é `null`, todas as animações serão removidas da propriedade e o valor da propriedade será revertido para seu valor de base. No entanto, a linha do tempo de animação originalmente associado não será interrompida. Todas as outras animações atribuídas a essa linha do tempo, continuará a ser executado.  
  
   
  
## Examples  
 O exemplo a seguir implementa um manipulador que obtém uma animação existente de um recurso e, em seguida, chama <xref:System.Windows.UIElement.BeginAnimation%2A> com um comportamento de entrega especificada.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um efeito de bitmap aplicado diretamente ao conteúdo renderizado para este elemento.  É uma propriedade de dependência.</summary>
        <value>O efeito de bitmap a ser aplicado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect> Portanto, é um tipo abstrato, o [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] uso requer uma classe derivada implementada de <xref:System.Windows.Media.Effects.BitmapEffect>, como <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Observe que um implementado classe derivada é um tipo de coleção que permite que você especificar mais de um sequencial <xref:System.Windows.Media.Effects.BitmapEffect>, usando uma sintaxe de marca aninhada.  
  
 Nenhuma classe derivada de <xref:System.Windows.Media.Effects.BitmapEffect> dá suporte a um conversor de tipo, portanto, o [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxe que você pode usar para essa propriedade é geralmente a sintaxe de elemento de propriedade.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir define um bitmap em vigor, usando <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma fonte de entrada para o efeito de bitmap aplicado diretamente ao conteúdo renderizado para este elemento.  É uma propriedade de dependência.</summary>
        <value>A fonte dos efeitos de bitmap.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.BitmapEffectInput" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.BitmapEffect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma representação armazenada em cache do <see cref="T:System.Windows.UIElement" />.</summary>
        <value>Um <see cref="T:System.Windows.Media.CacheMode" /> que contém uma representação armazenada em cache do <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Defina o <xref:System.Windows.UIElement.CacheMode%2A> propriedade quando você precisar aumentar o desempenho para o conteúdo que é demorado para processar. Para obter mais informações, consulte <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.CacheMode" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta forçar a captura do mouse para esse elemento.</summary>
        <returns><see langword="true" /> se o mouse for capturado com êxito; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para ser capturados, um elemento deve ser habilitado. Verifique se <xref:System.Windows.UIElement.IsEnabled%2A> está `true` antes de chamar <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 Se chamar <xref:System.Windows.UIElement.CaptureMouse%2A> retorna `true`, em seguida, <xref:System.Windows.UIElement.IsMouseCaptured%2A> também é `true`.  
  
 Se chamar <xref:System.Windows.UIElement.CaptureMouse%2A> retorna `true`, em seguida, a <xref:System.Windows.UIElement.GotMouseCapture> e <xref:System.Windows.UIElement.IsMouseCapturedChanged> eventos são gerados, com <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> no evento dados relatados como o elemento no qual o <xref:System.Windows.UIElement.CaptureMouse%2A> método é chamado. Se você forçar a captura, você pode interferir com capturas de existentes – especialmente com capturas que se relacionam com arrastar e soltar com o mouse.  
  
 Para limpar a captura do mouse de todos os elementos, chame <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> com o `element` parâmetro fornecido como `null`.  
  
   
  
## Examples  
 O exemplo a seguir implementa um par de manipuladores de mouse e teclas de entrada que capture (e uncapture) o mouse e ativar um modo especial de mouse para exibir um modelo 3D.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta forçar a captura da caneta para esse elemento.</summary>
        <returns><see langword="true" /> se a caneta for capturada com êxito; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação do padrão com base no dispositivo de caneta padrão subjacente sempre retorna `true`. No entanto, se você estiver estendendo os dispositivos de entrada que fornecem a implementação de dispositivo para o sistema de entrada, é possível criar um sistema com uma implementação de dispositivo de caneta alternativos que pode retornar resultados diferentes.  
  
 Quando um elemento captura a caneta, ele recebe entrada de caneta, mesmo se a caneta está fora dos limites. Normalmente, a caneta é capturada somente durante as operações de arrastar e soltar.  
  
 Chamar este método chama uma subjacente estática <xref:System.Windows.Input.Stylus> método <xref:System.Windows.Input.Stylus.Capture%2A>. O comportamento de captura real é implementado pela implementação de dispositivo de caneta ativa.  
  
 Para ser capturados, um elemento deve ser habilitado. Verifique se <xref:System.Windows.UIElement.IsEnabled%2A> está `true` retornar antes de chamar <xref:System.Windows.UIElement.CaptureStylus%2A>.  
  
 Se chamar <xref:System.Windows.UIElement.CaptureStylus%2A> retorna `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> também é `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">O dispositivo a ser capturado.</param>
        <summary>Tenta forçar a captura de um toque para esse elemento.</summary>
        <returns><see langword="true" /> se o toque especificado for capturado para esse elemento; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A> retornará `false` se o <xref:System.Windows.Input.TouchDevice> atualmente é capturado para outro elemento.  
  
 Se <xref:System.Windows.UIElement.CaptureTouch%2A> retorna `true`, em seguida, a <xref:System.Windows.UIElement.GotTouchCapture> é gerado.  
  
 Para liberar a captura de um único toque desse elemento, use o <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> método e especifique o dispositivo de toque para liberar. Para liberar todos os toques desse elemento, use o <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" /> é <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a geometria usada para definir o contorno do conteúdo de um elemento.  É uma propriedade de dependência.</summary>
        <value>A geometria a ser usada para o dimensionamento de área de recorte. O padrão é um <see cref="T:System.Windows.Media.Geometry" /> nulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementos fora da geometria serão recortados visualmente no layout renderizado. A geometria não precisa ser retangular.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ClipProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 Este exemplo mostra como definir um elemento de estrutura <xref:System.Windows.UIElement.Clip%2A> região. Para definir um clipe, use uma <xref:System.Windows.Media.Geometry> (por exemplo, um <xref:System.Windows.Media.EllipseGeometry> para definir o elemento <xref:System.Windows.UIElement.Clip%2A> propriedade. Somente a área que está dentro da região da geometria estará visível.  
  
 A exemplo a seguir mostra um <xref:System.Windows.Controls.Image> elemento sem uma região de recorte definida. Como nenhuma região de recorte é definido, toda a imagem é exibida.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Um objeto antes da aplicação de uma região de recorte](~/add/media/mil-task-clip-region-noclip.png "um objeto antes da aplicação de uma região de recorte")  
Imagem com nenhuma região de recorte  
  
 No exemplo a seguir, uma imagem idêntica é criada, exceto que ele tem uma região de recorte definida. Somente a parte da imagem que estiver dentro da área de <xref:System.Windows.Media.EllipseGeometry> será exibido.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Um objeto recortado](~/add/media/mil-task-clip-region-ellispe.PNG "um objeto recortado")  
Imagem com uma região de recorte elíptico  
  
 O exemplo a seguir mostra como animar um elemento de estrutura <xref:System.Windows.UIElement.Clip%2A> região. Neste exemplo, uma <xref:System.Windows.Media.EllipseGeometry> é usado para definir uma região de corte elíptico para um <xref:System.Windows.Controls.Image> elemento. Um <xref:System.Windows.Media.Animation.PointAnimation> anima da geometria da elipse <xref:System.Windows.Media.EllipseGeometry.Center%2A> propriedade de (0, 0) para (200, 150). A animação começa a ser executada depois que a imagem é carregada e repete indefinidamente.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Para o exemplo completo, consulte o [exemplo de região de recorte](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.Clip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor indicando se o conteúdo deste elemento (ou conteúdo proveniente dos filhos deste elemento) deve ser recortado para caber dentro do espaço do elemento que o contém.   É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se for necessário recortar o conteúdo; caso contrário, <see langword="false" />. O valor padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para elementos filho, <xref:System.Windows.UIElement.ClipToBounds%2A> tem efeitos diferentes nos comportamentos de layout, dependendo se a altura e largura do elemento pai estão sendo determinados pelo <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> ou <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> do elemento pai sempre são respeitados independentemente do valor <xref:System.Windows.UIElement.ClipToBounds%2A> e o recorte em vigor sempre recortará o conteúdo com base nesses máximos. O pai <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> configurações não recortará o conteúdo quando <xref:System.Windows.UIElement.ClipToBounds%2A> está `false`, mas recortará o conteúdo se <xref:System.Windows.UIElement.ClipToBounds%2A> é `true`.  
  
 Observe que como padrão `false` é o comportamento geral, conforme implementado de <xref:System.Windows.UIElement> classe. É possível para qualquer determinado elemento deriva <xref:System.Windows.UIElement> para substituir os metadados de propriedade de dependência para essa propriedade em que a instância seja padrão para `true` em vez disso. Várias classes derivadas existentes substituem esses metadados e/ou ajustar o valor da propriedade de dependência padrão.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, e <xref:System.Windows.Controls.Primitives.Popup> cada substituir o valor padrão a ser `true`.  
  
 <xref:System.Windows.FrameworkElement> substitui os metadados para essa propriedade de dependência. Especificamente, <xref:System.Windows.FrameworkElement> designa a essa propriedade para permitir a herança de valor de propriedade (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> é `true` nos metadados). Herança do valor da propriedade neste contexto significa que, se não houver elementos filho com nenhum outro valor para <xref:System.Windows.UIElement.ClipToBounds%2A> atribuído por meio de estilos, o valor do elemento pai mais próximo com esse valor atribuído (novamente, seja em estilos, por padrão ou valores locais valores, ou um valor localmente), em seguida, o valor do elemento pai será atribuído a todos os elementos filho não atribuído pelo sistema de propriedades. Na prática, isso significa que você pode especificar se deseja permitir que o clipe limites no elemento raiz e que o valor será propagado para todos os elementos filho que têm não especificamente atribuído como `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.ClipToBounds" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de objetos <see cref="T:System.Windows.Input.CommandBinding" /> associados a esse elemento. Um <see cref="T:System.Windows.Input.CommandBinding" /> permite a manipulação de comando desse elemento e declara a ligação entre um comando, seus eventos e os manipuladores anexados por esse elemento.</summary>
        <value>A coleção de todos os objetos <see cref="T:System.Windows.Input.CommandBinding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Outra maneira comum para preencher a <xref:System.Windows.UIElement.CommandBindings%2A> coleção é usar <xref:System.Windows.Input.CommandManager> métodos por meio de programação.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreCommandBindings*  
 Um ou mais <xref:System.Windows.Input.CommandBinding> elementos. Cada um deles deve ter uma <xref:System.Windows.Input.CommandBinding.Command%2A> atributo definido como um comando conhecido, e os atributos definidos para o <xref:System.Windows.Input.CommandBinding.CanExecute> e <xref:System.Windows.Input.CommandBinding.Executed> implementações de manipulador. Para obter mais informações, consulte <xref:System.Windows.Input.CommandBinding>.  
  
   
  
## Examples  
 O exemplo a seguir adiciona um <xref:System.Windows.Input.CommandBinding> para uma janela usando a marcação. Observe que no [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], o <xref:System.Windows.Input.CommandBindingCollection> não é declarado na marcação como um elemento; o objeto de coleção é inferido pelo tipo que usa a propriedade, e você preencher o elemento de propriedade com um ou mais <xref:System.Windows.Input.CommandBinding> elementos:  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Para obter mais informações sobre o [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxe para coleções, consulte [sintaxe de XAML em detalhes](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 O exemplo a seguir faz essencialmente a mesma coisa no código:  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tamanho que esse elemento calculou durante o passo de medição do processo de layout.</summary>
        <value>O tamanho calculado, que se torna o tamanho desejado para o passo de organização.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor retornado por essa propriedade será somente uma medida válida se o valor da <xref:System.Windows.UIElement.IsMeasureValid%2A> é de propriedade `true`.  
  
 <xref:System.Windows.UIElement.DesiredSize%2A> é tipicamente verificado como um dos fatores medida quando você implementa o comportamento de layout, como substituições <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, ou <xref:System.Windows.UIElement.OnRender%2A> (no <xref:System.Windows.UIElement.OnRender%2A> caso, você pode verificar <xref:System.Windows.UIElement.RenderSize%2A> em vez disso, mas isso depende do seu implementação). Dependendo do cenário, <xref:System.Windows.UIElement.DesiredSize%2A> pode ser totalmente respeitadas pela sua lógica de implementação, restrições em <xref:System.Windows.UIElement.DesiredSize%2A> pode ser aplicado, e essas restrições também podem alterar outras características do elemento pai ou elemento filho. Por exemplo, um controle que dá suporte a regiões roláveis (mas optar por não derivar os controles de nível de estrutura do WPF que já permitem regiões roláveis) poderia comparar o tamanho disponível para <xref:System.Windows.UIElement.DesiredSize%2A>. O controle, em seguida, poderia definir um estado interno que habilitado barras de rolagem no [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] para esse controle. Ou, <xref:System.Windows.UIElement.DesiredSize%2A> poderia potencialmente também ser ignorado em determinados cenários.  
  
   
  
## Examples  
 A exemplo a seguir mostra <xref:System.Windows.UIElement.DesiredSize%2A> como parte de um <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementação. Observe como <xref:System.Windows.UIElement.Measure%2A> é chamado imediatamente antes de obter <xref:System.Windows.UIElement.DesiredSize%2A>. Isso garante que <xref:System.Windows.UIElement.DesiredSize%2A> contém um valor legítimo.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento arrastar subjacente com este elemento como o destino de arrastar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.DragEnter> evento associado subjacente <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Substituir <xref:System.Windows.UIElement.OnDragEnter%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.DragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento arrastar subjacente com este elemento como a origem de arrastar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.DragLeave> evento associado subjacente <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Substituir <xref:System.Windows.UIElement.OnDragLeave%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.DragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento do tipo "arrastar" subjacente com esse elemento como a reprodução automática potencial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento ocorre mesmo se a operação de arrastar se origina dos limites do elemento. Se a operação de arrastar inicia fora dos limites e, em seguida, move dentro, esse evento também é gerado, bem como <xref:System.Windows.UIElement.DragEnter> e relacionados a eventos de visualização.  
  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.DragOver> evento associado subjacente <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.DragOverEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Substituir <xref:System.Windows.UIElement.OnDragOver%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.DragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento soltar subjacente com esse elemento sendo uma reprodução automática.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.Drop> evento associado subjacente <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.DropEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Substituir <xref:System.Windows.UIElement.OnDrop%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.Drop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o efeito de bitmap a ser aplicado ao <see cref="T:System.Windows.UIElement" />. É uma propriedade de dependência.</summary>
        <value>Um <see cref="T:System.Windows.Media.Effects.Effect" /> que representa o efeito de bitmap.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.UIElement.Effect%2A> propriedade para aplicar um efeito de bitmap para uma <xref:System.Windows.UIElement>.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.EffectProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O XAML a seguir mostra como atribuir um personalizado <xref:System.Windows.Media.Effects.ShaderEffect> para o <xref:System.Windows.UIElement.Effect%2A> propriedade.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.Effect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta definir o foco para esse elemento.</summary>
        <returns><see langword="true" /> se o foco do teclado e o foco lógico foram definidos para esse elemento; <see langword="false" /> somente se o foco lógico foi definido para esse elemento ou se a chamada para esse método não forçou a mudança de foco.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para ser focalizável, <xref:System.Windows.UIElement.Focusable%2A> e <xref:System.Windows.UIElement.IsEnabled%2A> devem ser `true`.  
  
 Mesmo se o elemento for focalizável e é válido, o `Focus` eventos de visualização podem ser processados em uma árvore específica e foco nesse elemento talvez não seja permitido (por exemplo, em um controle composto).
Nesse caso, esse método retornará `false`.
 
 Em geral, o foco é controlado por dois conceitos diferentes: foco do teclado e foco lógico. Esses dois conceitos não são sempre os mesmos. Para obter mais informações, consulte [resumo de foco](~/docs/framework/wpf/advanced/focus-overview.md) e [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).
 
 Se chamar <xref:System.Windows.UIElement.Focus%2A> retorna `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> também são `true`.  
  
 Se as propriedades relacionadas não ainda estiverem `true`, quando você chama <xref:System.Windows.UIElement.Focus%2A>, um ou mais dos seguintes eventos são gerados na seguinte ordem: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (origem é o novo destino de foco), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (origem é o novo destino de foco).  
  
 Para essa chamada seja bem-sucedida, algum outro elemento no aplicativo precisava ter foco anteriormente.  
  
   
  
## Examples  
 O exemplo a seguir define o foco para um <xref:System.Windows.Controls.TextBox> referenciado pelo <xref:System.Windows.FrameworkElement.Name%2A>e, em seguida, ajusta a posição do cursor dentro do <xref:System.Windows.Controls.TextBox>.  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se um elemento pode receber foco.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o elemento for focalizável; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente o elemento focalizado recebe entrada do teclado.  
  
 <xref:System.Windows.UIElement.Focusable%2A> é o [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] acessador de propriedade para o que é na realidade uma propriedade de dependência. Essa propriedade de dependência particular com bastante frequência tem seu valor de aparente "default" definir de forma diferente nas classes de elemento derivado, especialmente nos controles. Isso normalmente ocorre em uma das duas maneiras:  
  
-   A propriedade de dependência é herdada por uma classe derivada específica, mas que derivado classe substitui os metadados da propriedade de dependência e altera o valor da propriedade padrão.  
  
-   Um estilo ou modelo é aplicado a um elemento, que define esse valor da propriedade de dependência de maneira diferente.  
  
 Por exemplo, o aparente "padrão" de <xref:System.Windows.UIElement.Focusable%2A> para um <xref:System.Windows.Controls.Button> controle será `true`, embora <xref:System.Windows.Controls.Button> herda <xref:System.Windows.UIElement.Focusable%2A> como uma [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] propriedade diretamente do <xref:System.Windows.UIElement>. Isso ocorre porque o valor de metadados aplicados para o <xref:System.Windows.UIElement.Focusable%2A> propriedade de dependência foi substituída no construtor estático do <xref:System.Windows.Controls.Control> classe, que está situado entre base <xref:System.Windows.Controls.Button> e <xref:System.Windows.UIElement> na hierarquia de classe.  
  
 Quando herdada pela <xref:System.Windows.Controls.Control> ou suas classes derivadas, <xref:System.Windows.Controls.Control> redefine o valor padrão dessa propriedade para ser `true`.  
  
 Quando herdada pela <xref:System.Windows.Controls.Label> (que é um <xref:System.Windows.Controls.Control> classe derivada), o valor padrão é novamente redefinido para ser `false`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.FocusableProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo de código a seguir ilustra um modelo de controle para um determinado controle personalizado, que define <xref:System.Windows.UIElement.Focusable%2A> `false` em um dos elementos dentro do modelo.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ao derivar de <see cref="T:System.Windows.UIElement" /> diretamente (ao contrário de <see cref="T:System.Windows.Controls.Control" />), considere se desejar que o elemento a ser focalizável, porque, por padrão o elemento não será focalizável. Se desejar que o elemento a ser focalizável, substitua os metadados para essa propriedade no construtor estático do seu tipo, da seguinte maneira: 
[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)] 
onde <paramref name="myElement" /> deve ser o nome de classe do tipo que você está substituindo o valor de metadados no.</para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.Focusable" /> muda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.Focusable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">A propriedade de dependência a ser verificada.</param>
        <summary>Retorna o valor da propriedade base da propriedade especificada neste elemento, desconsiderando qualquer possível valor animado de uma animação parada ou em execução.</summary>
        <returns>O valor da propriedade como se não houvesse nenhuma animação anexada à propriedade de dependência especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se não houvesse nenhuma animação é anexadas à propriedade o <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> valor retornado sempre é idêntico de <xref:System.Windows.DependencyObject.GetValue%2A> valor de retorno. Se houver animações anexadas, toda animação possíveis derivado valores, incluindo o início e parada de valores é ignoradas e o valor da propriedade é determinado com base em todas as outras entradas possíveis. Para obter mais informações, consulte [Precedência do valor da propriedade de dependência](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 O exemplo a seguir implementa um manipulador que relata o valor de base de uma imagem <xref:System.Windows.FrameworkElement.Width%2A> propriedade em um <xref:System.Windows.Controls.Button>, bem como o valor de base de uma transformação.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">O tamanho disponível fornecido pelo elemento.</param>
        <summary>Retorna uma geometria de recorte alternativa que representa a região que seria recortada se <see cref="P:System.Windows.UIElement.ClipToBounds" /> estivesse definido como <see langword="true" />.</summary>
        <returns>A geometria de recorte em potencial.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão retornará um valor legítimo, mas não usa o `layoutSlotSize` parâmetro em seus cálculos. Em vez disso, ele usa o valor de <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Esse método substancialmente é substituído pelo imediatamente derivada <xref:System.Windows.FrameworkElement> classe e o <xref:System.Windows.FrameworkElement> substituição produz um comportamento mais sofisticado para elementos de nível de framework WPF gerais. Para obter detalhes, consulte <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, retornará um pai [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] alternativo para esse elemento se nenhum pai visual existir.</summary>
        <returns>Um objeto se a implementação de uma classe derivada tiver uma conexão alternativa pai com o relatório.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retorna a implementação de virtual padrão desse método `null`. <xref:System.Windows.FrameworkElement> Fornece uma implementação prática.  
  
 Pais alternativos são usados para roteamento de eventos, nos casos em que um elemento cria uma estrutura pai alternativo para que seus eventos são roteados de forma que diverge do padrão de roteamento na árvore visual para o pai padrão, ou para baixo no estratégia de roteamento de visualização.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento de arrastar e soltar subjacente que envolve este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.GiveFeedback> evento permite que a origem de um evento de arrastar para modificar a aparência do ponteiro do mouse para dar ao usuário feedback visual durante uma operação de arrastar e soltar. Os comentários visuais reforçam que uma operação de arrastar-e-soltar está em processo.  
  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.GiveFeedback> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.GiveFeedback> evento associado subjacente <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Substituir <xref:System.Windows.UIElement.OnGiveFeedback%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.GiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento tem foco lógico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Foco lógico é diferente do foco do teclado se foco deliberadamente é forçado por meio de uma chamada de método, mas o foco do teclado anterior existe em um escopo diferente. Nesse cenário, o foco do teclado permanece onde ele é e o elemento no qual um <xref:System.Windows.UIElement.Focus%2A> método é chamado ainda obtém de foco lógico.  
  
 Uma interpretação mais precisa desse evento é que ele é gerado quando o valor da <xref:System.Windows.UIElement.IsFocused%2A> propriedade de um elemento na rota é alterada de `false` para `true`.  
  
 Como este evento usa o roteamento por propagação, o elemento que recebe o foco pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que ganhou o foco.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
-   Não há nenhum evento de túnel correspondente.  
  
-   Substituir <xref:System.Windows.UIElement.OnGotFocus%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o teclado está focalizado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> é um evento semelhante que rastreia as alterações de status em uma propriedade que mantém o estado de foco para um elemento; o <xref:System.Windows.UIElement.GotKeyboardFocus> é gerado em muitas das mesmas circunstâncias.  
  
 Como este evento usa o roteamento por propagação, o elemento que tem o foco pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que tem o foco.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.GotKeyboardFocus> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.GotKeyboardFocus> evento associado subjacente <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Substituir <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.GotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento captura o mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um elemento captura o mouse, ele recebe entrada do mouse, mesmo se o ponteiro do mouse está fora dos limites. O mouse normalmente é capturado apenas durante operações de arrastar e soltar e permanece capturado até que ocorra a ação drop da operação de arrastar e soltar.  
  
 Como este evento usa o roteamento por propagação, o elemento que tem captura pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> no evento de captura de dados para determinar o elemento real que tem o mouse.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.GotMouseCapture> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.GotMouseCapture> evento associado subjacente <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Não há nenhum evento de túnel correspondente definido.  
  
-   Substituir <xref:System.Windows.UIElement.OnGotMouseCapture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.GotMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento captura a caneta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um elemento captura a caneta, ele recebe entrada de caneta, mesmo se o ponteiro está fora dos limites. A caneta normalmente é capturada apenas durante operações de arrastar e soltar e retém captura até que ocorra a ação drop da operação de arrastar e soltar.  
  
 Como este evento usa o roteamento por propagação, o elemento que tem captura pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que tem captura.  
  
 Esse evento cria um alias para o evento anexado para essa classe, de modo que <xref:System.Windows.UIElement.GotStylusCapture> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.GotStylusCapture> evento associado subjacente <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Não há nenhum evento de túnel correspondente definido.  
  
-   Substituir <xref:System.Windows.UIElement.OnGotStylusCapture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.GotStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um toque é capturado para esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituir <xref:System.Windows.UIElement.OnGotTouchCapture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.GotTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se este elemento tem todas as propriedades animadas.</summary>
        <value><see langword="true" /> se este elemento tem animações anexadas a uma de suas propriedades; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna `true` para persistentes animações (unclocked, sempre em execução), ou para as animações que têm uma linha do tempo específica.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o <see cref="T:System.Windows.UIElement" /> tem foco.</summary>
        <value><see langword="true" /> se o <see cref="T:System.Windows.UIElement" /> tiver o foco; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As subclasses podem substituir essa propriedade para especificar quando o elemento tem foco do teclado.  Isso é útil quando sua <xref:System.Windows.UIElement> contém elementos que podem ter o foco do teclado e você deseja que o elemento ao relatório que tem o foco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Implementa <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> para fornecer o comportamento do teste de clique do elemento base.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Descreve o teste de clique a ser executado, incluindo o ponto de clique inicial.</param>
        <summary>Implementa <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> para fornecer o comportamento do teste de clique do elemento base (retornando <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</summary>
        <returns>Resultados do teste, incluindo a geometria avaliada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consulte o método virtual original <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> para obter informações sobre como substituir esse método em ainda mais as classes derivadas. Observe que vários controles específicos (<xref:System.Windows.Controls.TextBlock>, por exemplo) têm implementações diferentes, que substituem este.  
  
 Esse método não se destina a ser chamado do código do aplicativo. Esse método dá suporte a ocorrências testes comportamentos internos que são expostos por vários aspectos do sistema de entrada (se o ponteiro do mouse está sobre um elemento, por exemplo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Descreve o teste de clique a ser executado, incluindo o ponto de clique inicial.</param>
        <summary>Implementa <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> para fornecer o comportamento do teste de clique do elemento base (retornando <see cref="T:System.Windows.Media.HitTestResult" />).</summary>
        <returns>Resultados do teste, incluindo o ponto avaliado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consulte o método virtual original <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> para obter informações sobre como substituir esse método em ainda mais as classes derivadas. Observe que vários controles específicos (<xref:System.Windows.Controls.TextBlock>, por exemplo) têm implementações distintas, que substituem <xref:System.Windows.UIElement.HitTestCore%2A> conforme definido pelo <xref:System.Windows.UIElement>.  
  
 Esse método não se destina a ser chamado do código do aplicativo. Esse método dá suporte a ocorrências testes comportamentos internos que são expostos por vários aspectos do sistema de entrada (se o ponteiro do mouse está sobre um elemento, por exemplo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a coleção de ligações de entrada associadas a este elemento.</summary>
        <value>A coleção de ligações de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suportam a associações de entrada a associação de comandos para dispositivos de entrada. Por exemplo, <xref:System.Windows.Input.MouseBinding> implementa associações que incluem propriedades que são específicas dos dispositivos de mouse de entrada.  
  
 A coleção de associações de entrada incluirá as associações de entrada que pertencem ao tipo, bem como as associações de entrada que são declaradas na instância.  
  
 Uma propriedade relacionada, <xref:System.Windows.UIElement.CommandBindings%2A>, mantém uma coleção de associações de comando. Estes diferem de associações de entrada em que eles representam o próximo nível baixo de processamento do comando - ações que estão vinculados aos comandos conhecidos.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreInputBindings*  
 Um ou mais <xref:System.Windows.Input.InputBinding> elementos (normalmente a <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding> classes derivadas). Cada um deles deve ter uma <xref:System.Windows.Input.InputBinding.Command%2A> e <xref:System.Windows.Input.InputBinding.Gesture%2A> conjunto de atributos.  
  
   
  
## Examples  
 O exemplo a seguir preenche essa propriedade em uma <xref:System.Windows.Window>, com um único <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Para obter mais informações sobre o [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxe para coleções, consulte [sintaxe de XAML em detalhes](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">As coordenadas de deslocamento dentro desse elemento.</param>
        <summary>Retorna o elemento de entrada no elemento atual que está nas coordenadas especificadas em relação à origem do elemento atual.</summary>
        <returns>O filho do elemento que está localizado na posição especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement> é retornado como o tipo de retorno, porque esse tipo é uma interface comum para ambos <xref:System.Windows.UIElement> e <xref:System.Windows.ContentElement>. Em seguida, você pode converter o tipo de retorno apropriadamente ou usar a instância de interface para determinados membros que são definidos pelo <xref:System.Windows.IInputElement> interface.  
  
 Esse método normalmente não é chamado do código do aplicativo. Chamar esse método só é apropriado se você pretende implementar novamente uma quantidade significativa dos recursos de entrada de nível inferior que já estão presentes, como recriar a lógica de dispositivo de mouse.  
  
 <xref:System.Windows.IContentHost> contratos de um <xref:System.Windows.IContentHost.InputHitTest%2A> método com a mesma assinatura, alguns elementos optar por implementar explicitamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalida o estado da organização (layout) do elemento. Após a invalidação, o elemento terá seu layout atualizado, o que ocorrerá de forma assíncrona a menos que posteriormente seja forçado por <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamadas frequentes ao <xref:System.Windows.UIElement.InvalidateArrange%2A> ou em particular para <xref:System.Windows.UIElement.UpdateLayout%2A> ter consequências significativas de desempenho. Portanto, evite chamar esse método, a menos que você exige absolutamente que estado de layout preciso para chamadas posteriores às outras [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] em seu código. Um cenário avançado, onde você pode chamar <xref:System.Windows.UIElement.InvalidateArrange%2A> é se você estiver criando um <xref:System.Windows.PropertyChangedCallback> para uma propriedade de dependência que não está em um <xref:System.Windows.Freezable> ou <xref:System.Windows.FrameworkElement> derivado da classe que ainda influencia a passagem de organização do layout quando ele é alterado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalida o estado da medida (layout) do elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método também chama <xref:System.Windows.UIElement.InvalidateArrange%2A> internamente, não há nenhuma necessidade de chamar <xref:System.Windows.UIElement.InvalidateMeasure%2A> e <xref:System.Windows.UIElement.InvalidateArrange%2A> em sucessão. Após a invalidação, o elemento terá seu layout atualizado, o que ocorrerá de forma assíncrona, a menos que <xref:System.Windows.UIElement.UpdateLayout%2A> é chamado para forçar uma alteração de layout síncrona.  
  
 O sistema de layout de nível de framework WPF faz seu próprio tratamento de alterações na árvore visual de um elemento e, em casos mais comuns de invalidação de layout, o sistema de layout está chamando o equivalente a este método quando necessário. Você só deve chamar esse método se você está produzindo uma implementação de layout completo, que direcionam manipulação da árvore de elementos, ou semelhantes a cenários avançados. Um cenário avançado é se você estiver criando um <xref:System.Windows.PropertyChangedCallback> para uma propriedade de dependência que não está em um <xref:System.Windows.Freezable> ou <xref:System.Windows.FrameworkElement> derivado da classe que ainda influencia a passagem de medida de layout quando ele é alterado.  
  
 Chamadas frequentes ao <xref:System.Windows.UIElement.InvalidateMeasure%2A> ou em particular para <xref:System.Windows.UIElement.UpdateLayout%2A> ter consequências significativas de desempenho. Portanto, evite chamar esse método, a menos que você exige absolutamente que estado de layout preciso para chamadas posteriores às outras [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] em seu código.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalida a renderização do elemento e força uma nova passagem de layout completa. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> é chamado após a conclusão do ciclo de layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método chama <xref:System.Windows.UIElement.InvalidateArrange%2A> internamente.  
  
 Esse método não é geralmente chamado de código do aplicativo. O sistema de layout de nível de framework WPF faz seu próprio tratamento de alterações na árvore visual de um elemento e seria chamar o equivalente a este método quando necessário já. Chamar esse método é necessário apenas para cenários avançados. Um cenário avançado é se você estiver criando um <xref:System.Windows.PropertyChangedCallback> para uma propriedade de dependência que não está em um <xref:System.Windows.Freezable> ou <xref:System.Windows.FrameworkElement> derivado da classe que ainda influencia o layout quando ele é alterado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o tamanho e a posição calculados dos elementos filho no layout do elemento são válidos.</summary>
        <value><see langword="true" /> se o tamanho e a posição de layout forem válidos; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode forçar a disposição a ser invalidado chamando <xref:System.Windows.UIElement.InvalidateArrange%2A> sobre esse elemento (ou seus pais). Isso sinaliza o layout para recomposição at conforme determina o sistema de layout. Como alternativa, uma chamada de imediata para <xref:System.Windows.UIElement.UpdateLayout%2A> poderia ser feita, mas isso só deve ser feito se você tiver certeza de que nenhum invalidações adicionais estão pendentes (um grande número de atualizações forçadas desnecessariamente tem consequências de desempenho).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A> não pode ser `true` , a menos que <xref:System.Windows.UIElement.IsMeasureValid%2A> também é `true` (no processo de layout, organização não pode ser válida sem medida primeiro sendo válido).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se esse elemento está habilitado no [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o elemento estiver habilitado; caso contrário, <see langword="false" />. O valor padrão é <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que essa propriedade é influenciada por implementações específicas de classe de <xref:System.Windows.UIElement.IsEnabledCore%2A> em elementos específicos, geralmente em tempo de execução. Portanto, o valor padrão listado aqui, às vezes, não é eficaz. Por exemplo, uma <xref:System.Windows.Controls.Primitives.ScrollBar> estarão <xref:System.Windows.UIElement.IsEnabled%2A> `false` sempre que for determinado que não é necessário para dar suporte a uma barra de rolagem. Tentativa de definir esse valor também potencialmente será ser substituída pelo valor retornado por <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Elementos que não estão habilitados não participam de foco ou de teste de clique e, portanto, não será fontes de eventos de entrada.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir mostra um manipulador em um botão que quando executado definirá <xref:System.Windows.UIElement.IsEnabled%2A> `false` em outro botão nomeado `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsEnabled" /> neste elemento é alterado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que se torna o valor retornado de <see cref="P:System.Windows.UIElement.IsEnabled" /> em classes derivadas.</summary>
        <value><see langword="true" /> se o elemento estiver habilitado; caso contrário, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>A implementação padrão dessa propriedade armazena o valor em cache e também calcula se o elemento pai desse elemento está habilitado. (Se o pai não estiver habilitado, o elemento filho não pode ser habilitado com eficiência em práticos [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) Se você optar por substituir essa implementação, certifique-se de que você chame a implementação base para preservar esse comportamento.  
  
O <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> classe fornece uma implementação de substituição existente dessa propriedade. Essa substituição é determina se o conteúdo dentro da área de apresentação do conteúdo excede a área disponível. Se o conteúdo excede a área, a parte da barra de rolagem está habilitada. Caso contrário, a barra de rolagem não está habilitada.</para></block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que determina se esse elemento tem foco lógico.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se esse elemento tiver o foco lógico; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Foco lógico pode diferir do foco do teclado, se um aplicativo tiver várias divisões de foco, tais como entre o conteúdo do menu e o restante do aplicativo. Nesse cenário, só pode ser o foco do teclado em um elemento de interface do usuário do aplicativo, no entanto, certos elementos na outras divisões de foco ainda podem manter foco lógico. Para obter mais informações sobre o foco lógico, consulte [visão geral do foco](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Você não definir foco definindo essa propriedade (é somente leitura). O uso típico para essa propriedade é usá-lo como uma propriedade de dependência para um <xref:System.Windows.Setter> ou <xref:System.Windows.EventTrigger>. Para definir o foco programaticamente, chame <xref:System.Windows.UIElement.Focus%2A>. Foco também pode ser definido por ação do usuário ou por implementações de controle, que incluem, possivelmente, o comportamento de captura do mouse.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir é um manipulador de código que altera o plano de fundo de um controle quando ele está focalizado.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Outra forma comum de atingir o mesmo efeito é colocar uma <xref:System.Windows.Trigger> no <xref:System.Windows.Style> de um controle; essa abordagem não exige a manipulação de eventos específicos com code-behind e permite que os designers maior acesso à natureza interativa e gráfica do o [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Para obter um exemplo, consulte [ Criar um efeito de brilho externo](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que declara se este elemento tem possibilidade de ser retornado como um resultado de teste de clique de alguma parte de seu conteúdo renderizado. É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se esse elemento puder ser retornado como um resultado do teste de clique de, pelo menos, um ponto; caso contrário, <see langword="false" />. O valor padrão é <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor efetivo dessa propriedade é influenciado pelas posições relativas dos elementos que podem ser testados ocorrências na árvore lógica. Por exemplo, se um elemento é um elemento filho de um elemento que é não visível do teste de clique, o valor efetivo da propriedade no filho permanecerão `false`, mesmo se a tentativa de definir o valor localmente. Por esse motivo, é importante que você não defina <xref:System.Windows.UIElement.IsHitTestVisible%2A> para `false` em um controle composto, a menos que você não deseja que qualquer entrada ou testes de clique em que o controle. Para obter mais informações sobre teste de clique, consulte [Teste de clique na camada visual](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade de dependência <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsHitTestVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se um sistema de método de entrada, como um [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], está habilitado para processamento de entrada para esse elemento.</summary>
        <value><see langword="true" /> se um método de entrada estiver ativo; caso contrário, <see langword="false" />. O valor padrão da propriedade anexada subjacente é <see langword="true;" />, no entanto, isso será influenciado pelo estado real dos métodos de entrada no tempo de execução.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o valor retornado pela propriedade anexada <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> para os métodos de entrada atualmente habilitados (teclado, fala e outros dispositivos de entrada).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se este elemento tem foco do controle.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se esse elemento tiver o foco do teclado; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alterações no determinado valor dessa propriedade podem ser acompanhadas por eventos relacionados ao foco.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> são comumente usados em manipuladores de eventos de classe para outros eventos relacionados à entrada, por exemplo para determinar se o elemento já tem o foco do teclado ou fazer determinações quando o mouse eventos e eventos de teclado ocorrem em conjunto.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsKeyboardFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o foco do teclado é em qualquer lugar dentro do elemento ou de seus elementos filho de árvore visual.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o foco do teclado está no elemento ou em seus elementos filho; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alterações ao valor dessa propriedade normalmente geram a <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> evento, a menos que uma classe derivada tiver substituído <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> para suprimir o evento.  
  
 Você não definir essa propriedade diretamente, mas você pode definir o foco para um elemento, chamando <xref:System.Windows.UIElement.Focus%2A>, ou fazendo uma <xref:System.Windows.UIElement.MoveFocus%2A> solicitação. Qualquer uma dessas chamadas de método pode alterar esse valor de propriedade.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> são normalmente usados em manipuladores de eventos de classe para outros eventos relacionados à entrada, por exemplo para determinar se o elemento já tem o foco do teclado ou fazer determinações quando o mouse eventos e eventos de teclado ocorrem em conjunto.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se os eventos de manipulação estão habilitados neste <see cref="T:System.Windows.UIElement" />.</summary>
        <value><see langword="true" /> se os eventos de manipulação estiverem habilitados neste <see cref="T:System.Windows.UIElement" />; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Defina essa propriedade como true se você quiser que o <xref:System.Windows.UIElement> para receber os <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, e <xref:System.Windows.UIElement.ManipulationCompleted> eventos. Para obter mais informações sobre as manipulações, consulte o [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  Para obter um exemplo de um aplicativo que responde às manipulações, consulte [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 O exemplo a seguir cria um aplicativo que tenha um retângulo vermelho.  O <xref:System.Windows.UIElement.IsManipulationEnabled%2A> propriedades do retângulo é definida como true e o aplicativo assina de janela para o <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, e <xref:System.Windows.UIElement.ManipulationInertiaStarting> eventos. Este exemplo é parte de um exemplo maior no [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsManipulationEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o tamanho atual retornado pela medida de layout é válido.</summary>
        <value><see langword="true" /> se o cálculo da medida de layout retornou um valor válido e atual; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode forçar a medição e a disposição a ser invalidado chamando <xref:System.Windows.UIElement.InvalidateMeasure%2A> sobre esse elemento (ou qualquer elemento pai na árvore visual). Isso designa o layout para recomposição de forma assíncrona, que ocorrem em um tempo determinado pelo sistema de layout. Como alternativa, você pode fazer uma chamada de imediata para <xref:System.Windows.UIElement.UpdateLayout%2A>. No entanto, você só deve chamar <xref:System.Windows.UIElement.UpdateLayout%2A> se é provável que não há mais invalidações são devidas pendentes (um grande número de atualizações forçadas desnecessariamente terá consequências de desempenho).  
  
 Se <xref:System.Windows.UIElement.IsMeasureValid%2A> está `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> também deve ser `false` (pela lógica do processo de layout de imposto, organização não pode ser válida sem medida primeiro sendo válido).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o mouse é capturado para esse elemento.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o elemento tiver a captura do mouse; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estado de captura do mouse está relacionado a operações de arrastar e soltar no processo.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir ativa o estado de captura do mouse ou desativa com base em se o mouse já é capturado para o elemento.  
  
 Se a captura do mouse estiver em outro lugar, que a captura do mouse está definida para esse elemento. Se o elemento tiver a captura do mouse, será apagada chamando <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> com uma entrada nula.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsMouseCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que determina se a captura do mouse é mantida por esse elemento ou elementos filho em sua árvore visual. É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se esse elemento ou um elemento contido tiver captura do mouse; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor do <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> é alterado nesse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se a posição do ponteiro do mouse corresponde aos resultados de teste de clique, que levam em consideração a composição de elementos.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o ponteiro do mouse estiver sobre o mesmo resultado do elemento que um teste de clique; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diferentemente <xref:System.Windows.UIElement.IsMouseOver%2A>, essa propriedade só é `true` se o ponteiro do mouse está sobre o elemento literal – assim como para um teste de clique. Se, em vez disso, o ponteiro do mouse está sobre um elemento filho, em particular sobre os elementos que fazem parte de um elemento modelo mais profundo e composição, essa propriedade será `false`. A menos que você sabe como um controle é composto (por exemplo, você usa essa propriedade em um modelo de controle personalizado para um controle que você definir), essa propriedade pode retornar resultados inesperados. Na maioria dos cenários em que você não estiver criando controles, use <xref:System.Windows.UIElement.IsMouseOver%2A> em vez disso.  
  
 Se o mouse é capturado por esse elemento, e essa propriedade é `true` no momento da captura, essa propriedade continuarão a retornar `true` até que a captura do mouse é perdida e o ponteiro não está sobre seus limites.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o ponteiro do mouse está localizado sobre esse elemento (incluindo os elementos filho na árvore visual).  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o ponteiro do mouse estiver sobre o elemento ou seus elementos filho; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, os controles são compostos, de modo que os vários elementos dentro do controle (a árvore visual) irá relatar o estado do mouse para o controle recipiente. Por exemplo, uma <xref:System.Windows.Controls.ListBox> controle de estilo relatará <xref:System.Windows.UIElement.IsMouseOver%2A> como `true` se o mouse em qualquer lugar ao longo de sua geometria, incluindo quaisquer <xref:System.Windows.Controls.ListBoxItem>.  
  
 Embora não exista um evento de "IsMouseOverChanged" análogo, fazer vários eventos semelhantes. Por exemplo, você pode manipular <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, e <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 Se este elemento captura o mouse, essa propriedade permanece `true` até que a captura do mouse é perdida e o ponteiro do mouse sai dos limites do elemento.  
  
 Alguns controles deliberadamente capturam o mouse sobre determinadas ações que parecem não envolvem diretamente o mouse. Isso pode causar <xref:System.Windows.UIElement.IsMouseOver%2A> sendo `true` , mesmo que o mouse, aparentemente, não foi movido.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir faz referência a essa propriedade como o tipo de propriedade de um <xref:System.Windows.Trigger>, que faz parte de um \<Triggers > bloco. Se o mouse está sobre o controle, o texto do controle fica azul e o cursor se torne uma mão.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsMouseOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se a caneta é capturada por este elemento.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o elemento tem captura da caneta; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsStylusCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que determina se a captura da caneta é mantida por esse elemento ou um elemento nos limites do elemento e sua árvore visual. É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se esse elemento ou um elemento contido tiver captura de caneta; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [suporte de entrada de toque no Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) e [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se a posição da caneta corresponde aos resultados de teste de clique, que levam em consideração a composição dos elementos.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o ponteiro da caneta estiver sobre o mesmo resultado do elemento que um teste de clique; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diferentemente <xref:System.Windows.UIElement.IsStylusOver%2A>, essa propriedade só é `true` se a caneta está sobre o elemento. Se, em vez disso, a caneta está sobre um elemento filho ou elementos que fazem parte da composição de mais de um elemento (a árvore visual), essa propriedade será `false`.  
  
 A menos que você sabe como um controle é composto (por exemplo, você usa essa propriedade em um modelo de controle personalizado para um controle que você definir), essa propriedade pode retornar resultados inesperados. Na maioria dos cenários em que você não estiver criando controles, use <xref:System.Windows.UIElement.IsStylusOver%2A> em vez disso.  
  
 Se este elemento tem captura da caneta e esta propriedade é `true` no momento da captura, essa propriedade permanece `true` até que a captura da caneta é perdida e não está sobre seus limites.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o cursor da caneta está localizado sobre esse elemento (incluindo elementos filho visuais).  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o cursor da caneta está sobre o elemento ou seus elementos filho; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se este elemento tem captura da caneta, essa propriedade será continuam a retornar `true` até que a captura da caneta é perdida e o ponteiro está fora dos seus limites.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsStylusOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se esse elemento está visível no [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o elemento estiver visível; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Determinação de <xref:System.Windows.UIElement.IsVisible%2A> valor leva em conta a todos os fatores de layout. Em contraste, <xref:System.Windows.UIElement.Visibility%2A>, que é uma propriedade configurável, só indica a intenção de criar programaticamente um elemento visível ou invisível.  
  
 Elementos onde <xref:System.Windows.UIElement.IsVisible%2A> é `false` participe de eventos de entrada (ou comandos), faça não influenciam o measure ou cálculos de layout, não estão focalizável, não estão em uma sequência de guia e não serão reportadas no teste de clique. Por outro lado, elementos onde <xref:System.Windows.UIElement.IsEnabled%2A> é `false` ainda farão parte de eventos e comandos e teste de clique, mas também não são focalizável.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o valor da propriedade <see cref="P:System.Windows.UIElement.IsVisible" /> é alterado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento não será gerado se o elemento não está sendo processado, o sistema de layout, por motivos diferente do valor de <xref:System.Windows.UIElement.IsVisible%2A> propriedade. Por exemplo, o elemento não pode ter um elemento visual associado.  
  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.IsVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma tecla é pressionada enquanto o foco está neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manipulação de chave interage com outros recursos de plataforma, como a composição de texto e dos comandos. O <xref:System.Windows.UIElement.KeyDown> é um evento de entrada de texto de nível inferior pode não se comportar conforme o esperado em certos controles. Isso ocorre porque alguns controles têm a composição de controle ou manipulação de classe que fornece uma versão de nível mais alto de texto, manipulação de entrada e eventos relacionados.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.KeyDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.KeyDown> evento associado subjacente <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnKeyDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.KeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma chave é liberada enquanto o foco está neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> anexado a eventos para essa classe, de modo que <xref:System.Windows.UIElement.KeyUp> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.KeyUp> evento associado subjacente <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnKeyUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.KeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o layout dos vários elementos visuais associados ao <see cref="T:System.Windows.Threading.Dispatcher" /> atual é alterado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma atualização de layout pode ocorrer devido a uma alteração de propriedade, um redimensionamento de janela ou uma solicitação explícita do usuário.  
  
 Esse membro é um [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, não um evento roteado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento perde o foco lógico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Foco lógico é diferente do foco do teclado se o foco é deliberadamente forçado imediatamente, usando uma chamada de método, mas o foco do teclado anterior existe em um escopo diferente. Neste cenário, permanece de foco do teclado em que ele é e o elemento no qual um <xref:System.Windows.UIElement.Focus%2A> método é chamado ainda obtém de foco lógico.  
  
 Uma interpretação mais precisa desse evento é que ele é gerado quando o valor da <xref:System.Windows.UIElement.IsFocused%2A> muda de propriedade de um elemento na rota de `true` para `false`.  
  
 Como este evento usa o roteamento por propagação, o elemento que perde o foco pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que ganhou o foco.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
-   Não há nenhum evento de túnel correspondente.  
  
-   Substituir <xref:System.Windows.UIElement.OnLostFocus%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o teclado não está mais focalizado no elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como este evento usa o roteamento por propagação, o elemento que perdeu o foco pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que perdeu o foco.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.LostKeyboardFocus> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.LostKeyboardFocus> evento associado subjacente <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Substituir <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.LostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento perde a captura do mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um elemento captura o mouse, ele recebe entrada do mouse, mesmo se o ponteiro está fora dos limites. Normalmente, o mouse é capturado apenas durante operações de arrastar e soltar.  
  
 Como este evento usa o roteamento por propagação, o elemento perde a captura pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que perdeu a captura.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.LostMouseCapture> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.LostMouseCapture> evento associado subjacente <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Não há nenhum evento de túnel correspondente definido.  
  
-   Substituir <xref:System.Windows.UIElement.OnLostMouseCapture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.LostMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento perde a captura da caneta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um elemento captura a caneta, ele recebe entrada de caneta, mesmo se o ponteiro está fora dos limites. Normalmente, a caneta é capturada somente durante as operações de arrastar e soltar.  
  
 Como este evento usa o roteamento por propagação, o elemento que perde o foco pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que perdeu o foco.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.LostStylusCapture> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.LostStylusCapture> evento associado subjacente <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Não há nenhum evento de túnel correspondente definido.  
  
-   Substituir <xref:System.Windows.UIElement.OnLostStylusCapture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.LostStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento perde a captura do toque.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituir <xref:System.Windows.UIElement.OnLostTouchCapture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.LostTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a manipulação atinge um limite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma manipulação e inércia no objeto <see cref="T:System.Windows.UIElement" /> é concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar esse evento para obter informações sobre a manipulação de quando ele for concluído.  Por exemplo, você pode usar o <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> alterado de propriedade para determinar a quantidade total a posição da manipulação.  
  
 Para obter mais informações sobre as manipulações, consulte o [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  Para obter um exemplo de um aplicativo que responde às manipulações, consulte [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.ManipulationCompleted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o dispositivo de entrada muda de posição durante uma manipulação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.ManipulationDelta> evento ocorre várias vezes quando o usuário arrasta dedos na tela durante uma manipulação e novamente quando ocorre a inércia.  Você pode usar o <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> propriedade para verificar se o evento está ocorrendo durante a inércia.  
  
 O elemento com <xref:System.Windows.UIElement.ManipulationDelta> evento ocorre não é afetada de nenhuma forma, quando o evento ocorre.  Você deve fornecer a lógica para o elemento que deve ser manipulado.  O <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> e <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propriedades, que são do tipo <xref:System.Windows.Input.ManipulationDelta>, contêm dados sobre como alterar a posição das manipulações e interpretado como mover, redimensionar ou girar um objeto.  Você pode aplicar essas informações para o elemento que deve ser manipulado.  
  
 Para obter mais informações sobre as manipulações, consulte o [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  Para obter um exemplo de um aplicativo que responde às manipulações, consulte [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 O exemplo a seguir mostra um manipulador de eventos para o <xref:System.Windows.UIElement.ManipulationDelta> eventos. O exemplo usa o <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propriedade para mover, redimensionar e girar um <xref:System.Windows.Shapes.Rectangle>.  O exemplo também verifica se o <xref:System.Windows.UIElement.ManipulationDelta> evento ocorreu durante a inércia e se o retângulo está tocando a borda de uma janela.  Se esses casos são true, o aplicativo para a manipulação para impedir que o retângulo de deixar a área visível do aplicativo. Este exemplo é parte de um exemplo maior no [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o dispositivo de entrada perde o contato com o objeto <see cref="T:System.Windows.UIElement" /> durante uma manipulação e a inércia começa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.ManipulationInertiaStarting> evento ocorre quando o usuário levantar todos os dedos na tela durante uma manipulação. Por exemplo, se um usuário "lança" um <xref:System.Windows.UIElement> em uma superfície, o usuário terá contato a <xref:System.Windows.UIElement> para iniciar a ação, mova o dedo na tela por uma distância curta e, em seguida, solte o <xref:System.Windows.UIElement>. Quando o usuário libera o elemento, inércia começa e o <xref:System.Windows.UIElement.ManipulationInertiaStarting> evento ocorre.  O <xref:System.Windows.UIElement> continua a receber <xref:System.Windows.UIElement.ManipulationDelta> eventos para indicar que a inércia está ocorrendo no elemento.  
  
 Você pode usar esse evento para especificar o comportamento da inércia.  Por exemplo, você pode definir a velocidade inicial usado durante a inércia começa.  Você também pode especificar a quantidade de inércia, definindo a desaceleração desejada, ou definindo o posicionamento desejado.  Você pode definir esses valores para cada tipo de manipulação (translação, expansão ou rotação) de forma independente.  Para obter mais informações, consulte <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Para obter mais informações sobre as manipulações, consulte o [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  Para obter um exemplo de um aplicativo que responde às manipulações, consulte [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 A exemplo a seguir mostra o <xref:System.Windows.UIElement.ManipulationInertiaStarting> manipulador de eventos e define a desaceleração desejada de translação, expansão e rotação que é usada durante a inércia. Este exemplo é parte de um exemplo maior no [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um dispositivo de entrada começa uma manipulação no objeto <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.ManipulationStarted> evento ocorre após o <xref:System.Windows.UIElement.ManipulationStarting> eventos.  Você pode fazer o seguinte com o <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Obter o elemento que a posição da manipulação é relativo ao usando o <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> propriedade.  
  
-   Obter a origem da manipulação usando o <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> propriedade.  
  
-   Cancelar a manipulação chamando o <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> método.  
  
 Para obter mais informações sobre as manipulações, consulte o [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  Para obter um exemplo de um aplicativo que responde às manipulações, consulte [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.ManipulationStarted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o processador de manipulação é criado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.ManipulationStarting> evento ocorre em um elemento que tem o <xref:System.Windows.UIElement.IsManipulationEnabled%2A> propriedade definida como `true` quando o usuário coloca um dedo nele. Por padrão, os eventos manipulation subsequentes relatam a posição da manipulação em relação ao elemento que tem <xref:System.Windows.UIElement.IsManipulationEnabled%2A> definido como `true`.  Você pode especificar que a posição deve ser relativa a outro elemento, definindo o <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> propriedade. Por exemplo, você pode fazer a manipulação em relação ao pai do elemento.  
  
 Você também pode fazer o seguinte em um manipulador de eventos <xref:System.Windows.UIElement.ManipulationStarting>:  
  
-   Especifique se o usuário precisa de mais de um dedo para executar manipulações, definindo o <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> propriedade.  
  
-   Especifique quais tipos de manipulação estão habilitados, definindo o <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> propriedade para um <xref:System.Windows.Input.ManipulationModes> enumeração.  
  
-   Especificar o Centro de rotação de um dedo definindo a <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> propriedade.  
  
-   Cancelar a manipulação chamando o <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> método.  
  
 Para obter mais informações sobre as manipulações, consulte o [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  Para obter um exemplo de um aplicativo que responde às manipulações, consulte [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 O exemplo a seguir mostra o manipulador de eventos para o <xref:System.Windows.UIElement.ManipulationStarting> eventos e define o <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> ao elemento pai que recebe os eventos manipulation, para que as coordenadas da manipulação são relativos ao elemento pai.  Este exemplo é parte de um exemplo maior no [passo a passo: Criando seu primeiro aplicativo do Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.ManipulationStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">O espaço disponível que um elemento pai pode alocar um elemento filho. Um elemento filho pode solicitar um espaço maior do que o disponível. O tamanho fornecido pode ser acomodado se a rolagem for possível no modelo de conteúdo do elemento atual.</param>
        <summary>Atualiza <see cref="P:System.Windows.UIElement.DesiredSize" /> de um <see cref="T:System.Windows.UIElement" />. Elementos pai chamam esse método de suas próprias implementações <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> para formar uma atualização de layout recursiva. Chamar esse método constitui a primeira passagem (a passagem "Medida") de uma atualização de layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O cálculo de layout de posicionamento no [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] é composto por um <xref:System.Windows.UIElement.Measure%2A> chamar e um <xref:System.Windows.UIElement.Arrange%2A> chamar. Durante o <xref:System.Windows.UIElement.Measure%2A> chamada, um elemento determina seus requisitos de tamanho usando um `availableSize` entrada. Durante o <xref:System.Windows.UIElement.Arrange%2A> chamada, o tamanho do elemento é finalizada.  
  
 `availableSize` pode ser qualquer número de zero como infinito. Elementos que participam no layout devem retornar o mínimo <xref:System.Windows.Size> necessitam para um determinado `availableSize`.  
  
 Quando um layout é instanciado pela primeira vez, ele sempre recebe um <xref:System.Windows.UIElement.Measure%2A> chame antes <xref:System.Windows.UIElement.Arrange%2A>. No entanto, após a primeira passagem de layout, ele poderá receber um <xref:System.Windows.UIElement.Arrange%2A> chamar sem uma <xref:System.Windows.UIElement.Measure%2A>; isso pode acontecer quando uma propriedade que afete apenas <xref:System.Windows.UIElement.Arrange%2A> é alterado (por exemplo, o alinhamento), ou quando o pai recebe um <xref:System.Windows.UIElement.Arrange%2A> sem um <xref:System.Windows.UIElement.Measure%2A>. Um <xref:System.Windows.UIElement.Measure%2A> chamada invalidará automaticamente um <xref:System.Windows.UIElement.Arrange%2A> chamar.  
  
 As atualizações de layout ocorrem de maneira assíncrona, que o thread principal não está esperando para cada alteração de layout possíveis. Consultar um elemento por meio de lógica verificação de valores de propriedade pode não refletir imediatamente as alterações nas propriedades que interagem com as características de dimensionamento ou layout (o <xref:System.Windows.FrameworkElement.Width%2A> propriedade, por exemplo).  
  
> [!NOTE]
>  As atualizações de layout podem ser forçadas usando o <xref:System.Windows.UIElement.UpdateLayout%2A> método. No entanto, chamar este método é geralmente desnecessário e pode causar baixo desempenho.  
  
 O sistema de layout mantém duas filas separadas dos layouts inválidos, um para <xref:System.Windows.UIElement.Measure%2A> e outro para <xref:System.Windows.UIElement.Arrange%2A>. A fila de layout é classificada com base na ordem dos elementos na árvore visual do elemento de execução do layout; mais alto na árvore de elementos estão no topo da fila, para evitar layouts redundantes causados por alterações repetidas em pais. Entradas duplicadas são automaticamente removidas da fila e elementos são automaticamente removidos da fila se eles já estiverem validados de layout.  
  
 Ao atualizar o layout, o <xref:System.Windows.UIElement.Measure%2A> fila é esvaziada primeiro, seguido de <xref:System.Windows.UIElement.Arrange%2A> fila. Um elemento na <xref:System.Windows.UIElement.Arrange%2A> fila nunca será organizada se não houver um elemento no <xref:System.Windows.UIElement.Measure%2A> fila.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">O tamanho disponível que o elemento pai pode alocar para o filho.</param>
        <summary>Quando substituído em uma classe derivada, fornece uma lógica de medida para o dimensionamento correto desse elemento, levando em consideração o tamanho do conteúdo de elementos filho.</summary>
        <returns>O tamanho desejado desse elemento no layout.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É mais comum para derivar um elemento de <xref:System.Windows.FrameworkElement> em vez de <xref:System.Windows.UIElement>. Se você estiver derivando de <xref:System.Windows.FrameworkElement>, observe que uma substituição do <xref:System.Windows.UIElement.MeasureCore%2A> nos <xref:System.Windows.FrameworkElement> selos de <xref:System.Windows.UIElement.MeasureCore%2A> método. Portanto, você apenas substitui <xref:System.Windows.UIElement.MeasureCore%2A> como um meio para alterar as características de medida de layout se você derivar de <xref:System.Windows.UIElement> por meio de uma herança que não inclua <xref:System.Windows.FrameworkElement>. Isso pode ser o caso se você está tentando construir sua própria implementação o [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] nível de núcleo. Caso contrário, se você estiver derivando de <xref:System.Windows.FrameworkElement>, em seguida, o modelo de implementação para o comportamento de medida é o <xref:System.Windows.FrameworkElement> implementação de.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Um elemento pai com elementos filho deve chamar <xref:System.Windows.UIElement.Measure%2A> em cada filho, caso contrário, esses elementos filho não são dimensionados ou organizados e efetivamente desaparecerá do layout.  
  
   
  
## Examples  
 Uma substituição comum dos <xref:System.Windows.UIElement.MeasureCore%2A> segue este padrão aproximado (não é uma coleção interna chamada `VisualChildren`; `VisualChildren` é um espaço reservado que representa qualquer coleção de filhos que mantém seu elemento).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   Você deve chamar <xref:System.Windows.UIElement.Measure%2A> em cada elemento filho.  
  
-   Em geral, sua implementação deve armazenar em cache informações de medição entre o <xref:System.Windows.UIElement.MeasureCore%2A> e <xref:System.Windows.UIElement.ArrangeCore%2A> chamadas de método no mesmo elemento.  
  
-   Chamar as implementações de base da <xref:System.Windows.UIElement.MeasureCore%2A> não é necessário, mas pode ser apropriado se a implementação base fornece uma funcionalidade de layout desejado.  
  
-   Chamadas para <xref:System.Windows.UIElement.Measure%2A> no filho do elemento deve passar a mesma `availableSize` como pai, ou um subconjunto da área, dependendo do tipo de layout do elemento pai dá suporte. Por exemplo, seria válida para remover a área de uma borda de elemento específico ou preenchimento, uma barra de rolagem ou um controle personalizado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementações devem ser capazes de processar um valor fornecido para <paramref name="availableSize" /> é infinito. Um valor infinito não indica nenhuma restrição foi solicitada e adia a escolha de medida ao elemento pai, por meio de recursiva que medida chama efetivamente.  
  
Implementações podem considerar o valor fornecido para <paramref name="availableSize" /> seja uma restrição flexível. O elemento filho pode especificar um tamanho maior, mesmo se outros aspectos do código do aplicativo foram capazes de determinar o tamanho real atual do elemento pai. A solicitação de tamanho grande é uma convenção que indica que o elemento filho está consultando se seu elemento pai pode dar suporte a rolagem de conteúdo dentro de uma região de exibição de conteúdo.</para></block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando qualquer botão do mouse é pressionado enquanto o ponteiro está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.MouseDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.MouseDown> evento associado subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 O <xref:System.Windows.UIElement.MouseDown> é normalmente gerado junto com qualquer um <xref:System.Windows.UIElement.MouseLeftButtonDown> ou <xref:System.Windows.UIElement.MouseRightButtonDown>, que correspondem a um pressionamento de um dos dois botões de mouse padrão. <xref:System.Windows.UIElement.MouseLeftButtonDown> e <xref:System.Windows.UIElement.MouseRightButtonDown> também são eventos roteados, mas eles são eventos roteados diretos e o evento apropriado do botão específico é gerado quando o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento atinge esse elemento ao longo da rota de evento. Consulte os comentários para <xref:System.Windows.UIElement.MouseLeftButtonDown> ou <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Alguns controles podem ter inerentes a manipulação de classe para eventos do botão do mouse. O botão esquerdo do mouse para baixo de evento é o evento mais provável para ter um controle de manipulação de classe. A classe tratamento geralmente marca subjacente <xref:System.Windows.Input.Mouse> eventos de classe como manipulado. Depois que o evento é marcado como manipulado, outros manipuladores de instância que são anexados a esse elemento não são acionados normalmente. Qualquer outras classe ou instância manipuladores que estão anexados a elementos na direção por propagação na direção da raiz na árvore de interface do usuário também normalmente não são gerados.  
  
 Você pode resolver o problema descrito no item anterior importante e ainda receber <xref:System.Windows.UIElement.MouseDown> eventos para o botão esquerdo do mouse para baixo de eventos em uma classe derivada que tem, usando qualquer uma dessas soluções de manipulação de classe:  
  
-   Anexar manipuladores para o <xref:System.Windows.UIElement.PreviewMouseDown> evento, que não está marcado como manipulado pelos controles. Observe que, como esse é um evento de visualização, a rota é iniciado na raiz e túneis ao controle.  
  
-   Registrar um manipulador no controle de forma procedimental chamando <xref:System.Windows.UIElement.AddHandler%2A> e escolhendo a opção de assinatura que permite que os manipuladores escutar eventos do mesmo se eles já estão marcados como manipulados nos dados do evento roteado.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o ponteiro do mouse entra nos limites deste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter> é uma que usa o estratégia de roteamento de manipulação de eventos direto. Eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, eles permitem que outros aspectos do comportamento do evento roteado, como gatilhos de evento nos estilos.  
  
 Embora <xref:System.Windows.UIElement.MouseEnter> rastreia quando o ponteiro do mouse entra nos limites de um elemento, esse evento mais literalmente relata que o <xref:System.Windows.UIElement.IsMouseOver%2A> o valor da propriedade foi alterado de `false` para `true` neste elemento.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.MouseEnter> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.MouseEnter> evento associado subjacente <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Um <xref:System.Windows.Controls.Button> (ou qualquer <xref:System.Windows.Controls.Primitives.ButtonBase> classe derivada) tem tratamento nativo para um <xref:System.Windows.UIElement.KeyDown> evento quando o botão tem foco e a tecla pressionada é a barra de espaço. A manipulação de nativa gera o <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos com o botão como a origem e também captura o mouse, mesmo que não são exibidos o ponteiro do mouse mover. Como resultado de captura do mouse, um <xref:System.Windows.UIElement.MouseEnter> evento também é gerado com o botão como a origem. Em geral, se um elemento captura o mouse, em seguida <xref:System.Windows.UIElement.MouseEnter> é gerado, bem como <xref:System.Windows.UIElement.GotMouseCapture> e possivelmente outros eventos específicos do controle.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseEnter%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o ponteiro do mouse sai dos limites deste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave> é uma que usa o estratégia de roteamento de manipulação de eventos direto. Eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, eles permitem que outros aspectos do comportamento do evento roteado, como gatilhos de evento nos estilos.  
  
 Embora <xref:System.Windows.UIElement.MouseLeave> rastreia quando o mouse sai de um elemento, esse evento mais literalmente relata que o <xref:System.Windows.UIElement.IsMouseOver%2A> o valor da propriedade foi alterado de `true` para `false` neste elemento.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.MouseLeave> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.MouseLeave> evento associado subjacente <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseLeave%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão esquerdo do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de propagação pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.MouseLeftButtonDown> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados. Isso possivelmente inclui eventos gerado pelo manipulador de classe, como <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
> [!IMPORTANT]
>  Algumas classes de controle podem ter inerentes a manipulação de classe para eventos do botão do mouse. O botão esquerdo do mouse para baixo de evento é o evento mais provável para ter um controle de manipulação de classe. A classe tratamento geralmente marca subjacente <xref:System.Windows.Input.Mouse> eventos de classe como manipulado. Depois que o evento é marcado como manipulado, outros manipuladores de instância que são anexados a esse elemento não são acionados normalmente. Qualquer outras classe ou instância manipuladores que estão anexados a elementos na direção por propagação na direção da raiz na árvore de interface do usuário também normalmente não são gerados.  
  
 Você pode resolver o problema descrito no item anterior importante e ainda receber <xref:System.Windows.UIElement.MouseLeftButtonDown> eventos para o botão esquerdo do mouse para baixo de eventos em uma classe derivada que tem, usando qualquer uma dessas soluções de manipulação de classe:  
  
-   Anexar manipuladores para o <xref:System.Windows.UIElement.PreviewMouseDown> evento, que não está marcado como manipulado pelos controles. Observe que, como esse é um evento de visualização, a rota é iniciado na raiz e túneis ao controle.  
  
-   Registrar um manipulador no controle de forma procedimental chamando <xref:System.Windows.UIElement.AddHandler%2A> e escolhendo a opção de assinatura que permite que os manipuladores escutar eventos do mesmo se eles já estão marcados como manipulados nos dados do evento roteado.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão esquerdo do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de propagação pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.MouseLeftButtonUp> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o ponteiro do mouse se move enquanto está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.MouseMove> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.MouseMove> evento associado subjacente <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão direito do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de propagação pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.MouseRightButtonDown> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados. Isso possivelmente inclui eventos gerado pelo manipulador de classe, como <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
 Eventos do botão direito do mouse frequentemente têm manipulação nativa em cenários de aplicativo. Por exemplo, um botão direito do mouse para baixo pode exibir um menu de contexto. Ver [visão geral de ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão direito do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de propagação pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.MouseRightButtonUp> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando qualquer botão do mouse é liberado sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.MouseUp> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.MouseUp> evento associado subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 O <xref:System.Windows.UIElement.MouseUp> é normalmente gerado junto com qualquer um <xref:System.Windows.UIElement.MouseLeftButtonUp> ou <xref:System.Windows.UIElement.MouseRightButtonUp>, que correspondem a uma versão de um dos dois botões de mouse padrão. <xref:System.Windows.UIElement.MouseLeftButtonUp> e <xref:System.Windows.UIElement.MouseRightButtonUp> também são eventos roteados, mas eles são eventos roteados diretos e o evento apropriado do botão específico é gerado quando o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento atinge esse elemento ao longo da rota de evento. Consulte os comentários para <xref:System.Windows.UIElement.MouseLeftButtonUp> ou <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário gira a roda do mouse enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Captura de foco ou de mouse têm precedência sobre onde o ponteiro do mouse é; Portanto, se você receber o <xref:System.Windows.UIElement.MouseWheel> eventos de um elemento com foco ou capturado, o ponteiro do mouse, na verdade, pode ser em outro elemento.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.MouseWheel> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.MouseWheel> evento associado subjacente <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Substituir <xref:System.Windows.UIElement.OnMouseWheel%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.MouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Uma solicitação de passagem, que contém uma propriedade que indica um modo para percorrer uma ordem de tabulação existente ou uma direção de movimentação visualmente.</param>
        <summary>Tenta mover o foco deste para outro elemento. A direção para mover o foco é especificada por uma direção de diretrizes, que é interpretada dentro da organização do pai visual deste elemento.</summary>
        <returns><see langword="true" /> se a passagem solicitada foi executada; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verifique se que você verificar o valor de retorno desse método. Um valor retornado de `false` pode ser retornado se a travessia é executado em uma parada de tabulação é definida pela composição de um controle e a solicitação de passagem não solicitou para encapsular.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Os dados de evento para o evento de chave de acesso. Os relatórios de dados de evento cuja chave foi chamada e indica se o objeto <see cref="T:System.Windows.Input.AccessKeyManager" /> que controla o envio desses eventos também envia essa chamada de chave de acesso a outros elementos.</param>
        <summary>Fornece tratamento de classes para quando uma chave de acesso que seja significativa para esse elemento é chamada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Não há nenhum evento AccessKey real no <xref:System.Windows.UIElement> classe ou em outro lugar, que você pode gerar ou anexar manipuladores para. Em vez disso, é a origem do evento por meio de uma classe de gerenciamento dedicada, <xref:System.Windows.Input.AccessKeyManager>, que todas as entradas para pesquisar as chaves de acesso que se aplicam a todo o modelo de entrada pós-processamento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>A implementação padrão desse método na <see cref="T:System.Windows.UIElement" /> define o foco para esse elemento de teclado (chamando <see cref="M:System.Windows.UIElement.Focus" />). Implementações devem manter esse comportamento se eles forem focalizáveis, porque ele é um comportamento esperado para cenários de acessibilidade. Observe que a implementação base não faz nada com os dados passados pelo evento e não gera nenhum evento adicional; Ele apenas define o foco.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">O elemento filho que está sendo redimensionado.</param>
        <summary>Dá suporte ao comportamento de layout quando um elemento filho é redimensionado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, esse método não é chamado pelo código do aplicativo. Ele é exposto para que esse elemento derivado classes podem tornar mais verificações em seu próprio estado de layout possivelmente inválido. As classes também poderá tentar otimizações para minimizar o tempo de processamento de uma passagem de layout com base nas alterações de tamanho para os elementos filho. Um exemplo derivados de classe de elemento que implementa <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> é o <xref:System.Windows.Controls.Grid> controle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> a implementação padrão de chamada do método tem <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> em si mesmo. Uma implementação típica seria: fazer qualquer otimização seu próprio elemento dá suporte a e, em seguida, normalmente chama base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> de pelo menos uma das ramificações de código (aquele que indicado o estado "sujo" por sua própria lógica de cache de medida).  
  
Esse método é chamado somente no layout de processamento se fosse o próprio filho que originou as alterações de tamanho. Caso contrário, se o elemento pai inicia a <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> passar, acordo com as regras do sistema de layout, o pai está recalculando layout já. O sistema de layout processa o layout na ordem filho-pai, portanto, nenhum retorno ao dimensionamento do elemento pai das chamadas de layout do elemento filho é necessário.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna implementações de <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> específicas à classe para a infra-estrutura de [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>A implementação de <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> específica ao tipo.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>A implementação desse método é normalmente chamar o construtor de um determinado <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementação e retorná-lo como o valor de retorno.  
  
Todos os <see cref="T:System.Windows.UIElement" /> classes derivadas devem implementar esse método para fornecer suas próprias específicos <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementações para o [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infraestrutura. Para obter detalhes sobre como implementar esse padrão, consulte <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.DragEnter" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.DragLeave" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.DragOver" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.DragEnter" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.GiveFeedbackEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.GiveFeedback" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.RoutedEventArgs" /> que contém dados do evento. Esses dados de evento devem conter o identificador para o evento <see cref="E:System.Windows.UIElement.GotFocus" />.</param>
        <summary>Gera o evento roteado <see cref="E:System.Windows.UIElement.GotFocus" /> usando os dados de evento fornecidos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método, embora virtual, têm uma implementação padrão que aciona o evento.  
  
 Isso em * implementação do método destina-se para gerar o evento, e essa mesma implementação de método é chamada internamente para aumentar o evento quando o <xref:System.Windows.UIElement.IsFocused%2A> alterações de valor de propriedade. O <xref:System.Windows.UIElement.OnGotFocus%2A> difere de implementação de algum outro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] em * implementações, que fornecem apenas uma maneira conveniente de adicionar a manipulação de classe para que o evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>A menos que você tenha uma necessidade deliberada e incomuns não geram os eventos de foco, certifique-se de que sua implementação chama a implementação base. Caso contrário, o <see cref="E:System.Windows.UIElement.GotFocus" /> evento não é acionado durante as operações típicas de usuário que normalmente define o foco para esse elemento. Se você não pretender seu elemento a ser focalizáveis, você pode impedir que o elemento focalizável definindo <see cref="P:System.Windows.UIElement.Focusable" /> para <see langword="false" />.</para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classes para os eventos roteados <see cref="E:System.Windows.UIElement.GotTouchCapture" /> que ocorrem quando um toque é capturado para esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnGotTouchCapture%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnGotTouchCapture%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.GotTouchCapture> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnGotTouchCapture%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método virtual é gerado quando o valor da <xref:System.Windows.UIElement.IsKeyboardFocused%2A> alterações de propriedade de dependência. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> com essa mesma instância de dados de evento é gerado. Observe que o <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> não é um evento roteado. Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado pouco antes do evento <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> ser gerado por este elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método virtual é gerado quando o valor da <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> alterações de propriedade de dependência. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> com essa mesma instância de dados de evento é gerado. Observe que o <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> não é um evento roteado. Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método virtual é gerado quando o valor da <xref:System.Windows.UIElement.IsMouseCaptured%2A> propriedade de dependência altera seu valor. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsMouseCapturedChanged> com essa mesma instância de dados de evento é gerado. Observe que o <xref:System.Windows.UIElement.IsMouseCapturedChanged> não é um evento roteado; Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Esse método virtual é gerado quando o valor da <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> propriedade de dependência altera seu valor. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> com essa mesma instância de dados de evento é gerado. Observe que o evento não é um evento roteado. Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método virtual é gerado quando o valor da <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> propriedade de dependência altera seu valor. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> com essa mesma instância de dados de evento é gerado. Observe que o <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> não é um evento roteado. Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método virtual é gerado quando o valor da <xref:System.Windows.UIElement.IsStylusCaptured%2A> propriedade de dependência altera seu valor. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsStylusCapturedChanged> com essa mesma instância de dados de evento é gerado. Observe que o evento não é um evento roteado. Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método virtual é gerado quando o valor da <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> propriedade de dependência altera seu valor. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> com essa mesma instância de dados de evento é gerado. Observe que o evento não é um evento roteado. Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método virtual é gerado quando o valor da <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> propriedade de dependência altera seu valor. O método virtual é gerado pela primeira vez e pode manipular os dados de eventos conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> com essa mesma instância de dados de evento é gerado. Observe que o evento não é um evento roteado. Portanto, você não pode marcá-la como tratada no manipulador de classe.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pressionamentos de tecla são tratados por um Gerenciador de entrada dedicado. Outros recursos de programação que dependem de pressionamentos de teclas, por exemplo, associações de entrada e comandos, podem manipular o pressionamento de tecla antes que ele é exposto como um pressionamento de tecla geral. Se esses entrada recursos do sistema marcam o evento como manipulado, em seguida, <xref:System.Windows.UIElement.OnKeyDown%2A> não é invocado.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pressionamentos de tecla são tratados por um Gerenciador de entrada dedicado. Outros recursos de programação que dependem de pressionamentos de teclas, por exemplo, associações de entrada e comandos, podem manipular o pressionamento de tecla antes que ele é exposto como um pressionamento de tecla geral. Se esses entrada recursos do sistema marcam o evento como manipulado, em seguida, <xref:System.Windows.UIElement.OnKeyUp%2A> não é invocado.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.RoutedEventArgs" /> que contém dados do evento. Esses dados de evento devem conter o identificador para o evento <see cref="E:System.Windows.UIElement.LostFocus" />.</param>
        <summary>Gera o evento roteado <see cref="E:System.Windows.UIElement.LostFocus" /> usando os dados de evento fornecidos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método, embora virtual, têm uma implementação padrão que aciona o evento.  
  
 Isso em * implementação do método destina-se para gerar o evento, e essa mesma implementação de método é chamada internamente para aumentar o evento quando o <xref:System.Windows.UIElement.IsFocused%2A> alterações de valor de propriedade. Essa implementação é diferente de algum outro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] em * implementações, que fornecem apenas uma maneira conveniente de adicionar a manipulação de classe para que o evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>A menos que você tenha uma necessidade deliberada e incomuns não geram os eventos de foco, certifique-se de que sua implementação chama a implementação base. Caso contrário, o <see cref="E:System.Windows.UIElement.LostFocus" /> evento não é acionado durante as operações típicas de usuário que normalmente define o foco para esse elemento. Se você não pretender seu elemento a ser focalizáveis, você pode impedir que o elemento focalizável definindo <see cref="P:System.Windows.UIElement.Focusable" /> para <see langword="false" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contém dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseEventArgs" /> que contém dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classes para o evento roteado <see cref="E:System.Windows.UIElement.LostTouchCapture" /> que ocorre quando este elemento perde a captura de toque.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnLostTouchCapture%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnLostTouchCapture%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.LostTouchCapture> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnLostTouchCapture%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Os dados do evento.</param>
        <summary>Chamado quando o evento <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> ocorre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> eventos. Certifique-se de chamar o <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> método da classe base para classes que base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Os dados do evento.</param>
        <summary>Chamado quando o evento <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> ocorre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnManipulationCompleted%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnManipulationCompleted%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.ManipulationCompleted> eventos. Certifique-se de chamar o <xref:System.Windows.UIElement.OnManipulationCompleted%2A> método da classe base para classes que base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Os dados do evento.</param>
        <summary>Chamado quando o evento <see cref="E:System.Windows.UIElement.ManipulationDelta" /> ocorre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnManipulationDelta%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnManipulationDelta%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.ManipulationDelta> eventos. Certifique-se de chamar o <xref:System.Windows.UIElement.OnManipulationDelta%2A> método da classe base para classes que base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Os dados do evento.</param>
        <summary>Chamado quando o evento <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> ocorre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.ManipulationInertiaStarting> eventos. Certifique-se de chamar o <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> método da classe base para classes que base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Os dados do evento.</param>
        <summary>Chamado quando o evento <see cref="E:System.Windows.UIElement.ManipulationStarted" /> ocorre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnManipulationStarted%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnManipulationStarted%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.ManipulationStarted> eventos. Certifique-se de chamar o <xref:System.Windows.UIElement.OnManipulationStarted%2A> método da classe base para classes que base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classes para o evento <see cref="E:System.Windows.UIElement.ManipulationStarting" /> roteado que ocorre quando o processador de manipulação é criado pela primeira vez.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnManipulationStarting%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnManipulationStarting%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.ManipulationStarting> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnManipulationStarting%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Esses dados de evento relatam detalhes sobre o botão do mouse que foi pressionado e o estado tratado.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.MouseDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ações de botão do mouse também são manipuladas por um gerente de entrada dedicado. Outros recursos de programação que dependem de ações de botão do mouse, como entrada e associações de comando, poderão invocar manipuladores para a ação antes que ele é exposto como uma ação do botão do mouse geral. Se esses marca de recursos do sistema de entrada a <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento como manipulado, <xref:System.Windows.UIElement.OnMouseDown%2A> não é invocado.  
  
 Se você usar esse manipulador de classe para marcar o evento como manipulado, você potencialmente afeta os seguintes eventos: <xref:System.Windows.UIElement.MouseLeftButtonDown> e <xref:System.Windows.UIElement.MouseRightButtonDown>. Qualquer um desses eventos podem ser gerado no elemento de recebimento quando <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> é recebida.  
  
 Se você marcar esse evento como manipulado no tratamento de classes, ainda são acionados subevents; No entanto, eles passam o estado manipulado nos dados do evento. Se o evento é manipulado na manipulação de classe, os manipuladores de instância para os subevents não são invocados, a menos que use explicitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> com `handledEventsToo` `true` para anexar manipuladores. Manipuladores de classe também não são invocados, a menos que esses manipuladores de classe foram registrados com o <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> assinatura com `handledEventsToo` `true`. Manipulando <xref:System.Windows.UIElement.OnMouseDown%2A>, você está indicando que sua manipulação de classe levados em conta todos os botão do mouse possíveis velocidade das ações de. Esse comportamento pode ser indesejado; Portanto, tenha cuidado ao usar esse método virtual para marcar eventos como manipulados.  
  
 Cada um dos eventos diretos específicos do botão também tem uma máquina virtual * método; Considere se substituir esses manipuladores de classe específica de botão pode ser mais apropriado.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado, com uma estratégia de roteamento direto. Marcar o evento como manipulado ainda é útil para que os manipuladores de instância típico (aqueles que não especificam `handledEventsToo`) seja chamado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado, com uma estratégia de roteamento direto. Marcar o evento como manipulado ainda é útil para que os manipuladores de instância típico (aqueles que não especificam `handledEventsToo`) seja chamado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão esquerdo do mouse foi pressionado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> sem tratamento é gerado nesse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.MouseLeftButtonDown> evento parece uma rota de propagação de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> o evento subjacente que é roteada de bolha, e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.MouseLeftButtonDown>. Embora você pode marcar o <xref:System.Windows.UIElement.MouseLeftButtonDown> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  
  
 Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes de ancestral que também pretende invocar <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Button> e substituir <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> em sua classe derivada sem chamar a implementação base; no entanto, isso substituir desabilita o <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão esquerdo foi liberado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.MouseLeftButtonUp> evento parece uma rota de propagação de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> o evento subjacente que é roteada de bolha, e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.MouseLeftButtonUp>. Embora você pode marcar o <xref:System.Windows.UIElement.MouseLeftButtonUp> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.MouseMove" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão direito do mouse foi pressionado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.MouseRightButtonDown> evento parece uma rota de propagação de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> o evento subjacente que é roteada de bolha, e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.MouseRightButtonDown>. Embora você pode marcar o <xref:System.Windows.UIElement.MouseRightButtonDown> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  
  
 Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes de ancestral que também pretende invocar <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Control> e substituir <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> em sua classe derivada sem base chamada; no entanto, essa substituição desativa os serviços de menu de contexto em seu controle, que fazem parte do <xref:System.Windows.Controls.Control> comportamento padrão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão direito do mouse foi liberado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.MouseRightButtonUp> evento parece uma rota de propagação de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> o evento subjacente que é roteada de bolha, e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.MouseRightButtonUp>. Embora você pode marcar o <xref:System.Windows.UIElement.MouseRightButtonUp> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão do mouse foi liberado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.Input.Mouse.MouseUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ações de botão do mouse também são manipuladas por um gerente de entrada dedicado. Outros recursos de programação que dependem de ações de botão do mouse, como entrada e associações de comando, poderão invocar manipuladores para a ação antes que ele é exposto como uma ação do botão do mouse geral. Se esses marca de recursos do sistema de entrada a <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento como manipulado, <xref:System.Windows.UIElement.OnMouseUp%2A> não é invocado.  
  
 Se você usar esse manipulador de classe para marcar o evento como manipulado, você potencialmente afeta os seguintes eventos: <xref:System.Windows.UIElement.MouseLeftButtonUp> e <xref:System.Windows.UIElement.MouseRightButtonUp>. Qualquer um desses eventos pode ser disparado no elemento de recebimento quando <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> é recebida.  
  
 Se você marcar esse evento como manipulado no tratamento de classes, ainda são acionados subevents; No entanto, eles passam o estado manipulado nos dados do evento. Se o evento é manipulado na manipulação de classe, os manipuladores de instância para os subevents não são invocados, a menos que use explicitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> com `handledEventsToo` `true` para anexar manipuladores. Manipuladores de classe também não são invocados, a menos que esses manipuladores de classe foram registrados com o <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> assinatura com `handledEventsToo` `true`. Manipulando <xref:System.Windows.UIElement.OnMouseUp%2A>, você está indicando que sua manipulação de classe levados em conta todos os botão do mouse de possíveis ações de. Esse comportamento pode ser indesejado; Portanto, tenha cuidado ao usar esse método virtual para marcar eventos como manipulados.  
  
 Cada um dos eventos diretos específicos do botão também tem uma máquina virtual * método; Considere se substituir esses manipuladores de classe específica de botão pode ser mais apropriado.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.DragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.PreviewDrop" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.GiveFeedbackEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados de evento relatam que um ou mais botões do mouse foram pressionados.</param>
        <summary>Invocado quando um evento roteado anexado <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ações de botão do mouse também são manipuladas por um gerente de entrada dedicado. Outros recursos de programação que dependem de ações de botão do mouse, como entrada e associações de comando, poderão invocar manipuladores para a ação antes que ele é exposto como uma ação do botão do mouse geral. Se esses marca de recursos do sistema de entrada a <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento como manipulado, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> não é invocado.  
  
 Se você usar esse manipulador de classe para marcar o evento como manipulado, você potencialmente afeta os seguintes eventos: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Qualquer um desses eventos podem ser gerado no elemento de recebimento quando <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> é recebida.  
  
 Se você marcar esse evento como manipulado no tratamento de classes, ainda são acionados subevents; No entanto, eles passam o estado manipulado nos dados do evento. Se o evento é manipulado na manipulação de classe, os manipuladores de instância para os subevents não são invocados, a menos que use explicitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> com `handledEventsToo` `true` para anexar manipuladores. Manipuladores de classe também não são invocados, a menos que esses manipuladores de classe foram registrados com o <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> assinatura com `handledEventsToo` `true`. Manipulando <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, você está indicando que sua manipulação de classe levados em conta todos os botão do mouse possíveis velocidade das ações de. Esse comportamento pode ser indesejado; Portanto, tenha cuidado ao usar esse método virtual para marcar eventos como manipulados.  
  
 Cada um dos eventos diretos específicos do botão também tem uma máquina virtual * método; Considere se substituir esses manipuladores de classe específica de botão pode ser mais apropriado.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão esquerdo do mouse foi pressionado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> evento parece uma rota de túnel de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Embora você pode marcar o <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes de ancestral que também pretende invocar <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Button> e substituir <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> em sua classe derivada sem chamar a implementação base; no entanto, isso substituir desabilita o <xref:System.Windows.Controls.Primitives.ButtonBase.Click> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão esquerdo foi liberado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> evento parece uma rota de túnel de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Embora você pode marcar o <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão direito do mouse foi pressionado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> evento parece uma rota de túnel de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.MouseRightButtonDown>. Embora você pode marcar o <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes de ancestral que também pretende invocar <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Control> e substituir <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> em sua classe derivada sem base chamada; no entanto, essa substituição desativa os serviços de menu de contexto em seu controle, que fazem parte do <xref:System.Windows.Controls.Control> comportamento padrão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados do evento relatam que o botão direito do mouse foi liberado.</param>
        <summary>Invocado quando um evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> evento parece uma rota de túnel de viagem, mas, na verdade, viaja de forma indireta. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.UIElement> ao longo do evento rota usa o tratamento de idêntico para gerar o evento roteado direto <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Embora você pode marcar o <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> evento como manipulado para fins desse elemento, o estado manipulado não perpetuada a outros elementos ao longo da rota de evento. No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.  
  
 A implementação padrão para mouse geral tratamento de eventos em <xref:System.Windows.UIElement> escuta <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e o converte em um evento local apropriado. Se você quiser substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Não é possível alterar o comportamento de manipulação de mouse <xref:System.Windows.UIElement> substituindo <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> que contém os dados do evento. Os dados de evento informam que um ou mais botões do mouse foram soltos.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ações de botão do mouse também são manipuladas por um gerente de entrada dedicado. Outros recursos de programação que dependem de ações de botão do mouse, como entrada e associações de comando, poderão invocar manipuladores para a ação antes que ele é exposto como uma ação do botão do mouse geral. Se esses marca de recursos do sistema de entrada a <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento como manipulado, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> não é invocado.  
  
 Se você usar esse manipulador de classe para marcar o evento como manipulado, você potencialmente afeta os seguintes eventos: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Qualquer um desses eventos pode ser disparado no elemento de recebimento quando <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> é recebida.  
  
 Se você marcar esse evento como manipulado no tratamento de classes, ainda são acionados subevents; No entanto, eles passam o estado manipulado nos dados do evento. Se o evento é manipulado na manipulação de classe, os manipuladores de instância para os subevents não são invocados, a menos que use explicitamente <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> com `handledEventsToo` `true` para anexar manipuladores. Manipuladores de classe também não são invocados, a menos que esses manipuladores de classe foram registrados com o <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> assinatura com `handledEventsToo` `true`. Manipulando <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, você está indicando que sua manipulação de classe levados em conta todos os botão do mouse de possíveis ações de. Esse comportamento pode ser indesejado; Portanto, tenha cuidado ao usar esse método virtual para marcar eventos como manipulados.  
  
 Cada um dos eventos diretos específicos do botão também tem uma máquina virtual * método; Considere se substituir esses manipuladores de classe específica de botão pode ser mais apropriado.  
  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.QueryContinueDragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusDownEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado. Outro cenário é especificamente para eventos de visualização é marcá-los tratado para que os manipuladores de classe de propagação correspondentes não são invocados.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classes para os eventos roteados <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> que ocorrem quando um toque pressiona esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.PreviewTouchDown> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece manipulação de classes para o evento roteado <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> que ocorre quando há uma movimentação de toque nesse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.PreviewTouchMove> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classe para os eventos roteados <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> que ocorrem quando um toque é liberado dentro desse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.PreviewTouchUp> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.QueryContinueDragEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">As instruções de desenho para um elemento específico. Esse contexto é fornecido para o sistema de layout.</param>
        <summary>Quando substituído em uma classe derivada, participa de operações de renderização direcionadas pelo sistema de layout. As instruções de renderização para esse elemento não são usadas diretamente quando este método é invocado e, em vez disso, são preservadas para serem usadas posteriormente de forma assíncrona pelo layout e desenho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão <xref:System.Windows.UIElement> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação possível de uma classe derivada de painel.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> método pode ser substituído para adicionar o elementos gráficos (não definidos previamente em uma árvore lógica) para um elemento de renderizado, como efeitos ou adornos. Um <see cref="T:System.Windows.Media.DrawingContext" /> objeto é passado como um argumento, que fornece métodos para desenhar formas, texto, imagens ou vídeos.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">Os parâmetros empacotados (<see cref="T:System.Windows.SizeChangedInfo" />), que incluem tamanhos novos e antigos e cuja dimensão é realmente alterada.</param>
        <summary>Quando substituído em uma classe derivada, participa de operações de renderização direcionadas pelo sistema de layout. Esse método será invocado após a atualização do layout e antes da renderização se o <see cref="P:System.Windows.UIElement.RenderSize" /> do elemento tiver sido alterado como resultado da atualização do layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Um elemento de nível de framework WPF típico usa a implementação de substituição de <xref:System.Windows.FrameworkElement>. O <xref:System.Windows.FrameworkElement> implementação invalida as <xref:System.Windows.FrameworkElement.Width%2A> e <xref:System.Windows.FrameworkElement.Height%2A> propriedades e manipula as Noções básicas de recriando o layout. Substituindo <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> no <xref:System.Windows.UIElement> nível implica que sua implementação de elemento deliberadamente não está usando a implementação de nível de framework WPF e, portanto, o elemento deve lidar com lógica de layout mais diretamente, normalmente, escrevendo um sistema de layout de substituição.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusDownEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusDown" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> sem tratamento é gerado por esse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. Marcar o evento como manipulado ainda é útil para impedir a manipuladores de instância típico (aqueles que não especificam `handledEventsToo`) seja chamado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> sem tratamento é gerado por esse elemento. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação. Você pode chamar base antes ou depois de seu tratamento especial, dependendo dos seus requisitos.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. Marcar o evento como manipulado ainda é útil para impedir a manipuladores de instância típico (aqueles que não especificam `handledEventsToo`) seja chamado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusMove" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.StylusEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.Stylus.StylusUp" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">O <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> que contém os dados do evento.</param>
        <summary>Invocado quando um evento anexado <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> sem tratamento atinge um elemento em sua rota que deriva dessa classe. Implemente esse método para adicionar tratamento de classe a esse evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Porque uma classe intermediária na herança de pode implementar esse método, é recomendável que você chame a implementação base em sua implementação.  
  
 A finalidade desse método é semelhante ao [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para eventos roteados porque um evento roteado pode ser gerado por um elemento filho, que não é necessariamente o elemento que invocará os manipuladores. Portanto, sua implementação precisa examinar as propriedades de fonte de dados do evento. Ele não deve tentar reraise o evento na maioria dos casos.  
  
 Substituindo esse método ou registrando classe manipuladores com <xref:System.Windows.EventManager.RegisterClassHandler%2A>, classes derivadas de <xref:System.Windows.UIElement> pode chamar métodos do manipulador de classe privada quando o evento é recebido ao longo da rota de evento. É um cenário onde a manipulação de classe é apropriada manipular os dados do evento e marcar o evento roteado como manipulado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classes para os eventos roteados <see cref="E:System.Windows.UIElement.TouchDown" /> que ocorrem quando há um toque nesse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnTouchDown%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnTouchDown%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.TouchDown> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnTouchDown%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classes para os eventos roteados de <see cref="E:System.Windows.UIElement.TouchEnter" /> que ocorre quando um toque é movido de fora para dentro dos limites deste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnTouchEnter%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnTouchEnter%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.TouchEnter> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnTouchEnter%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classe para os eventos roteados <see cref="E:System.Windows.UIElement.TouchLeave" /> que ocorre quando um toque é movido de dentro para fora dos limites deste <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnTouchLeave%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnTouchLeave%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.TouchLeave> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnTouchLeave%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece manipulação de classes para o evento roteado <see cref="E:System.Windows.UIElement.TouchMove" /> que ocorre quando há uma movimentação de toque nesse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnTouchMove%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnTouchMove%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.TouchMove> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnTouchMove%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Input.TouchEventArgs" /> que contém os dados do evento.</param>
        <summary>Fornece tratamento de classe para os eventos roteados <see cref="E:System.Windows.UIElement.TouchUp" /> que ocorrem quando um toque é liberado dentro desse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.OnTouchUp%2A> método não tem nenhuma implementação padrão. Substituir <xref:System.Windows.UIElement.OnTouchUp%2A> em uma classe derivada para manipular o <xref:System.Windows.UIElement.TouchUp> eventos. Certifique-se de chamar a classe base <xref:System.Windows.UIElement.OnTouchUp%2A> , de modo que classes base receber o evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">O pai anterior. Pode ser fornecido como <see langword="null" /> se o <see cref="T:System.Windows.DependencyObject" /> não teve um elemento pai anteriormente.</param>
        <summary>Invocado quando o elemento pai desse <see cref="T:System.Windows.UIElement" /> relata uma alteração ao seu pai visual subjacente.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Se você substituir esse método, sempre chame a implementação base. A implementação de base padrão executa algumas manutenção interna do estado de propriedade herdada em ordem inversa. Falha ao chamar a implementação base invalidará nesse estado.  
  
Este método substitui <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> e <see cref="T:System.Windows.Window" /> ambos também substituem o <see cref="T:System.Windows.UIElement" /> implementação <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, e <see cref="T:System.Windows.Window" /> lacra a ele.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o fator de opacidade aplicado a todo o <see cref="T:System.Windows.UIElement" /> quando ele é renderizado no [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  É uma propriedade de dependência.</summary>
        <value>O fator de opacidade. A opacidade padrão é 1.0. Os valores esperados estão entre 0.0 e 1.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor padrão de 1.0 é o padrão fornecido pelos metadados inicial desta propriedade de dependência no <xref:System.Windows.UIElement> classe. Outras classes derivadas potencialmente podem alterar esse valor padrão, substituindo os metadados de dentro de seu construtor de classe.  
  
 O valor de <xref:System.Windows.UIElement.Opacity%2A> não será aplicado ao layout real, a menos que o elemento também é visível (<xref:System.Windows.UIElement.IsVisible%2A> é `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A> é aplicada de elementos pai abaixo da árvore de elemento para elementos filho, mas os efeitos visíveis a opacidade aninhada configurações não são indicadas no valor da propriedade de elementos filho individuais. Por exemplo, se uma lista tem uma opacidade de 50% (0,5) e um de seus itens de lista tem seu próprio opacidade definida como 20% (0.2), a opacidade visível net para aquele item de lista será renderizada como se fosse 10% (0,1), mas o valor da propriedade do item de lista <xref:System.Windows.UIElement.Opacity%2A> propriedade ainda seria  0,2 quando consultada.  
  
 Mesmo se a opacidade avaliada ou declarada é 0, um elemento ainda participa de comandos e eventos de entrada e é potencialmente focalizável. Esse aspecto pode ser útil, por exemplo, você pode usar um objeto de opacidade de zero (como uma forma) para objetos subjacentes com elementos transparentes de mascaramento. O objeto de opacidade de zero, em seguida, pode lidar com todos os eventos de entrada de processamento de uma área subjacente. No entanto, o `Background` ou `Fill` do objeto ou da forma deve ser definido como um valor, mesmo se for <xref:System.Windows.Media.Brushes.Transparent%2A>, caso contrário, o teste de clique não está habilitado e nenhum evento for recebido.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.OpacityProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma máscara de opacidade como uma implementação de <see cref="T:System.Windows.Media.Brush" /> que é aplicada a qualquer mascaramento de canal alfa para o conteúdo renderizado deste elemento.  É uma propriedade de dependência.</summary>
        <value>O pincel a ser usado para o mascaramento de opacidade.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade só usa tudo o que o valor de canal alfa é fornecido <xref:System.Windows.Media.Brush>. Outros canais do <xref:System.Windows.Media.Brush>processada do conteúdo (vermelho, verde ou azul) são ignorados.  
  
 A mais comum <xref:System.Windows.Media.Brush> para esta finalidade é um <xref:System.Windows.Media.ImageBrush>, que pode ser usado para uma variedade de técnicas como um vignette de mascaramento de fotos. Mas qualquer definidas <xref:System.Windows.Media.Brush> (como <xref:System.Windows.Media.LinearGradientBrush>) pode ser usado.  
  
 Na [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], esse valor de propriedade pode usar uma sintaxe embutida que é específica para cada implementação do <xref:System.Windows.Media.Brush> classe abstrata. Para obter mais informações, consulte [pintura com cores sólidas e gradientes Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo de marcação a seguir mostra uma <xref:System.Windows.Media.ImageBrush> máscara de opacidade aplicada a outro <xref:System.Windows.Controls.Image>.  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.OpacityMask" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.Opacity" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que identifica esse objeto de forma exclusiva.</summary>
        <value>O identificador exclusivo desse elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A> identifica exclusivamente cada elemento. Um elemento mantém o mesmo <xref:System.Windows.UIElement.PersistId%2A> toda vez que o mesmo [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] é carregado (incluindo representações binárias). Esse identificador é usado para obter os requisitos de carregamento, análise e serialização internos. Ele não se destina a ser usado pelo código do aplicativo.  
  
 Essa propriedade não tem relação com o <xref:System.Object.GetHashCode%2A> resultado para qualquer determinada instância.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">A direção da passagem do foco solicitada.</param>
        <summary>Quando substituído em uma classe derivada, retorna o elemento que deve receber o foco para uma direção de passagem do foco especificada, sem realmente mover o foco para esse elemento.</summary>
        <returns>O elemento que teria recebido foco, se <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> realmente fosse invocado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão desse método nesta classe está incompleta e sempre retorna `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento arrastar subjacente com este elemento como o destino de arrastar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewDragEnter> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewDragEnter> evento associado subjacente <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.DragEnter>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewDragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento arrastar subjacente com este elemento como a origem de arrastar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewDragLeave> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewDragLeave> evento associado subjacente <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.DragLeave>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewDragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento do tipo "arrastar" subjacente com esse elemento como a reprodução automática potencial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewDragOver> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewDragOver> evento associado subjacente <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.DragOver>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewDragOver%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewDragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o sistema de entrada relata um evento soltar subjacente com esse elemento sendo uma reprodução automática.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewDrop> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewDrop> evento associado subjacente <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.DragEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.Drop>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewDrop%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewDrop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma operação de arrastar e soltar se inicia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.PreviewGiveFeedback> evento permite que a origem de um evento de arrastar para modificar a aparência do ponteiro do mouse, para dar ao usuário feedback visual durante uma operação de arrastar e soltar.  
  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewGiveFeedback> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewGiveFeedback> evento associado subjacente <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o teclado está focalizado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como este evento usa o encapsulamento de roteamento, o elemento que tem o foco pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que tem o foco.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> evento associado subjacente <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma tecla é pressionada enquanto o foco está neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manipulação de chave interage com outros recursos de plataforma, como a composição de texto e dos comandos. O <xref:System.Windows.UIElement.KeyDown> é um evento de entrada de texto de nível inferior pode não se comportar conforme o esperado em certos controles. Isso ocorre porque alguns controles têm a composição de controle ou manipulação de classe que fornece uma versão de nível mais alto de texto, manipulação de entrada e eventos relacionados.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewKeyDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewKeyDown> evento associado subjacente <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.KeyDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewKeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma chave é liberada enquanto o foco está neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manipulação de chave interage com outros recursos de plataforma, como a composição de texto e dos comandos. O <xref:System.Windows.UIElement.KeyUp> é um evento de entrada de texto de nível inferior pode não se comportar conforme o esperado em certos controles. Isso ocorre porque alguns controles têm a composição de controle ou manipulação de classe que fornece uma versão de nível mais alto de texto, manipulação de entrada e eventos relacionados. Para obter detalhes, consulte a documentação de controles individuais.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewKeyUp> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewKeyUp> evento associado subjacente <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.KeyUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewKeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o teclado não está mais focalizado neste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como este evento usa o encapsulamento de roteamento, o elemento que perdeu o foco pode ser um elemento filho em vez do elemento no qual o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A> nos dados do evento para determinar o elemento real que perdeu o foco.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> evento associado subjacente <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando qualquer botão do mouse é pressionado enquanto o ponteiro está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewMouseDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewMouseDown> evento associado subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 O <xref:System.Windows.UIElement.PreviewMouseDown> é normalmente gerado junto com qualquer um <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, que correspondem a um pressionamento de um dos dois botões de mouse padrão. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> também são eventos roteados, mas eles são eventos roteados diretos e o evento apropriado do botão específico é gerado quando o <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento atinge esse elemento ao longo da rota de evento. Consulte os comentários para <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.MouseDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão esquerdo do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de túnel pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados. Isso possivelmente inclui eventos gerado pelo manipulador de classe, como <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão esquerdo do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de túnel pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o ponteiro do mouse se move enquanto está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento ocorre quando o ponteiro do mouse entra pela primeira vez em que os limites do elemento, e também quando o ponteiro do mouse se move enquanto ainda permanecem dentro dos limites do elemento.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewMouseMove> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewMouseMove> evento associado subjacente <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.MouseMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão direito do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de túnel pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados. Isso possivelmente inclui eventos gerado pelo manipulador de classe, como <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão direito do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Embora isso pareça seguem uma rota de túnel pela árvore de elemento, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.UIElement>.  
  
 Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, que é um evento anexado que é processado por cada elemento ao longo de uma rota de evento.  
  
 Os dados do evento desse evento expõe os dados do evento de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> eventos. Se esse evento é marcado como manipulado ao longo da rota de evento, os eventos específicos do botão do mouse ainda são acionados; No entanto, os manipuladores dos eventos específicos para o botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento. Se você marcar <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> tratadas, você essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> manipulado para todas as outras escutas ao longo da rota e em todos os eventos relacionados.  
  
 Conceitualmente, pensar esse evento (e outros eventos do botão do mouse em <xref:System.Windows.UIElement>) para ser um "serviço" do mouse (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse> classe). O evento adiciona a conveniência de não precisar verificar os estados do botão do mouse (esquerda-direita, superior / inferior) dos eventos originais do mouse nos dados do evento. Para cenários mais avançados, como a verificação de estados de botões não padrão, você talvez precise usar o [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sobre o <xref:System.Windows.Input.Mouse> classe em vez no <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando qualquer botão do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewMouseUp> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewMouseUp> evento associado subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 O <xref:System.Windows.UIElement.PreviewMouseUp> é normalmente gerado junto com qualquer um <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, que correspondem a um pressionamento de um dos dois botões de mouse padrão. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> também são eventos roteados, mas eles são eventos roteados diretos e o evento apropriado do botão específico é gerado quando o <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento atinge esse elemento ao longo da rota de evento. Consulte os comentários para <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.MouseUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário gira a roda do mouse enquanto o ponteiro do mouse está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Captura de foco ou de mouse têm precedência sobre onde o ponteiro do mouse é; Portanto, se você receber esse evento de um elemento com foco ou capturado, o ponteiro do mouse, na verdade, pode ser em outro elemento.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewMouseMove> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewMouseMove> evento associado subjacente <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewMouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando há uma alteração no estado do botão do teclado ou do mouse durante uma operação de arrastar e soltar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.PreviewQueryContinueDrag> evento permite que a origem do arrasto declarar se a operação de arrastar e soltar deve ser cancelada.  
  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewQueryContinueDrag> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewQueryContinueDrag> evento associado subjacente <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão da caneta é pressionado enquanto o ponteiro está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusButtonDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusButtonDown> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [suporte de entrada de toque no Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) e [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão da caneta é liberado enquanto o ponteiro está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusButtonUp> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusButtonUp> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta toca o digitalizador enquanto está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusDown> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta se move sobre um elemento sem tocar de fato o digitalizador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusInAirMove> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusInAirMove> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta está sobre este elemento e perto o suficiente do digitalizador para ser detectada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusInRange> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusInRange> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta se move enquanto está sobre o elemento. A caneta deverá se mover enquanto estiver sendo detectada pelo digitalizador para gerar este evento, caso contrário, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> será gerado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusMove> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusMove> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta está longe demais do digitalizador para ser detectada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusOutOfRange> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusOutOfRange> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário executa um dos diversos gestos da caneta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter informações sobre gestos da caneta, consulte <xref:System.Windows.Input.SystemGesture>.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusSystemGesture> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusSystemGesture> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário retira a caneta do digitalizador enquanto ela está sobre esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewStylusDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewStylusDown> evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.StylusUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewStylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento obtém texto de forma independente de dispositivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.UIElement.PreviewTextInput> evento permite que um componente ou aplicativo para escutar a entrada de texto de forma independente de dispositivo. O teclado é o principal meio de <xref:System.Windows.UIElement.PreviewTextInput>; mas outros dispositivos de entrada de fala e manuscrito também podem gerar <xref:System.Windows.UIElement.PreviewTextInput>.  
  
 Por causa de combinações de teclas - em teclados padrão ou por meio de editores de método de entrada - vários eventos de chave podem gerar apenas um evento de entrada de texto.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.PreviewTextInput> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.PreviewTextInput> evento associado subjacente <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.TextInput>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewTextInput%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewTextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um dedo toca a tela enquanto está sobre esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, o <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> eventos não ocorrem até que um dedo toca na tela e move. Pressionando um dedo na tela e mantendo sem movê-lo faz com que o toque e mantenha o comportamento de um <xref:System.Windows.Input.Stylus>. O comportamento de pressionar e segurar é equivalente ao botão direito do mouse.  
  
 Para fazer com que o <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> eventos ocorram, assim que um dedo toca a tela, defina as <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> anexado à propriedade `false` para este elemento.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.TouchDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewTouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um dedo se move na tela enquanto está sobre esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.TouchMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewTouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um dedo é gerado fora da tela enquanto o dedo está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Estratégia de roteamento|O túnel|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   O evento por propagação correspondente é <xref:System.Windows.UIElement.TouchUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.PreviewTouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando há uma alteração no estado do botão do teclado ou do mouse durante uma operação de arrastar e soltar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O evento <xref:System.Windows.UIElement.QueryContinueDrag> permite que a fonte de arrastar determine se a operação do tipo "arrastar e soltar" deve ser cancelada.  
  
 Esse evento cria um alias para o <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.QueryContinueDrag> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.QueryContinueDrag> evento associado subjacente <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Substituir <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.QueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a exibição do cursor é solicitada. Este evento é gerado em um elemento toda vez que o ponteiro do mouse se move para uma nova localização, o que significa que o objeto de cursor talvez precise ser alterado de acordo com sua nova posição.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.QueryCursor> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.QueryCursor> evento associado subjacente <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 O cursor está sendo referenciado por este nome de evento não é necessariamente o cursor de texto (também conhecido como o ponto de inserção). Em vez disso, o cursor neste contexto é o objeto que declara a exibição gráfica na tela relacionada a vários dispositivos relacionados à entrada possíveis ou conceitos de programação do Windows. Esse objeto é representado pelo <xref:System.Windows.Input.Cursor> classe no WPF. O sistema de entrada do WPF permite que você altere esse cursor quando ele representa a posição na tela do ponteiro do mouse. Você pode usar valores predefinidos do <xref:System.Windows.Input.Cursors> enumeração, ou você pode declarar um cursor personalizado como um arquivo de imagem.  
  
 Ouvindo o <xref:System.Windows.UIElement.QueryCursor> evento não é uma técnica eficiente para o gerenciamento de cursor. Em vez disso, cada elemento deve definir seu próprio comportamento de cursor com <xref:System.Windows.FrameworkContentElement.Cursor%2A> e <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Você só deve confiar em <xref:System.Windows.UIElement.QueryCursor> se você não estiver usando os elementos de base de nível de framework WPF, ou em extraordinária circunstâncias em que definir o comportamento do cursor em uma base por elemento não atender às suas necessidades. Para obter mais informações sobre como implementar o comportamento do cursor em resposta às <xref:System.Windows.UIElement.QueryCursor>, consulte <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Não há nenhum evento de túnel correspondente definido.  
  
-   Substituir <xref:System.Windows.UIElement.OnQueryCursor%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.QueryCursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.RoutedEventArgs" /> que contém os dados do evento e também identifica o evento a ser acionado.</param>
        <summary>Aciona um evento roteado específico. O <see cref="T:System.Windows.RoutedEvent" /> a ser gerado é identificado na instância <see cref="T:System.Windows.RoutedEventArgs" /> fornecida (como a propriedade <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> desses dados de eventos).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `e` parâmetro é digitado como o tipo de base comum para todos os dados de evento roteado; no entanto, os dados do evento devem ser fornecidos como o tipo de dados de evento mais específico que está disponível para o evento que está sendo gerado, porque <xref:System.Windows.RoutedEventArgs> contêm classes derivadas de propriedades específicas de dados reais que se destinam-se para o evento específico quando ele é gerado.  
  
 <xref:System.Windows.RoutedEventArgs> não é apenas as propriedades de estado para o evento; Ele também identifica qual evento roteado para elevar. Essa acionando o evento padrão e os dados de evento roteado ambos diferem [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] classes de eventos e dados, que normalmente contêm apenas as propriedades que são relacionadas ao evento.  
  
   
  
## Examples  
 O exemplo a seguir cria dados de evento, acrescenta o identificador de evento para os dados e, em seguida, usa a instância de dados de evento para gerar um evento roteado personalizado.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os dispositivos de toque capturados desse elemento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera a captura do mouse, se esse elemento tiver mantido a captura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se esse elemento não pode ser mantida a captura, chamar este método não tem nenhum efeito. Considere verificar o valor de <xref:System.Windows.UIElement.IsMouseCaptured%2A> antes de chamar esse método.  
  
   
  
## Examples  
 O exemplo a seguir é o paralelo ao exemplo fornecido para <xref:System.Windows.UIElement.CaptureMouse%2A>: ele lida com o botão do mouse até o lançamento captura do mouse e habilite novamente a mover o mouse.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera a captura do dispositivo de caneta, se esse elemento tiver mantido a captura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se esse elemento não pode ser mantida a captura, chamar este método não tem nenhum efeito. Considere verificar o valor de <xref:System.Windows.UIElement.IsStylusCaptured%2A> antes de chamar esse método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">O dispositivo a ser liberado.</param>
        <summary>Tenta liberar o dispositivo de toque especificado desse elemento.</summary>
        <returns><see langword="true" /> se o dispositivo de toque estiver liberado; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">O identificador do evento roteado ao qual o manipulador está anexado.</param>
        <param name="handler">A implementação do manipulador específico para remover da coleção de manipuladores de eventos neste elemento.</param>
        <summary>Remove o manipulador de eventos roteados especificado desse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O cenário mais comum para usar esta [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] é quando você implementa o [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] evento "wrapper" que está associado um evento roteado personalizado, especialmente quando você implementa a lógica de "remover" para manipuladores no [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] nível. O exemplo a seguir esta seção ilustra esse cenário de comentários.  
  
 Chamar esse método não tem nenhum efeito se não houvesse nenhum manipulador registrado com os critérios que corresponde aos parâmetros de entrada para a chamada de método.  
  
 Se mais de um manipulador está anexado que correspondeu aos critérios, somente o primeiro manipulador no evento de armazenamento do manipulador é removido. Esse comportamento é consistente com [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] comportamento do `-=` operador.  
  
 Nem `routedEvent` nem `handler` pode ser `null`. A tentativa de fornecer o valor como `null` gerarão uma exceção.  
  
 Este método ignora a `handledEventsToo` informações de parâmetro, que serão fornecidas se o manipulador foi inicialmente adicionada com o <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> assinatura que permite a manipulação de eventos já manipulados. Qualquer tipo de manipulador é removido.  
  
   
  
## Examples  
 O exemplo a seguir usa <xref:System.Windows.UIElement.RemoveHandler%2A> como parte de uma definição de wrapper de evento.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém (ou define) o tamanho de renderização final deste elemento.</summary>
        <value>O tamanho renderizado para este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Não tente definir essa propriedade, em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ou no código, se usando o sistema de layout de nível de framework WPF. Quase todos os cenários de aplicativos típicos usará este sistema de layout. O sistema de layout não respeitará tamanhos definidos no arquivo de <xref:System.Windows.UIElement.RenderSize%2A> propriedade diretamente. O <xref:System.Windows.UIElement.RenderSize%2A> propriedade é declarada gravável somente para habilitar determinado casos que deliberadamente contornar os protocolos de layout típico, como o suporte para a ponte de nível de núcleo do WPF a <xref:System.Windows.Documents.Adorner> classe.  
  
 Essa propriedade pode ser usada para verificar o tamanho de renderização aplicável dentro do sistema de layout, como substituições <xref:System.Windows.UIElement.OnRender%2A> ou <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Um cenário mais comum está manipulando o <xref:System.Windows.FrameworkElement.SizeChanged> substituir eventos com o manipulador de classe ou o <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> eventos.  
  
## Examples  
 O exemplo a seguir mostra como um adorno personalizado usa o <xref:System.Windows.UIElement.RenderSize%2A> valor para criar e dimensionar o gráfico de retângulo que define o adorno, como parte do seu <xref:System.Windows.UIElement.OnRender%2A> implementação.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define informações de transformação que afetam a posição da renderização desse elemento.  É uma propriedade de dependência.</summary>
        <value>Descreve as especificações de transformação de renderização desejadas. O padrão é <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma transformação de renderização não regenerar o tamanho do layout ou renderizar informações de tamanho. Renderizar transformações são usadas normalmente para animação ou aplicação de um efeito temporário a um elemento. Por exemplo, o elemento pode aplicar zoom quando focalizado ou moused sobre ou poderia variação na carga para chamar a atenção para essa parte do [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o ponto central de qualquer transformação de renderização possível declarada por <see cref="P:System.Windows.UIElement.RenderTransform" />, em relação aos limites do elemento.  É uma propriedade de dependência.</summary>
        <value>O valor que declara a transformação de renderização. O valor padrão é um <see cref="T:System.Windows.Point" /> com coordenadas (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> tem um uso um pouco diferentes do padrão do <xref:System.Windows.Point> estrutura de valor, em que o <xref:System.Windows.Point> não representa um local absoluto em um sistema de coordenadas. Em vez disso, os valores entre 0 e 1 são interpretados como um fator para o intervalo do elemento atual em cada x, eixo y. Por exemplo, (0.5,0.5) fará com que a transformação de renderização centralizado no elemento, ou (1,1) colocaria a transformação de renderização na parte inferior direito canto do elemento. <xref:System.Double.NaN> não é um valor aceito.  
  
 Os valores além de 0 e 1 também são aceitos e resultarão em mais efeitos de transformação não convencionais. Por exemplo, se você definir <xref:System.Windows.UIElement.RenderTransformOrigin%2A> (5,5) e, em seguida, aplicar um <xref:System.Windows.Media.RotateTransform>, o ponto de rotação será bem fora dos limites do próprio elemento. A transformação irá girar o elemento ao redor em um círculo grande que se origina além do canto inferior direito. A origem pode estar em algum lugar dentro de seu elemento pai e poderia ser possivelmente fora do quadro ou uma exibição. Valores de ponto negativo são semelhantes, estes serão vá além da parte superior esquerda dos limites.  
  
 Renderizar transformações não afetam o layout e normalmente são usadas para animar ou aplicar um efeito temporário a um elemento.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *xOrigin*  
 O fator de origem horizontal. Isso geralmente é fornecido como um valor entre 0 e 1. Consulte Observações.  
  
 *yOrigin*  
 O fator de origem vertical. Isso geralmente é fornecido como um valor entre 0 e 1. Consulte Observações.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir cria os elementos no código, aplica um <xref:System.Windows.UIElement.RenderTransformOrigin%2A>e, em seguida, aplica um <xref:System.Windows.UIElement.RenderTransform%2A>.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.RenderTransformOrigin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.RenderTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se os processos de serialização devem serializar o conteúdo da propriedade <see cref="P:System.Windows.UIElement.CommandBindings" /> em instâncias dessa classe.</summary>
        <returns><see langword="true" /> se o valor da propriedade <see cref="P:System.Windows.UIElement.CommandBindings" /> precisar ser serializado; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso retornará `true` se <xref:System.Windows.UIElement.CommandBindings%2A> é definido localmente.  
  
 Isso `ShouldSerialize` método é fornecido, pois o <xref:System.Windows.UIElement.CommandBindings%2A> propriedade não tem um valor padrão simples. Este método indica se a propriedade foi alterada do seu valor padrão. Normalmente você invoca esse método se você estiver desenvolvendo um designer ou desenvolver seu próprio controle incorporando um <xref:System.Windows.UIElement>.  
  
 Para obter mais informações, consulte [definindo valores padrão com os métodos ShouldSerialize e redefinir](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se os processos de serialização devem serializar o conteúdo da propriedade <see cref="P:System.Windows.UIElement.InputBindings" /> em instâncias dessa classe.</summary>
        <returns><see langword="true" /> se o valor da propriedade <see cref="P:System.Windows.UIElement.InputBindings" /> precisar ser serializado; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso retornará `true` se <xref:System.Windows.UIElement.InputBindings%2A> é definido localmente.  
  
 Isso `ShouldSerialize` método é fornecido, pois o <xref:System.Windows.UIElement.InputBindings%2A> propriedade não tem um valor padrão simples. Este método indica se a propriedade foi alterada do seu valor padrão. Normalmente você invoca esse método se você estiver desenvolvendo um designer ou desenvolver seu próprio controle incorporando um <xref:System.Windows.UIElement>.  
  
 Para obter mais informações, consulte [definindo valores padrão com os métodos ShouldSerialize e redefinir](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que determina se a renderização para esse elemento deve usar configurações de pixel específica do dispositivo durante a renderização.  É uma propriedade de dependência.</summary>
        <value><see langword="true" /> se o elemento precisar renderizar de acordo com os pixels do dispositivo; caso contrário, <see langword="false" />. O padrão como declarado em <see cref="T:System.Windows.UIElement" /> é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode definir essa propriedade `true` no seu elemento raiz para habilitar o pixel ajustar-se de renderização em toda a interface do usuário. Para dispositivos operando em maior 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel ajuste a renderização pode minimizar artefatos visuais de suavização perto linhas sólidas de unidade única.  
  
 Quando herdada pela <xref:System.Windows.FrameworkElement> ou qualquer possível classes derivadas, <xref:System.Windows.FrameworkElement> substitui os metadados para essa propriedade de dependência definir o <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> propriedade de metadados a `true`. O que isso atinge é que apenas o elemento mais externo em uma subárvore precisa especificar <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> como `true`, e, em seguida, reporta todos os elementos filho nessa subárvore <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> como `true` e terá o <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> efeito visual.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/aa970908(v=vs.90)">Encaixe em aplicativos do WPF em pixels</related>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão da caneta é pressionado enquanto o ponteiro está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusButtonDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusButtonDown> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusButtonDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o botão da caneta é liberado enquanto o ponteiro está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusButtonUp> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusButtonUp> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusButtonUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta toca o digitalizador enquanto está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusDown> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusDown> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta entra nos limites deste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter> é uma que usa o estratégia de roteamento de manipulação de eventos direto. Eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, eles permitem que outros aspectos do comportamento do evento roteado, como gatilhos de evento nos estilos.  
  
 Embora <xref:System.Windows.UIElement.StylusEnter> rastreia quando a caneta entra nos limites de um elemento, esse evento mais literalmente relata que o <xref:System.Windows.UIElement.IsStylusOver%2A> o valor da propriedade foi alterado de `false` para `true` neste elemento.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusEnter> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusEnter> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusEnter%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta se move sobre um elemento sem tocar de fato o digitalizador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusInAirMove> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusInAirMove> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusInAirMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta está sobre este elemento e perto o suficiente do digitalizador para ser detectada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusInRange> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusInRange> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusInRange%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta sai dos limites do elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave> é uma que usa o estratégia de roteamento de manipulação de eventos direto. Eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, eles permitem que outros aspectos do comportamento do evento roteado, como gatilhos de evento nos estilos.  
  
 Embora <xref:System.Windows.UIElement.StylusLeave> rastreia quando a caneta sai dos limites de um elemento, esse evento mais literalmente relata que o <xref:System.Windows.UIElement.IsStylusOver%2A> o valor da propriedade foi alterado de `true` para `false` neste elemento.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusLeave> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusLeave> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusLeave%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta se move sobre este elemento. A caneta deve mover-se enquanto está no digitalizador para gerar este evento. Caso contrário, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> será gerado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusMove> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusMove> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a caneta está sobre o elemento e longe demais do digitalizador para ser detectada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusOutOfRange> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusOutOfRange> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de todos os objetos de plug-in (personalização) de caneta associados a esse elemento.</summary>
        <value>A coleção de plug-ins de caneta como uma coleção especializada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um exemplo de um controle que preenche essa coleção é <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> Adiciona o <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> como um item de coleção, que permite que o <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> para interagir com a entrada de caneta e produzir a renderização exclusiva em resposta a caneta controlado por eventos.  
  
 Para obter informações sobre a criação de plug-ins personalizados que podem receber e interpretar a entrada de caneta, consulte [interceptando entrada da caneta](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 O exemplo a seguir cria uma <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> da instância e adiciona-o para o <xref:System.Windows.UIElement.StylusPlugIns%2A> coleção para uma controle de manuseio de tinta personalizada.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário executa um dos diversos gestos da caneta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre gestos da caneta, consulte <xref:System.Windows.Input.SystemGesture>.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusSystemGesture> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusSystemGesture> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o usuário retira a caneta do digitalizador enquanto ela está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.StylusUp> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.StylusUp> evento associado subjacente <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
 Toque, mouse e entrada de caneta existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnStylusUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.StylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando este elemento obtém texto de forma independente de dispositivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Esse evento já pode ser marcado como manipulados pelas implementações internas de controles compostos. Consulte o comentário abaixo.  
  
 O <xref:System.Windows.UIElement.TextInput> evento já pode ser marcado como manipulados pelas implementações internas de controles compostos. Por exemplo, uma <xref:System.Windows.Controls.TextBox> é um controle composto no qual o <xref:System.Windows.UIElement.TextInput> evento já estiver marcado como manipulado; dentro de sua composição. Controles de fazer isso, porque o controle precisa interpretar alguns tipos de entrada, como teclas de direção, como tendo um significado especial para esse controle. Se você usar <xref:System.Windows.UIElement.PreviewTextInput> como o evento em que você anexa manipuladores para entrada de texto, você poderá receber resultados melhores. Essa técnica contorna a maioria dos casos em que a composição de controle já marcou este evento como manipulado e impede que o seu manipulador de receber o evento ao longo da rota de evento.  
  
 O <xref:System.Windows.UIElement.TextInput> evento permite que um componente ou aplicativo para escutar a entrada de texto de forma independente de dispositivo. O teclado é o principal meio de <xref:System.Windows.UIElement.TextInput>, mas outros dispositivos de entrada de fala e manuscrito também podem gerar <xref:System.Windows.UIElement.TextInput>.  
  
 Por causa de combinações de teclas - em teclados padrão ou por meio de editores de método de entrada - vários eventos de chave podem gerar apenas um evento de entrada de texto.  
  
 Esse evento cria um alias para o <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> anexado a eventos para essa classe, para que <xref:System.Windows.UIElement.TextInput> faz parte da classe a lista de membros quando <xref:System.Windows.UIElement> é herdado como um elemento base. Manipuladores de eventos que estão anexados para o <xref:System.Windows.UIElement.TextInput> evento associado subjacente <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento anexado e receber a mesma instância de dados do evento.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.TextInputEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Substituir <xref:System.Windows.UIElement.OnTextInput%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.TextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contêm um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e o método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de eventos roteados para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um dedo toca a tela enquanto está sobre esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, o <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> eventos não ocorrem até que um dedo toca na tela e move. Pressionando um dedo na tela e mantendo sem movê-lo faz com que o toque e mantenha o comportamento de um <xref:System.Windows.Input.Stylus>. O comportamento de pressionar e segurar é equivalente ao botão direito do mouse.  
  
 Para fazer com que o <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> eventos ocorram, assim que um dedo toca a tela, defina as <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> anexado à propriedade `false` para este elemento.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Substituir <xref:System.Windows.UIElement.OnTouchDown%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.TouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um toque é movido de fora para dentro dos limites deste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento é gerado sempre, se o dispositivo de toque é capturado para esse elemento.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituir <xref:System.Windows.UIElement.OnTouchEnter%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.TouchEnter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém todos os dispositivos de toque capturados para esse elemento.</summary>
        <value>Uma enumeração de objetos <see cref="T:System.Windows.Input.TouchDevice" /> capturados para esse elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém todos os dispositivos de toque que são capturados para esse elemento ou os elementos filho na árvore visual.</summary>
        <value>Uma enumeração de objetos <see cref="T:System.Windows.Input.TouchDevice" /> que são capturados para esse elemento ou elementos filho na árvore visual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém todos os dispositivos de toque nesse elemento.</summary>
        <value>Uma enumeração de objetos <see cref="T:System.Windows.Input.TouchDevice" /> nesse elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém todos os dispositivos de toque que estão sobre esse elemento ou sobre os elementos filho na árvore visual.</summary>
        <value>Uma enumeração de objetos <see cref="T:System.Windows.Input.TouchDevice" /> que estão acima desse elemento ou dos elementos filho na árvore visual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um toque é movido de dentro para fora dos limites deste elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento é gerado sempre, se o dispositivo de toque é capturado para esse elemento.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituir <xref:System.Windows.UIElement.OnTouchLeave%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.TouchLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um dedo se move na tela enquanto está sobre esse elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Substituir <xref:System.Windows.UIElement.OnTouchMove%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.TouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um dedo é gerado fora da tela enquanto o dedo está sobre este elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Estratégia de roteamento|Propagação|  
|delegado|<xref:System.EventHandler%601> do tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   O evento por túnel correspondente é <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Substituir <xref:System.Windows.UIElement.OnTouchUp%2A> implementar manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica o evento roteado <see cref="E:System.Windows.UIElement.TouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">O valor do ponto, como relativo a esse elemento.</param>
        <param name="relativeTo">O elemento no qual converter o determinado ponto.</param>
        <summary>Converte um ponto em relação a esse elemento para coordenadas que são relativas ao elemento especificado.</summary>
        <returns>Um valor de ponto, agora relativo ao elemento de destino em vez desse elemento de origem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Passando `null` para `relativeTo` é permitida e indica que as coordenadas devem ser relativo ao elemento raiz na árvore lógica desse elemento pertence.  
  
 Esse método é usado para converter valores de ponto de teste de ocorrências. Chamar esse método é principalmente relevante se você estiver criando um controle e precisa processar a entrada em um nível inferior. Se você estiver usando os controles existentes, pode-se presumir que controles concluídos relatará resultados de teste de clique traduzidos corretamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o identificador exclusivo (para localização) para esse elemento. É uma propriedade de dependência.</summary>
        <value>Uma cadeia de caracteres que é o identificador exclusivo deste elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usada pelos designers para obter o `x:Uid` valor (consulte [visão geral de localização e globalização do WPF](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) para obter mais informações).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.UidProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/81defade-483b-4a89-b76d-9b25bba34010">Atributo X:UID</related>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.Uid" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Garante que todos os elementos filho visuais desse elemento tenham o layout atualizado corretamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você chama esse método, os elementos com <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` ou <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` chamará específicos do elemento <xref:System.Windows.UIElement.MeasureCore%2A> e <xref:System.Windows.UIElement.ArrangeCore%2A> atualizar métodos, que força o layout e todos os tamanhos computados serão validados.  
  
 Chamar esse método não tem nenhum efeito se o layout é alterado, ou se o estado da organização nem a medida de um layout é inválido. No entanto, se o layout é inválido em ambos os aspectos, o <xref:System.Windows.UIElement.UpdateLayout%2A> chamada será Refazer todo o layout. Portanto, você deve evitar chamar <xref:System.Windows.UIElement.UpdateLayout%2A> após cada alteração incremental e secundária na árvore de elementos. O sistema de layout executará o layout do elemento de forma adiada, usando um algoritmo que equilibra o desempenho e moeda, e com uma estratégia de ponderação para adiar as alterações às raízes até que todos os elementos filho são válidos. Você só deve chamar <xref:System.Windows.UIElement.UpdateLayout%2A> se for absolutamente necessária atualizados tamanhos e posições, e somente depois que você tiver certeza de que todas as alterações às propriedades que você controle e que pode afetar o layout são concluídas.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a visibilidade [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] desse elemento.  É uma propriedade de dependência.</summary>
        <value>Um valor da enumeração. O valor padrão é <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Definir essa propriedade afeta o valor de <xref:System.Windows.UIElement.IsVisible%2A>, que por sua vez podem gerar o <xref:System.Windows.UIElement.IsVisibleChanged> eventos. No entanto, <xref:System.Windows.UIElement.IsVisible%2A> tem outros fatores que influenciam a ele, por exemplo, as configurações de visibilidade de pais que o contêm.  
  
 Elementos onde <xref:System.Windows.UIElement.Visibility%2A> não é <xref:System.Windows.Visibility.Visible> não participam de eventos de entrada (ou comandos), não influenciam a medida ou organizar passagens de layout, não estão em uma sequência de guia e não serão reportadas no teste de clique.  
  
 Quando herdada pela <xref:System.Windows.Window> ou suas classes derivadas, <xref:System.Windows.Window> redefine o valor padrão dessa propriedade para ser <xref:System.Windows.Visibility.Collapsed>. Isso tem o efeito da não execução a passagem de medida de layout no inicialmente criado <xref:System.Windows.Window>, e <xref:System.Windows.UIElement.RenderSize%2A> retorna (0,0). Para obter detalhes, consulte <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> também redefine o valor padrão para serem <xref:System.Windows.Visibility.Collapsed>, com um comportamento semelhante resultante para <xref:System.Windows.Controls.Primitives.Popup> e suas classes derivadas.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.UIElement.VisibilityProperty>|  
|Propriedades de metadados definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir implementa um manipulador que faz referência a dois botões nomeadas diferentes que devem ser um par mutuamente exclusivo na interface do usuário. Antes de executar a lógica real do programa associada ao botão, o próprio botão é definido para ser <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, e o outro botão par é definido como <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica a propriedade de dependência <see cref="P:System.Windows.UIElement.Visibility" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>