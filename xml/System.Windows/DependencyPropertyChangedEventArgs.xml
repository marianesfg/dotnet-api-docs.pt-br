<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DependencyPropertyChangedEventArgs.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5840f1b77f0e3528c43e12653ee199d6199ef1109.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">840f1b77f0e3528c43e12653ee199d6199ef1109</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Provides data for various property changed events.</source>
          <target state="translated">Fornece dados para vários eventos alterados pela propriedade.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Typically these events report effective value changes in the value of a read-only dependency property.</source>
          <target state="translated">Normalmente, esses eventos relatam alterações de valor efetivo no valor de uma propriedade de dependência somente leitura.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Another usage is as part of a <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> implementation.</source>
          <target state="translated">Outro uso é como parte de uma implementação <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The events that use the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class for event data, and the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph> method implementations for handlers, generally follow the naming pattern <ph id="ph3">`Is*Changed`</ph>, and are generally implemented as <ph id="ph4">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events without <ph id="ph5">&lt;xref:System.Windows.RoutedEvent&gt;</ph> backing (they are not routed events).</source>
          <target state="translated">Os eventos que usam o <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe para dados de eventos e o <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph> implementações de método para manipuladores, geralmente seguem o padrão de nomenclatura <ph id="ph3">`Is*Changed`</ph>e geralmente são implementadas como <ph id="ph4">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> eventos sem <ph id="ph5">&lt;xref:System.Windows.RoutedEvent&gt;</ph> backup (eles não são eventos roteados).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Some class handling methods that "handle" otherwise unexposed events that report a state change through a property change, such as <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType&gt;</ph>, also use the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class for event data.</source>
          <target state="translated">Alguns métodos "manipular" caso contrário de tratamento de classe exposta eventos que reportam uma alteração de estado por meio de uma alteração de propriedade, como <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType&gt;</ph>, use também o <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe para dados de evento.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The scenario for <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> is to use the arguments to report old and new values that come from the property system evaluation of the property.</source>
          <target state="translated">O cenário para <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> é usar os argumentos para relatórios antigos e novos valores provenientes de avaliação do sistema de propriedade da propriedade.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>A callback that processes old and new values might choose special handling depending on these values, such as choosing to not respond to value changes that are deemed insignificant.</source>
          <target state="translated">Um retorno de chamada que processa os valores novos e antigos pode escolher um tratamento especial dependendo esses valores, como escolher não responder às alterações de valor que são consideradas insignificantes.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe no contexto de um <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> para uma determinada propriedade de uma classe personalizada que também define os eventos.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">O retorno de chamada usa os resultados antigos e novos valores do sistema de propriedade como comunicadas por <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>e reempacota em uma classe de argumentos de eventos diferentes <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">Os argumentos novos são usados como os dados de um evento de "ValueChanged" definidos por e gerados pela classe personalizada.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The identifier for the dependency property that changed.</source>
          <target state="translated">O identificador da propriedade de dependência foi alterado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The value of the property before the change reported by the relevant event or state change.</source>
          <target state="translated">O valor da propriedade antes da alteração relatada pelo evento relevante ou alteração de estado.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The value of the property after the change reported by the relevant event or state change.</source>
          <target state="translated">O valor da propriedade após a alteração relatada pelo evento relevante ou alteração de estado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>Implementers of custom events that report dependency property changes should use this constructor for populating the event data with the specifics of the change when the event is raised.</source>
          <target state="translated">Implementadores de eventos personalizados que as alterações de propriedade de dependência de relatório devem usar esse construtor para preencher os dados de eventos com as especificações da alteração quando o evento é gerado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Returns whether the provided object is equivalent to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Retorna se o objeto fornecido é equivalente ao <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>The object to compare to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">O objeto a ser comparado ao <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>Determines whether the provided object is equivalent to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Determina se o objeto fornecido é equivalente ao <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided object is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o objeto fornecido for equivalente ao <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> atual; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>This implementation relies on value equivalence of all properties, including internal properties.</source>
          <target state="translated">Essa implementação depende de equivalência do valor de todas as propriedades, incluindo propriedades internas.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph></source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> a ser comparado ao <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> atual</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether the provided <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Determina se o <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> fornecido é equivalente ao <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> is equivalent to the current <ph id="ph3">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> fornecido for equivalente ao <ph id="ph3">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> atual; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This implementation relies on value equivalence of all properties, including internal properties.</source>
          <target state="translated">Essa implementação depende de equivalência do valor de todas as propriedades, incluindo propriedades internas.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
          <source>Gets a hash code  for this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">Obtém o código hash para esse <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
          <source>A signed 32-bit integer hash code.</source>
          <target state="translated">Um código hash do inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>Gets the value of the property after the change.</source>
          <target state="translated">Obtém o valor da propriedade depois da alteração.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The property value after the change.</source>
          <target state="translated">O valor da propriedade depois da alteração.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The type of the value provided should always be castable to the type of the dependency property being reported.</source>
          <target state="translated">O tipo do valor fornecido deve sempre ser conversíveis para o tipo da propriedade de dependência que está sendo relatado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe no contexto de um <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> para uma determinada propriedade de uma classe personalizada que também define os eventos.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">O retorno de chamada usa os resultados antigos e novos valores do sistema de propriedade como comunicadas por <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>e reempacota em uma classe de argumentos de eventos diferentes <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">Os argumentos novos são usados como os dados de um evento de "ValueChanged" definidos por e gerados pela classe personalizada.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>Gets the value of the property before the change.</source>
          <target state="translated">Obtém o valor da propriedade antes da alteração.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The property value before the change.</source>
          <target state="translated">O valor da propriedade antes da alteração.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The type of the value provided should always be castable to the type of the dependency property being reported.</source>
          <target state="translated">O tipo do valor fornecido deve sempre ser conversíveis para o tipo da propriedade de dependência que está sendo relatado.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> classe no contexto de um <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> para uma determinada propriedade de uma classe personalizada que também define os eventos.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">O retorno de chamada usa os resultados antigos e novos valores do sistema de propriedade como comunicadas por <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>e reempacota em uma classe de argumentos de eventos diferentes <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">Os argumentos novos são usados como os dados de um evento de "ValueChanged" definidos por e gerados pela classe personalizada.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">O primeiro <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">O segundo <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> objects have the same value.</source>
          <target state="translated">Determina se dois objetos <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> especificados têm o mesmo valor.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> instances are equivalent; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se as duas instâncias <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> forem equivalentes, caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The implementation uses the same logic as <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</source>
          <target state="translated">A implementação usa a mesma lógica <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">O primeiro <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">O segundo <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> a ser comparado.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> objects are different.</source>
          <target state="translated">Determina se dois objetos <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> especificados são diferentes.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> instances are different; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se as duas instâncias <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> forem diferentes; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The implementation returns the negation of the same logic as <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</source>
          <target state="translated">A implementação retorna a negação da mesma lógica <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>Gets the identifier for the dependency property where the value change occurred.</source>
          <target state="translated">Obtém o identificador para a propriedade de dependência em que ocorreu a alteração de valor.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>The identifier field of the dependency property where the value change occurred.</source>
          <target state="translated">O campo de identificador de propriedade de dependência em que ocorreu a alteração de valor.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>This property is relevant if used within a common <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> that is registered for several properties, and it is necessary to disambiguate which property change invoked the callback.</source>
          <target state="translated">Esta propriedade é relevante se usado em um comum <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> que está registrada para várias propriedades, e é necessário para resolver a ambiguidade que mudam de propriedade chamado o retorno de chamada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A&gt;</ph> is not typically relevant for raising events, because there is usually a 1:1 correspondence between properties and events that report the property change.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A&gt;</ph> não é normalmente relevante para gerar eventos, pois normalmente há uma correspondência 1:1 entre propriedades e eventos de alteração de propriedade do relatório.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>The event that was raised is itself the indication of which property changed.</source>
          <target state="translated">O evento que foi gerado em si é a indicação de que a propriedade alterada.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>