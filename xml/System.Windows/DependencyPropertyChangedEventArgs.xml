<Type Name="DependencyPropertyChangedEventArgs" FullName="System.Windows.DependencyPropertyChangedEventArgs">
  <TypeSignature Language="C#" Value="public struct DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DependencyPropertyChangedEventArgs extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Structure DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public value class DependencyPropertyChangedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2619f-101">Fornece dados para vários eventos alterados pela propriedade.</span><span class="sxs-lookup"><span data-stu-id="2619f-101">Provides data for various property changed events.</span></span> <span data-ttu-id="2619f-102">Normalmente, esses eventos relatam alterações de valor efetivo no valor de uma propriedade de dependência somente leitura.</span><span class="sxs-lookup"><span data-stu-id="2619f-102">Typically these events report effective value changes in the value of a read-only dependency property.</span></span> <span data-ttu-id="2619f-103">Outro uso é como parte de uma implementação <see cref="T:System.Windows.PropertyChangedCallback" />.</span><span class="sxs-lookup"><span data-stu-id="2619f-103">Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-104">Os eventos que usam o <xref:System.Windows.DependencyPropertyChangedEventArgs> classe para dados de eventos e o <xref:System.Windows.DependencyPropertyChangedEventHandler> implementações de método para manipuladores, geralmente seguem o padrão de nomenclatura `Is*Changed`e geralmente são implementadas como [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] eventos sem <xref:System.Windows.RoutedEvent> backup (eles não são eventos roteados).</span><span class="sxs-lookup"><span data-stu-id="2619f-104">The events that use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data, and the <xref:System.Windows.DependencyPropertyChangedEventHandler> method implementations for handlers, generally follow the naming pattern `Is*Changed`, and are generally implemented as [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events without <xref:System.Windows.RoutedEvent> backing (they are not routed events).</span></span> <span data-ttu-id="2619f-105">Alguns métodos "manipular" caso contrário de tratamento de classe exposta eventos que reportam uma alteração de estado por meio de uma alteração de propriedade, como <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>, use também o <xref:System.Windows.DependencyPropertyChangedEventArgs> classe para dados de evento.</span><span class="sxs-lookup"><span data-stu-id="2619f-105">Some class handling methods that "handle" otherwise unexposed events that report a state change through a property change, such as <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>, also use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data.</span></span>  
  
 <span data-ttu-id="2619f-106">O cenário para <xref:System.Windows.PropertyChangedCallback> é usar os argumentos para relatórios antigos e novos valores provenientes de avaliação do sistema de propriedade da propriedade.</span><span class="sxs-lookup"><span data-stu-id="2619f-106">The scenario for <xref:System.Windows.PropertyChangedCallback> is to use the arguments to report old and new values that come from the property system evaluation of the property.</span></span> <span data-ttu-id="2619f-107">Um retorno de chamada que processa os valores novos e antigos pode escolher um tratamento especial dependendo esses valores, como escolher não responder às alterações de valor que são consideradas insignificantes.</span><span class="sxs-lookup"><span data-stu-id="2619f-107">A callback that processes old and new values might choose special handling depending on these values, such as choosing to not respond to value changes that are deemed insignificant.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2619f-108">O exemplo a seguir usa o <xref:System.Windows.DependencyPropertyChangedEventArgs> classe no contexto de um <xref:System.Windows.PropertyChangedCallback> para uma determinada propriedade de uma classe personalizada que também define os eventos.</span><span class="sxs-lookup"><span data-stu-id="2619f-108">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="2619f-109">O retorno de chamada usa os resultados antigos e novos valores do sistema de propriedade como comunicadas por <xref:System.Windows.DependencyPropertyChangedEventArgs>e reempacota em uma classe de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span><span class="sxs-lookup"><span data-stu-id="2619f-109">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="2619f-110">Os argumentos novos são usados como os dados de um evento de "ValueChanged" definidos por e gerados pela classe personalizada.</span><span class="sxs-lookup"><span data-stu-id="2619f-110">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyChangedEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyPropertyChangedEventArgs (System.Windows.DependencyProperty property, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty property, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As DependencyProperty, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyPropertyChangedEventArgs(System::Windows::DependencyProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.DependencyProperty" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="2619f-111">O identificador da propriedade de dependência foi alterado.</span><span class="sxs-lookup"><span data-stu-id="2619f-111">The identifier for the dependency property that changed.</span></span></param>
        <param name="oldValue"><span data-ttu-id="2619f-112">O valor da propriedade antes da alteração relatada pelo evento relevante ou alteração de estado.</span><span class="sxs-lookup"><span data-stu-id="2619f-112">The value of the property before the change reported by the relevant event or state change.</span></span></param>
        <param name="newValue"><span data-ttu-id="2619f-113">O valor da propriedade após a alteração relatada pelo evento relevante ou alteração de estado.</span><span class="sxs-lookup"><span data-stu-id="2619f-113">The value of the property after the change reported by the relevant event or state change.</span></span></param>
        <summary><span data-ttu-id="2619f-114">Inicializa uma nova instância da classe <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span><span class="sxs-lookup"><span data-stu-id="2619f-114">Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-115">Implementadores de eventos personalizados que as alterações de propriedade de dependência de relatório devem usar esse construtor para preencher os dados de eventos com as especificações da alteração quando o evento é gerado.</span><span class="sxs-lookup"><span data-stu-id="2619f-115">Implementers of custom events that report dependency property changes should use this constructor for populating the event data with the specifics of the change when the event is raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2619f-116">Retorna se o objeto fornecido é equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual.</span><span class="sxs-lookup"><span data-stu-id="2619f-116">Returns whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2619f-117">O objeto a ser comparado ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual.</span><span class="sxs-lookup"><span data-stu-id="2619f-117">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span></span></param>
        <summary><span data-ttu-id="2619f-118">Determina se o objeto fornecido é equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual.</span><span class="sxs-lookup"><span data-stu-id="2619f-118">Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span></span></summary>
        <returns>
          <span data-ttu-id="2619f-119"><see langword="true" /> se o objeto fornecido for equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2619f-119"><see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-120">Essa implementação depende de equivalência do valor de todas as propriedades, incluindo propriedades internas.</span><span class="sxs-lookup"><span data-stu-id="2619f-120">This implementation relies on value equivalence of all properties, including internal properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.DependencyPropertyChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (args As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::DependencyPropertyChangedEventArgs args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="2619f-121">O <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual</span><span class="sxs-lookup"><span data-stu-id="2619f-121">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></span></span></param>
        <summary><span data-ttu-id="2619f-122">Determina se o <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> fornecido é equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual.</span><span class="sxs-lookup"><span data-stu-id="2619f-122">Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span></span></summary>
        <returns>
          <span data-ttu-id="2619f-123"><see langword="true" /> se o <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> fornecido for equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2619f-123"><see langword="true" /> if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-124">Essa implementação depende de equivalência do valor de todas as propriedades, incluindo propriedades internas.</span><span class="sxs-lookup"><span data-stu-id="2619f-124">This implementation relies on value equivalence of all properties, including internal properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2619f-125">Obtém o código hash para esse <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span><span class="sxs-lookup"><span data-stu-id="2619f-125">Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span></span></summary>
        <returns><span data-ttu-id="2619f-126">Um código hash do inteiro com sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="2619f-126">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewValue">
      <MemberSignature Language="C#" Value="public object NewValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2619f-127">Obtém o valor da propriedade depois da alteração.</span><span class="sxs-lookup"><span data-stu-id="2619f-127">Gets the value of the property after the change.</span></span></summary>
        <value><span data-ttu-id="2619f-128">O valor da propriedade depois da alteração.</span><span class="sxs-lookup"><span data-stu-id="2619f-128">The property value after the change.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-129">O tipo do valor fornecido deve sempre ser conversíveis para o tipo da propriedade de dependência que está sendo relatado.</span><span class="sxs-lookup"><span data-stu-id="2619f-129">The type of the value provided should always be castable to the type of the dependency property being reported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2619f-130">O exemplo a seguir usa o <xref:System.Windows.DependencyPropertyChangedEventArgs> classe no contexto de um <xref:System.Windows.PropertyChangedCallback> para uma determinada propriedade de uma classe personalizada que também define os eventos.</span><span class="sxs-lookup"><span data-stu-id="2619f-130">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="2619f-131">O retorno de chamada usa os resultados antigos e novos valores do sistema de propriedade como comunicadas por <xref:System.Windows.DependencyPropertyChangedEventArgs>e reempacota em uma classe de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span><span class="sxs-lookup"><span data-stu-id="2619f-131">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="2619f-132">Os argumentos novos são usados como os dados de um evento de "ValueChanged" definidos por e gerados pela classe personalizada.</span><span class="sxs-lookup"><span data-stu-id="2619f-132">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValue">
      <MemberSignature Language="C#" Value="public object OldValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OldValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OldValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2619f-133">Obtém o valor da propriedade antes da alteração.</span><span class="sxs-lookup"><span data-stu-id="2619f-133">Gets the value of the property before the change.</span></span></summary>
        <value><span data-ttu-id="2619f-134">O valor da propriedade antes da alteração.</span><span class="sxs-lookup"><span data-stu-id="2619f-134">The property value before the change.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-135">O tipo do valor fornecido deve sempre ser conversíveis para o tipo da propriedade de dependência que está sendo relatado.</span><span class="sxs-lookup"><span data-stu-id="2619f-135">The type of the value provided should always be castable to the type of the dependency property being reported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2619f-136">O exemplo a seguir usa o <xref:System.Windows.DependencyPropertyChangedEventArgs> classe no contexto de um <xref:System.Windows.PropertyChangedCallback> para uma determinada propriedade de uma classe personalizada que também define os eventos.</span><span class="sxs-lookup"><span data-stu-id="2619f-136">The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events.</span></span> <span data-ttu-id="2619f-137">O retorno de chamada usa os resultados antigos e novos valores do sistema de propriedade como comunicadas por <xref:System.Windows.DependencyPropertyChangedEventArgs>e reempacota em uma classe de argumentos de eventos diferentes <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span><span class="sxs-lookup"><span data-stu-id="2619f-137">The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>.</span></span> <span data-ttu-id="2619f-138">Os argumentos novos são usados como os dados de um evento de "ValueChanged" definidos por e gerados pela classe personalizada.</span><span class="sxs-lookup"><span data-stu-id="2619f-138">The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</span></span>  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2619f-139">O primeiro <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2619f-139">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2619f-140">O segundo <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2619f-140">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span></span></param>
        <summary><span data-ttu-id="2619f-141">Determina se dois objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados têm o mesmo valor.</span><span class="sxs-lookup"><span data-stu-id="2619f-141">Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="2619f-142"><see langword="true" /> se as duas instâncias <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> forem equivalentes, caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2619f-142"><see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are equivalent; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-143">A implementação usa a mesma lógica <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="2619f-143">The implementation uses the same logic as <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2619f-144">O primeiro <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2619f-144">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2619f-145">O segundo <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</span><span class="sxs-lookup"><span data-stu-id="2619f-145">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</span></span></param>
        <summary><span data-ttu-id="2619f-146">Determina se dois objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados são diferentes.</span><span class="sxs-lookup"><span data-stu-id="2619f-146">Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects are different.</span></span></summary>
        <returns>
          <span data-ttu-id="2619f-147"><see langword="true" /> se as duas instâncias <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> forem diferentes; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2619f-147"><see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are different; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-148">A implementação retorna a negação da mesma lógica <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="2619f-148">The implementation returns the negation of the same logic as <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2619f-149">Obtém o identificador para a propriedade de dependência em que ocorreu a alteração de valor.</span><span class="sxs-lookup"><span data-stu-id="2619f-149">Gets the identifier for the dependency property where the value change occurred.</span></span></summary>
        <value><span data-ttu-id="2619f-150">O campo de identificador de propriedade de dependência em que ocorreu a alteração de valor.</span><span class="sxs-lookup"><span data-stu-id="2619f-150">The identifier field of the dependency property where the value change occurred.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2619f-151">Esta propriedade é relevante se usado em um comum <xref:System.Windows.PropertyChangedCallback> que está registrada para várias propriedades, e é necessário para resolver a ambiguidade que mudam de propriedade chamado o retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="2619f-151">This property is relevant if used within a common <xref:System.Windows.PropertyChangedCallback> that is registered for several properties, and it is necessary to disambiguate which property change invoked the callback.</span></span> <span data-ttu-id="2619f-152"><xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> não é normalmente relevante para gerar eventos, pois normalmente há uma correspondência 1:1 entre propriedades e eventos de alteração de propriedade do relatório.</span><span class="sxs-lookup"><span data-stu-id="2619f-152"><xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> is not typically relevant for raising events, because there is usually a 1:1 correspondence between properties and events that report the property change.</span></span> <span data-ttu-id="2619f-153">O evento que foi gerado em si é a indicação de que a propriedade alterada.</span><span class="sxs-lookup"><span data-stu-id="2619f-153">The event that was raised is itself the indication of which property changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>