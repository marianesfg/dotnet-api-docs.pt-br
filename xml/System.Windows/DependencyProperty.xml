<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd5b6a2bc5d76e65fbad41cf01060484fb71b52e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d4100-101">Representa uma propriedade que pode ser definida por meio de métodos como estilos, vinculação de dados, animação e herança.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4100-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-102">Um <xref:System.Windows.DependencyProperty> suporta os seguintes recursos no [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="d4100-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="d4100-103">A propriedade pode ser definida em um estilo.</span><span class="sxs-lookup"><span data-stu-id="d4100-103">The property can be set in a style.</span></span> <span data-ttu-id="d4100-104">Para obter mais informações, consulte [Estilo e modelagem](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="d4100-105">A propriedade pode ser definida por meio de associação de dados.</span><span class="sxs-lookup"><span data-stu-id="d4100-105">The property can be set through data binding.</span></span> <span data-ttu-id="d4100-106">Para obter mais informações sobre propriedades de dependência de associação de dados, consulte [como: associar as propriedades de dois controles](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="d4100-107">A propriedade pode ser definida com uma referência de recurso dinâmico.</span><span class="sxs-lookup"><span data-stu-id="d4100-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="d4100-108">Para obter mais informações, consulte [Recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="d4100-109">A propriedade pode herdar seu valor automaticamente de um elemento pai na árvore de elementos.</span><span class="sxs-lookup"><span data-stu-id="d4100-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="d4100-110">Para obter mais informações, consulte [Herança do valor da propriedade](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="d4100-111">A propriedade pode ser animada.</span><span class="sxs-lookup"><span data-stu-id="d4100-111">The property can be animated.</span></span> <span data-ttu-id="d4100-112">Para obter mais informações, consulte [Visão geral de animação](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="d4100-113">A propriedade pode relatar quando o valor anterior da propriedade foi alterado e o valor da propriedade pode ser forçado.</span><span class="sxs-lookup"><span data-stu-id="d4100-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="d4100-114">Para obter mais informações, consulte [Retornos de chamada da propriedade de dependência e validação](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="d4100-115">A propriedade informa ao [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], como se a alteração de um valor de propriedade deve exigir o sistema de layout para recompor a visualização de um elemento.</span><span class="sxs-lookup"><span data-stu-id="d4100-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="d4100-116">A propriedade recebe suporte a [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="d4100-117">Por exemplo, a propriedade pode ser editada no **propriedades** janela.</span><span class="sxs-lookup"><span data-stu-id="d4100-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="d4100-118">Para saber mais sobre as propriedades de dependência, consulte [visão geral de propriedades de dependência](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="d4100-119">Se você quiser propriedades em seus tipos personalizados para dar suporte os recursos da lista anterior, você deve criar uma propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="d4100-120">Para saber como criar propriedades de dependência personalizadas, consulte [propriedades personalizadas de dependência](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="d4100-121">Uma propriedade anexada é uma propriedade que permite que qualquer objeto de informações de relatório para o tipo que define a propriedade anexada.</span><span class="sxs-lookup"><span data-stu-id="d4100-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="d4100-122">Em [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], qualquer tipo que herda de <xref:System.Windows.DependencyObject> pode usar uma propriedade anexada, independentemente se o tipo herda do tipo que define a propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="d4100-123">Uma propriedade anexada é um recurso do [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] idioma.</span><span class="sxs-lookup"><span data-stu-id="d4100-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="d4100-124">Para definir uma propriedade anexada no [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use o *ownerType*.* propertyName* sintaxe.</span><span class="sxs-lookup"><span data-stu-id="d4100-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="d4100-125">É um exemplo de uma propriedade anexada a <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d4100-126">Se você deseja criar uma propriedade que pode ser usada em todos os <xref:System.Windows.DependencyObject> tipos, em seguida, você deve criar uma propriedade anexada.</span><span class="sxs-lookup"><span data-stu-id="d4100-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="d4100-127">Para saber mais sobre propriedades anexadas, incluindo como criá-los, consulte [visão geral de propriedades anexado](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="d4100-128">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="d4100-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="d4100-129">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="d4100-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="d4100-130">Uma cadeia de caracteres que especifica o <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> da propriedade de dependência desejado.</span><span class="sxs-lookup"><span data-stu-id="d4100-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="d4100-131">Isso pode ser precedido por um prefixo de namespace XML, se a propriedade não está no namespace XML padrão (para obter detalhes, consulte [Namespaces XAML e o mapeamento de Namespace para WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="d4100-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="d4100-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="d4100-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="d4100-133">Uma cadeia de caracteres que especifica um tipo de proprietário de uma propriedade de dependência, um ponto (.), então o <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d4100-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4100-134">`ownerType` também pode ser precedido por um prefixo de namespace XML.</span><span class="sxs-lookup"><span data-stu-id="d4100-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="d4100-135">Esse uso é específico para estilos de associação tardia e modelos, em que o proprietário da propriedade de dependência deve ser especificado para analisar o contexto porque o `TargetType` ainda não é conhecido.</span><span class="sxs-lookup"><span data-stu-id="d4100-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="d4100-136">Para obter mais informações, consulte [Estilo e modelagem](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="d4100-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="d4100-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="d4100-138">Uma cadeia de caracteres que especifica o proprietário de uma propriedade anexada, um ponto (.), o nome da propriedade anexada.</span><span class="sxs-lookup"><span data-stu-id="d4100-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="d4100-139">`attachedPropertyOwnerType` também pode ser precedido por um prefixo de namespace XML.</span><span class="sxs-lookup"><span data-stu-id="d4100-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-140">Adiciona outro tipo como um proprietário de uma propriedade de dependência que já foi registrado para um tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="d4100-141">O tipo a ser adicionado como proprietário desta propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-142">Adiciona outro tipo como um proprietário de uma propriedade de dependência que já foi registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-143">Uma referência ao identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica a propriedade da dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="d4100-144">Esse identificador deve ser exposto adicionando a classe como um campo <see langword="public static readonly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-145">Esse método permite que o sistema de propriedade reconhecer uma propriedade de dependência em um tipo que não se registrou essa determinada propriedade de dependência inicialmente.</span><span class="sxs-lookup"><span data-stu-id="d4100-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="d4100-146">Normalmente, <xref:System.Windows.DependencyProperty.AddOwner%2A> é usado para adicionar propriedades de dependência para classes que não expõem essa propriedade de dependência por meio da herança de classes gerenciada (herança de classe causaria o wrapper de propriedades seja herdada pela classe derivada e, portanto, deve fornecer acesso geral da tabela de membros para a propriedade de dependência já).</span><span class="sxs-lookup"><span data-stu-id="d4100-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="d4100-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> permite que o sistema de propriedade reconhecer uma propriedade de dependência em um tipo que não se registrou essa propriedade de dependência inicialmente.</span><span class="sxs-lookup"><span data-stu-id="d4100-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="d4100-148">Esta assinatura não permite a especificação de metadados.</span><span class="sxs-lookup"><span data-stu-id="d4100-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="d4100-149">Quando você usar esse método, os metadados são gerados automaticamente para o novo <xref:System.Windows.DependencyProperty> e seu tipo de proprietário.</span><span class="sxs-lookup"><span data-stu-id="d4100-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="d4100-150">Os metadados gerada automaticamente são o resultado dos metadados mesclado de todos os tipos base que têm esta propriedade definida.</span><span class="sxs-lookup"><span data-stu-id="d4100-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="d4100-151">Se nenhum metadado mesclado estiver disponível, os metadados padrão para a propriedade é usado.</span><span class="sxs-lookup"><span data-stu-id="d4100-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="d4100-152">Se a propriedade é registrada com o uso de <xref:System.Windows.DependencyProperty.RegisterAttached%2A> método e, em seguida, os metadados padrão é o mesmo que os metadados que é criado quando <xref:System.Windows.DependencyProperty.RegisterAttached%2A> foi chamado.</span><span class="sxs-lookup"><span data-stu-id="d4100-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="d4100-153">Caso contrário, o <xref:System.Windows.PropertyMetadata> objeto é criado com o <xref:System.Windows.PropertyMetadata.DefaultValue%2A> propriedade definida como padrão do tipo de propriedade e todas as outras propriedades do <xref:System.Windows.PropertyMetadata> é definido como `null`.</span><span class="sxs-lookup"><span data-stu-id="d4100-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="d4100-154">Use o <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> assinatura se você deseja fornecer metadados para a versão da propriedade de dependência conforme adicionados para o tipo fornecido.</span><span class="sxs-lookup"><span data-stu-id="d4100-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="d4100-155">O valor de retorno desse método é normalmente usado para declarar e expor a propriedade de dependência, armazenando um identificador de propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="d4100-156">O identificador fornece acesso para a propriedade de dependência para chamar o sistema de propriedade [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] em relação à propriedade de dependência, particularmente à medida que ele existe na classe adicionando proprietário.</span><span class="sxs-lookup"><span data-stu-id="d4100-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="d4100-157">O mesmo nome de propriedade para o proprietário original e o proprietário adicionado deve ser usado para indicar a funcionalidade semelhante.</span><span class="sxs-lookup"><span data-stu-id="d4100-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="d4100-158">Você deve usar o <xref:System.Windows.DependencyProperty> retornar o valor da <xref:System.Windows.DependencyProperty.AddOwner%2A> método para definir o identificador de propriedade de dependência e também declarar [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrappers de propriedade para propriedades de dependência que são adicionadas aos tipos usando <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="d4100-159">O <xref:System.Windows.DependencyProperty.AddOwner%2A> metodologia recomendada acima é usada ao criar as propriedades de dependência são declaradas em [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="d4100-160">Por exemplo, ambos <xref:System.Windows.Controls.Border> e <xref:System.Windows.Controls.Control> definir um `BorderBrush` propriedade de dependência, que tem uma funcionalidade semelhante.</span><span class="sxs-lookup"><span data-stu-id="d4100-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="d4100-161"><xref:System.Windows.Controls.Control> Define o `BorderBrush` propriedade para o sistema de propriedade chamando <xref:System.Windows.DependencyProperty.AddOwner%2A> com base no proprietário original <xref:System.Windows.Controls.Border> e seu registrado <xref:System.Windows.Controls.Border.BorderBrushProperty> identificador de propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="d4100-162">O <xref:System.Windows.DependencyProperty.AddOwner%2A> retornar o valor é usado para estabelecer um nova estático <xref:System.Windows.DependencyProperty> campo (<xref:System.Windows.Controls.Control.BorderBrushProperty>) para essa propriedade no proprietário adicional e um `BorderBrush` wrapper de propriedade também está declarado.</span><span class="sxs-lookup"><span data-stu-id="d4100-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="d4100-163">O tipo a ser adicionado como proprietário desta propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d4100-164">Os metadados que qualificam a propriedade de dependência como ela existe no tipo fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-165">Adiciona outro tipo como um proprietário de uma propriedade de dependência que já foi registrada, fornecendo metadados de propriedade de dependência para a propriedade de dependência como ela existe no tipo do proprietário fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-166">Uma referência ao identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica a propriedade da dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="d4100-167">Esse identificador deve ser exposto adicionando a classe como um campo <see langword="public static readonly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-168">Esse método permite que o sistema de propriedade reconhecer uma propriedade de dependência em um tipo que não se registrou essa determinada propriedade de dependência inicialmente.</span><span class="sxs-lookup"><span data-stu-id="d4100-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="d4100-169">O valor de retorno desse método é usado para declarar e expor a propriedade de dependência, especialmente, se houver sobre a adição de classe proprietário.</span><span class="sxs-lookup"><span data-stu-id="d4100-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="d4100-170">Em geral, o mesmo nome de propriedade para o proprietário original e o proprietário adicionado deve ser usado para indicar a funcionalidade semelhante.</span><span class="sxs-lookup"><span data-stu-id="d4100-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="d4100-171">É uma boa prática para expor os identificadores, bem como novos [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrappers de propriedade para propriedades de dependência que são adicionadas aos tipos usando <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="d4100-172">O <xref:System.Windows.DependencyProperty.AddOwner%2A> metodologia recomendada acima é usada ao criar [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declarado em [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="d4100-173">Por exemplo, ambos <xref:System.Windows.Controls.Border> e <xref:System.Windows.Controls.Control> definir um `BorderBrush` propriedade de dependência, que tem uma funcionalidade semelhante.</span><span class="sxs-lookup"><span data-stu-id="d4100-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="d4100-174"><xref:System.Windows.Controls.Control> Define o `BorderBrush` propriedade para o sistema de propriedade chamando <xref:System.Windows.DependencyProperty.AddOwner%2A> no proprietário original <xref:System.Windows.Controls.Border> e seu registrado <xref:System.Windows.Controls.Border.BorderBrushProperty> identificador de propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="d4100-175">O <xref:System.Windows.DependencyProperty.AddOwner%2A> retornar o valor é usado para estabelecer um estático <xref:System.Windows.DependencyProperty> campo (<xref:System.Windows.Controls.Control.BorderBrushProperty>) para essa propriedade no proprietário adicional e um `BorderBrush` wrapper de propriedade também está declarado.</span><span class="sxs-lookup"><span data-stu-id="d4100-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="d4100-176">Identificador de propriedade de dependência do proprietário adicionado deve ser usado para operações como <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="d4100-177">No entanto, as operações de tipo específico que envolvem tipos ou instâncias da classe que foi adicionado como proprietário com diferentes metadados ainda retornam o mesmo que resultados esperados original (não adicionado do proprietário) identificador de propriedade de dependência é especificado em chamadas para métodos como <xref:System.Windows.DependencyObject.GetValue%2A> ou <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="d4100-178">Os metadados para o proprietário adicionado é adicionas pelo <xref:System.Windows.DependencyProperty.AddOwner%2A> chamar a mesmo, não necessariamente referenciado exclusivamente pelo campo de identificador de classe adicionando proprietário.</span><span class="sxs-lookup"><span data-stu-id="d4100-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="d4100-179">No entanto, é recomendável para expor o identificador, bem como novo [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrappers de propriedade para propriedades de dependência que são adicionadas aos tipos usando <xref:System.Windows.DependencyProperty.AddOwner%2A>, como Falha ao fazer isso cria a discrepância entre o [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] e [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representações de suas propriedades.</span><span class="sxs-lookup"><span data-stu-id="d4100-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="d4100-180">Os metadados fornecidos são mesclados com os metadados de propriedade para a propriedade de dependência conforme ela existe no proprietário da base.</span><span class="sxs-lookup"><span data-stu-id="d4100-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="d4100-181">Quaisquer características que foram especificadas nos metadados de base original serão mantido.</span><span class="sxs-lookup"><span data-stu-id="d4100-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="d4100-182">Somente essas características que foram alteradas especificamente os novos metadados substituirá as características dos metadados de base.</span><span class="sxs-lookup"><span data-stu-id="d4100-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="d4100-183">Algumas características, como <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, serão substituídos se forem especificados em novos metadados.</span><span class="sxs-lookup"><span data-stu-id="d4100-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="d4100-184">Outras, como <xref:System.Windows.PropertyChangedCallback>, são combinados.</span><span class="sxs-lookup"><span data-stu-id="d4100-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="d4100-185">Por fim, o comportamento de mesclagem depende do tipo de metadados de propriedade que está sendo usado para a substituição, portanto, o comportamento descrito aqui é para as classes de metadados de propriedade existentes usadas pelo [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriedades de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="d4100-186">Para obter detalhes, consulte [metadados de propriedade de dependência](~/docs/framework/wpf/advanced/dependency-property-metadata.md) e [metadados de propriedade do Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-187">Obtém os metadados padrão da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4100-188">Os metadados padrão da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-189">Os metadados padrão são os metadados da propriedade que está disponível para esse objeto em particular ou um objeto de um tipo derivado onde nenhum metadado alternativo fornecido pelo explícito <xref:System.Windows.DependencyProperty.Register%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chamar.</span><span class="sxs-lookup"><span data-stu-id="d4100-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="d4100-190">Se o proprietário original aplicado metadados para o primeiro <xref:System.Windows.DependencyProperty.Register%2A> chamada que estabeleceu a propriedade de dependência, e que os metadados são retornados como <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="d4100-191">Se nenhum metadado foi aplicado no original <xref:System.Windows.DependencyProperty.Register%2A> chamar, em seguida, são gerados os metadados de padrão de dentro do <xref:System.Windows.DependencyProperty.Register%2A> chamada e esse valor é retornado como o <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="d4100-192">A principal finalidade de ter metadados padrão associados a uma <xref:System.Windows.DependencyProperty> é fornecer um valor padrão para essa propriedade em qualquer <xref:System.Windows.DependencyObject> ou um tipo derivado.</span><span class="sxs-lookup"><span data-stu-id="d4100-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="d4100-193">Para propriedades de via, o tipo de metadados retornado por essa propriedade não pode ser convertido para tipos derivados de <xref:System.Windows.PropertyMetadata> tipo, mesmo se a propriedade foi registrada originalmente com um tipo derivado de metadados.</span><span class="sxs-lookup"><span data-stu-id="d4100-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="d4100-194">Se você quiser que os metadados originalmente registrados, incluindo seu tipo derivado possivelmente metadados original, chamar <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> em vez disso, passando o registro original tipo como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="d4100-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="d4100-195">Para propriedades anexadas, o tipo de metadados retornado por essa propriedade corresponderá o tipo de dado no original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> método de registro.</span><span class="sxs-lookup"><span data-stu-id="d4100-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4100-196">Retorna um código hash para este <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-197">O código hash deste <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-198">O sistema de propriedade usa seu próprio identificador exclusivo <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, e o valor dessa propriedade é retornado por <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-199">Retorna os metadados associados a essa propriedade de dependência como ela existe para determinado tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="d4100-200">Esse pode ser o tipo em que a propriedade de dependência foi registrada pela primeira vez, um deles foi adicionado posteriormente ou um tipo em que a propriedade de dependência foi obtida por meio de herança, mas os metadados foram substituídos especificamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="d4100-201">O tipo específico do qual recuperar os metadados de propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-202">Retorna os metadados para essa propriedade de dependência uma vez que ela existe em um tipo existente especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-203">Um objeto de metadados de propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-204">Especificar o tipo ou uma referência de objeto a ser usado como o tipo é necessário porque os metadados podem variar com o registro original devido a <xref:System.Windows.DependencyProperty.AddOwner%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chamadas que alterar os metadados da propriedade de dependência conforme ela existe em um tipo.</span><span class="sxs-lookup"><span data-stu-id="d4100-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-205">O exemplo a seguir obtém os metadados para uma propriedade de dependência com base em seu tipo.</span><span class="sxs-lookup"><span data-stu-id="d4100-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="d4100-206">O tipo é obtido usando um `typeof` operador.</span><span class="sxs-lookup"><span data-stu-id="d4100-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="d4100-207">Um objeto de dependência que é verificado quanto ao tipo para determinar qual versão de tipo específico da propriedade de dependência os metadados devem vir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-208">Retorna os metadados para essa propriedade de dependência como ela existe na instância do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-209">Um objeto de metadados de propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-210">Especificar o tipo ou uma referência de objeto é necessária porque os metadados de qualquer propriedade de dependência podem variar com o registro original devido a <xref:System.Windows.DependencyProperty.AddOwner%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chamadas que podem refinar os metadados da propriedade conforme ela existe em um tipo.</span><span class="sxs-lookup"><span data-stu-id="d4100-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="d4100-211">Quando você solicita metadados de propriedade com base em uma instância, você está passando apenas a instância para que seu tipo pode ser avaliado internamente.</span><span class="sxs-lookup"><span data-stu-id="d4100-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="d4100-212">Metadados de propriedade de dependência não variam por instância. sempre é consistente para qualquer combinação de propriedades de tipo determinado.</span><span class="sxs-lookup"><span data-stu-id="d4100-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-213">O exemplo a seguir obtém os metadados para uma propriedade de dependência com base em um determinado <xref:System.Windows.DependencyObject> instância.</span><span class="sxs-lookup"><span data-stu-id="d4100-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="d4100-214">Um objeto específico que registra o tipo de objeto de dependência da qual os metadados de propriedade de dependência é desejado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-215">Retorna os metadados para essa propriedade de dependência como ela existe em um tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-216">Um objeto de metadados de propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-217">Especificar o tipo ou uma referência de objeto é necessária porque os metadados de qualquer propriedade de dependência podem variar com o registro original devido a <xref:System.Windows.DependencyProperty.AddOwner%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chamadas que podem refinar os metadados da propriedade conforme ela existe em um tipo.</span><span class="sxs-lookup"><span data-stu-id="d4100-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-218">O exemplo a seguir obtém os metadados para uma propriedade de dependência com base em seu <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="d4100-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-219">Obtém um valor gerado internamente que identifica exclusivamente a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4100-220">Um identificador numérico exclusivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-221">Esse valor não é um inteiro, um [!INCLUDE[TLA#tla_guid](~/includes/tlasharptla-guid-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-221">This value is an integer, not a [!INCLUDE[TLA#tla_guid](~/includes/tlasharptla-guid-md.md)].</span></span> <span data-ttu-id="d4100-222">Em geral, não é necessário usar esse valor de índice, e não existe índice acesso às tabelas de todas as propriedades de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="d4100-223">Propriedades de dependência em vez disso, devem ser referenciadas por seus campos de identificador.</span><span class="sxs-lookup"><span data-stu-id="d4100-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="d4100-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> é usada internamente para acesso mais rápido às estruturas de dados que usam o <xref:System.Windows.DependencyProperty.GlobalIndex%2A> como um índice de matriz com base em zero.</span><span class="sxs-lookup"><span data-stu-id="d4100-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="d4100-225">Um uso semelhante pode ter aplicativos para designers ou ferramentas.</span><span class="sxs-lookup"><span data-stu-id="d4100-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4100-226">O valor a ser verificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-227">Determina se um valor especificado é aceitável para o tipo desta propriedade de dependência, conforme verificado em relação ao tipo de propriedade fornecido no registro de propriedade de dependência original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-228">
            <see langword="true" /> se o valor especificado é o tipo de propriedade registrada ou um tipo derivado aceitável; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-229">Um valor de `null` é um tipo válido de propriedade de dependência de tipo de referência, ou para um <xref:System.Nullable%601> propriedade de dependência e retornaria `true` para esses casos.</span><span class="sxs-lookup"><span data-stu-id="d4100-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="d4100-230">Em casos em que a propriedade de dependência é uma referência nem nem um <xref:System.Nullable%601> tipo, <xref:System.Windows.DependencyProperty.IsValidType%2A> retornará `false` para um valor nulo em vez de gerar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="d4100-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-231">O exemplo a seguir usa <xref:System.Windows.DependencyProperty.IsValidType%2A> como uma verificação antes de chamar <xref:System.Windows.DependencyObject.SetValue%2A> na propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4100-232">O valor a ser verificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-233">Determina se o valor fornecido é aceito para o tipo de propriedade por meio de verificação de tipo básica e também potencialmente se ele está dentro do intervalo permitido de valores para esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-234">
            <see langword="true" /> se o valor é aceitável e é do tipo correto ou um tipo derivado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-235">Para uma propriedade de dependência, um intervalo de valores para esse tipo permitido pode ser especificado por meio de um <xref:System.Windows.ValidateValueCallback> que é fornecido no registro de propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="d4100-236">Este método chama <xref:System.Windows.DependencyProperty.IsValidType%2A> internamente.</span><span class="sxs-lookup"><span data-stu-id="d4100-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="d4100-237">Se a propriedade de dependência em questão não tiver nenhuma <xref:System.Windows.ValidateValueCallback>, em seguida, chamar esse método é efetivamente equivalente a chamar <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="d4100-238">Se a propriedade de dependência tem um <xref:System.Windows.ValidateValueCallback>e se <xref:System.Windows.DependencyProperty.IsValidType%2A> poderia ter retornado `true`, o valor retornado será conforme implementado no retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="d4100-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="d4100-239">Um valor nulo é um valor válido para propriedades de dependência de tipo de referência, ou para um <xref:System.Nullable%601> propriedade de dependência e retornaria `true` para esses casos.</span><span class="sxs-lookup"><span data-stu-id="d4100-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="d4100-240">Em casos em que a propriedade de dependência é uma referência nem nem um <xref:System.Nullable%601> tipo, <xref:System.Windows.DependencyProperty.IsValidType%2A> retornará `false` para um valor nulo em vez de gerar uma exceção.</span><span class="sxs-lookup"><span data-stu-id="d4100-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-241">O exemplo a seguir usa <xref:System.Windows.DependencyProperty.IsValidValue%2A> como uma verificação antes de chamar <xref:System.Windows.DependencyObject.SetValue%2A> na propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-242">Obtém o nome da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4100-243">O nome da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-244">Essa propriedade obtém o nome fornecido como o `name` parâmetro durante o registro de propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="d4100-245">Esse nome é imutável e não pode ser `null` ou uma cadeia de caracteres vazia.</span><span class="sxs-lookup"><span data-stu-id="d4100-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="d4100-246">Os registros de nome duplicado do mesmo tipo de proprietário não são permitidos e lançará uma exceção ao tentar registrar a duplicata.</span><span class="sxs-lookup"><span data-stu-id="d4100-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d4100-247">O <xref:System.Windows.DependencyProperty.Name%2A> de uma dependência de propriedade deve seguir a convenção de correspondência, o nome de seu identificador de propriedade de dependência menos o sufixo "Property".</span><span class="sxs-lookup"><span data-stu-id="d4100-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="d4100-248">Para obter detalhes, consulte [Propriedades de dependência personalizadas](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-249">O exemplo a seguir consulta várias características de um identificador de propriedade de dependência, incluindo o <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-250">Fornece os metadados alternativos para esta propriedade de dependência quando ela existe em instâncias de um tipo especificado, em comparação com os metadados que foram fornecidos no registro de propriedade de dependência inicial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="d4100-251">O tipo no qual essa propriedade de dependência é herdada e os metadados alternativos fornecidos serão aplicados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d4100-252">Os metadados a serem aplicados à propriedade de dependência no tipo de substituição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-253">Especifica os metadados alternativos para essa propriedade de dependência quando está presente em instâncias de um tipo especificado, substituindo os metadados existentes para a propriedade de dependência conforme ela foi herdada dos tipos base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-254">Metadados de propriedade de dependência devem ser substituído antes do sistema de propriedade usa a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="d4100-255">Isso é igual ao tempo que instâncias específicas são criadas usando a classe que registra a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="d4100-256">Chamadas para <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> só deve ser executada dentro de construtores estáticos do tipo que fornece a próprio como o `forType` parâmetro deste método, ou por meio de instanciação semelhante.</span><span class="sxs-lookup"><span data-stu-id="d4100-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="d4100-257">Tentativa de alterar os metadados depois que houver instâncias do tipo proprietário não gerará exceções, mas resultará em comportamentos inconsistente no sistema de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="d4100-258">Depois que os metadados para uma substituição de determinada classe derivada é estabelecido com esse método, as tentativas subsequentes para substituir os metadados sobre essa mesma classe derivada gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="d4100-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="d4100-259">Os metadados fornecidos são mesclados com os metadados de propriedade para a propriedade de dependência conforme ela existe no proprietário da base.</span><span class="sxs-lookup"><span data-stu-id="d4100-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="d4100-260">Quaisquer características que foram especificadas nos metadados de base original serão mantido; somente essas características que foram alteradas especificamente os novos metadados substituirá as características dos metadados de base.</span><span class="sxs-lookup"><span data-stu-id="d4100-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="d4100-261">Algumas características como <xref:System.Windows.PropertyMetadata.DefaultValue%2A> são substituídos, se especificado nos metadados de novo.</span><span class="sxs-lookup"><span data-stu-id="d4100-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="d4100-262">Outras, como <xref:System.Windows.PropertyChangedCallback>, são combinados.</span><span class="sxs-lookup"><span data-stu-id="d4100-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="d4100-263">Por fim, o comportamento de mesclagem depende do tipo de metadados de propriedade que está sendo usado para a substituição, portanto, o comportamento descrito aqui é para as classes de metadados de propriedade existentes usadas pelo [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriedades de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="d4100-264">Para obter detalhes, consulte [metadados de propriedade de dependência](~/docs/framework/wpf/advanced/dependency-property-metadata.md) e [metadados de propriedade do Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d4100-265">Foi feita uma tentativa de substituir metadados em uma propriedade de dependência somente leitura (essa operação não pode ser feita usando essa assinatura).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d4100-266">Os metadados já foram estabelecidos para a propriedade de dependência como ela existe no tipo fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="d4100-267">O tipo no qual essa propriedade de dependência é herdada e os metadados alternativos fornecidos serão aplicados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d4100-268">Os metadados a serem aplicados à propriedade de dependência no tipo de substituição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="d4100-269">A chave de acesso para uma propriedade de dependência somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-270">Fornece os metadados alternativos para uma propriedade de dependência somente leitura quando ela existe em instâncias de um tipo especificado, substituindo os metadados que foram fornecidos no registro de propriedade de dependência inicial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="d4100-271">Você deve passar o <see cref="T:System.Windows.DependencyPropertyKey" /> para a propriedade de dependência somente leitura para evitar gerar uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-272">Esta assinatura fornece implementação subjacente para um identificador de propriedade de dependência somente leitura (<xref:System.Windows.DependencyPropertyKey>) método.</span><span class="sxs-lookup"><span data-stu-id="d4100-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="d4100-273">Se substituir os metadados para uma propriedade de dependência de leitura / gravação, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="d4100-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="d4100-274">Metadados de propriedade de dependência devem ser substituído antes do sistema de propriedade usa a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="d4100-275">Isso é igual ao tempo que são criados objetos específicos para a classe que registra a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="d4100-276">Chamadas para <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> só deve ser executada dentro de construtores estáticos do tipo que fornece a próprio como o `forType` parâmetro deste método, ou por meio de instanciação semelhante.</span><span class="sxs-lookup"><span data-stu-id="d4100-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="d4100-277">Tentativa de alterar os metadados depois que houver instâncias do tipo proprietário não gerará exceções, mas resultará em comportamentos inconsistente no sistema de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="d4100-278">Depois que os metadados para uma substituição de determinada classe derivada é estabelecido com esse método, as tentativas subsequentes para substituir os metadados sobre essa mesma classe derivada gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="d4100-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="d4100-279">Os metadados fornecidos são mesclados com os metadados de propriedade para a propriedade de dependência conforme ela existe no proprietário da base.</span><span class="sxs-lookup"><span data-stu-id="d4100-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="d4100-280">Quaisquer características que foram especificadas nos metadados de base original serão mantido; somente essas características que foram alteradas especificamente os novos metadados substituirá as características dos metadados de base.</span><span class="sxs-lookup"><span data-stu-id="d4100-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="d4100-281">Algumas características como <xref:System.Windows.PropertyMetadata.DefaultValue%2A> são substituídos, se especificado nos metadados de novo.</span><span class="sxs-lookup"><span data-stu-id="d4100-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="d4100-282">Outras, como <xref:System.Windows.PropertyChangedCallback>, são combinados.</span><span class="sxs-lookup"><span data-stu-id="d4100-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="d4100-283">O comportamento de mesclagem depende do tipo de metadados de propriedade que está sendo usado para a substituição.</span><span class="sxs-lookup"><span data-stu-id="d4100-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="d4100-284">Para obter detalhes, consulte [metadados de propriedade de dependência](~/docs/framework/wpf/advanced/dependency-property-metadata.md) e [metadados de propriedade do Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-285">Obtém o tipo do objeto que registrou a propriedade de dependência com o sistema de propriedade ou que adicionou a si próprio como proprietário da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4100-286">O tipo do objeto que registrou a propriedade ou que adicionou a si próprio como proprietário da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-287">Esse valor foi fornecido durante o registro de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-287">This value was provided during property registration.</span></span> <span data-ttu-id="d4100-288">O proprietário será o tipo do registro original no caso de um <xref:System.Windows.DependencyProperty> identificador gerado a partir de um <xref:System.Windows.DependencyProperty.Register%2A> chamada ou o tipo que adicionou em si como proprietário no caso de um <xref:System.Windows.DependencyProperty> identificador gerado a partir de um <xref:System.Windows.DependencyProperty.AddOwner%2A> chamar.</span><span class="sxs-lookup"><span data-stu-id="d4100-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="d4100-289">O <xref:System.Windows.DependencyProperty.OwnerType%2A> em qualquer dado <xref:System.Windows.DependencyProperty> é imutável e não pode ser `null` em válido <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-290">O exemplo a seguir obtém o tipo de proprietário com base em um identificador de propriedade de dependência `dp`e, em seguida, obtém metadados sobre o tipo de proprietário para o mesmo identificador.</span><span class="sxs-lookup"><span data-stu-id="d4100-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="d4100-291">Esta operação é realmente equivalente à obtenção <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> em `dp`.</span><span class="sxs-lookup"><span data-stu-id="d4100-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-292">Obtém o tipo que a propriedade de dependência usa para seu valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4100-293">O <see cref="T:System.Type" /> do valor da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-294">Essa propriedade informa o tipo de valor da propriedade conforme declarado pelo registro original de propriedade, por meio de `propertyType` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="d4100-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="d4100-295">Semelhante do <xref:System.Windows.DependencyProperty.Name%2A>, o tipo de propriedade de uma propriedade de dependência é imutável depois do registro.</span><span class="sxs-lookup"><span data-stu-id="d4100-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-296">O exemplo a seguir consulta várias características de um identificador de propriedade de dependência, incluindo o <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="d4100-297">A cadeia de caracteres de nome de tipo do <xref:System.Windows.DependencyProperty.PropertyType%2A> é obtido do retornado <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="d4100-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-298">Obtém um valor que indica se a propriedade de dependência identificada por essa instância <see cref="T:System.Windows.DependencyProperty" /> é uma propriedade de dependência somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4100-299">
            <see langword="true" /> Se a propriedade de dependência é somente leitura; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-300">Propriedades de dependência somente leitura são registradas no sistema de propriedade chamando o <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> método em vez do <xref:System.Windows.DependencyProperty.Register%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d4100-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="d4100-301">Propriedades anexadas também podem ser registradas como somente leitura; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="d4100-302">Propriedades de dependência somente leitura exigem um <xref:System.Windows.DependencyPropertyKey> identificador em vez de <xref:System.Windows.DependencyProperty> identificador para executar operações de metadados, como substituir os metadados ou definir o valor.</span><span class="sxs-lookup"><span data-stu-id="d4100-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="d4100-303">Se você tiver obtido uma coleção de <xref:System.Windows.DependencyProperty> identificadores por meio de uma chamada para <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> ou outro [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] que expõe identificadores, verifique o <xref:System.Windows.DependencyProperty.ReadOnly%2A> valor antes de tentar chamar <xref:System.Windows.DependencyObject.SetValue%2A> ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> usando esse identificador de propriedade de dependência como um parâmetro de entrada para verificar se a propriedade de dependência que representa o identificador não é somente leitura.</span><span class="sxs-lookup"><span data-stu-id="d4100-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="d4100-304">Se o valor de <xref:System.Windows.DependencyProperty.ReadOnly%2A> é `true` em uma propriedade de dependência, não há nenhuma maneira programática para obter uma referência para o <xref:System.Windows.DependencyPropertyKey> identificador de propriedade de dependência, a partir de metadados ou o <xref:System.Windows.DependencyProperty> identificador; o identificador deve estar disponível como um campo estático para chamar <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> em relação a uma propriedade de dependência somente leitura.</span><span class="sxs-lookup"><span data-stu-id="d4100-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="d4100-305">Quando você cria uma propriedade de dependência personalizada e registrá-lo como somente leitura, você deve definir apenas um acessador get para a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] propriedade wrapper.</span><span class="sxs-lookup"><span data-stu-id="d4100-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="d4100-306">Caso contrário, sua classe terá um modelo de objeto confuso para o wrapper de propriedade em comparação com o acesso para a propriedade de dependência de backup.</span><span class="sxs-lookup"><span data-stu-id="d4100-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="d4100-307">Para obter detalhes, consulte [propriedades de dependência personalizadas](~/docs/framework/wpf/advanced/custom-dependency-properties.md) ou [propriedades de dependência somente leitura](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-308">O exemplo a seguir obtém os metadados de padrão e as propriedades de identificador de propriedade de dependência de vários campos de propriedade de dependência e usa as informações para popular uma tabela para implementar um navegador de metadados"".</span><span class="sxs-lookup"><span data-stu-id="d4100-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-309">Registra uma propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-310">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="d4100-311">O nome deve ser exclusivo dentro do namespace de registro do tipo proprietário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-312">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-313">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-314">Registra uma propriedade de dependência com o nome de propriedade, tipo de propriedade e tipo de proprietário especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-315">Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d4100-316">Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-317">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-318">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-319">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-320">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d4100-321">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-322">Registra uma propriedade de dependência com o nome de propriedade, tipo de propriedade, tipo de proprietário e metadados de propriedade especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-323">Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d4100-324">Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-325">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-326">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-327">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-328">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d4100-329">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d4100-330">Uma referência a um retorno de chamada que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-331">Registra uma propriedade de dependência com o nome da propriedade, tipo de propriedade, tipo de proprietário, metadados de propriedade especificados e um retorno de chamada de validação do valor da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-332">Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d4100-333">Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-334">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-335">O exemplo a seguir registra uma propriedade de dependência, incluindo um retorno de chamada de validação (a definição de retorno de chamada não é mostrada; para obter detalhes sobre a definição de retorno de chamada, consulte <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="d4100-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-336">Registra uma propriedade anexada com o sistema de propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-337">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-338">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-339">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-340">Registra uma propriedade anexada com o nome de propriedade, o tipo de propriedade e o tipo de proprietário especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-341">Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d4100-342">Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-343">Uma propriedade anexada é um conceito de propriedade definido por [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="d4100-344"> implementa propriedades anexadas como propriedades de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="d4100-345">Porque o [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriedades anexadas são propriedades de dependência, elas podem ter metadados aplicado que podem ser usado pelo sistema de propriedades gerais para operações, como relatórios de características de layout.</span><span class="sxs-lookup"><span data-stu-id="d4100-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="d4100-346">Para obter mais informações, consulte [Visão geral das propriedades anexadas](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="d4100-347">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-348">O exemplo a seguir registra uma propriedade anexada em uma classe abstrata que usam essa <xref:System.Windows.DependencyProperty.RegisterAttached%2A> assinatura.</span><span class="sxs-lookup"><span data-stu-id="d4100-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-349">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-350">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-351">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d4100-352">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="d4100-353">Isso pode incluir o valor padrão, bem como outras características.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-354">Registra uma propriedade anexada com o nome de propriedade, tipo de propriedade, tipo de proprietário e metadados de propriedade especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-355">Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d4100-356">Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-357">Uma propriedade anexada é um conceito de propriedade definido por [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="d4100-358"> implementa propriedades anexadas como propriedades de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="d4100-359">Porque o [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriedades anexadas são propriedades de dependência, elas podem ter metadados aplicado que podem ser usado pelo sistema de propriedades gerais para operações, como relatórios de características de layout.</span><span class="sxs-lookup"><span data-stu-id="d4100-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="d4100-360">Para obter mais informações, consulte [Visão geral das propriedades anexadas](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="d4100-361">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d4100-362">Use RegisterAttached herdar o valor das propriedades de dependência</span><span class="sxs-lookup"><span data-stu-id="d4100-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d4100-363">Um cenário específico para registrar uma propriedade de dependência com <xref:System.Windows.DependencyProperty.RegisterAttached%2A> em vez de <xref:System.Windows.DependencyProperty.Register%2A> deve dar suporte a herança de valor de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="d4100-364">Você deve registrar a herança de valor de propriedades de dependência com <xref:System.Windows.DependencyProperty.RegisterAttached%2A> mesmo que a classe define os acessadores da propriedade wrapper que expõe a propriedade de dependência, e mesmo se você não pretende expor Get * e conjunto * estático métodos para fornecer a propriedade anexada true oferecem suporte a acessadores.</span><span class="sxs-lookup"><span data-stu-id="d4100-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d4100-365">Embora a herança de valor de propriedade pode parecer funcionar para as propriedades de dependência, o comportamento de herança de uma propriedade não anexada por certos limites elemento na árvore de tempo de execução é indefinido.</span><span class="sxs-lookup"><span data-stu-id="d4100-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d4100-366">Registrar a propriedade como anexada efetivamente torna a propriedade anexada uma propriedade global para o sistema de propriedade e garante que a herança de valor de propriedade funciona em todos os limites em uma árvore de elemento.</span><span class="sxs-lookup"><span data-stu-id="d4100-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d4100-367">Sempre use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar as propriedades em que você especificar <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> nos metadados.</span><span class="sxs-lookup"><span data-stu-id="d4100-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d4100-368">Para obter mais informações, consulte [Herança do valor da propriedade](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-369">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-370">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-371">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d4100-372">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="d4100-373">Isso pode incluir o valor padrão, bem como outras características.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d4100-374">Uma referência a um retorno de chamada que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-375">Registra uma propriedade anexada com o tipo de propriedade, o tipo de proprietário, os metadados de propriedade e o retorno de chamada de validação de valor da propriedade especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-376">Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d4100-377">Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-378">Uma propriedade anexada é um conceito de propriedade definido por [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="d4100-379"> implementa propriedades anexadas como propriedades de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="d4100-380">Porque o [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] propriedades anexadas são propriedades de dependência, elas podem ter metadados aplicado que podem ser usado pelo sistema de propriedades gerais para operações, como relatórios de características de layout.</span><span class="sxs-lookup"><span data-stu-id="d4100-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="d4100-381">Para obter mais informações, consulte [Visão geral das propriedades anexadas](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="d4100-382">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d4100-383">Use RegisterAttached herdar o valor das propriedades de dependência</span><span class="sxs-lookup"><span data-stu-id="d4100-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d4100-384">Um cenário específico para registrar uma propriedade de dependência com <xref:System.Windows.DependencyProperty.RegisterAttached%2A> em vez de <xref:System.Windows.DependencyProperty.Register%2A> deve dar suporte a herança de valor de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="d4100-385">Você deve registrar a herança de valor de propriedades de dependência com <xref:System.Windows.DependencyProperty.RegisterAttached%2A> mesmo que a classe define os acessadores da propriedade wrapper que expõe a propriedade de dependência, e mesmo se você não pretende expor Get * e conjunto * estático métodos para fornecer a propriedade anexada true oferecem suporte a acessadores.</span><span class="sxs-lookup"><span data-stu-id="d4100-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d4100-386">Embora a herança de valor de propriedade pode parecer funcionar para as propriedades de dependência, o comportamento de herança de uma propriedade não anexada por certos limites elemento na árvore de tempo de execução é indefinido.</span><span class="sxs-lookup"><span data-stu-id="d4100-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d4100-387">Registrar a propriedade como anexada efetivamente torna a propriedade anexada uma propriedade global para o sistema de propriedade e garante que a herança de valor de propriedade funciona em todos os limites em uma árvore de elemento.</span><span class="sxs-lookup"><span data-stu-id="d4100-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d4100-388">Sempre use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar as propriedades em que você especificar <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> nos metadados.</span><span class="sxs-lookup"><span data-stu-id="d4100-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d4100-389">Para obter mais informações, consulte [Herança do valor da propriedade](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-390">O exemplo a seguir registra uma propriedade anexada em uma classe abstrata que usam essa <xref:System.Windows.DependencyProperty.RegisterAttached%2A> assinatura.</span><span class="sxs-lookup"><span data-stu-id="d4100-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="d4100-391">Essa propriedade anexada é uma propriedade de tipo de enumeração e o registro adiciona um retorno de chamada de validação para verificar se o valor fornecido é um valor da enumeração.</span><span class="sxs-lookup"><span data-stu-id="d4100-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-392">Registra uma propriedade anexada somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-393">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-394">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-395">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d4100-396">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-397">Registra uma propriedade anexada somente leitura com o tipo de propriedade, tipo de proprietário e metadados de propriedade especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-398">Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo estático somente leitura na classe, que é então usado para referenciar à propriedade de dependência posteriormente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-399">Esse método retorna o tipo <xref:System.Windows.DependencyPropertyKey>, enquanto <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retorna o tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d4100-400">Normalmente, as chaves que representam as propriedades somente leitura não são feitas públicas, porque as chaves podem ser usadas para definir o valor de propriedade de dependência chamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="d4100-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d4100-401">O design de classe afetará seus requisitos, mas geralmente é recomendável limitar o acesso e a visibilidade de qualquer <xref:System.Windows.DependencyPropertyKey> somente às partes do seu código que são necessárias para definir a propriedade de dependência como parte da lógica do aplicativo ou classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d4100-402">Também é recomendável que você exponha um identificador de propriedade de dependência para a propriedade de dependência somente leitura, expondo o valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como um `public static readonly` campo em sua classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d4100-403">Propriedades anexadas somente leitura são um cenário raro, pois o cenário principal para uma propriedade anexada é seu uso em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="d4100-404">Sem um setter público, uma propriedade anexada não pode ser definida [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxe.</span><span class="sxs-lookup"><span data-stu-id="d4100-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="d4100-405">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d4100-406">Use RegisterAttached herdar o valor das propriedades de dependência</span><span class="sxs-lookup"><span data-stu-id="d4100-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d4100-407">Um cenário específico para registrar uma propriedade de dependência como anexado é dar suporte a herança de valor de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="d4100-408">Você deve registrar a herança de valor de propriedades de dependência com <xref:System.Windows.DependencyProperty.RegisterAttached%2A> mesmo que a classe define os acessadores da propriedade wrapper que expõe a propriedade de dependência, e mesmo se você não pretende expor Get * e conjunto * estático métodos para fornecer a propriedade anexada true oferecem suporte a acessadores.</span><span class="sxs-lookup"><span data-stu-id="d4100-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d4100-409">Embora a herança de valor de propriedade pode parecer funcionar para as propriedades de dependência, o comportamento de herança de uma propriedade não anexada por certos limites elemento na árvore de tempo de execução é indefinido.</span><span class="sxs-lookup"><span data-stu-id="d4100-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d4100-410">Registrar a propriedade como anexada efetivamente torna a propriedade anexada uma propriedade global para o sistema de propriedade e garante que a herança de valor de propriedade funciona em todos os limites em uma árvore de elemento.</span><span class="sxs-lookup"><span data-stu-id="d4100-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d4100-411">Sempre use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar as propriedades em que você especificar <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> nos metadados.</span><span class="sxs-lookup"><span data-stu-id="d4100-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d4100-412">Para obter mais informações, consulte [Herança do valor da propriedade](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-413">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-414">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-415">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d4100-416">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d4100-417">Uma referência a um retorno de chamada criado pelo usuário que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-418">Registra uma propriedade anexada somente leitura com o tipo de propriedade, tipo de proprietário, metadados de propriedade e retorno de chamada especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-419">Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo somente leitura estático na sua classe, que então é usado para fazer referência à propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-420">Esse método retorna o tipo <xref:System.Windows.DependencyPropertyKey>, enquanto <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retorna o tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d4100-421">Normalmente, as chaves que representam o tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d4100-422">Normalmente, as chaves que representam as propriedades somente leitura não são feitas públicas, porque as chaves podem ser usadas para definir o valor de propriedade de dependência chamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="d4100-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d4100-423">O design de classe afetará seus requisitos, mas geralmente é recomendável limitar o acesso e a visibilidade de qualquer <xref:System.Windows.DependencyPropertyKey> somente às partes do seu código que são necessárias para definir a propriedade de dependência como parte da lógica do aplicativo ou classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d4100-424">Também é recomendável que você exponha um identificador de propriedade de dependência para a propriedade de dependência somente leitura, expondo o valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como um `public static readonly` campo em sua classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d4100-425">Propriedades anexadas somente leitura são um cenário raro, pois o cenário principal para uma propriedade anexada é seu uso em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="d4100-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="d4100-426">Sem um setter público, uma propriedade anexada não pode ser definida [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxe.</span><span class="sxs-lookup"><span data-stu-id="d4100-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="d4100-427">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d4100-428">Use RegisterAttached herdar o valor das propriedades de dependência</span><span class="sxs-lookup"><span data-stu-id="d4100-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d4100-429">Um cenário específico para registrar uma propriedade de dependência como conectado, em vez de <xref:System.Windows.DependencyProperty.Register%2A> deve dar suporte a herança de valor de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="d4100-430">Você deve registrar a herança de valor de propriedades de dependência com <xref:System.Windows.DependencyProperty.RegisterAttached%2A> mesmo que a classe define os acessadores da propriedade wrapper que expõe a propriedade de dependência, e mesmo se você não pretende expor Get * e conjunto * estático métodos para fornecer a propriedade anexada true oferecem suporte a acessadores.</span><span class="sxs-lookup"><span data-stu-id="d4100-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d4100-431">Embora a herança de valor de propriedade pode parecer funcionar para as propriedades de dependência, o comportamento de herança de uma propriedade não anexada por certos limites elemento na árvore de tempo de execução é indefinido.</span><span class="sxs-lookup"><span data-stu-id="d4100-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d4100-432">Registrar a propriedade como anexada efetivamente torna a propriedade anexada uma propriedade global para o sistema de propriedade e garante que a herança de valor de propriedade funciona em todos os limites em uma árvore de elemento.</span><span class="sxs-lookup"><span data-stu-id="d4100-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d4100-433">Sempre use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar as propriedades em que você especificar <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> nos metadados.</span><span class="sxs-lookup"><span data-stu-id="d4100-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d4100-434">Para obter mais informações, consulte [Herança do valor da propriedade](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-435">Registra a propriedade de dependência como uma propriedade de dependência somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-436">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-437">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-438">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d4100-439">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-440">Registra uma propriedade de dependência somente leitura com o tipo da propriedade, tipo de proprietário e metadados de propriedade especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-441">Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo somente leitura estático na sua classe, que então é usado para fazer referência à propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-442">Esse método retorna o tipo <xref:System.Windows.DependencyPropertyKey>, enquanto <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retorna o tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d4100-443">Normalmente, as chaves que representam as propriedades somente leitura não são feitas públicas, porque as chaves podem ser usadas para definir o valor de propriedade de dependência chamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="d4100-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d4100-444">O design de classe afetará seus requisitos, mas geralmente é recomendável limitar o acesso e a visibilidade de qualquer <xref:System.Windows.DependencyPropertyKey> somente às partes do seu código que são necessárias para definir a propriedade de dependência como parte da lógica do aplicativo ou classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d4100-445">Também é recomendável que você exponha um identificador de propriedade de dependência para a propriedade de dependência somente leitura, expondo o valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como um `public static readonly` campo em sua classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d4100-446">Propriedades de dependência somente leitura são um bastante cenário típico ambas as existentes no [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] e para cenários de personalização, porque outros [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] recursos podem exigir uma propriedade de dependência, mesmo se essa propriedade não se destina a ser configuráveis por chamadores.</span><span class="sxs-lookup"><span data-stu-id="d4100-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="d4100-447">Você pode usar o valor da propriedade de dependência somente leitura como base para outras operações de sistema de propriedade que usam uma propriedade de dependência, como basear um <xref:System.Windows.Trigger> na propriedade de dependência em um estilo.</span><span class="sxs-lookup"><span data-stu-id="d4100-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="d4100-448">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4100-449">O exemplo a seguir registra um `AquariumSize` DependencyProperty como somente leitura.</span><span class="sxs-lookup"><span data-stu-id="d4100-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="d4100-450">O exemplo define `AquariumSizeKey` como uma chave interna (para que os outros classes do assembly podem substituir os metadados) e expõe o identificador de propriedade de dependência baseado nessa chave como `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="d4100-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="d4100-451">Além disso, um wrapper é criado para `AquariumSize`, com apenas um acessador get.</span><span class="sxs-lookup"><span data-stu-id="d4100-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d4100-452">O nome da propriedade de dependência a ser registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d4100-453">O tipo da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d4100-454">O tipo de proprietário que está registrando a propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d4100-455">Os metadados de propriedade da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d4100-456">Uma referência a um retorno de chamada criado pelo usuário que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4100-457">Registra uma propriedade de dependência somente leitura com o tipo de propriedade, tipo de proprietário, metadados de propriedade e retorno de chamada especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-458">Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo estático somente leitura na classe, que é então usado para referenciar à propriedade de dependência posteriormente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-459">Esse método retorna o tipo <xref:System.Windows.DependencyPropertyKey>, enquanto <xref:System.Windows.DependencyProperty.RegisterAttached%2A> retorna o tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d4100-460">Normalmente, as chaves que representam as propriedades somente leitura não são feitas públicas, porque as chaves podem ser usadas para definir o valor de propriedade de dependência chamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="d4100-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d4100-461">O design de classe afetará seus requisitos, mas geralmente é recomendável limitar o acesso e a visibilidade de qualquer <xref:System.Windows.DependencyPropertyKey> somente às partes do seu código que são necessárias para definir a propriedade de dependência como parte da lógica do aplicativo ou classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d4100-462">Também é recomendável que você exponha um identificador de propriedade de dependência para a propriedade de dependência somente leitura, expondo o valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como um `public static readonly` campo em sua classe.</span><span class="sxs-lookup"><span data-stu-id="d4100-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d4100-463">Propriedades de dependência somente leitura são um cenário bastante comum.</span><span class="sxs-lookup"><span data-stu-id="d4100-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="d4100-464">Você pode usar o valor da propriedade de dependência somente leitura como base para outras operações de sistema de propriedade que usam uma propriedade de dependência, como basear um <xref:System.Windows.Trigger> na propriedade de dependência em um estilo.</span><span class="sxs-lookup"><span data-stu-id="d4100-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="d4100-465">Para obter mais informações sobre o registro de propriedade de dependência, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="d4100-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="d4100-466">A validação de uma propriedade de dependência somente leitura pode ser menos importante.</span><span class="sxs-lookup"><span data-stu-id="d4100-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="d4100-467">O nível de acesso não público que você especificar para a chave reduz a probabilidade para entrada inválida arbitrária.</span><span class="sxs-lookup"><span data-stu-id="d4100-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4100-468">Retorna a representação de cadeia de caracteres da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4100-469">A representação de cadeia de caracteres da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-470">Essa implementação retorna o <xref:System.Windows.DependencyProperty.Name%2A> o valor da propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4100-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-471">Especifica um valor estático que é usado pelo sistema da propriedade [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] em vez de <see langword="null" /> para indicar que a propriedade existe, mas não tem seu valor definido pelo sistema da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-472"><xref:System.Windows.DependencyProperty.UnsetValue> é um valor de sentinela que é usado para cenários onde o [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propriedade é não é possível determinar um solicitado <xref:System.Windows.DependencyProperty> valor.</span><span class="sxs-lookup"><span data-stu-id="d4100-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="d4100-473"><xref:System.Windows.DependencyProperty.UnsetValue> é usado em vez de `null`, pois `null` pode ser um valor de propriedade válido, bem como uma opção válida (e usados com frequência) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="d4100-474"><xref:System.Windows.DependencyProperty.UnsetValue> nunca é retornada de <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d4100-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4100-475">Quando você chama <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> em uma propriedade de dependência em um <xref:System.Windows.DependencyObject> instância, uma das opções a seguir se aplica:</span><span class="sxs-lookup"><span data-stu-id="d4100-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="d4100-476">Uma propriedade de dependência tem um valor padrão estabelecido em metadados e esse valor será retornado.</span><span class="sxs-lookup"><span data-stu-id="d4100-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="d4100-477">Esse valor pode vir de <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="d4100-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="d4100-478">Algum outro valor foi estabelecido pelo sistema de propriedade e o valor padrão não é mais relevante.</span><span class="sxs-lookup"><span data-stu-id="d4100-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="d4100-479">Para obter mais detalhes, consulte [Precedência do valor da propriedade da dependência](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="d4100-480">Definindo um <xref:System.Windows.PropertyMetadata.DefaultValue%2A> de <xref:System.Windows.DependencyProperty.UnsetValue> não é especificamente permitido.</span><span class="sxs-lookup"><span data-stu-id="d4100-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="d4100-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Retorna <xref:System.Windows.DependencyProperty.UnsetValue> quando a propriedade solicitada não foi definida localmente.</span><span class="sxs-lookup"><span data-stu-id="d4100-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="d4100-482"><xref:System.Windows.DependencyProperty.UnsetValue> tem um significado especial quando usado como o valor de retorno de um <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="d4100-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="d4100-483">Para obter detalhes, consulte [retornos de chamada de propriedade de dependência e validação](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="d4100-484">Observe que, se você estiver associando a um banco de dados, <xref:System.Windows.DependencyProperty.UnsetValue> não é equivalente a <xref:System.DBNull.Value>, de maneira semelhante a como <xref:System.DBNull.Value> não é equivalente a um valor nulo true.</span><span class="sxs-lookup"><span data-stu-id="d4100-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4100-485">Obtém o retorno de chamada de validação do valor da propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4100-486">O retorno de chamada de validação de valor para essa propriedade de dependência, conforme fornecido para o parâmetro <paramref name="validateValueCallback" /> no registro de propriedade de dependência original.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4100-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4100-487">Essa propriedade conterá `null` para qualquer propriedade de dependência com nenhum retorno de chamada de validação registrado.</span><span class="sxs-lookup"><span data-stu-id="d4100-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="d4100-488">Validar o valor de retornos de chamada devem agir de forma estática: validação aplicada por meio de <xref:System.Windows.ValidateValueCallback> não é possível determinar se o valor fornecido é válido para qualquer instância específica.</span><span class="sxs-lookup"><span data-stu-id="d4100-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="d4100-489">O retorno de chamada somente pode determinar se todos os objetos que possuem a propriedade de dependência devem ou não devem aceitar o valor fornecido como válido.</span><span class="sxs-lookup"><span data-stu-id="d4100-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="d4100-490">Se você precisar executar a validação que depende de saber os valores de outras propriedades de dependência em uma instância específica, use um <xref:System.Windows.CoerceValueCallback> em vez disso.</span><span class="sxs-lookup"><span data-stu-id="d4100-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="d4100-491">O <xref:System.Windows.CoerceValueCallback> é registrado como parte dos metadados de propriedade de dependência, em vez de diretamente dentro do identificador de propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4100-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="d4100-492">Para obter detalhes, consulte [retornos de chamada de propriedade de dependência e validação](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="d4100-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>