<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4cdf245a9689919000af11208b44b103950e964a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36460953" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b2dff-101">Fornece um identificador de propriedade de dependência para acesso de gravação limitado a uma propriedade de dependência somente leitura.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b2dff-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2dff-102"><xref:System.Windows.DependencyPropertyKey> instâncias são obtidas como o valor de retorno de uma chamada de registro de propriedade de dependência usando os métodos <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> ou <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="b2dff-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="b2dff-103">Os tipos que registrar uma propriedade de dependência podem usar o <xref:System.Windows.DependencyPropertyKey> em chamadas para <xref:System.Windows.DependencyObject.SetValue%2A> e <xref:System.Windows.DependencyObject.ClearValue%2A> que ajustar o valor da propriedade como parte da lógica de classe.</span><span class="sxs-lookup"><span data-stu-id="b2dff-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="b2dff-104">Se permitido pelo nível de acesso da chave, classes relacionadas também podem usar a chave e a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="b2dff-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="b2dff-105">Por exemplo, você pode declarar a chave como internos e outros tipos de dentro do mesmo assembly também podem definir a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="b2dff-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="b2dff-106">O <xref:System.Windows.DependencyPropertyKey> retornado pela dependência de somente leitura registro da propriedade não deve ser feito público, como expor a chave torna a propriedade configurável, invalidando, assim, o ponto de registro-la como uma propriedade de dependência somente leitura.</span><span class="sxs-lookup"><span data-stu-id="b2dff-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="b2dff-107">Além disso, expondo a chave causa uma incompatibilidade entre a dependência disponível comportamentos de propriedade e seu [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] implementações de wrapper de propriedade, que é o design de classe inválido.</span><span class="sxs-lookup"><span data-stu-id="b2dff-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="b2dff-108">Em vez de expor a chave em si, em vez disso, você deve expor o <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor o <xref:System.Windows.DependencyPropertyKey> como um `public static readonly` <xref:System.Windows.DependencyProperty> em sua classe.</span><span class="sxs-lookup"><span data-stu-id="b2dff-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="b2dff-109">Isso permite que a propriedade retornar um identificador de propriedade de dependência válido para determinadas operações de sistema de propriedades como a numeração de valores definidos localmente.</span><span class="sxs-lookup"><span data-stu-id="b2dff-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="b2dff-110">No entanto, o identificador obtido, portanto, não tem recursos completos de um <xref:System.Windows.DependencyProperty> para várias operações de sistema de propriedade.</span><span class="sxs-lookup"><span data-stu-id="b2dff-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2dff-111">O exemplo a seguir registra uma propriedade de dependência somente leitura e também usa a chave para dois propósitos em outros membros de classe: Implementando get "wrapper" e como o identificador para uma operação de determinação protegido que define o valor com base nos cálculos outros valores de propriedade.</span><span class="sxs-lookup"><span data-stu-id="b2dff-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b2dff-112">Obtém o identificador de propriedade de dependência associado a este identificador de propriedade de dependência somente leitura especializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2dff-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b2dff-113">O identificador de propriedade de dependência relevantes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2dff-113">The relevant dependency property identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2dff-114">O <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valor permite que o identificador de uma propriedade somente leitura do participar de operações do sistema de propriedades usando algumas das mesmas interfaces usadas para propriedades de dependência de leitura / gravação em comum.</span><span class="sxs-lookup"><span data-stu-id="b2dff-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="b2dff-115">Para implementar o acessador de propriedade get para uma propriedade de dependência somente leitura, você deve criar e expor um <xref:System.Windows.DependencyProperty> identificador em sua classe.</span><span class="sxs-lookup"><span data-stu-id="b2dff-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="b2dff-116">Isso serve para duas finalidades:</span><span class="sxs-lookup"><span data-stu-id="b2dff-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="b2dff-117">Suas necessidades de classe a <xref:System.Windows.DependencyProperty> identificador para implementar o acessador get para o wrapper de propriedade.</span><span class="sxs-lookup"><span data-stu-id="b2dff-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="b2dff-118">Você usa o <xref:System.Windows.DependencyProperty> como um parâmetro para o <xref:System.Windows.DependencyObject.GetValue%2A> chamada que implementa o acessador get.</span><span class="sxs-lookup"><span data-stu-id="b2dff-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="b2dff-119"><xref:System.Windows.DependencyProperty> identificadores de expõem sua propriedade de dependência para o sistema de propriedade, de modo que outros métodos que se baseiam nos metadados podem acessá-lo em um formato padrão.</span><span class="sxs-lookup"><span data-stu-id="b2dff-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="b2dff-120">Por exemplo, se você chamou <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> em alguns <xref:System.Windows.DependencyObject> e obter uma enumeração de localmente conjunto de propriedades (valores e identificadores) o identificador retornado para uma propriedade de dependência somente leitura seria o <xref:System.Windows.DependencyProperty> valor em vez da chave.</span><span class="sxs-lookup"><span data-stu-id="b2dff-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="b2dff-121">Não expor um <xref:System.Windows.DependencyProperty> identificador não aumenta a segurança de sua propriedade de dependência somente leitura de qualquer forma, isso facilita as operações que envolvem a mais complicado para classes derivadas subsequentes e instâncias de classe de propriedade.</span><span class="sxs-lookup"><span data-stu-id="b2dff-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="b2dff-122">Para expor o <xref:System.Windows.DependencyProperty> identificador em sua classe, chame <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> diretamente em sua chave.</span><span class="sxs-lookup"><span data-stu-id="b2dff-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="b2dff-123">Use esse valor para criar um `public static readonly` <xref:System.Windows.DependencyProperty> identificador na classe, comparável ao <xref:System.Windows.DependencyPropertyKey>.</span><span class="sxs-lookup"><span data-stu-id="b2dff-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2dff-124">A exemplo a seguir chama <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> para expor o <xref:System.Windows.DependencyProperty> identificador (`AquariumGraphicProperty`) para o `AquariumGraphic` propriedade de dependência somente leitura em uma classe.</span><span class="sxs-lookup"><span data-stu-id="b2dff-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="b2dff-125">O exemplo também mostra o <xref:System.Windows.DependencyPropertyKey> criação (como um membro interno) e o acessador get para `AquariumGraphic`.</span><span class="sxs-lookup"><span data-stu-id="b2dff-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="b2dff-126">O tipo no qual essa propriedade de dependência existe e os metadados devem ser substituídos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2dff-126">The type on which this dependency property exists and metadata should be overridden.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="b2dff-127">Metadados fornecidos para esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2dff-127">Metadata supplied for this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2dff-128">Substitui os metadados de uma propriedade de dependência somente leitura que é representada por esse identificador de propriedade de dependência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2dff-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2dff-129">Substituir os metadados em uma propriedade de dependência somente leitura é feita por motivos semelhantes como substituir os metadados em uma propriedade de dependência de leitura / gravação e é restrito a acesso no nível de chave porque comportamentos especificados nos metadados podem alterar o comportamento de conjunto (o valor padrão, por exemplo).</span><span class="sxs-lookup"><span data-stu-id="b2dff-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="b2dff-130">Como com as propriedades de dependência de leitura / gravação, substituir os metadados em uma propriedade de dependência somente leitura só deve ser feito antes da propriedade que está sendo colocada em uso pelo sistema de propriedade (Isso é igual ao tempo que instâncias específicas de objetos que registrarem o propriedade são instanciados).</span><span class="sxs-lookup"><span data-stu-id="b2dff-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="b2dff-131">Chamadas para <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> só deve ser executada dentro de construtores estáticos do tipo que fornece a próprio como o `forType` parâmetro deste método ou inicialização equivalente para essa classe.</span><span class="sxs-lookup"><span data-stu-id="b2dff-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="b2dff-132">Esse método efetivamente encaminha para o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método, passando o <xref:System.Windows.DependencyPropertyKey> instância como o parâmetro de chave.</span><span class="sxs-lookup"><span data-stu-id="b2dff-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2dff-133">O exemplo a seguir substitui os metadados para uma propriedade de dependência somente leitura existente que herda de uma classe.</span><span class="sxs-lookup"><span data-stu-id="b2dff-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="b2dff-134">Nesse caso, a meta de cenário foi adicionar um retorno de chamada do valor de forçados não tinha os metadados da propriedade base.</span><span class="sxs-lookup"><span data-stu-id="b2dff-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="b2dff-135">Você também pode substituir os metadados em qualquer um dos outros motivos que substituir os metadados é normalmente apropriados (alterando o valor padrão, adicionando <xref:System.Windows.FrameworkPropertyMetadataOptions> valores, etc.)</span><span class="sxs-lookup"><span data-stu-id="b2dff-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b2dff-136">Ocorreu uma tentativa de substituir os metadados em uma propriedade de dependência de leitura/gravação (não pode ser feita usando essa assinatura).</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2dff-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2dff-137">Os metadados já foram estabelecidos para a propriedade como ela existe no tipo fornecido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2dff-137">Metadata was already established for the property as it exists on the provided type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>