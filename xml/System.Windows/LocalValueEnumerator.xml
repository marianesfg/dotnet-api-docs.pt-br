<Type Name="LocalValueEnumerator" FullName="System.Windows.LocalValueEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ec629675688af65632301370015ffad0f9568c3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct LocalValueEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit LocalValueEnumerator extends System.ValueType implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LocalValueEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure LocalValueEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public value class LocalValueEnumerator : System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="bd130-101">Fornece suporte de enumeração para os valores de locais de quaisquer propriedades de dependência que existem em um <see cref="T:System.Windows.DependencyObject" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bd130-101">Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd130-102">Um *valor local* é um valor para uma propriedade de dependência definida diretamente em uma propriedade de dependência, chamando <xref:System.Windows.DependencyObject.SetValue%2A>, ou mais normalmente usando o acessador set de uma [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper de propriedade que chama <xref:System.Windows.DependencyObject.SetValue%2A> internamente.</span><span class="sxs-lookup"><span data-stu-id="bd130-102">A *local value* is a value for a dependency property that was set directly on a dependency property, by calling <xref:System.Windows.DependencyObject.SetValue%2A>, or more typically by using the set accessor of a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrapper that calls <xref:System.Windows.DependencyObject.SetValue%2A> internally.</span></span> <span data-ttu-id="bd130-103">Exemplos de outros determinantes de sistema de propriedade que não são valores locais são valores definidos por meio de estilos ou valores de propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="bd130-103">Examples of other property system determinants that are not local values are values set through styles, or dependency property default values.</span></span> <span data-ttu-id="bd130-104">Para obter mais detalhes, consulte [Precedência do valor da propriedade da dependência](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="bd130-104">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="bd130-105">Um <xref:System.Windows.LocalValueEnumerator> é retornado pelo <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> método e implementa o <xref:System.Collections.IEnumerator> interface.</span><span class="sxs-lookup"><span data-stu-id="bd130-105">A <xref:System.Windows.LocalValueEnumerator> is returned by the <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> method and implements the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="bd130-106">Um público <xref:System.Windows.LocalValueEnumerator> construtor não existe; portanto, você deve chamar <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> para obter uma instância dessa classe.</span><span class="sxs-lookup"><span data-stu-id="bd130-106">A public <xref:System.Windows.LocalValueEnumerator> constructor does not exist; therefore, you must call <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> to obtain an instance of this class.</span></span>  
  
 <span data-ttu-id="bd130-107">Não modifique os valores locais (chamando <xref:System.Windows.DependencyObject.SetValue%2A> ou <xref:System.Windows.DependencyObject.ClearValue%2A>) ao enumerar os valores locais.</span><span class="sxs-lookup"><span data-stu-id="bd130-107">Do not modify local values (by calling <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyObject.ClearValue%2A>) while enumerating local values.</span></span> <span data-ttu-id="bd130-108">Se você alterar ou limpar os valores de propriedade com base nas propriedades que são retornadas pelo enumerador, a alteração ou as operações de limpeza não invalidará a coleção de enumerador, como é o caso para muitos <xref:System.Collections.IEnumerator> implementações.</span><span class="sxs-lookup"><span data-stu-id="bd130-108">If you change or clear the property values based on properties that are returned by the enumerator, the change or clear operations do not invalidate the enumerator collection, as is the case for many <xref:System.Collections.IEnumerator> implementations.</span></span> <span data-ttu-id="bd130-109">Além disso, o modo de exibição do enumerador é um instantâneo.</span><span class="sxs-lookup"><span data-stu-id="bd130-109">Also, the enumerator view is a snapshot.</span></span> <span data-ttu-id="bd130-110">Uma alteração na coleção não é garantida para ser thread-safe, e nenhum bloqueio é imposto.</span><span class="sxs-lookup"><span data-stu-id="bd130-110">A change to the collection is not guaranteed to be thread safe, and no lock is enforced.</span></span> <span data-ttu-id="bd130-111">Outros threads ainda terá acesso livre para os valores de locais de um contexto diferente do enumerador.</span><span class="sxs-lookup"><span data-stu-id="bd130-111">Other threads still have free access to the local values from a context other than the enumerator.</span></span>  
  
 <span data-ttu-id="bd130-112">Use este tipo se você tiver operações em sua classe em que é importante saber se o valor da propriedade veio de um valor local.</span><span class="sxs-lookup"><span data-stu-id="bd130-112">Use this type if you have operations in your class where it is important to know whether a property's value came from a local value.</span></span> <span data-ttu-id="bd130-113">Por exemplo, usar esse tipo em um <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementação, ou definir as propriedades em que você deseja consultar os metadados em todos os localmente.</span><span class="sxs-lookup"><span data-stu-id="bd130-113">For example, use this type in an <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementation, or where you want to query the metadata on all locally set properties.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bd130-114">Obtém o número de itens representados na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-114">Gets the number of items that are represented in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bd130-115">Número de itens na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-115">The number of items in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd130-116">Essa propriedade não é um membro definido de <xref:System.Collections.IEnumerator> , mas é fornecido como uma conveniência.</span><span class="sxs-lookup"><span data-stu-id="bd130-116">This property is not a defined member of <xref:System.Collections.IEnumerator> but is provided as a convenience.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEntry Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.LocalValueEntry Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As LocalValueEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::LocalValueEntry Current { System::Windows::LocalValueEntry get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bd130-117">Obtém o elemento atual na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-117">Gets the current element in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bd130-118">O <see cref="T:System.Windows.LocalValueEntry" /> atual na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-118">The current <see cref="T:System.Windows.LocalValueEntry" /> in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd130-119">Esta versão geralmente acessível da propriedade se baseia em um instantâneo da coleção que é executada no momento da criação.</span><span class="sxs-lookup"><span data-stu-id="bd130-119">This generally accessible version of the property relies on a snapshot of the collection that is taken at creation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="bd130-120">O <see cref="T:System.Windows.LocalValueEnumerator" /> a ser comparado com o <see cref="T:System.Windows.LocalValueEnumerator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-120">The <see cref="T:System.Windows.LocalValueEnumerator" /> to compare with the current <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd130-121">Determina se o <see cref="T:System.Windows.LocalValueEnumerator" /> fornecido é equivalente a este <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-121">Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator" /> is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd130-122">
            <see langword="true" /> se o <see cref="T:System.Windows.LocalValueEnumerator" /> especificado for igual ao <see cref="T:System.Windows.LocalValueEnumerator" /> atual; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-122">
              <see langword="true" /> if the specified <see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the current <see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd130-123">Essa implementação oferece suporte somente a igualdade de referência.</span><span class="sxs-lookup"><span data-stu-id="bd130-123">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bd130-124">Retorna um código hash para o <see cref="T:System.Windows.LocalValueEnumerator" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-124">Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd130-125">Um código hash de inteiro de 32 bits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-125">A 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bd130-126">Avança o enumerador para o próximo elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-126">Advances the enumerator to the next element of the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd130-127">
            <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-127">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.LocalValueEnumerator obj1, valuetype System.Windows.LocalValueEnumerator obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (obj1 As LocalValueEnumerator, obj2 As LocalValueEnumerator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::LocalValueEnumerator obj1, System::Windows::LocalValueEnumerator obj2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Windows.LocalValueEnumerator" />
        <Parameter Name="obj2" Type="System.Windows.LocalValueEnumerator" />
      </Parameters>
      <Docs>
        <param name="obj1">
          <span data-ttu-id="bd130-128">O primeiro objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-128">The first object to compare.</span>
          </span>
        </param>
        <param name="obj2">
          <span data-ttu-id="bd130-129">O segundo objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-129">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd130-130">Compara os dois objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados para verificar se são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-130">Compares whether two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects are the same.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd130-131">
            <see langword="true" /> se o <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> for igual a <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-131">
              <see langword="true" /> if the <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd130-132">Essa implementação oferece suporte somente a igualdade de referência.</span><span class="sxs-lookup"><span data-stu-id="bd130-132">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.LocalValueEnumerator obj1, valuetype System.Windows.LocalValueEnumerator obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (obj1 As LocalValueEnumerator, obj2 As LocalValueEnumerator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::LocalValueEnumerator obj1, System::Windows::LocalValueEnumerator obj2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Windows.LocalValueEnumerator" />
        <Parameter Name="obj2" Type="System.Windows.LocalValueEnumerator" />
      </Parameters>
      <Docs>
        <param name="obj1">
          <span data-ttu-id="bd130-133">O primeiro objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-133">The first object to compare.</span>
          </span>
        </param>
        <param name="obj2">
          <span data-ttu-id="bd130-134">O segundo objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-134">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bd130-135">Compara dois objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados para determinar se eles não são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-135">Compares two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects to determine whether they are not the same.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bd130-136">
            <see langword="true" /> se as instâncias não forem iguais; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-136">
              <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd130-137">Essa implementação oferece suporte somente a igualdade de referência.</span><span class="sxs-lookup"><span data-stu-id="bd130-137">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bd130-138">Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-138">Sets the enumerator to its initial position, which is before the first element in the collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bd130-139">Para obter uma descrição desses membros, consulte <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-139">For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bd130-140">O elemento atual na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bd130-140">The current element in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd130-141">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="bd130-141">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="bd130-142">Ele só pode ser usado quando a instância de <xref:System.Windows.LocalValueEnumerator> é convertida em uma interface de <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="bd130-142">It can be used only when the <xref:System.Windows.LocalValueEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.LocalValueEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>