<Type Name="WeakEventManager&lt;TEventSource,TEventArgs&gt;" FullName="System.Windows.WeakEventManager&lt;TEventSource,TEventArgs&gt;">
  <TypeSignature Language="C#" Value="public class WeakEventManager&lt;TEventSource,TEventArgs&gt; : System.Windows.WeakEventManager where TEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WeakEventManager`2&lt;TEventSource, (class System.EventArgs) TEventArgs&gt; extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager`2" />
  <TypeSignature Language="VB.NET" Value="Public Class WeakEventManager(Of TEventSource, TEventArgs)&#xA;Inherits WeakEventManager" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEventSource, typename TEventArgs&gt;&#xA; where TEventArgs : EventArgspublic ref class WeakEventManager : System::Windows::WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEventSource" />
    <TypeParameter Name="TEventArgs">
      <Constraints>
        <BaseTypeName>System.EventArgs</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEventSource"><span data-ttu-id="f38a9-101">O tipo que gera o evento.</span><span class="sxs-lookup"><span data-stu-id="f38a9-101">The type that raises the event.</span></span></typeparam>
    <typeparam name="TEventArgs"><span data-ttu-id="f38a9-102">O tipo que mantém os dados do evento.</span><span class="sxs-lookup"><span data-stu-id="f38a9-102">The type that holds the event data.</span></span></typeparam>
    <summary><span data-ttu-id="f38a9-103">Fornece um <see cref="T:System.Windows.WeakEventManager" /> fortemente tipado que permite especificar o manipulador de eventos a ser usado para o padrão "ouvinte de evento fraco".</span><span class="sxs-lookup"><span data-stu-id="f38a9-103">Provides a type-safe <see cref="T:System.Windows.WeakEventManager" /> that enables you to specify the event handler to use for the "weak event listener" pattern.</span></span> <span data-ttu-id="f38a9-104">Essa classe define um parâmetro de tipo para a origem do evento e um parâmetro de tipo para os dados de evento que são usados.</span><span class="sxs-lookup"><span data-stu-id="f38a9-104">This class defines a type parameter for the source of the event and a type parameter for the event data that is used.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f38a9-105">O <xref:System.Windows.WeakEventManager> classe permite que você aproveite o padrão de ouvinte de evento fraco, especificando o evento para assinar, a origem do evento e o manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="f38a9-105">The <xref:System.Windows.WeakEventManager> class enables you to leverage the weak event listener pattern by specifying the event to subscribe to, the source of the event, and event handler.</span></span>  <span data-ttu-id="f38a9-106">Você pode usar <xref:System.Windows.WeakEventManager%602> como uma alternativa à implementação de <xref:System.Windows.IWeakEventListener> interface e usando um especializado <xref:System.Windows.WeakEventManager>.</span><span class="sxs-lookup"><span data-stu-id="f38a9-106">You can use <xref:System.Windows.WeakEventManager%602> as an alternative to implementing the <xref:System.Windows.IWeakEventListener> interface and using a specialized <xref:System.Windows.WeakEventManager>.</span></span> <span data-ttu-id="f38a9-107">Quando você chama <xref:System.Windows.WeakEventManager%602.AddHandler%2A>, a origem deve ser do tipo `TEventSource` e deve ter o manipulador de eventos que você passar `TEventArgs` como seus dados de eventos.</span><span class="sxs-lookup"><span data-stu-id="f38a9-107">When you call <xref:System.Windows.WeakEventManager%602.AddHandler%2A>, the source must be of type `TEventSource` and the event handler you pass must have `TEventArgs` as its event data.</span></span> <span data-ttu-id="f38a9-108">Isso garante que a verificação de tipo ocorre em tempo de compilação.</span><span class="sxs-lookup"><span data-stu-id="f38a9-108">This ensures that type checking occurs at compile time.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (TEventSource source, string eventName, EventHandler&lt;TEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(!TEventSource source, string eventName, class System.EventHandler`1&lt;!TEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddHandler (source As TEventSource, eventName As String, handler As EventHandler(Of TEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddHandler(TEventSource source, System::String ^ eventName, EventHandler&lt;TEventArgs&gt; ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TEventSource" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="handler" Type="System.EventHandler&lt;TEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f38a9-109">O objeto de origem que gera o evento especificado.</span><span class="sxs-lookup"><span data-stu-id="f38a9-109">The source object that raises the specified event.</span></span></param>
        <param name="eventName"><span data-ttu-id="f38a9-110">O nome do evento que será assinado.</span><span class="sxs-lookup"><span data-stu-id="f38a9-110">The name of the event to subscribe to.</span></span></param>
        <param name="handler"><span data-ttu-id="f38a9-111">O delegado que manipula o evento.</span><span class="sxs-lookup"><span data-stu-id="f38a9-111">The delegate that handles the event.</span></span></param>
        <summary><span data-ttu-id="f38a9-112">Adiciona o manipulador de eventos especificado ao evento especificado.</span><span class="sxs-lookup"><span data-stu-id="f38a9-112">Adds the specified event handler to the specified event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f38a9-113">Retorna um novo objeto para conter os ouvintes de um evento.</span><span class="sxs-lookup"><span data-stu-id="f38a9-113">Returns a new object to contain listeners to an event.</span></span></summary>
        <returns><span data-ttu-id="f38a9-114">Um novo objeto para conter os ouvintes de um evento.</span><span class="sxs-lookup"><span data-stu-id="f38a9-114">A new object to contain listeners to an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (TEventSource source, string eventName, EventHandler&lt;TEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(!TEventSource source, string eventName, class System.EventHandler`1&lt;!TEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveHandler (source As TEventSource, eventName As String, handler As EventHandler(Of TEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveHandler(TEventSource source, System::String ^ eventName, EventHandler&lt;TEventArgs&gt; ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="TEventSource" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="handler" Type="System.EventHandler&lt;TEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f38a9-115">O objeto de origem que gera o evento especificado.</span><span class="sxs-lookup"><span data-stu-id="f38a9-115">The source object that raises the specified event.</span></span></param>
        <param name="eventName"><span data-ttu-id="f38a9-116">O nome do evento do qual o manipulador será removido.</span><span class="sxs-lookup"><span data-stu-id="f38a9-116">The name of the event to remove the handler from.</span></span></param>
        <param name="handler"><span data-ttu-id="f38a9-117">O representante a ser removido</span><span class="sxs-lookup"><span data-stu-id="f38a9-117">The delegate to remove</span></span></param>
        <summary><span data-ttu-id="f38a9-118">Remove o manipulador de eventos especificado do evento especificado.</span><span class="sxs-lookup"><span data-stu-id="f38a9-118">Removes the specified event handler from the specified event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StartListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f38a9-119">O objeto que gera o evento.</span><span class="sxs-lookup"><span data-stu-id="f38a9-119">The object to that raises the event.</span></span></param>
        <summary><span data-ttu-id="f38a9-120">Inicia a escuta para o evento no objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="f38a9-120">Starts listening for the event on the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager`2.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListening(System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f38a9-121">O objeto que gera o evento.</span><span class="sxs-lookup"><span data-stu-id="f38a9-121">The object to that raises the event.</span></span></param>
        <summary><span data-ttu-id="f38a9-122">Interrompe a escuta para o evento no objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="f38a9-122">Stops listening for the event on the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>