<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc1a383fe21e6b9b549e0ccda7aa8c21c6f92d9f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37493657" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">
      <span data-ttu-id="d4988-101">O objeto na qual a propriedade existe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4988-101">The object that the property exists on.</span>
      </span>
      <span data-ttu-id="d4988-102">Quando o retorno de chamada for invocado, o sistema de propriedade passará esse valor.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4988-102">When the callback is invoked, the property system will pass this value.</span>
      </span>
    </param>
    <param name="baseValue">
      <span data-ttu-id="d4988-103">O novo valor da propriedade, antes de qualquer tentativa de coerção.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4988-103">The new value of the property, prior to any coercion attempt.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="d4988-104">Fornece um modelo para um método que é chamado sempre que um valor da propriedade de dependência está sendo reavaliado ou a coerção é especificamente solicitada.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4988-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="d4988-105">O valor imposto (com o tipo apropriado).</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4988-105">The coerced value (with appropriate type).</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4988-106">Retornos de chamada com base em <xref:System.Windows.CoerceValueCallback> pode ser atribuído a uma propriedade de dependência por meio de várias técnicas diferentes.</span><span class="sxs-lookup"><span data-stu-id="d4988-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="d4988-107">Cada uma dessas técnicas requer que você primeiro crie um novo objeto de metadados de propriedade (<xref:System.Windows.PropertyMetadata>, ou uma classe derivada, como <xref:System.Windows.FrameworkPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="d4988-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="d4988-108">Criar o objeto de metadados usando uma assinatura de construtor que usa o `coerceValueCallback` parâmetro e atribuir esse parâmetro para o manipulador de retorno de chamada.</span><span class="sxs-lookup"><span data-stu-id="d4988-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="d4988-109">Ou criar os metadados por qualquer assinatura e o conjunto de <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> propriedade antes de colocar os metadados em uso.</span><span class="sxs-lookup"><span data-stu-id="d4988-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="d4988-110">Quando você tem esses metadados, você pode:</span><span class="sxs-lookup"><span data-stu-id="d4988-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="d4988-111">Definir uma nova propriedade de dependência em uma nova classe, usando qualquer uma das assinaturas do <xref:System.Windows.DependencyProperty.Register%2A>, fornecendo os metadados como o `typeMetadata` valor.</span><span class="sxs-lookup"><span data-stu-id="d4988-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="d4988-112">Substituir os metadados (chamar <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) para uma propriedade de dependência existente, ao derivar da classe que possui a propriedade de dependência.</span><span class="sxs-lookup"><span data-stu-id="d4988-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="d4988-113">Adicionar uma propriedade de dependência existente para um novo <xref:System.Windows.DependencyObject> classe, usando os novos metadados, chamando <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="d4988-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="d4988-114">Implementações desse retorno de chamada devem verificar o valor `baseValue` e determinar com base no valor ou o tipo se este é um valor que precisa ser forçado ainda mais.</span><span class="sxs-lookup"><span data-stu-id="d4988-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="d4988-115">O <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> de uma dependência de propriedade é invocada sempre que o sistema de propriedade ou qualquer outro chamador chama <xref:System.Windows.DependencyObject.CoerceValue%2A> em um <xref:System.Windows.DependencyObject> instância, especificando o identificador da propriedade como o `dp`.</span><span class="sxs-lookup"><span data-stu-id="d4988-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="d4988-116">As alterações ao valor da propriedade podem ter vindo de qualquer participante possíveis no sistema de propriedade.</span><span class="sxs-lookup"><span data-stu-id="d4988-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="d4988-117">Isso inclui os estilos, invalidação genérica, gatilhos, herança do valor da propriedade e configuração do valor local.</span><span class="sxs-lookup"><span data-stu-id="d4988-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="d4988-118">Geralmente, você deve evitar especificar mais de uma <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> para qualquer dado propriedade de dependência (substituir ou adicionar com novos metadados para uma propriedade de dependência que já tinha um <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span><span class="sxs-lookup"><span data-stu-id="d4988-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="d4988-119">Apenas um dos retornos de chamada será capaz de atuar. O retorno de chamada atuando será aquele que foi aplicado à classe mais derivada na herança de, em comparação com o <xref:System.Windows.DependencyObject> chamador.</span><span class="sxs-lookup"><span data-stu-id="d4988-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="d4988-120">Outros retornos de chamada, conforme atribuída aos metadados da propriedade de dependência conforme se encontravam superior na hierarquia do proprietário são substituídos quando os metadados é substituído.</span><span class="sxs-lookup"><span data-stu-id="d4988-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4988-121">O exemplo a seguir inclui uma implementação desse retorno de chamada para forçar o valor armazenado de uma propriedade de dependência com base em outras entradas, como o valor da propriedade de outro.</span><span class="sxs-lookup"><span data-stu-id="d4988-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="d4988-122">Nesse caso, o retorno de chamada verifica para ver se o `ShirtType` propriedade corresponde a um tipo de camisa que tem botões; nesse caso, ele estabelece uma cor padrão inicial para o `ButtonColor`, se o tipo de camisa tem botões não, ele converte o `ButtonColor` valor para um valor inicial, que faz com que o [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (não mostrado) para remover essa lista suspensa de opções em vigor.</span><span class="sxs-lookup"><span data-stu-id="d4988-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>