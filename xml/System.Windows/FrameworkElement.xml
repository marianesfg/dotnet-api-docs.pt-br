<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37e7aed83bb8605e1fc6521bbaffa487694de176" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461194" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements. This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement> é o ponto de conexão entre classes de elemento de nível de framework do WPF e o conjunto de nível de núcleo do WPF de <xref:System.Windows.UIElement> serviços de apresentação. Para obter mais informações sobre esses conceitos, consulte [arquitetura WPF](~/docs/framework/wpf/advanced/wpf-architecture.md).  
  
 <xref:System.Windows.FrameworkElement> estende <xref:System.Windows.UIElement> e adiciona os seguintes recursos:  
  
-   **Definição de layout do sistema**: <xref:System.Windows.FrameworkElement> fornece implementações de nível de framework WPF específicas para determinados métodos que foram definidos como membros virtuais em <xref:System.Windows.UIElement>. Notadamente, <xref:System.Windows.FrameworkElement> lacra determinadas substituições de layout de nível de núcleo do WPF e, em vez disso, fornece um equivalente em nível de framework WPF que classes derivadas deve substituir em vez disso. Por exemplo, <xref:System.Windows.FrameworkElement> selos <xref:System.Windows.UIElement.ArrangeCore%2A> , mas fornece <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>. Essas alterações refletem o fato de que em nível de framework WPF há um sistema completo de layout que pode processar qualquer <xref:System.Windows.FrameworkElement> classe derivada. No WPF principal níveis, determinados membros que serão estrutura geral [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] solução de layout com base estão em vigor, mas o mecanismo real do sistema de layout não está definido. Para obter mais informações, consulte [Layout](~/docs/framework/wpf/advanced/layout.md).  
  
-   **A árvore lógica:** geral [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modelo de programação geralmente é expressa em termos de sendo uma árvore de elementos. Suporte para expressar a árvore de elementos como uma árvore lógica e que acompanha o suporte para definição de árvore na marcação é implementada no <xref:System.Windows.FrameworkElement> nível. Observe no entanto, esse <xref:System.Windows.FrameworkElement> deliberadamente não define um modelo de conteúdo e deixa essa responsabilidade para classes derivadas. Para obter mais informações, consulte [Árvores no WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
-   **Eventos de tempo de vida do objeto:** geralmente é útil saber quando um elemento é inicializado (o construtor seja chamado) ou quando o elemento é carregado pela primeira vez em uma árvore lógica. <xref:System.Windows.FrameworkElement> define vários eventos relacionados a vida útil do objeto que fornecem ganchos útil para operações de lógica que envolvem elementos, como a adição de mais elementos filho. Para obter mais informações, consulte [eventos de tempo de vida do objeto](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
-   **Suporte para associação de dados e referências a recursos dinâmicos:** o suporte de nível de propriedade para associação de dados e recursos é implementado pelo <xref:System.Windows.DependencyProperty> classe e incorporada no sistema de propriedade, mas a capacidade de resolver um valor do membro que é armazenado como um <xref:System.Windows.Expression> (a construção de programação que dá suporte a associação de dados e recursos dinâmicos) é implementada por <xref:System.Windows.FrameworkElement>. Para obter mais informações, consulte [visão geral de associação de dados](~/docs/framework/wpf/data/data-binding-overview.md) e [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
-   **Estilos:** <xref:System.Windows.FrameworkElement> define o <xref:System.Windows.FrameworkElement.Style%2A> propriedade. No entanto, <xref:System.Windows.FrameworkElement> ainda não definir o suporte para modelos ou suporte decoradores. Esses recursos são apresentados por classes de controle, como <xref:System.Windows.Controls.Control> e <xref:System.Windows.Controls.ContentControl>.  
  
-   **Suporte de animação mais:** algum suporte de animação já foi definido no nível de núcleo do WPF, mas <xref:System.Windows.FrameworkElement> estende isso Implementando <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> e relacionadas a membros.  
  
 Como pode ser deduzido da hierarquia de classe, muitos [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] derivam de <xref:System.Windows.FrameworkElement>, diretamente ou por meio de classes de base intermediárias, como <xref:System.Windows.Controls.Panel> ou <xref:System.Windows.Controls.Control>.  
  
 Se você pretende usar <xref:System.Windows.FrameworkElement> como uma classe base, convém primeiro examinar as classes derivadas existentes. <xref:System.Windows.FrameworkElement> fornece suporte para vários cenários básicos, mas também não tem um número de recursos que são desejáveis para um "element" no sentido de um bloco de construção que você usa para criar [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] em [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]. Por exemplo, um <xref:System.Windows.FrameworkElement> não define qualquer modelo de conteúdo true; <xref:System.Windows.FrameworkElement> como uma classe base não define uma propriedade que pode criar [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] elementos filho. Em particular, talvez você queira examinar <xref:System.Windows.Controls.Control> e <xref:System.Windows.Controls.ContentControl>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rendered height of this element.</summary>
        <value>Altura do elemento, como um valor em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade é um valor calculado com base nas outras entradas de altura e o sistema de layout. O valor é definido pelo sistema de layout em si, com base em uma passagem de renderização e pode, portanto, ficar um pouco diferente do valor de conjunto de propriedades, como <xref:System.Windows.FrameworkElement.Height%2A> que são a base das alterações de entrada.  
  
 Porque <xref:System.Windows.FrameworkElement.ActualHeight%2A> é um valor calculado, você deve estar ciente de que podem haver várias mudanças ou alterações incrementais a ele como resultado de várias operações pelo sistema de layout. O sistema de layout pode estar calculando o espaço de medição necessário para elementos filhos, as restrições do elemento pai e assim por diante.  
  
 Embora você não pode definir essa propriedade da [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], você pode basear um <xref:System.Windows.Trigger> em seu valor em um estilo.  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir exibe várias propriedades de altura.  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rendered width of this element.</summary>
        <value>Largura do elemento, como um valor em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade é um valor calculado com base nas outras entradas de largura e o sistema de layout. O valor é definido pelo sistema de layout em si, com base em uma passagem de renderização e pode, portanto, ficar um pouco diferente do valor de conjunto de propriedades, como <xref:System.Windows.FrameworkElement.Width%2A> que são a base das alterações de entrada.  
  
 Porque <xref:System.Windows.FrameworkElement.ActualWidth%2A> é um valor calculado, você deve estar ciente de que podem haver várias mudanças ou alterações incrementais a ele como resultado de várias operações pelo sistema de layout. O sistema de layout pode estar calculando o espaço de medição necessário para elementos filhos, as restrições do elemento pai e assim por diante.  
  
 Embora você não pode definir essa propriedade da [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], você pode basear um <xref:System.Windows.Trigger> em seu valor em um estilo.  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir exibe várias propriedades de largura.  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Child element to be added.</param>
        <summary>Adds the provided object to the logical tree of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use esse método para a implementação de coleções de objetos que representam os elementos filho de um elemento. Manutenção de coleção para coleções de elementos filho pode ser feita em getters de propriedade ou setters, manipulação de eventos Changed, construtores, ou se os tipos de coleção de classe.  
  
 Para autores de controle, manipulando a árvore lógica esse nível não é a prática recomendada, a menos que nenhum dos modelos de conteúdo para classes de controle base disponíveis são apropriados para seu cenário de controle. Considere subclassificação no nível de <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, e <xref:System.Windows.Controls.HeaderedItemsControl>. Essas classes fornecem um modelo de conteúdo com a imposição de específico de elementos filho de árvore lógica por meio de dedicado [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], bem como suporte para outros recursos normalmente desejáveis em um [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controle como estilo por meio de modelos. Para obter mais informações sobre como usar <xref:System.Windows.FrameworkElement.LogicalChildren%2A> e <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, consulte [árvores no WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> pode lançar uma exceção se for chamado em um momento quando a árvore lógica está sendo iterada por outro processo.  
  
   
  
## Examples  
 O exemplo a seguir implementa um `Child` propriedade em um personalizado <xref:System.Windows.FrameworkElement> que faz a sua própria implementação de camada visual. O setter da propriedade foi projetado para que se o valor for alterado, o valor antigo é removido da árvore lógica, bem como uma coleção visual específicas de classe. O valor da propriedade é armazenado em cache e, em seguida, o novo valor é adicionado à árvore lógica e a coleção visual personalizada.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</summary>
        <returns>
          <see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplicativos podem chamar este método para garantir que a árvore visual de um elemento está concluída. Essa etapa de garantia pode ser necessária se o código verificar os elementos filho na árvore. Lógica de elemento típico em aplicativos que chamam <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> não é necessário, porque os modelos serão aplicados a elementos em um momento apropriado em suas vidas úteis automaticamente.  
  
 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> é chamado em cada medida passar pelo sistema de layout de nível de framework do WPF.  
  
 <xref:System.Windows.FrameworkElement> classes derivadas podem usar o <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> manipulador da classe a ser notificado de casos em que esse método foi chamado explicitamente ou pelo sistema de layout. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> é chamado depois que o modelo é gerado e anexado à árvore de lógica de completamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">The final area within the parent that this element should use to arrange itself and its children.</param>
        <summary>Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método está lacrado. Para substituir a lógica em seu elemento personalizado especificamente para a etapa de organização de layout do elemento, o <xref:System.Windows.FrameworkElement> classe derivada deve substituir <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
        <summary>When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</summary>
        <returns>The actual size used.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Autores de controle que deseja personalizar a etapa de organização de processamento de layout devem substituir este método. O padrão de implementação deve chamar <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> em cada elemento filho visível e a fase final desejado de tamanho de cada elemento filho como o <paramref name="finalRect" /> parâmetro. Elementos pai devem chamar <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> em cada filho, caso contrário, os elementos filho não serão processados.  Muitas classes derivadas oferecem implementações desse método. Destaque aquelas incluem: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> e <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</para>
        </block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the initialization process for this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode chamar esse método em elementos individuais se você está ajustando-los de maneiras que ainda não expor ou conectar-se o elemento de qualquer árvore de elementos. Por exemplo, talvez você tenha criado um novo <xref:System.Windows.FrameworkElement>, mas não tiver ainda conectado-lo para qualquer árvore lógica. Ou, a árvore lógica em que o elemento é um elemento filho dentro dele pode não estar conectada a uma janela ou página do aplicativo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implemente esse método para fornecer um tratamento especial que deve acontecer antes que o elemento é inicializado durante o processo de carregamento de elemento.  Sua implementação deve chamar a implementação base, porque a implementação de base (padrão) define alguns sinalizadores internos para manter o controle de inicialização. Uma possível implementação é usá-lo como um gancho em suas próprias rotinas de inicialização de classe privada que já não são habilitadas por construtores.  A implementação base lançará uma exceção se <see cref="M:System.Windows.FrameworkElement.BeginInit" /> é chamado mais de uma vez no mesmo elemento antes de <see cref="M:System.Windows.FrameworkElement.EndInit" /> que está sendo chamado.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Begins the sequence of actions contained in the provided storyboard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <summary>Begins the sequence of actions that are contained in the provided storyboard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cenários mais comuns de animação não usam esse método. Normalmente, você cria o <xref:System.Windows.Media.Animation.Storyboard> ou <xref:System.Windows.Media.Animation.BeginStoryboard> elemento na marcação e, em seguida, colocá-los como o <xref:System.Windows.EventTrigger> conteúdo em um elemento. Quando disparado pelo evento, em seguida, a animação é executado. A maioria dos aspectos de controle de um <xref:System.Windows.Media.Animation.Storyboard> pode ser solucionado com propriedades que são expostas na marcação.  
  
 Para que as assinaturas que não usam o `isControllable`, parâmetro, ou quando esse parâmetro é especificado `false`, os relógios de linha de tempo que estão associados com a animação são removidos assim que a animação atingir o período de "Preenchimento". Portanto, a animação não pode ser reiniciada após a execução de uma vez. Controlar uma animação também requer que o storyboard um [diretiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) ou ser acessado por referência no código.  
  
   
  
## Examples  
 O exemplo a seguir recupera um <xref:System.Windows.Media.Animation.Storyboard> de recursos, e, em seguida, executa que <xref:System.Windows.Media.Animation.Storyboard> quando um evento interno é tratado de classe.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <param name="handoffBehavior">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</param>
        <summary>Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cenários mais comuns de animação não usam esse método. Normalmente, você cria o <xref:System.Windows.Media.Animation.Storyboard> ou <xref:System.Windows.Media.Animation.BeginStoryboard> elemento na marcação e, em seguida, colocá-los como o <xref:System.Windows.EventTrigger> conteúdo em um elemento. Quando disparado pelo evento, em seguida, a animação é executado. A maioria dos aspectos de controle de um <xref:System.Windows.Media.Animation.Storyboard> pode ser solucionado com propriedades que são expostas na marcação.  
  
 Para que as assinaturas que não usam o `isControllable`, parâmetro, ou quando esse parâmetro é especificado `false`, os relógios de linha de tempo que estão associados com a animação são removidos assim que a animação atingir o período de "Preenchimento". Portanto, a animação não pode ser reiniciada após a execução de uma vez. Controlar uma animação também requer que o storyboard um [diretiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) ou ser acessado por referência no código.  
  
 Comportamento de entrega pode ser especificado como um atributo de <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Usando o HandoffBehavior de composição  
 Quando você aplica um <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock> para uma propriedade usando o <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualquer <xref:System.Windows.Media.Animation.Clock> objetos anteriormente associados com aquela propriedade continuam a consumir recursos do sistema; o sistema de controle de tempo Não remova os relógios automaticamente.  
  
 Para evitar problemas de desempenho quando você aplicar um grande número de relógios usando <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, você deve remover relógios de composição da propriedade animada após a conclusão. Há várias maneiras de remover um relógio de:  
  
-   Para remover todos os relógios de uma propriedade, use o <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> método do objeto animado. Especifique a propriedade sendo animada como o primeiro parâmetro, e `null` como o segundo. Isso remove todos os relógios de animação da propriedade.  
  
-   Para remover um determinado <xref:System.Windows.Media.Animation.AnimationClock> de uma lista de relógios, use o <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriedade do <xref:System.Windows.Media.Animation.AnimationClock> para recuperar um <xref:System.Windows.Media.Animation.ClockController>, chame o <xref:System.Windows.Media.Animation.ClockController.Remove%2A> método do <xref:System.Windows.Media.Animation.ClockController>. Isso geralmente é feito o <xref:System.Windows.Media.Animation.Clock.Completed> um relógio de manipulador de eventos. Observe que somente relógios de raiz podem ser controlados por um <xref:System.Windows.Media.Animation.ClockController>; o <xref:System.Windows.Media.Animation.Clock.Controller%2A> retorna a propriedade de um relógio filho `null`. Observe também que o <xref:System.Windows.Media.Animation.Clock.Completed> evento não será gerado se a duração efetiva do relógio for indefinida.  Nesse caso, o usuário deve determinar quando chamar <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Isso é basicamente um problema para animações em objetos que têm um longo tempo de vida.  Quando um objeto é coletado como lixo, seus relógios também serão desconectados e coletados como lixo.  
  
 Para obter mais informações sobre objetos clock, consulte [visão geral do sistema de controle de tempo e animação](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
   
  
## Examples  
 O exemplo a seguir recupera um <xref:System.Windows.Media.Animation.Storyboard> de recursos, e, em seguida, executa que <xref:System.Windows.Media.Animation.Storyboard> quando um evento interno é tratado de classe.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <param name="handoffBehavior">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</param>
        <param name="isControllable">Declares whether the animation is controllable (can be paused) after it is started.</param>
        <summary>Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cenários mais comuns de animação não usam esse método. Normalmente, você cria o <xref:System.Windows.Media.Animation.Storyboard> ou <xref:System.Windows.Media.Animation.BeginStoryboard> elemento na marcação e, em seguida, colocá-los como o <xref:System.Windows.EventTrigger> conteúdo em um elemento. Quando disparado pelo evento, em seguida, a animação é executado. A maioria dos aspectos de controle de um <xref:System.Windows.Media.Animation.Storyboard> pode ser solucionado com propriedades que são expostas na marcação.  
  
 Para que as assinaturas que não usam o `isControllable`, parâmetro, ou quando esse parâmetro é especificado `false`, os relógios de linha de tempo que estão associados com a animação são removidos assim que a animação atingir o período de "Preenchimento". Portanto, a animação não pode ser reiniciada após a execução de uma vez. Controlar uma animação também requer que o storyboard um [diretiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) ou ser acessado por referência no código.  
  
 Comportamento de entrega pode ser especificado como um atributo de <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Usando o HandoffBehavior de composição  
 Quando você aplica um <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock> para uma propriedade usando o <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualquer <xref:System.Windows.Media.Animation.Clock> objetos anteriormente associados com aquela propriedade continuam a consumir recursos do sistema; o sistema de controle de tempo Não remova os relógios automaticamente.  
  
 Para evitar problemas de desempenho quando você aplicar um grande número de relógios usando <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, você deve remover relógios de composição da propriedade animada após a conclusão. Há várias maneiras de remover um relógio de:  
  
-   Para remover todos os relógios de uma propriedade, use o <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> método do objeto animado. Especifique a propriedade sendo animada como o primeiro parâmetro, e `null` como o segundo. Isso remove todos os relógios de animação da propriedade.  
  
-   Para remover um determinado <xref:System.Windows.Media.Animation.AnimationClock> de uma lista de relógios, use o <xref:System.Windows.Media.Animation.Clock.Controller%2A> propriedade do <xref:System.Windows.Media.Animation.AnimationClock> para recuperar um <xref:System.Windows.Media.Animation.ClockController>, chame o <xref:System.Windows.Media.Animation.ClockController.Remove%2A> método do <xref:System.Windows.Media.Animation.ClockController>. Isso geralmente é feito o <xref:System.Windows.Media.Animation.Clock.Completed> um relógio de manipulador de eventos. Observe que somente relógios de raiz podem ser controlados por um <xref:System.Windows.Media.Animation.ClockController>; o <xref:System.Windows.Media.Animation.Clock.Controller%2A> retorna a propriedade de um relógio filho `null`. Observe também que o <xref:System.Windows.Media.Animation.Clock.Completed> evento não será gerado se a duração efetiva do relógio for indefinida.  Nesse caso, o usuário deve determinar quando chamar <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Isso é basicamente um problema para animações em objetos que têm um longo tempo de vida.  Quando um objeto é coletado como lixo, seus relógios também serão desconectados e coletados como lixo.  
  
 Para obter mais informações sobre objetos clock, consulte [visão geral do sistema de controle de tempo e animação](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</summary>
        <value>O <see cref="T:System.Windows.Data.BindingGroup" /> que é usado para o elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Windows.Data.BindingGroup> pode ser usado para validar os valores de várias propriedades de um objeto. Por exemplo, suponha que um aplicativo solicita que o usuário insira um endereço e, em seguida, popula um objeto do tipo `Address`, que tem as propriedades `Street`, `City`, `ZipCode`, e `Country`, com os valores que o usuário fornecido. O aplicativo tem um painel que contém quatro <xref:System.Windows.Controls.TextBox> controles, cada um deles está associada a uma das propriedades do objeto. Você pode usar um <xref:System.Windows.Controls.ValidationRule> em uma <xref:System.Windows.Data.BindingGroup> para validar o `Address` objeto. Por exemplo, o <xref:System.Windows.Controls.ValidationRule> pode garantir que o código postal seja válido para o país do endereço.  
  
 Elementos filho herdam o <xref:System.Windows.Data.BindingGroup> de seus elementos-pai, assim como com qualquer outra propriedade herdável.  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|Definir propriedades de metadados **true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Os exemplos a seguir fazem parte de um aplicativo que verifica se o usuário tiver definido as propriedades de dois objetos forem iguais aos valores. O primeiro exemplo cria dois <xref:System.Windows.Controls.TextBox> controles, cada um deles está associada a uma fonte de dados diferente. O <xref:System.Windows.Controls.StackPanel> tem um <xref:System.Windows.Data.BindingGroup> que contém um <xref:System.Windows.Controls.ValidationRule> que verifica se duas cadeias de caracteres são iguais.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 A exemplo a seguir mostra a <xref:System.Windows.Controls.ValidationRule> que usa o exemplo anterior.  No <xref:System.Windows.Controls.ValidationRule.Validate%2A> substituição de método, o exemplo obtém cada objeto de origem do <xref:System.Windows.Data.BindingGroup> e verifica se as propriedades dos objetos são iguais.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 Para invocar o <xref:System.Windows.Controls.ValidationRule>, chame o <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> método.  A exemplo a seguir chama <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> quando ocorre o evento de clique do botão.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attempts to bring this element into view, within any scrollable regions it is contained within.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to bring this element into view, within any scrollable regions it is contained within.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao chamar esse método, você deve gerar um <xref:System.Windows.FrameworkElement.RequestBringIntoView> eventos originados do elemento atual. Esse evento é gerado para que ela possa ser tratada por um <xref:System.Windows.Controls.ScrollViewer>, ou uma classe derivada ou semelhante. O comportamento esperado é que o evento é manipulado pelo elemento pai, marcado como tratado nos dados do evento, e a origem do evento é colocada em modo de exibição através de lógica de inserida no <xref:System.Windows.Controls.ScrollViewer> controle. Nem o <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento nem o <xref:System.Windows.FrameworkElement.BringIntoView%2A> método transmitir qualquer informação sobre êxito ou falha, que o evento normalmente é marcado como manipulado no êxito. Motivos para a falha pode incluir as configurações de elemento, como <xref:System.Windows.UIElement.Visibility%2A> sendo algum valor diferente de <xref:System.Windows.Visibility.Visible>.  
  
 Se você usar a assinatura que não especificam um `targetRectangle`, em seguida, o tamanho de todo o elemento (seu <xref:System.Windows.UIElement.RenderSize%2A>) ficará visível.  
  
 Ao chamar esse método, você possivelmente chamará <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> em qualquer área rolável pai que contém o elemento. Se esse elemento não está contido em uma área rolável, o <xref:System.Windows.FrameworkElement.RequestBringIntoView> ainda é gerado, mas não haverá nenhum efeito porque não há nenhum ouvintes de evento.  
  
   
  
## Examples  
 O exemplo a seguir implementa um manipulador para um evento de navegação do aplicativo sempre que responde a [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] sendo navegado inclui um fragmento. O fragmento é nomeado de [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] após o sinal de hash (#), e o comportamento implementado faz com que o elemento deve aparecer na exibição dentro do quadro. <xref:System.Windows.FrameworkElement.BringIntoView%2A> e <xref:System.Windows.FrameworkElement.RequestBringIntoView> esse comportamento de rolagem no exemplo de solicitação.  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">Specified size of the element that should also be brought into view.</param>
        <summary>Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao chamar esse método, você deve gerar um <xref:System.Windows.FrameworkElement.RequestBringIntoView> eventos originados do elemento atual. Esse evento é gerado para que ela possa ser tratada por um <xref:System.Windows.Controls.ScrollViewer>, ou uma classe derivada ou semelhante. O comportamento esperado é que o evento é manipulado pelo elemento pai, marcado como tratado nos dados do evento, e a origem do evento é colocada em modo de exibição através de lógica de inserida no <xref:System.Windows.Controls.ScrollViewer> controle. Nem o <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento nem o <xref:System.Windows.FrameworkElement.BringIntoView%2A> método transmitir qualquer informação sobre êxito ou falha, que o evento normalmente é marcado como manipulado no êxito. Motivos para a falha pode incluir as configurações de elemento, como <xref:System.Windows.UIElement.Visibility%2A> sendo algum valor diferente de <xref:System.Windows.Visibility.Visible>.  
  
 Se você usar a assinatura que não especificam um `targetRectangle`, em seguida, o tamanho de todo o elemento (seu <xref:System.Windows.UIElement.RenderSize%2A>) ficará visível.  
  
 Ao chamar esse método, você possivelmente chamará <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> em qualquer área rolável pai que contém o elemento. Se esse elemento não está contido em uma área rolável, o <xref:System.Windows.FrameworkElement.RequestBringIntoView> ainda é gerado, mas não haverá nenhum efeito porque não há nenhum ouvintes de evento.  
  
   
  
## Examples  
 O exemplo a seguir tem um elemento gráfico grande em uma região de rolagem restrita. Um botão na página tem um manipulador que rola o modo de exibição para uma determinada região do gráfico grande.  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</summary>
        <value>O menu de contexto atribuído a este elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContextMenu> em si é um <xref:System.Windows.FrameworkElement> classe derivada, e é tecnicamente possível <xref:System.Windows.Controls.ContextMenu> para ter um <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriedade. No entanto, isso cria uma experiência de menu de contexto confuso para o usuário e essa prática não é recomendada.  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs just before any context menu on the element is closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para suprimir o fechamento menus de contexto, manipuladores de evento devem marcá-la como manipulado.  
  
 Para usar esse evento como um <xref:System.Windows.EventTrigger> em um estilo, você deve fazer referência a definição do serviço subjacente do evento:  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 (Esse uso é necessário porque a implementação de evento em <xref:System.Windows.FrameworkElement> que expõe o evento serviço subjacente não mapeia o <xref:System.Windows.FrameworkElement.ContextMenuClosing> identificador, de modo que você pode usá-lo como um disparador).  
  
 <xref:System.Windows.Controls.ContextMenu> em si é um <xref:System.Windows.FrameworkElement> derivado da classe, mas o <xref:System.Windows.FrameworkElement.ContextMenuClosing> evento não será gerado por um menu de contexto diretamente. Em vez disso, o evento é gerado do elemento que o menu de contexto, como uma propriedade é "dono" e só é gerado quando um usuário tenta fechar um menu de contexto na interface de usuário. No entanto é possível <xref:System.Windows.Controls.ContextMenu> para ter um <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriedade (um menu de contexto aninhados). Nesse caso o <xref:System.Windows.Controls.ContextMenu> realmente possui aninhada <xref:System.Windows.Controls.ContextMenu> e pode gerar o evento, com a origem do evento que está sendo o menu de contexto aninhados.  
  
 O <xref:System.Windows.Controls.ContextMenu> classe em si também tem um evento semelhante (<xref:System.Windows.Controls.ContextMenu.Closed>), mas o <xref:System.Windows.Controls.ContextMenu.Closed> evento não oferece a oportunidade de cancelar a ação do usuário.  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|Estratégia de roteamento|Bolha|  
|delegado|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Substituir <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> para implementar a manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any context menu on the element is opened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para abrir manualmente os menus de contexto, manipuladores de eventos devem marcar o evento relevante como manipulado. Caso contrário, o valor existente da <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriedade será usada para automaticamente abrir um menu de contexto. Marcar o evento manipulado efetivamente cancelará a ação padrão e pode ser uma oportunidade para redefinir o valor da <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriedade e, em seguida, abra o novo <xref:System.Windows.Controls.ContextMenu>. No entanto, há um problema de sincronização que deve estar atento. Para substituir completamente o menu de contexto por meio de um <xref:System.Windows.FrameworkElement.ContextMenuOpening> manipulador, no menu de contexto inicial não deve ser nulo / vazio. Como alternativa, você precisará manipular o evento e, em seguida, abra manualmente um novo menu de contexto. Para obter detalhes, consulte [como: manipular o evento ContextMenuOpening](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).  
  
 Para usar esse evento como um <xref:System.Windows.EventTrigger> em um estilo, você deve referenciar o evento anexado subjacente:  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 (Esse uso é necessário porque a implementação de evento em <xref:System.Windows.FrameworkElement> que expõe o evento serviço subjacente não mapeia o <xref:System.Windows.FrameworkElement.ContextMenuOpening> identificador, de modo que você pode usá-lo em gatilhos).  
  
 <xref:System.Windows.Controls.ContextMenu> Se for um <xref:System.Windows.FrameworkElement> classe derivada, mas esse evento não será gerado no menu de contexto que está sendo aberto como uma fonte. O evento é gerado do elemento que o menu de contexto, como uma propriedade é "dono" e só é gerado quando um usuário tenta abrir um menu de contexto na interface de usuário. É possível <xref:System.Windows.Controls.ContextMenu> para ter um <xref:System.Windows.FrameworkElement.ContextMenu%2A> propriedade, mas você deve evitar este cenário (para obter detalhes, consulte <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).  
  
 O <xref:System.Windows.Controls.ContextMenu> classe em si também tem um evento semelhante (<xref:System.Windows.Controls.ContextMenu.Opened>), mas <xref:System.Windows.Controls.ContextMenu.Opened> não oferece a oportunidade de cancelar a ação do usuário.  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|Estratégia de roteamento|Bolha|  
|delegado|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Substituir <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> para implementar a manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cursor that displays when the mouse pointer is over this element.</summary>
        <value>O cursor a ser exibido. O valor padrão é definido como <see langword="null" /> por essa propriedade de dependência. No entanto, o padrão prático em tempo de execução virá de uma variedade de fatores.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você definir essa propriedade [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], o [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processador depende de conversão de tipo para o <xref:System.Windows.Input.Cursor> classe para avaliar a cadeia de caracteres. A cadeia de caracteres fornecida deve ser avaliada como um <xref:System.Windows.Input.CursorType> valor. Consulte <xref:System.Windows.Input.Cursor> para obter os detalhes.  
  
 Se o cursor como definido por essa propriedade será ou não será exibida quando o ponteiro do mouse está sobre este elemento também é dependente do valor da <xref:System.Windows.FrameworkElement.ForceCursor%2A> propriedade. Além disso, considerações relacionadas, como um ativo arrastar, captura do mouse, modos dentro de controles e assim por diante, de edição de texto também afeta o cursor com prioridade maior do que o valor especificado nesta propriedade.  
  
 Para reverter o comportamento de definir esta propriedade para o padrão eventual, defina-a como `null` novamente.  
  
 O `null` padrão realmente significa que a determinação do valor prático de cursor é adiada aqui e deve ser obtida a partir de outro local. Se for exibida sem valores programáticos de qualquer fonte, o cursor padrão que é visualmente em uma [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] aplicativo será uma seta. No entanto, as alterações de cursor transitório não estão definidas para o <xref:System.Windows.FrameworkElement.Cursor%2A> valores dos elementos quando eles são passados. O <xref:System.Windows.FrameworkElement.Cursor%2A> valores de propriedade será somente relatórios não nulos em casos onde foi realmente definida, por exemplo por meio de código ou um estilo. Cada movimento do mouse sobre um [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] aplicativo gera um <xref:System.Windows.UIElement.QueryCursor> eventos. As bolhas de evento e qualquer elemento na rota tem a oportunidade para manipular o evento e definir o valor do cursor pelos argumentos desse evento. Esse é o mecanismo que produz o cursor visualmente aparente na maioria dos casos. Se um <xref:System.Windows.UIElement.QueryCursor> manipulador retorna um resultado de cursor, em seguida, o fato de que o evento é manipulado e tem um valor alterado nos argumentos tem precedência sobre o valor da <xref:System.Windows.FrameworkElement.Cursor%2A> propriedade em qualquer nível, a menos que <xref:System.Windows.FrameworkElement.ForceCursor%2A> está definido.  
  
 Se não estiver criando um cursor personalizado, normalmente você definir essa propriedade para um valor da propriedade estática de <xref:System.Windows.Input.Cursors> classe. Configuração <xref:System.Windows.FrameworkElement.Cursor%2A> no código requer um dos seguintes:  
  
-   Chamar o <xref:System.Windows.Input.Cursor> construtor para obter um <xref:System.Windows.Input.Cursor> instância. Ambas as assinaturas do <xref:System.Windows.Input.Cursor> construtor use fluxos ou arquivos, antes que você está criando o <xref:System.Windows.Input.Cursor> objeto para um cursor personalizado.  
  
-   Use o <xref:System.Windows.Input.CursorConverter> classe e seu <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> método para especificar um cursor pelo <xref:System.Windows.Input.CursorType>, ou uma cadeia de caracteres que pode ser avaliada como um <xref:System.Windows.Input.CursorType>e converter retornar ao <xref:System.Windows.Input.Cursor>.  
  
 Definindo o <xref:System.Windows.Input.Cursor> para um valor personalizado não está habilitado em confiança parcial. Para obter mais informações sobre cursores personalizados, consulte [visão geral de entrada](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir mostra como definir deliberadamente o gráfico de cursor.  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data context for an element when it participates in data binding.</summary>
        <value>O objeto a ser usado como contexto de dados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *Contexto de dados* é um conceito que permite aos elementos herdar informações de seus elementos pais sobre a fonte de dados que é usado para associação, bem como outras características de associação, como o caminho.  
  
 Contexto de dados pode ser definido diretamente para um [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] objeto, com as associações de avaliação de propriedades desse objeto. Como alternativa, você pode definir o contexto de dados para um <xref:System.Windows.Data.DataSourceProvider> objeto.  
  
 Essa propriedade de dependência herda valores da propriedade. Se houver elementos filho sem outros valores para <xref:System.Windows.FrameworkElement.DataContext%2A> estabelecida por meio de valores locais ou estilos, em seguida, o sistema de propriedade definirá o valor a ser o <xref:System.Windows.FrameworkElement.DataContext%2A> valor do elemento pai mais próximo com esse valor atribuído.  
  
 Como alternativa, você pode usar uma das seguintes propriedades de <xref:System.Windows.Data.Binding> classe para especificar a origem de associação explicitamente: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, ou <xref:System.Windows.Data.Binding.RelativeSource%2A>. Para obter mais informações, consulte [como: especificar a origem da associação](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 Em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkElement.DataContext%2A> geralmente é definido como como um <xref:System.Windows.Data.Binding> declaração. Você pode usar a sintaxe de elemento de propriedade ou sintaxe de atributo. Sintaxe de atributo é mostrado no exemplo nesta página. Você também pode usar código para definir <xref:System.Windows.FrameworkElement.DataContext%2A>.  
  
 <xref:System.Windows.FrameworkElement.DataContext%2A> é uma propriedade ligável, para facilitar cenários onde um contexto pode ser vinculado a outro. No entanto, se vincular a <xref:System.Windows.FrameworkElement.DataContext%2A>, tenha cuidado para não criar referências de associação circular (não vincular um <xref:System.Windows.FrameworkElement.DataContext%2A> a mesmo, que é possível fazer devido à natureza de herança do valor de propriedade do <xref:System.Windows.FrameworkElement.DataContext%2A> propriedade).  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *dataContextObject*  
 Um objeto diretamente incorporado que serve como o contexto de dados para associações dentro do elemento pai. Normalmente, esse objeto é um <xref:System.Windows.Data.Binding> ou outro <xref:System.Windows.Data.BindingBase> classe derivada. Como alternativa, os dados brutos de qualquer [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] destinado para associação pode ser colocada aqui, com as associações reais definidas posteriormente do tipo de objeto.  
  
 *bindingUsage*  
 Um uso de associação que é avaliada para um contexto de dados apropriado. Para ver os detalhes, consulte [Extensão de marcação Binding](~/docs/framework/wpf/advanced/binding-markup-extension.md).  
  
 *resourceExtension*  
 Um dos seguintes: ou. Esse uso é usado ao fazer referência a dados brutos definidos como um objeto de recursos. Consulte [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *contextResourceKey*  
 O identificador de chave para o objeto que está sendo solicitado de dentro um <xref:System.Windows.ResourceDictionary>.  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 O exemplo a seguir ilustra como um contexto de dados age em uma associação e fornece as informações que definem os valores específicos de propriedades associadas.  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the data context for this element changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma explicação de contextos de dados e a associação de dados, consulte [visão geral de associação de dados](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!IMPORTANT]
>  Quando o <xref:System.Windows.FrameworkElement.DataContext%2A> para alterações de um elemento, todas as propriedades de associação de dados neste elemento potencialmente são afetadas. Isso se aplica a elementos que são elementos filho do elemento atual na árvore lógica, que herdam o contexto de dados, e também o elemento atual. Todas as associações existentes novamente devem interpretar o novo <xref:System.Windows.FrameworkElement.DataContext%2A> e irá reavaliar os resultados de associação. O mecanismo de associação de dados não é determinístico sobre a ordem desses reavaliações, relativo ao aumento do <xref:System.Windows.FrameworkElement.DataContextChanged> evento. As reavaliações podem ocorrer antes do evento após o evento, ou em qualquer combinação.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</summary>
        <value>A chave de estilo. Para funcionar corretamente como parte da pesquisa de estilo do tema, espera-se que esse valor seja o <see cref="T:System.Type" /> do controle com estilo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, essa propriedade não é definida por meio de qualquer um de seus acessadores de propriedade direta. Em vez disso, você substituir os metadados específicos do tipo dessa propriedade de dependência toda vez que você criar um novo <xref:System.Windows.FrameworkElement> classe derivada. Quando você derivar um controle, chame o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método em relação a <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identificador dentro do construtor estático do controle derivado classe (ou classe equivalente de inicialização).  
  
 Um controle normalmente substitui o valor padrão dessa propriedade para ser seu próprio tipo, mas em alguns casos pode usar também um tipo base para o qual exista um estilo de dicionário de tema. Isso só é prático se os modelos de controle do controle base inteiramente definem a representação visual do controle derivado, e se qualquer expõem os tipos derivados de membros adicionais não exigem elementos adicionais como parte do modelo de controle.  
  
 Se você quiser que o elemento ou o controle não usar estilos de temas, defina o <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> propriedade `true`.  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 O exemplo a seguir ilustra o uso da substituição de metadados da propriedade dependência discutido em comentários. Esse código define uma classe de controle personalizado `NumericUpDown` se destina a ser usado em um assembly de biblioteca de controle dedicado. O construtor estático ilustrado faz referência a uma função de inicialização particular, registra um manipulador de classe (outro cenário comum de subclassificação de controle, consulte [marcar eventos roteados como Handled e tratamento de classe](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) e, finalmente, substitui o <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> metadados de propriedade de dependência no `NumericUpDown` classe. <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> sempre retorna seu próprio tipo como a chave pretendida, que é a convenção de que o sistema de estilo de tema usa para pesquisar o estilo de algum controle de outra forma não estilizado arbitrário. O exemplo completo também define o estilo de tema do controle real que é referenciado por chave; consulte [NumericUpDown Custom Control com tema e exemplo de suporte de automação de interface do usuário](http://go.microsoft.com/fwlink/?LinkID=160025).  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  
[!code-csharp[CustomControlNumericUpDown#Close](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#close)]
[!code-vb[CustomControlNumericUpDown#Close](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#close)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates that the initialization process for the element is complete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.FrameworkElement.BeginInit%2A> foi chamado anteriormente, a base de implementação irá gerar o <xref:System.Windows.FrameworkElement.Initialized> evento. Caso contrário, se <xref:System.Windows.FrameworkElement.BeginInit%2A> não foi chamado ou não pôde ser determinado se <xref:System.Windows.FrameworkElement.BeginInit%2A> foi chamado, <xref:System.Windows.FrameworkElement.Initialized> não será gerado e uma exceção será lançada em vez disso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</exception>
        <block subset="none" type="overrides">
          <para>Implemente esse método para fornecer um tratamento especial que deve acontecer quando o elemento é inicializado durante o processo de carregamento de elemento.  Sua implementação deve chamar a implementação base, porque a implementação de base (padrão) define alguns sinalizadores internos para manter o controle de inicialização.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the requested element.</param>
        <summary>Finds an element that has the provided identifier name.</summary>
        <returns>The requested element. This can be <see langword="null" /> if no matching element was found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o elemento tem elementos filho, esses elementos filho são todos recursivamente pesquisada para o elemento nomeado solicitado.  
  
 <xref:System.Windows.FrameworkElement.FindName%2A> opera em namescope do elemento atual. Para obter detalhes, consulte [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">The key identifier for the requested resource.</param>
        <summary>Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</summary>
        <returns>The requested resource. If no resource with the provided key was found, an exception is thrown. An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Se você chamar esse método para uma chave que não pode ser encontrada, uma exceção será lançada. Se você não deseja tratar exceções resultantes da chamada <xref:System.Windows.FrameworkElement.FindResource%2A>, chame <xref:System.Windows.FrameworkElement.TryFindResource%2A> em vez disso. <xref:System.Windows.FrameworkElement.TryFindResource%2A> Retorna `null` quando um recurso solicitado não foi encontrado e não gerará uma exceção.  
  
 Se o recurso não foi encontrado no elemento de chamada, o elemento pai na árvore lógica é pesquisada em seguida, em seguida, o aplicativo, e em seguida, temas e finalmente recursos do sistema. A metodologia de pesquisa é idêntica a como a árvore é pesquisada se um recurso foi solicitado por uma referência de recurso dinâmico na marcação. Para obter mais informações sobre o recurso de pesquisa, consulte [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 Normalmente, você converter imediatamente um <xref:System.Windows.FrameworkElement.FindResource%2A> valor de retorno para o tipo da propriedade que você configuração com o valor retornado do recurso.  
  
 Chaves de recurso não são necessariamente cadeias de caracteres. Por exemplo, estilos de controles no nível de tema deliberadamente são mapeados para o <xref:System.Type> do controle e estilos de aplicativo ou página para controles normalmente usam essa mesma chave convenção. Para obter detalhes, consulte [estilos e modelagem](~/docs/framework/wpf/controls/styling-and-templating.md) ou [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
   
  
## Examples  
 O exemplo a seguir obtém um recurso nomeado e converte-o em um tipo apropriado para preencher uma propriedade.  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          <paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.  -or-  <paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceKey" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</summary>
        <value>A direção do texto e outros [! Fluxo de elementos include[TLA2#tla_ui](~/Includes/tla2sharptla-UI-MD.MD)] dentro de seu elemento pai, como um valor da enumeração. O valor padrão é <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os conjuntos de uso de propriedade de dependência de <xref:System.Windows.FrameworkElement.FlowDirection%2A> neste elemento. Devido a herança de valor de propriedade, definindo <xref:System.Windows.FrameworkElement.FlowDirection%2A> em um elemento potencialmente pode definir <xref:System.Windows.FrameworkElement.FlowDirection%2A> em todos os elementos filho que não definiu <xref:System.Windows.FrameworkElement.FlowDirection%2A> localmente ou Embora outros meios, como estilos.  
  
 Essa propriedade não é definida automaticamente como parte de qualquer informação de cultura do aplicativo, porque um elemento pode conter conteúdo que não necessariamente para obedecer a direção do fluxo geral indicada pelas informações de cultura. Para obter mais informações sobre considerações sobre globalização, consulte [globalização para WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).  
  
 Essa propriedade tem uma relação definida [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] acessador de propriedade, para que ele funcione como uma propriedade de dependência. No entanto, ele também é registrado como conectado, portanto ele também pode funcionar como uma propriedade anexada. O registro anexado é principalmente para que oferece suporte à herança de valor de propriedade, mas a propriedade também pode ser usada como uma propriedade anexada true. O uso da propriedade anexada só será relevante se o objeto que você pretende definir a direção do fluxo em um <xref:System.Windows.FrameworkElement> o elemento pai que executa o layout após, em si não é um <xref:System.Windows.FrameworkElement>e ainda não tiver definido mais diretamente `FlowDirection` propriedade. (Parte do fluxo de classes de documento como <xref:System.Windows.Documents.Block> e <xref:System.Windows.Documents.Inline> definir seus próprios `FlowDirection`, e essa propriedade também pode definir a direção do fluxo. O valor da propriedade é então lidos pelo host de conteúdo eventual sem a necessidade de uso da propriedade anexada.)  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
 \<*objeto* **FlowDirection**= "<xref:System.Windows.FlowDirection>" / >  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade também pode ser definida em classes que não são <xref:System.Windows.FrameworkElement> classes derivadas, pelos seguintes [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] anexado o uso de propriedades:  
  
 `<` *objeto* `FrameworkElement.` **FlowDirection**= "<xref:System.Windows.FlowDirection>`"/>`  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 Esta propriedade é uma propriedade de dependência e uma propriedade anexada; Consulte comentários.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</summary>
        <value>O estilo desejado a ser aplicado no foco. O valor padrão como declarado na propriedade de dependência é um <see cref="T:System.Windows.Style" /> estático vazio. No entanto, o valor efetivo em tempo de execução é normalmente (mas nem sempre) um estilo fornecido pelo suporte de tema para controles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade afeta a aparência visual, mas não relata <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> nos metadados. Isso ocorre porque a alteração da aparência visual é controlada por evento não pode ser aplicadas em todos os momentos e, portanto, não geralmente Relate quaisquer informações de layout ou de visual nos metadados.  
  
 Conceitualmente, o comportamento visual de foco aplicado a um controle deve ser coerente de controle para controle. É a maneira mais adequada para impor a coerência alterar o estilo visual de foco apenas se você estiver compondo um tema inteiro. Definir esta propriedade nos estilos de controle individual e não como parte de um tema não é o uso pretendido dessa propriedade, porque isso pode resultar em uma experiência de usuário confuso sobre o foco do teclado. Se você estiver pretendendo comportamento específico do controle que é deliberadamente não coerente em um tema, uma abordagem muito melhor é usar disparadores em estilos para propriedades de estado de entrada individual, como <xref:System.Windows.UIElement.IsFocused%2A> ou <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>e fazer isso de forma que não visualmente interferir com qualquer estilo visual de foco existente. Para obter mais informações sobre a intenção de design do <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> e alternativa se concentrar propriedades, consulte [estilo de foco em controles e FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *resourceExtension*  
 Um dos seguintes:, ou. Consulte [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 A chave que identifica o estilo que está sendo solicitado. A chave refere-se a um recurso existente em um <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Sintaxe de elemento de propriedade é tecnicamente possível, mas não é recomendado. Consulte [modelos e estilos in-line](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Uma referência de associação usando ou <xref:System.Windows.Data.Binding> também é possível, mas não é comum.  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</summary>
        <value>
          <see langword="true" /> se a apresentação do cursor enquanto estiver sobre esse elemento for forçada a usar as configurações <see cref="P:System.Windows.FrameworkElement.Cursor" /> atuais para o cursor (incluindo todos os elementos filho); caso contrário, <see langword="false" />. O valor padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você definir essa propriedade como `true` substituirão as preferências de cursor estabelecidas por elementos filho. Fazer assim em geral aplicativo [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] pode ser confuso para o usuário, especialmente se os elementos filho são tentar especificar cursores. Configuração <xref:System.Windows.FrameworkElement.ForceCursor%2A> é mais adequado em cenários de subclassificação ou composição de controle.  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir força o valor do cursor.  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</param>
        <summary>Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</summary>
        <returns>A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verificando o valor de retorno para `null` é uma técnica que você pode usar para determinar se uma propriedade tem uma associação ativa.  
  
 Esse método é apenas um wrapper de conveniência para o <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> método. <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passa a instância atual e o `dp` parâmetro <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</param>
        <summary>Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
        <returns>The requested flow direction, as a value of the enumeration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O objetivo principal deste método é dar suporte a sintaxe da propriedade anexada para o <xref:System.Windows.FrameworkElement.FlowDirection%2A> propriedade, portanto, permitindo que o filho elementos de um fornecido <xref:System.Windows.FrameworkElement> para especificar a direção de fluxo para a organização em seu elemento pai. Para obter o valor no atual <xref:System.Windows.FrameworkElement>, use o direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] acessador <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">The size of the part of the element that does visual presentation.</param>
        <summary>Returns a geometry for a clipping mask. The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</summary>
        <returns>The clipping geometry.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Margens serão subtraídas de `layoutSlotSize` como parte do comportamento do sistema de layout.  
  
 Uma referência nula retornada indica que nenhum recorte ocorrerá. A implementação padrão sempre retorna `null` quando <xref:System.Windows.UIElement.ClipToBounds%2A> é `false`. Este método substitui <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>. O <xref:System.Windows.FrameworkElement> implementação usa <xref:System.Windows.FrameworkElement.MaxHeight%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A> em seus cálculos. Várias subclasses de <xref:System.Windows.FrameworkElement> substituir esse método novamente. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, substituições para sempre retornar `null` como adornos são geralmente deliberadamente fora dos limites comuns. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> e <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> retornar `null` se <xref:System.Windows.UIElement.ClipToBounds%2A> é `false`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A implementação padrão sempre retorna <see langword="null" /> quando <see cref="P:System.Windows.UIElement.ClipToBounds" /> é <see langword="false" />. Substituições devem preservar esse comportamento, embora haja exceções, dependendo da relação e a finalidade de classe derivada e sua lógica de layout em vez de classe base.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">Name of the child to find.</param>
        <summary>Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <returns>The requested element. May be <see langword="null" /> if no element of the requested name exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modelos de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] têm um namescope autossuficiente. Isso ocorre porque os modelos são reutilizados e qualquer nome definido em um modelo não pode permanecer exclusivo quando várias instâncias de um controle instanciar seu modelo. Chamar o <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> método para retornar as referências a objetos que vêm do modelo após ele ser instanciado. Não é possível usar o <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> método para localizar itens de modelos porque <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> age em um mais geral escopo, e não há nenhuma conexão entre o <xref:System.Windows.Controls.ControlTemplate> de classe em si e o modelo instanciado depois que ela é aplicada.  
  
 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> fornece a mesma função que esse método. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> é pública em vez de protegida e usa corretas considerações de nome de escopo que lhe permitem acessar o modelo em um elemento e localizar itens dentro dela nomeados. Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> quando você precisa obter um elemento fora de seu controle pai.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an alternative logical parent for this element if there is no visual parent.</summary>
        <returns>Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>. O padrão <xref:System.Windows.FrameworkElement> implementação retorna esperado único visual pai, que é o mesmo resultado que obtendo o <xref:System.Windows.FrameworkElement.Parent%2A> valor. Implementações de classe derivada podem retornar relações pai alternativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the requested child element in the collection.</param>
        <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</summary>
        <returns>The requested child element. This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No <xref:System.Windows.FrameworkElement> implementação, o índice só é válida é zero. O modelo de conteúdo para <xref:System.Windows.FrameworkElement.GetVisualChild%2A> dá suporte a elementos de filhos de zero ou um, não é uma coleção.  
  
   
  
## Examples  
 O exemplo a seguir mostra como um adorner personalizado usa os valores de declarada por um <xref:System.Windows.Media.VisualCollection> que mantém para suas vários filhos visual. Esses valores são relatados por meio de substituições de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Essa implementação só é válida para elementos que não precisam manter qualquer coleção mais descritiva de elementos filho de visual. Qualquer elemento que tenha tal coleção deve substituir este método e mapeie o índice para um índice equivalente na coleção de elemento filho que é suportada por esse elemento. Um índice no intervalo de zero a <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (menos um) deve retornar um elemento válido; qualquer outro índice deve lançar uma exceção fora do intervalo. Um exemplo de um tipo de elemento que dá suporte a uma coleção de filhos e substituições <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> retornar mais de um filho possíveis é <see cref="T:System.Windows.Controls.Panel" />.  A implementação padrão <see cref="T:System.Windows.FrameworkElement" /> presume que apenas um filho de visual. Qualquer valor passado <paramref name="index" /> diferente de zero faz com que uma exceção seja lançada. Vários elementos comuns, como decoradores, adornos ou elementos de renderização especializada, substituem o <see cref="T:System.Windows.FrameworkElement" /> implementação (da implementação de classes de base intermediárias). Algumas implementações ainda impõem um filho de visual, enquanto outros permitem que uma coleção.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the suggested height of the element.</summary>
        <value>A altura do elemento, em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é <see cref="F:System.Double.NaN" />. Este valor deve ser igual ou maior que 0,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Height%2A> é uma das três propriedades graváveis na <xref:System.Windows.FrameworkElement> que especifique informações de altura. As outras duas são <xref:System.Windows.FrameworkElement.MinHeight%2A> e <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Se houver um conflito entre esses valores, a ordem do aplicativo para a determinação de altura real é que o primeiro <xref:System.Windows.FrameworkElement.MinHeight%2A> devem ser cumprido, em seguida, <xref:System.Windows.FrameworkElement.MaxHeight%2A>e, finalmente, se ele está dentro dos limites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Se este é um elemento filho dentro de algum outro elemento, em seguida, definir essa propriedade como um valor é realmente apenas um valor sugerido. O sistema de layout, bem como a lógica de layout específico do elemento pai usará o valor como uma entrada nonbinding durante o processo de layout. Em termos práticos, um <xref:System.Windows.FrameworkElement> é quase sempre o elemento filho de outra coisa; mesmo quando você definir o <xref:System.Windows.FrameworkElement.Height%2A> em <xref:System.Windows.Window>. (Para <xref:System.Windows.Window>, esse valor será usado quando o modelo de aplicativo subjacente estabelece as suposições de renderização básica que cria o Hwnd que hospeda o aplicativo.)  
  
 Além disso, para aceitável <xref:System.Double> valores, essa propriedade também pode ser <xref:System.Double.NaN?displayProperty=nameWithType>. Isso é como você especifica o comportamento de dimensionamento automático no código. Em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] você definir o valor para a cadeia de caracteres "Automática" (não diferencia maiusculas de minúsculas) para habilitar o comportamento de dimensionamento de auto. Comportamento de dimensionamento de auto implica que o elemento preencher a altura disponível para ele. No entanto, observe que os controles específicos frequentemente fornecem valores padrão por meio de seus estilos de tema padrão que irá desabilitar o auto comportamento de dimensionamento, a menos que ela seja reativada especificamente.  
  
 O valor de retorno dessa propriedade é sempre igual a qualquer valor que foi definido para ele. Em contraste, o valor de <xref:System.Windows.FrameworkElement.ActualHeight%2A> podem variar. Isso pode acontecer em estaticamente, porque o layout rejeitou o tamanho sugerido por algum motivo, ou momentaneamente. O sistema de layout funciona de forma assíncrona em relação ao conjunto do sistema de propriedade de <xref:System.Windows.FrameworkElement.Height%2A> e pode não ter processado específica dimensionamento de alteração de propriedade ainda.  
  
 As restrições de valor sobre o <xref:System.Double> valor são impostas por um <xref:System.Windows.ValidateValueCallback> mecanismo. Se você tentar definir um valor inválido, uma exceção de tempo de execução é gerada.  
  
 Além de verificação de validação, há um valor superior não determinístico associado para <xref:System.Windows.FrameworkElement.Height%2A> que é imposta pelo sistema de layout (Este é um número muito grande, maior do que <xref:System.Single.MaxValue?displayProperty=nameWithType> mas menor do que <xref:System.Double.MaxValue?displayProperty=nameWithType>). Se você exceder esse associado, o elemento não será processada e nenhuma exceção é lançada. Não defina <xref:System.Windows.FrameworkElement.Height%2A> para um valor que é significativamente maior do que o tamanho máximo de qualquer exibição visual possíveis, ou você pode exceder esse limite superior não determinístico.  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representação de cadeia de caracteres um <xref:System.Double> valor igual ou maior que 0.0. Consulte os Comentários para ver informações sobre o limite superior. Esse valor é interpretado como um [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Cadeias de caracteres não precisam explicitamente incluir pontos decimais. Por exemplo, um valor de `1` é aceitável.  
  
 *qualifiedDouble*  
 Um *duplo* valor conforme descrito acima, seguido por um dos seguintes unidade declaração cadeias de caracteres: `px`, `in`, `cm`, `pt`.  
  
 `px` é (padrão) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` polegadas; em 1 = = 96px  
  
 `cm` centímetros; 1cm==(96/2.54) px  
  
 `pt` pontos; 1pt==(96/72) px  
  
 **Auto**  
 Habilita o comportamento de dimensionamento automático. Consulte Observações.  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</summary>
        <value>Uma configuração de alinhamento horizontal, como um valor da enumeração. O padrão é <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.Width%2A> propriedades são definidas explicitamente em um elemento, essas medidas são precedência mais alta durante o layout e cancelará os típicos efeitos da configuração de <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> para <xref:System.Windows.HorizontalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> é o [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] acessador de propriedade para o que é na verdade uma propriedade de dependência. Essa propriedade de dependência particular com bastante frequência tem seu valor aparente "padrão" definido em elementos de subclasse, particularmente os controles de modo diferente. Isso geralmente ocorre em uma das duas maneiras: a propriedade de dependência é registrada novamente para uma determinada subclasse, mas com diferentes metadados para a configuração de seus padrões; ou há um estilo de padrão que está sendo aplicado que define esse valor de propriedade de dependência de maneira diferente. Por exemplo, o aparente "padrão" de <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> para um <xref:System.Windows.Controls.Label> controle será <xref:System.Windows.HorizontalAlignment.Left>, embora <xref:System.Windows.Controls.Label> herda <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direta de <xref:System.Windows.FrameworkElement>. Isso ocorre porque esse valor foi redefinida no estilo padrão de <xref:System.Windows.Controls.Label>, no modelo de controle do estilo.  
  
 <xref:System.Windows.Controls.Canvas> Não use <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> ao compor o layout, porque <xref:System.Windows.Controls.Canvas> baseia-se no posicionamento absoluto.  
  
 Quando herdado por <xref:System.Windows.Controls.Label> ou classes derivadas, <xref:System.Windows.Controls.Label> redefine o valor padrão dessa propriedade de dependência para ser <xref:System.Windows.HorizontalAlignment.Left>.  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</summary>
        <value>Um valor da enumeração. O padrão é <see cref="F:System.Windows.InheritanceBehavior.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certos limites no elemento do conjunto de árvore <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> deliberadamente limitar o escopo de comportamento de herança, para um recurso de equipe de pesquisa para verificar os recursos de aplicativo ou para impedir que uma pesquisa RelativeSource FindAncestor consultando o elemento atual ou mais. RelativeSource FindAncestor pesquisa ocorre quando uma associação usa um <xref:System.Windows.Data.RelativeSource> com seus <xref:System.Windows.Data.RelativeSource.Mode%2A> propriedade definida como o <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> valor.  
  
 Se você deseja que a classe derivada para definir essa propriedade, você deve fazer isso em um construtor estático ou em outras rotinas de inicialização.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized. This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento será gerado sempre que o <xref:System.Windows.FrameworkElement.EndInit%2A> ou <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> métodos são chamados. Chamadas para o método podem ter vindo do código do aplicativo ou por meio de [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] comportamento do processador quando um [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] página é processada.  
  
 Se você optar por tratar <xref:System.Windows.FrameworkElement.Loaded> ou <xref:System.Windows.FrameworkElement.Initialized> depende dos seus requisitos. Se você não precisa ler as propriedades de elemento, pretende redefinir propriedades e não é necessário qualquer informação de layout, <xref:System.Windows.FrameworkElement.Initialized> poderia ser o evento melhor qual agir. Se você precisa de todas as propriedades do elemento para estar disponível e você definirá as propriedades que têm probabilidade de redefinir o layout, <xref:System.Windows.FrameworkElement.Loaded> poderia ser o evento melhor qual agir. Tenha cuidado de reentrância se o manipulador redefine todas as propriedades que são interpretadas pelo sistema de layout para indicar que uma nova passagem de layout é necessária. (Talvez seja necessário verificar o <xref:System.Windows.FrameworkPropertyMetadata> valores na propriedade se você não tiver certeza de quais propriedades podem exigir um novo layout passam se eles forem alterados.)  
  
 Para obter mais informações sobre a sequência de eventos de objeto para um <xref:System.Windows.FrameworkElement>e também para vários relacionados ao aplicativo e classes de elemento, consulte [eventos de tempo de vida do objeto](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <value>O escopo de entrada, que modifica como a entrada de métodos alternativos de entrada é interpretada. O valor padrão é <see langword="null" /> (que resulta em um tratamento padrão de comandos).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade de dependência herda valores da propriedade. Se houver elementos filho sem outros valores para <xref:System.Windows.FrameworkElement.InputScope%2A> estabelecida por meio de valores locais ou estilos, em seguida, o sistema de propriedade definirá o valor a ser o <xref:System.Windows.FrameworkElement.InputScope%2A> valor do elemento ancestral mais próximo com esse valor atribuído.  
  
 Embora um [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] uso de sintaxe é listado e sintaticamente é permitido, a definição dessa propriedade [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] não é comum.  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</summary>
        <value>
          <see langword="true" /> Se o elemento é inicializado pela mencionada anteriormente [! Processamento de include[TLA2#tla_xaml](~/Includes/tla2sharptla-XAML-MD.MD)] ou chamadas de método; Caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade também pode ser `true` se esse elemento foi movido dentro da árvore lógica, de modo que ele tem um novo elemento pai e, portanto, torna-se recarregar novamente.  
  
 Essa propriedade é útil se você também estiver usando <xref:System.Windows.FrameworkElement.BeginInit%2A> e <xref:System.Windows.FrameworkElement.EndInit%2A>. Elementos na árvore lógica que é carregado por um [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] tem a certeza de processador a ser inicializado. Elementos não na árvore lógica são inicializados quando <xref:System.Windows.FrameworkElement.EndInit%2A> é chamado. Na ausência de qualquer manipulação específica de <xref:System.Windows.FrameworkElement.BeginInit%2A> e <xref:System.Windows.FrameworkElement.EndInit%2A>, isso acontecerá assim que o construtor retorna o resultado foi inicializado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this element has been loaded for presentation.</summary>
        <value>
          <see langword="true" /> se o elemento atual estiver anexado a uma árvore de elementos; <see langword="false" /> se o elemento nunca tiver sido anexado a uma árvore de elementos carregada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De recentemente construído <xref:System.Windows.FrameworkElement>, essa propriedade começa `false`e permanece `true` depois que ele é definido como `true`, mesmo se o elemento subsequentemente é removido de uma árvore lógica conectada por código. `true` estado é definido pela lógica de apresentação geral quando os elementos são carregados no mecanismo de apresentação.  
  
 Normalmente, os elementos carregados são renderizados, mas nem todos os <xref:System.Windows.FrameworkElement> classes derivadas têm uma apresentação e outras propriedades, como <xref:System.Windows.UIElement.Visibility%2A> pode influenciar a apresentação.  
  
   
  
## Examples  
 O exemplo a seguir implementa dois manipuladores: um está tratando o <xref:System.Windows.FrameworkElement.Loaded> evento do elemento raiz, para que você tiver certeza de que o elemento raiz de página foi carregado porque o que é o significado do evento. O outro manipulador é conectado a um controle de usuário e chamadas <xref:System.Windows.FrameworkElement.IsLoaded%2A> garantir que o elemento raiz é carregado completamente. Ambos os manipuladores de chamar a mesma função (não mostrada) que preencherá os elementos filho com dados atualizados.  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets localization/globalization language information that applies to an element.</summary>
        <value>As informações de idioma desse elemento. O valor padrão é um <see cref="T:System.Windows.Markup.XmlLanguage" /> com o valor <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> definido com a cadeia de caracteres “en-US”.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os formatos de cadeia de caracteres seguem o padrão de RFC 3066. Por exemplo, EUA Inglês é "en-US". Para obter mais informações sobre os valores e o formato, consulte <xref:System.Windows.Markup.XmlLanguage>.  
  
 Essa propriedade de dependência herda valores da propriedade. Se houver elementos filho sem outros valores para <xref:System.Windows.FrameworkElement.Language%2A> estabelecida por meio de estilos ou valores locais, o sistema de propriedade definirá o valor a ser o <xref:System.Windows.FrameworkElement.Language%2A> valor do elemento ancestral mais próximo com esse valor atribuído.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] Define o significado geral de `xml:lang` atributo. <xref:System.Windows.FrameworkElement.Language%2A> Essencialmente, expõe o significado deste atributo como uma propriedade de dependência. <xref:System.Windows.FrameworkElement.Language%2A> podem ser ajustadas por meio de programação e pode participar de herança de valor de sistema de propriedade de forma paralela como o `xml:lang` atributo pode herdar de escopo do elemento filho no [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Se você definir <xref:System.Windows.FrameworkElement.Language%2A>, esse valor se torna o `xml:lang` e substitui qualquer valor anterior. Para obter mais informações, consulte [XML: lang em XAML de tratamento](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a graphics transformation that should apply to this element when  layout is performed.</summary>
        <value>A transformação que esse elemento deve usar. O padrão é <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em comparação com <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> afetam resultados de layout.  
  
 Configurar uma transformação fornece recursos avançados de dimensionamento e rotação. No entanto, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignora <xref:System.Windows.Media.TranslateTransform> operações. Isso ocorre porque o comportamento do sistema de layout de elementos filho de um <xref:System.Windows.FrameworkElement> autocorrige qualquer deslocamentos para a posição de um elemento em escala ou girada no layout e o sistema de coordenadas do elemento pai.  
  
 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> pode resultar em desempenho ruim do aplicativo se invocá-lo em um cenário que não requer uma passagem completa pelo sistema de layout. Quando você aplica um <xref:System.Windows.FrameworkElement.LayoutTransform%2A> para o <xref:System.Windows.Controls.Panel.Children%2A> coleção do <xref:System.Windows.Controls.Panel>, ele dispara uma nova passagem pelo sistema de layout e força todos os na tela objetos a serem re-medidos e reorganizados. Se você estiver atualizando o aplicativo completo [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], essa funcionalidade pode ser exatamente o que você precisa. No entanto, se você não precisa de uma passagem completa de layout, use o <xref:System.Windows.UIElement.RenderTransform%2A> propriedade, que não chama o sistema de layout e, portanto, é normalmente uma opção melhor para esse cenário.  
  
 Cenários de exemplo onde <xref:System.Windows.FrameworkElement.LayoutTransform%2A> seria útil incluem: girando elementos, como componentes de menu da horizontal para vertical ou vice-versa, dimensionamento elementos (zoom) em foco, fornecendo o comportamento de edição, etc.  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 O exemplo a seguir mostra como aplicar um <xref:System.Windows.FrameworkElement.LayoutTransform%2A> a um elemento. O exemplo cria uma instância de <xref:System.Windows.Controls.Button> e hospeda-a em um pai <xref:System.Windows.Controls.Grid>. Ele também usa o <xref:System.Windows.FrameworkElement.LayoutTransform%2A> aplicar um <xref:System.Windows.Media.RotateTransform> para o <xref:System.Windows.Controls.Button>.  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the element is laid out, rendered, and ready for interaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Loaded> é geralmente o último evento gerado em uma sequência de inicialização do elemento. Sempre será gerado após <xref:System.Windows.FrameworkElement.Initialized>. Se você optar por tratar <xref:System.Windows.FrameworkElement.Loaded> ou <xref:System.Windows.FrameworkElement.Initialized> depende dos seus requisitos. Se você não precisa ler as propriedades de elemento, pretende redefinir propriedades e não é necessário qualquer informação de layout, <xref:System.Windows.FrameworkElement.Initialized> poderia ser o evento melhor qual agir. Se você precisa de todas as propriedades do elemento para estar disponível e você definirá as propriedades que têm probabilidade de redefinir o layout, <xref:System.Windows.FrameworkElement.Loaded> poderia ser o evento melhor qual agir. Tenha cuidado de reentrância se o manipulador redefine todas as propriedades que são interpretadas pelo sistema de layout para indicar que uma nova passagem de layout é necessária. (Talvez seja necessário verificar o <xref:System.Windows.FrameworkPropertyMetadata> valores na propriedade se você não tiver certeza de quais propriedades podem exigir um novo layout passam se eles forem alterados.)  
  
 Para obter mais informações sobre a sequência de eventos de objeto para um <xref:System.Windows.FrameworkElement>e também para vários relacionados ao aplicativo e classes de elemento, consulte [eventos de tempo de vida do objeto](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 Os eventos roteados diretos não seguem uma rota, somente são tratados dentro do mesmo elemento no qual eles são gerados. Eventos roteados diretos suportam outro comportamento eventos roteados: eles dão suporte a uma coleção de manipuladores acessível e pode ser usados como um <xref:System.Windows.EventTrigger> em um estilo.  
  
 <xref:System.Windows.FrameworkElement.Loaded> e <xref:System.Windows.FrameworkElement.Unloaded> podem ser gerados em controles como resultado das alterações de tema do sistema iniciada pelo usuário. Uma alteração de tema faz com que um invalidação do modelo de controle e a árvore visual independente, que por sua vez faz com que todo o controle descarregar e recarregar. Portanto, <xref:System.Windows.FrameworkElement.Loaded> não é considerado como ocorrem somente quando uma página for carregada pela primeira vez por meio de navegação para a página.  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator for logical child elements of this element.</summary>
        <value>Um enumerador para elementos filho lógicos desse elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> permite que você iterar sobre elementos filho. Isso é útil para elementos que podem não tem uma coleção dedicada definida, mas ainda contêm mais de um elemento filho, particularmente <xref:System.Windows.FrameworkContentElement> elementos filho.  
  
 Para obter mais informações sobre como usar <xref:System.Windows.FrameworkElement.LogicalChildren%2A> e <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, consulte [árvores no WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the outer margin of an element.</summary>
        <value>Fornece valores de margem para o elemento. O valor padrão é um <see cref="T:System.Windows.Thickness" /> com todas as propriedades iguais a 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A margem é o espaço entre este elemento e outros elementos que estarão adjacentes quando layout cria o [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]. Elementos compartilhados podem ser elementos de ponto a ponto (como outros elementos da coleção de um controle pai comum) ou também podem ser o pai do elemento.  
  
 <xref:System.Windows.FrameworkElement.Margin%2A> é definido como um <xref:System.Windows.Thickness> estrutura em vez de como um número para que a margem assimetricamente pode ser definida. O <xref:System.Windows.Thickness> estrutura em si oferece suporte à conversão de tipo de cadeia de caracteres para que você possa especificar um assimétrica <xref:System.Windows.FrameworkElement.Margin%2A> na [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxe de atributo também.  
  
 Uma margem diferente de zero aplica espaço fora o layout do elemento <xref:System.Windows.FrameworkElement.ActualWidth%2A> e <xref:System.Windows.FrameworkElement.ActualHeight%2A>.  
  
 As margens são aditivas para elementos irmãos em um layout; Por exemplo, dois elementos adjacentes que com uma margem de 30 definidos na borda adjacente teria 60 unidades de espaço entre eles.  
  
 Os elementos que tenham margens definir normalmente não restringe o tamanho especificado <xref:System.Windows.FrameworkElement.Margin%2A> se o espaço alocado do retângulo não é grande o suficiente para a margem e área de conteúdo do elemento. A área de conteúdo do elemento será limitada em vez disso, quando o layout é calculado. O único caso onde margens deve ser restrita é também se o conteúdo já está restrita para zero.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *à esquerda, superior, direita, inferior*  
 Número de valores entre 0 e <xref:System.Double.PositiveInfinity> que especificam as quatro propriedades de dimensão possíveis de um <xref:System.Windows.Thickness> estrutura.  
  
 O uso de atributo também aceitará abreviados valores que se aplicam na ordem fornecida, simetricamente e logicamente. Por exemplo, `Margin="20"` será interpretado como um <xref:System.Windows.Thickness> com todas as propriedades definidas para 20. `Margin="20,50"` será interpretado como um <xref:System.Windows.Thickness> com <xref:System.Windows.Thickness.Left%2A> e <xref:System.Windows.Thickness.Right%2A> definido como 20, e <xref:System.Windows.Thickness.Top%2A> e <xref:System.Windows.Thickness.Bottom%2A> definido como 50.  
  
 A unidade padrão para um <xref:System.Windows.Thickness> medida é [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]. Você também pode especificar outras unidades acrescentando as cadeias de caracteres de tipo de unidade `cm`, `in`, ou `pt` a qualquer medida.  
  
 Número de valores fornecidos como [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] atributos não é necessário especificar pontos decimais (0 é aceitável, não precisa ser fornecido como 0.0). Para obter mais informações sobre [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] uso, consulte <xref:System.Windows.Thickness>.  
  
 *thicknessReference*  
 Uma referência de objeto para uma <xref:System.Windows.Thickness>. Isso pode ser um `}`, a, ou `}` referência. Para obter mais informações sobre [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] uso, consulte <xref:System.Windows.Thickness>.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum height constraint of the element.</summary>
        <value>A altura máxima do elemento, em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é <see cref="F:System.Double.PositiveInfinity" />. Esse valor pode ser qualquer valor igual ou maior que 0,0. <see cref="F:System.Double.PositiveInfinity" /> também é válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta é uma das três propriedades em <xref:System.Windows.FrameworkElement> que especifique informações de altura. As outras duas são <xref:System.Windows.FrameworkElement.MinHeight%2A> e <xref:System.Windows.FrameworkElement.Height%2A>.  Se houver um conflito entre esses valores, a ordem do aplicativo para a determinação de altura real é primeiro <xref:System.Windows.FrameworkElement.MinHeight%2A> devem ser cumprido, em seguida, <xref:System.Windows.FrameworkElement.MaxHeight%2A>e, finalmente, se cada um deles está dentro dos limites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 As restrições de valor sobre o <xref:System.Double> valor são impostas por um <xref:System.Windows.ValidateValueCallback> mecanismo. Se você tentar definir um valor inválido é gerada uma exceção de tempo de execução.  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object MaxHeight="double"/>  
- or –  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representação de cadeia de caracteres um <xref:System.Double> valor igual ou maior que 0.0. Isso é interpretado como um [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Cadeias de caracteres não precisam explicitamente incluir pontos decimais. Por exemplo, um valor de `1` é aceitável.  
  
 O mesmo <xref:System.Double> aplicam restrições de intervalo conforme mencionado na seção do valor da propriedade, exceto que você deve usar [extensão de marcação X:Static](~/docs/framework/xaml-services/x-static-markup-extension.md) se você precisa definir explicitamente o valor a ser <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 Um *duplo* valor conforme descrito acima, seguido por um dos seguintes unidade declaração cadeias de caracteres: `px`, `in`, `cm`, `pt`.  
  
 `px` é (padrão) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` polegadas; em 1 = = 96px  
  
 `cm` centímetros; 1cm==(96/2.54) px  
  
 `pt` pontos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum width constraint of the element.</summary>
        <value>A largura máxima do elemento, em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é <see cref="F:System.Double.PositiveInfinity" />. Esse valor pode ser qualquer valor igual ou maior que 0,0. <see cref="F:System.Double.PositiveInfinity" /> também é válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta é uma das três propriedades em <xref:System.Windows.FrameworkElement> que especificam as informações de largura. As outras duas são <xref:System.Windows.FrameworkElement.MinWidth%2A> e <xref:System.Windows.FrameworkElement.Width%2A>. Se houver um conflito entre esses valores, a ordem do aplicativo para a determinação de largura real é primeiro <xref:System.Windows.FrameworkElement.MinWidth%2A> devem ser cumprido, em seguida, <xref:System.Windows.FrameworkElement.MaxWidth%2A>e, finalmente, se cada um deles está dentro dos limites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 As restrições de valor sobre o <xref:System.Double> valor são impostas por um <xref:System.Windows.ValidateValueCallback> mecanismo. Se você tentar definir um valor inválido, uma exceção de tempo de execução é gerada.  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representação de cadeia de caracteres um <xref:System.Double> valor igual ou maior que 0.0. Isso é interpretado como um [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Cadeias de caracteres não precisam explicitamente incluir pontos decimais. Por exemplo, um valor de `1` é aceitável.  
  
 O mesmo <xref:System.Double> aplicam restrições de intervalo conforme mencionado na seção do valor da propriedade, exceto que você deve usar [extensão de marcação X:Static](~/docs/framework/xaml-services/x-static-markup-extension.md) para definir o valor a ser <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 Um *duplo* valor conforme descrito acima, seguido por um dos seguintes unidade declaração cadeias de caracteres: `px`, `in`, `cm`, `pt`.  
  
 `px` é (padrão) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` polegadas; em 1 = = 96px  
  
 `cm` centímetros; 1cm==(96/2.54) px  
  
 `pt` pontos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available size that the parent element can give to the child elements.</param>
        <summary>Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>The desired size of this element in layout.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método substitui <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> para conectar o nível de núcleo do WPF e implementações de medida de layout de nível de framework WPF. O <xref:System.Windows.FrameworkElement> implementação lacra o método. Para ajustar o comportamento de qualquer elemento que se baseia no nível de framework do WPF do layout de passagem de medida, substituir <xref:System.Windows.FrameworkElement.MeasureOverride%2A> em vez disso. Para ajustar a medida passar o comportamento de layout de um elemento que deliberadamente não criar no nível de framework WPF ou use <xref:System.Windows.FrameworkElement>, substituir <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
        <summary>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</summary>
        <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Substituir <xref:System.Windows.FrameworkElement.MeasureOverride%2A> para implementar o comportamento de dimensionamento de layout personalizado para o elemento que participa de [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] sistema de layout. Sua implementação deve fazer o seguinte:  
  
1.  Iterar a coleção específica do elemento de filhos que fazem parte do layout, chamada <xref:System.Windows.UIElement.Measure%2A> em cada elemento filho.  
  
2.  Obter imediatamente <xref:System.Windows.UIElement.DesiredSize%2A> no filho (Isso é definido como uma propriedade após <xref:System.Windows.UIElement.Measure%2A> é chamado).  
  
3.  Calcule o tamanho desejado net do pai com base na medida dos elementos filho.  
  
 O valor de retorno <xref:System.Windows.FrameworkElement.MeasureOverride%2A> devem ter o tamanho do elemento próprio desejado, que se torna a medida de entrada para o elemento pai do elemento atual. Este mesmo processo continua por meio do sistema de layout até que o elemento raiz da página seja atingido.  
  
 Durante esse processo, os elementos filho podem retornar uma maior <xref:System.Windows.UIElement.DesiredSize%2A> tamanho que o inicial `availableSize` para indicar que o elemento filho deseja mais espaço. Isso pode ser manipulado em sua própria implementação introduzindo uma região de rolagem, redimensionando o controle pai, estabelecendo alguma maneira de ordem empilhada ou qualquer número de soluções para medir ou organizando conteúdo.  
  
> [!IMPORTANT]
>  Elementos devem chamar <xref:System.Windows.UIElement.Measure%2A> em cada filho durante esse processo, caso contrário, os elementos filho não serão corretamente o tamanho ou organizados.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>O seguinte código de compilação não apresente este tipo de implementação.  <c>VisualChildren</c> representa uma propriedade de coleção enumerável de filhos que deve definir seu próprio elemento. A propriedade pode ser qualquer nome. <c>VisualChildren</c> é um nome de espaço reservado para fins deste exemplo, <c>VisualChildren</c> não é um [! INCLUDE[TLA#tla_api](~/Includes/tlasharptla-API-MD.MD)] conforme fornecido por [! INCLUDE[TLA2#tla_winclient](~/Includes/tla2sharptla-winclient-MD.MD)] ou uma parte de um padrão de nomeação.  [! code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [! code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum height constraint of the element.</summary>
        <value>A altura mínima do elemento, em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é 0,0. Esse valor pode ser qualquer valor igual ou maior que 0,0. No entanto, <see cref="F:System.Double.PositiveInfinity" /> NÃO é válido, nem <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta é uma das três propriedades em <xref:System.Windows.FrameworkElement> que especifique informações de altura.  As outras duas são <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Se houver um conflito entre esses valores, a ordem do aplicativo para a determinação de altura real é primeiro <xref:System.Windows.FrameworkElement.MinHeight%2A> devem ser cumprido, em seguida, <xref:System.Windows.FrameworkElement.MaxHeight%2A>e, finalmente, se cada um deles está dentro dos limites, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 As restrições de valor sobre o <xref:System.Double> valor são impostas por um <xref:System.Windows.ValidateValueCallback> mecanismo. Se você tentar definir um valor inválido, uma exceção de tempo de execução é gerada.  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representação de cadeia de caracteres um <xref:System.Double> valor igual ou maior que 0.0. Isso é interpretado como um [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Cadeias de caracteres não precisam explicitamente incluir pontos decimais. Por exemplo, um valor de `1` é aceitável.  
  
 O mesmo <xref:System.Double> aplicam restrições de intervalo conforme mencionado na seção do valor da propriedade.  
  
 *qualifiedDouble*  
 Um *duplo* valor conforme descrito acima, seguido por um dos seguintes unidade declaração cadeias de caracteres: `px`, `in`, `cm`, `pt`.  
  
 `px` é (padrão) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` polegadas; em 1 = = 96px  
  
 `cm` centímetros; 1cm==(96/2.54) px  
  
 `pt` pontos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum width constraint of the element.</summary>
        <value>A largura mínima do elemento, em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é 0,0. Esse valor pode ser qualquer valor igual ou maior que 0,0. No entanto, <see cref="F:System.Double.PositiveInfinity" /> não é válido, nem <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta é uma das três propriedades em <xref:System.Windows.FrameworkElement> que especificam as informações de largura.  As outras duas são <xref:System.Windows.FrameworkElement.Width%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Se houver um conflito entre esses valores, a ordem do aplicativo para a determinação de largura real é primeiro <xref:System.Windows.FrameworkElement.MinWidth%2A> devem ser cumprido, em seguida, <xref:System.Windows.FrameworkElement.MaxWidth%2A>e, finalmente, se cada um deles está dentro dos limites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 As restrições de valor sobre o <xref:System.Double> valor são impostas por um <xref:System.Windows.ValidateValueCallback> mecanismo. Se você tentar definir um valor inválido, uma exceção de tempo de execução é gerada.  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representação de cadeia de caracteres um <xref:System.Double> valor igual ou maior que 0.0. Isso é interpretado como um [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Cadeias de caracteres não precisam explicitamente incluir pontos decimais. Por exemplo, um valor de `1` é aceitável.  
  
 O mesmo <xref:System.Double> aplicam restrições de intervalo conforme mencionado na seção do valor da propriedade.  
  
 *qualifiedDouble*  
 Um *duplo* valor conforme descrito acima, seguido por um dos seguintes unidade declaração cadeias de caracteres: `px`, `in`, `cm`, `pt`.  
  
 `px` é (padrão) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` polegadas; em 1 = = 96px  
  
 `cm` centímetros; 1cm==(96/2.54) px  
  
 `pt` pontos; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">The direction that focus is to be moved, as a value of the enumeration.</param>
        <summary>Moves the keyboard focus away from this element and to another element in a provided traversal direction.</summary>
        <returns>Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa implementação substitui <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> e lacra o método.  
  
   
  
## Examples  
 O exemplo a seguir implementa um manipulador que trata de várias entradas de possíveis do botão. Cada botão representa um possível <xref:System.Windows.Input.FocusNavigationDirection>. O manipulador controla o elemento com o foco do teclado atual e chamadas <xref:System.Windows.FrameworkElement.MoveFocus%2A> no elemento, especificando as <xref:System.Windows.Input.FocusNavigationDirection> como a inicialização para o <xref:System.Windows.Input.TraversalRequest> fornecido de parâmetro de tipo.  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</summary>
        <value>O nome do elemento. O padrão é uma cadeia de caracteres vazia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O uso mais comum dessa propriedade é especificar um [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] nome do elemento como um atributo na marcação.  
  
 Esta propriedade fornece essencialmente uma propriedade de conveniência de nível de framework do WPF para definir o [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [diretiva X:Name](~/docs/framework/xaml-services/x-name-directive.md).  
  
 Nomes devem ser exclusivos dentro de um namescope. Para obter mais informações, consulte [Namescopes WPF XAML](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Obtendo um <xref:System.Windows.FrameworkElement.Name%2A> se você estiver criando elementos em código não é comum. Se você já a referência apropriada no código, você pode simplesmente chamar métodos e propriedades no elemento de referem e geralmente não serão necessário o <xref:System.Windows.FrameworkElement.Name%2A>. Uma exceção a isso é se o <xref:System.Windows.FrameworkElement.Name%2A> cadeia de caracteres tem algumas sobrecarregados que significa que, por exemplo se é útil exibir esse nome no [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Definindo um <xref:System.Windows.FrameworkElement.Name%2A> partir code-behind se original <xref:System.Windows.FrameworkElement.Name%2A> foi definida da marcação também não é recomendada e alterar a propriedade após o carregamento de [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] não alterará a referência de objeto original. As referências de objeto são criadas apenas quando os namescopes subjacentes são explicitamente criados durante a análise. Você deverá chamar especificamente <xref:System.Windows.FrameworkElement.RegisterName%2A> para fazer uma alteração efetiva para o <xref:System.Windows.FrameworkElement.Name%2A> propriedade de um elemento já carregada.  
  
 Importantes de um caso onde a configuração <xref:System.Windows.FrameworkElement.Name%2A> do código é importante quando o registro de nomes de elementos que storyboards será executado, para que eles podem ser referenciados em tempo de execução. Antes de registrar um nome, também precisará criar uma instância e atribuir um <xref:System.Windows.NameScope> instância. Consulte a seção de exemplo ou [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 Configuração <xref:System.Windows.FrameworkElement.Name%2A> do código limitou os aplicativos, mas obtendo um elemento <xref:System.Windows.FrameworkElement.Name%2A> é mais comum. Um cenário em particular está se seu aplicativo dá suporte a um modelo de navegação onde páginas Recarregar no aplicativo, e o código de tempo de execução não é necessariamente lógica definida para a página. O método de utilitário <xref:System.Windows.FrameworkElement.FindName%2A>, que está disponível em qualquer <xref:System.Windows.FrameworkElement>, pode encontrar qualquer elemento por <xref:System.Windows.FrameworkElement.Name%2A> na árvore lógica para esse elemento, pesquisa recursivamente a árvore conforme necessário. Ou você pode usar o <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> método estático de <xref:System.Windows.LogicalTreeHelper>, que também usa um <xref:System.Windows.FrameworkElement.Name%2A> cadeia de caracteres como um argumento.  
  
 Normalmente usado elementos raiz (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> por exemplo) implementa a interface <xref:System.Windows.Markup.INameScope>. Implementações dessa interface devem impor que os nomes sejam ambíguos no seu escopo. Os elementos raiz que definem essa interface também definem os limites de comportamento namescope para todos os relacionado [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].  
  
 O <xref:System.Windows.FrameworkElement.Name%2A> propriedade também serve como um identificador para outros processos. Por exemplo, o [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] usará o modelo de automação <xref:System.Windows.FrameworkElement.Name%2A> como AutomationId para clientes e fornecedores.  
  
 Os valores de cadeia de caracteres usados para <xref:System.Windows.FrameworkElement.Name%2A> têm algumas restrições, conforme imposto pelo subjacente [diretiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) definido pelo [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] especificação. Notadamente, um <xref:System.Windows.FrameworkElement.Name%2A> deve começar com uma letra ou o caractere de sublinhado (_) e deve conter apenas letras, dígitos ou sublinhados. Para obter mais informações, consulte [Namescopes WPF XAML](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 <xref:System.Windows.FrameworkElement.Name%2A> é uma das poucas propriedades de dependência não podem ser animadas (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> é `true` nos metadados), pois o próprio nome é vital para atingir uma animação. Associação de dados um <xref:System.Windows.FrameworkElement.Name%2A> é tecnicamente possível, mas é um cenário muito comum porque uma associação de dados <xref:System.Windows.FrameworkElement.Name%2A> não pode servir a finalidade principal da propriedade: para fornecer um ponto de conexão do identificador para code-behind.  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.NameProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 O exemplo a seguir define o <xref:System.Windows.FrameworkElement.Name%2A> propriedade no código e, em seguida, registra o nome em recém-criado <xref:System.Windows.NameScope> chamando <xref:System.Windows.FrameworkElement.RegisterName%2A>. A técnica ilustrada aqui é um requisito para animação com storyboards, porque storyboards exigem o destino de <xref:System.Windows.FrameworkElement.Name%2A>e não pode ser direcionado pela referência de objeto.  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão.  
  
 Os modelos são a seção de concluído árvore visual um elemento que vêm com a propriedade de modelo de um <xref:System.Windows.Style> que é aplicada para o elemento. Para obter mais informações, consulte [Estilo e modelagem](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Classes derivadas de <see cref="T:System.Windows.FrameworkElement" /> pode usar esse método como uma notificação para uma variedade de cenários possíveis:-você pode chamar sua própria implementação de código que cria o restante de uma árvore visual do elemento.  -Você pode executar o código que dependa da árvore visual de modelos de ter sido aplicado, como obter referências a elementos nomeados que veio de um modelo.  -Você pode introduzir serviços que só fazem sentido existir após a conclusão da árvore visual de modelos.  -Você pode definir os estados e as propriedades de elementos dentro do modelo que dependem de outros fatores. Por exemplo, valores de propriedade só podem ser detectáveis Conhecendo o elemento pai, ou quando derivadas de uma determinada classe usa um modelo comum.  Os implementadores sempre devem chamar a implementação base antes de sua própria implementação. <see cref="T:System.Windows.FrameworkElement" /> em si não possui padrão implementação, mas classes intermediários podem.  <see cref="T:System.Windows.Controls.Control" /> oferece uma substituição semelhante, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Você ainda deve chamar a implementação base no caso de uma classe intermediária na herança implementou esse método.  
  
 O objetivo deste método é semelhante a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: ele fornece os meios para manipular o evento correspondente de classes derivadas com um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para os eventos roteados porque o evento roteado pode ter sido gerado por um elemento filho, não necessariamente o elemento que invocará manipuladores, portanto, sua implementação precisa colocar a fonte de argumentos do evento propriedades em conta (e não deve tentar gerar novamente o evento na maioria dos casos). As subclasses de <xref:System.Windows.FrameworkElement> pode optar por chamar os métodos do manipulador de classe privada quando o evento é recebido na rota. Um cenário potencial é receber os argumentos do evento e deliberadamente marcar o evento como manipulado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Você ainda deve chamar a implementação base no caso de uma classe intermediária na herança implementou esse método.  
  
 O objetivo deste método é semelhante a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: ele fornece os meios para manipular o evento correspondente de classes derivadas com um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para os eventos roteados porque o evento roteado pode ter sido gerado por um elemento filho, não necessariamente o elemento que invocará manipuladores, portanto, sua implementação precisa colocar a fonte de argumentos do evento propriedades em conta (e não deve tentar gerar novamente o evento na maioria dos casos). As subclasses de <xref:System.Windows.FrameworkElement> pode optar por chamar os métodos do manipulador de classe privada quando o evento é recebido na rota. Um cenário potencial é receber os argumentos do evento e deliberadamente marcar o evento como manipulado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao contrário de alguns outros * métodos expostos pelos elementos de base, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> tem uma implementação padrão. Especificamente, ele tem uma implementação que substitui a implementação nulo no próximo nível do elemento base para baixo, <xref:System.Windows.UIElement.OnGotFocus%2A>. Quando chamado, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> define o comportamento de foco apropriado neste elemento em casos onde o evento foi originado do elemento atual devido ao foco do teclado. O <xref:System.Windows.FrameworkElement.OnGotFocus%2A> manipulador não marcar os argumentos do evento como tratado, mesmo quando o foco é ser definido para o elemento atual. Se a origem do evento foi outro elemento na árvore de (não o elemento atual), o manipulador não fará nada.  
  
 Você pode substituir esse método para alterar o comportamento de foco padrão em seu elemento, mas lembre-se de que alterar o comportamento de foco dessa maneira pode ser melhor executada não permitindo que o elemento seja Focusable é nenhum (consulte <xref:System.Windows.UIElement.Focusable%2A>).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se você pretende marcar o evento manipulado nos argumentos, lembre-se de consequências em outros elementos pai na árvore de elementos de manipulação de eventos. Como esse manipulador age em um evento com um roteamento bolha, definir o foco para o atual <paramref name="sender" /> por evento argumentos podem não ser apropriados. Foco precisará ir para um elemento filho composto ou um elemento pai, dependendo da composição de alguns controles. Marcar, portanto, um evento de foco como tratado é recomendado apenas se a totalidade da árvore visual que o evento é roteamento por meio de faz parte da composição de um controle que você criou.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nesse específico em * método não é um gancho de manipulador de classe. Nem ele exatamente segue o estabelecida [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] em * convenção de métodos que o evento correspondente pode ser suprimido por substituir esse método e não chamar a implementação base.  
  
 Observe que o <xref:System.Windows.FrameworkElement.IsInitialized%2A> propriedade é somente leitura, portanto, você não pode definir <xref:System.Windows.FrameworkElement.IsInitialized%2A> para forçar o comportamento de inicialização. Definindo o estado de inicialização deve ser feito apenas pelo [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A implementação padrão desse método virtual gera o evento conforme descrito acima. Substituições devem chamar a implementação base para preservar esse comportamento. Se você não chamar a implementação base, não apenas você não vai disparar a <see cref="E:System.Windows.FrameworkElement.Initialized" /> evento como é geralmente esperada de um <see cref="T:System.Windows.FrameworkElement" /> classe derivada, mas também suprimirá duas importantes estilo e o tema estilo operações de inicialização que são implementado por esta implementação base.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não deve detectar geralmente invalidações ou alterações de propriedade. Em vez disso destina para modificações do padrão de invalidação geral se for conhecidas certas informações sobre classificações de largura de propriedades.  
  
 Esse método é potencialmente chamado várias vezes durante a vida de um objeto. Portanto, você pode obter um melhor desempenho se você substituir os metadados de propriedades específicas e, em seguida, anexa <xref:System.Windows.CoerceValueCallback> ou <xref:System.Windows.PropertyChangedCallback> funções de propriedades individuais. No entanto, você usaria esse método se um <xref:System.Windows.FrameworkElement> inclui um número significativo de propriedades de dependência inter-relacionados de valor, ou se ele inclui lógica, como o comportamento de renderização que deve ser executado novamente para vários casos de invalidações de propriedade de relacionados.  
  
 Observe que há um nome idêntico `OnPropertyChanged` método com uma assinatura diferente (o tipo de parâmetro é <xref:System.ComponentModel.PropertyChangedEventArgs>) que podem aparecer em um número de classes. Que `OnPropertyChanged` é usado para notificações do objeto de dados e faz parte do contrato de <xref:System.ComponentModel.INotifyPropertyChanged>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sempre chame a implementação base, como a primeira operação em sua implementação. Falha ao fazer isso significativamente desabilitará toda a [! Sistema de propriedade Include[TLA2#tla_winclient](~/Includes/tla2sharptla-winclient-MD.MD)], que faz com que valores incorretos a serem relatados. Específico <see cref="T:System.Windows.FrameworkElement" /> implementação também é responsável por manter o estado apropriado para uma variedade de propriedades que afetam a interface do usuário visível. Isso inclui a anulação da árvore visual com base nas alterações de estilo em momentos apropriados.</para>
        </block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">Details of the old and new size involved in the change.</param>
        <summary>Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método substitui <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. Se você chamar este método redefinirá o <xref:System.Windows.FrameworkElement.ActualWidth%2A> propriedade, o <xref:System.Windows.FrameworkElement.ActualHeight%2A> propriedade, ou ambos, dependendo do que é especificado como alterados nos argumentos fornecidos, e você sempre gera o evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Não substitua este método para cenários típicos de layout. O sistema de layout opera de forma assíncrona deliberadamente para assegurar que todos os layout possível organizar e casos de medida são tratados de. O sistema de layout substituir métodos <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> e <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> geralmente são suficientes para qualquer personalização de layout necessário. <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> é exposta como uma máquina virtual. Você pode substituir <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> para corrigir os casos excepcionais onde uma alteração de comportamento de tempo de execução relacionada a eventos combinados com controle de entrada recomposition em resposta pode fornecer informações de layout precisas.  Você ainda pode substituir esse método em classes derivadas (ele é protegido, mas não lacrado). Sempre chame a implementação base para preservar o comportamento mencionado acima, a menos que você tenha razões muito específicas para desabilitar o comportamento de renderização de nível de framework WPF padrão. Falha ao gerar o <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> evento causará um comportamento não padrão de layout se usando a implementação padrão de sistema de layout de nível de framework WPF.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">The old style.</param>
        <param name="newStyle">The new style.</param>
        <summary>Invoked when the style in use on this element changes, which will invalidate the layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método tem uma implementação padrão que define um sinalizador interno que indica a condição de estilo alterado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Você não deve ter normalmente substituir esse método. Qualquer alteração para um estilo que envolve uma medida ou organizar alteração já dispararia outro ciclo de processamento, supondo que uma implementação típica de <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, ou os padrões. Substituições de <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> pode ser apropriado se seu <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementações foram deliberadamente otimizando ou dando suporte a atualizações parciais, mas ainda deseja aplicar as alterações nos estilos mais diretamente. (As atualizações parciais seria uma tentativa para evitar várias chamadas incrementais para <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> e <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> em todos os elementos filho).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Você ainda deve chamar a implementação base no caso de uma classe intermediária na herança implementou esse método.  
  
 O objetivo deste método é semelhante a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: ele fornece os meios para manipular o evento correspondente de classes derivadas com um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para os eventos roteados porque o evento roteado pode ter sido gerado por um elemento filho, não necessariamente o elemento que invocará manipuladores, portanto, sua implementação precisa colocar a fonte de argumentos do evento propriedades em conta (e não deve tentar gerar novamente o evento na maioria dos casos). As subclasses de <xref:System.Windows.FrameworkElement> pode optar por chamar os métodos do manipulador de classe privada quando o evento é recebido na rota. Um cenário potencial é receber os argumentos do evento e deliberadamente marcar o evento como manipulado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não tem nenhuma implementação padrão. Você ainda deve chamar a implementação base no caso de uma classe intermediária na herança implementou esse método.  
  
 O objetivo deste método é semelhante a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: ele fornece os meios para manipular o evento correspondente de classes derivadas com um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. O padrão de implementação dos métodos On * é diferente para os eventos roteados porque o evento roteado pode ter sido gerado por um elemento filho, não necessariamente o elemento que invocará manipuladores, portanto, sua implementação precisa colocar a fonte de argumentos do evento propriedades em conta (e não deve tentar gerar novamente o evento na maioria dos casos). As subclasses de <xref:System.Windows.FrameworkElement> pode optar por chamar os métodos do manipulador de classe privada quando o evento é recebido na rota. Um cenário potencial é receber os argumentos do evento e deliberadamente marcar o evento como manipulado para encurtar a rota.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">The old parent element. May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</param>
        <summary>Invoked when the parent of this element in the visual tree is changed. Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A árvore visual é potencialmente diferente da árvore lógica porque ele omite os elementos que não processam visualmente, como coleções e expande alguns elementos com base em sua composição de tema e um estilo. Para obter mais informações, consulte [Árvores no WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A implementação padrão desse método virtual consultas para o novo pai, gera vários eventos de inicialização e define os sinalizadores internos sobre estado de inicialização do <see cref="T:System.Windows.FrameworkElement" /> conforme apropriado. Finalmente, ele chama as implementações de base sucessivas declarada por <see cref="T:System.Windows.UIElement" />, que por sua vez chama sua base <see cref="T:System.Windows.Media.Visual" />. Sempre chamar a implementação base para preservar esse comportamento, caso contrário, o comportamento de árvore de elemento para este elemento quando declarado como um filho de outro elemento pode não ser conforme o esperado.  Alguns existente [! Classes de include[TLA#tla_winclient](~/Includes/tlasharptla-winclient-MD.MD)] substituir esse método, por exemplo: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />. O cenário mais comum é para impor que o novo pai deve ser um tipo específico. Isso pode envolver lançar uma exceção se o novo pai falha de alguma maneira de teste de tipo. Uma versão especializada deste cenário existe em implementações de itens de lista e itens de menu, que não fazem sentido fora de um pai visual que possui uma coleção apropriada para armazená-los em. Observe que esses casos não necessariamente gerar exceções, pois pode haver cenários designers que dependem de mudança de pai elementos que estão temporariamente sem seus pais "normais".  Esse método também é substituído em determinados elementos que são normalmente o elemento raiz, como <see cref="T:System.Windows.Window" />. Outro caso é elementos que são o elemento raiz aparente na marcação, mas que gera automaticamente uma infraestrutura maior em uma árvore lógica compilada (como <see cref="T:System.Windows.Controls.Page" />). O <see cref="T:System.Windows.Window" /> e <see cref="T:System.Windows.Controls.Page" /> implementações deliberadamente lacrar o método.</para>
        </block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</summary>
        <value>
          <see langword="true" /> se esse elemento não usar as propriedades de estilo do tema. Todas as propriedades que originam o estilo vêm de estilos de aplicativos locais e propriedades de estilo do tema não se aplicam. <see langword="false" /> se os estilos de aplicativo se aplicarem primeiro e, então, estilos de tema se aplicarem a propriedades que não foram definidas especificamente em estilos de aplicativo. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O uso mais comum dessa propriedade é um uso indireto em setter de um estilo que está fornecendo um estilo com tema.  
  
> [!IMPORTANT]
>  Se você definir <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> para `true` em um controle, você irá suprimir o modelo de controle padrão fornecido pelos estilos de tema. Esse modelo de controle normalmente inclui conteúdo apresentador e outros elementos compostos que fornecem básico [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] funcionalidade e visualização para o controle. Se você desejar que o controle para continuar a oferecer suporte os mesmos recursos como os estilos de tema padrão, você deve fornecer um estilo alternativo com um modelo de controle que replica a mesma estrutura. Para obter mais informações, consulte [Visão geral da criação de controle](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logical parent  element of this element.</summary>
        <value>O pai lógico desse elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Parent%2A> pode ser `null` em casos em que um elemento foi instanciado, mas não está associado a qualquer árvore lógica que eventualmente se conecta ao elemento raiz de nível de página ou o objeto de aplicativo.  
  
 Observe que o pai lógico de um elemento poderá alterar dependendo da funcionalidade do aplicativo e manter o valor dessa propriedade não refletirá essa alteração. Normalmente, você deve obter o valor imediatamente antes de você precisa dele.  
  
 Consulte [árvores no WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) para obter mais informações sobre a passagem da árvore lógica e os cenários em que usar <xref:System.Windows.FrameworkElement.Parent%2A> como uma técnica do elemento pai descoberta é apropriada.  
  
 O mecanismo de propriedade potencialmente recalculará todos os valores de propriedade de um elemento quando ele é alterado o nível superior, porque algumas propriedades herdam valores por meio da árvore lógica. O <xref:System.Windows.FrameworkElement.DataContext%2A> que se aplica para associações também podem alterar quando os elementos de seus pais são modificados.  
  
 Alterando o pai de um elemento é normalmente feito somente por meio de manipulação de coleções, usando dedicado adicionar ou remover métodos, ou por meio de propriedades do conteúdo dos elementos de configuração.  
  
 O cenário mais comum para usar o <xref:System.Windows.FrameworkElement.Parent%2A> é de propriedade obter uma referência e, em seguida, obter vários <xref:System.Windows.FrameworkElement> valores de propriedade do pai. Para os modelos, o <xref:System.Windows.FrameworkElement.Parent%2A> do modelo eventualmente será `null`. Para obter após esse ponto e estender a árvore lógica em que o modelo é aplicado na verdade, usar <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.  
  
 Observe que essa propriedade não relata pais da árvore visual em casos onde eles variam de pais árvore lógica. Pais da árvore visual não são normalmente importantes para casos gerais do aplicativo, mas podem ser elementos pai desejado em certos casos de nível visual. Consulte <xref:System.Windows.Media.VisualTreeHelper>.  
  
   
  
## Examples  
 O exemplo a seguir mostra o código que verifica o pai de um elemento e, em seguida, usa os valores de propriedade do pai para definir as propriedades no elemento filho para corresponder. Nesse caso, essas são propriedades que afetam o tamanho de renderização.  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">The child element reporting the change.</param>
        <summary>Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />. <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se este elemento tem um elemento filho no qual foi invalidada, algumas propriedades e a propriedade foi marcada como <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ou <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> nos metadados da propriedade durante o registro, esse método é chamado. A invocação de método notifica o elemento pai qual elemento filho específico deve ser medido novamente se esse elemento oferece suporte à atualização (incremental) parcial do layout.  
  
 Por padrão, <xref:System.Windows.FrameworkElement> não oferece suporte a layout incremental e de <xref:System.Windows.FrameworkElement> classe este método não tem nenhuma implementação padrão. O cenário em que substituir esse método seria necessário não é comum, porque você deve modificar o comportamento padrão do sistema de layout.  
  
 Um cenário de implementação de exemplo pode ser se uma classe tem limitações de tipo de possíveis elementos filho que são significativamente mais restritivos do que o sistema de layout de nível de framework do WPF. Devido à natureza desses elementos personalizados, as alterações de propriedade podem ser adiadas deliberadamente ao implementar alguns comportamentos de layout personalizado. Por exemplo, substituições de método/organizar medidas, que tentam otimizar o elemento filho renderizar passagem, poderiam ser adiadas para determinados tipos de alterações que normalmente resultaria em outra passagem de layout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">The direction for which a prospective focus change should be determined.</param>
        <summary>Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</summary>
        <returns>The next element that focus would move to if focus were actually traversed. May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.MoveFocus%2A> é o método relacionado que, na verdade, move o foco.  
  
   
  
## Examples  
 O exemplo a seguir implementa um manipulador que lida com várias entradas de botão possíveis, cada botão representando um possível <xref:System.Windows.Input.FocusNavigationDirection>. O manipulador controla o elemento com o foco do teclado atual e chamadas <xref:System.Windows.FrameworkElement.PredictFocus%2A> no elemento e especifica as <xref:System.Windows.Input.FocusNavigationDirection> como a inicialização para o <xref:System.Windows.Input.TraversalRequest> fornecido de parâmetro de tipo. Em vez de mover a esse elemento como <xref:System.Windows.FrameworkElement.MoveFocus%2A> faria, o manipulador altera as dimensões físicas do destino foco previsto para fins de visualização.  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />. These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Name to use for the specified name-object mapping.</param>
        <param name="scopedElement">Object for the mapping.</param>
        <summary>Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é um método conveniente para chamar <xref:System.Windows.NameScope.RegisterName%2A>. A implementação verificará sucessivos elementos pais até encontrar o aplicável <xref:System.Windows.NameScope> implementação, que é encontrada por localizar um elemento que implementa <xref:System.Windows.Markup.INameScope>. Para obter mais informações sobre namescopes, consulte [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Chamando <xref:System.Windows.FrameworkElement.RegisterName%2A> é necessário para conectar corretamente storyboards de animação para aplicativos quando criado em código. Isso ocorre porque uma chave de storyboard propriedades, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, usa uma pesquisa de nome de tempo de execução em vez de ser capaz de levar a uma referência a um elemento de destino. Isso é verdadeiro mesmo se esse elemento é acessível por referência do código. Para obter mais informações sobre por que você precisa registrar nomes para os destinos de storyboard, consulte [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">The element to remove.</param>
        <summary>Removes the provided object from this element's logical tree. <see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use esse método para a implementação de coleções de objetos que representam o filho lógico de um elemento. Isso pode ser feito em getters de propriedade ou setters, manipuladores de classe de `Changed` eventos, construtores, ou na coleção de tipos de si mesmos.  
  
 Para autores de controle, manipulando a árvore lógica esse nível não é a prática recomendada, a menos que nenhum dos modelos de conteúdo da classe base de controle fornecido é apropriado. Considere subclassificação no nível de <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, e <xref:System.Windows.Controls.HeaderedItemsControl>. Essas classes fornecem um modelo de conteúdo com a imposição de específico de filhos lógicos por meio de dedicado [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], bem como suporte para outros recursos normalmente desejáveis em um [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controle como estilo por meio de modelos.  
  
   
  
## Examples  
 O exemplo a seguir implementa um `Child` propriedade em um personalizado <xref:System.Windows.FrameworkElement> que faz a sua própria implementação de camada visual. Setter da propriedade foi projetado para que se o valor for alterado, o valor antigo é removido da árvore lógica, bem como uma coleção visual específicas de classe. Os valores são armazenados em cache e, em seguida, o novo valor é adicionado ao padrão WPF framework nível árvore lógica e a coleção visual personalizada.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento indica a um pai <xref:System.Windows.Controls.ScrollViewer> (ou classe derivada) que o elemento que gera o <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento deve ficar visível dentro da região rolável. O <xref:System.Windows.Controls.ScrollViewer> , em seguida, marcará o <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento tratados usando a manipulação de classe de evento. Em geral <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento dados não devem ser marcados como tratados por qualquer classe que controlam uma região de rolagem ou por qualquer instância manipulador, porque isso poderia interferir com o objetivo do elemento chamado <xref:System.Windows.FrameworkElement.BringIntoView%2A>.  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|Estratégia de roteamento|Bolha|  
|delegado|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the locally-defined resource dictionary.</summary>
        <value>O dicionário atual de recursos definido localmente, em que cada recurso pode ser acessado por chave.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dicionários de recursos que podem ser definidos completamente ou parcialmente em [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] normalmente são criadas como um elemento de propriedade e são normalmente no elemento raiz de qualquer página individual ou para o aplicativo. Colocar o dicionário de recurso com esse nível torna mais fácil a localização de elementos filho individual na página (ou de qualquer página, no caso de aplicativo). Na maioria dos cenários de aplicativo, é recomendável que os estilos seja definida como elementos de objeto dentro de um dicionário de recursos, ou ser definido como recursos externos para que o recurso de estilo inteiro pode ser independente (essa abordagem ajuda designer separado responsabilidades de responsabilidades do desenvolvedor, separando arquivos físicos que precisam ser editadas).  
  
 Observe que essa propriedade retorna o dicionário de recurso declarado diretamente dentro desse elemento. Isso é diferente do processo de pesquisa de recurso real, em que um elemento filho pode acessar qualquer um dos recursos definidos em cada elemento pai, pesquisa recursivamente para cima.  
  
 Recursos também podem ser referenciados pelo código de dentro da coleção, mas lembre-se de que os recursos criados em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] definitivamente não estará acessível até depois <xref:System.Windows.FrameworkElement.Loaded> é gerado pelo elemento que declara o dicionário. Na verdade, os recursos são analisados e de forma assíncrona não até mesmo o <xref:System.Windows.FrameworkElement.Loaded> evento é uma garantia de que você pode fazer referência a um [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] definido pelo recurso. Por esse motivo geralmente só deve acessar [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] definido recursos como parte do código de tempo de execução ou por meio de outros [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] técnicas, como estilos ou referências de extensão de recurso para valores de atributo. Ao acessar recursos através do código, é essencialmente equivalente a uma referência feita no [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 Subjacente <xref:System.Windows.ResourceDictionary> suporta os métodos necessários para adicionar, remover ou consultar recursos de dentro da coleção por meio de código. O <xref:System.Windows.FrameworkElement.Resources%2A> propriedade é configurável para dar suporte ao cenário de substituir completamente a coleção de recursos de um elemento para ser um novo ou diferente <xref:System.Windows.ResourceDictionary>.  
  
 Observe que o [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxe mostrada não incluir um elemento para o <xref:System.Windows.ResourceDictionary>. Este é um exemplo da sintaxe de coleção implícita; uma marca que representa o elemento de coleção pode ser omitida. Os elementos que são adicionados como itens na coleção são especificados em vez disso. Para obter mais informações sobre coleções implícita e [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], consulte [XAML sintaxe em detalhes](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md). Um caso em que um <xref:System.Windows.ResourceDictionary> ainda estão especificadas explicitamente como um elemento é se você está implantando um dicionário mesclado, caso em que normalmente não há nenhum elemento filho para que <xref:System.Windows.ResourceDictionary>. Para obter detalhes, consulte [dicionários de recursos mesclados](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreResourceElements*  
 Um ou mais elementos de objeto, cada uma delas define um recurso. Cada elemento de propriedade de recurso dentro de cada <xref:System.Windows.ResourceDictionary> deve ter um valor exclusivo para o [diretiva X:Key](~/docs/framework/xaml-services/x-key-directive.md), que serve como a chave exclusiva quando os valores são recuperados do <xref:System.Windows.ResourceDictionary>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attaches a binding to this element for the specified dependency property.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">Identifies the destination property where the binding should be established.</param>
        <param name="path">The source property name or the path to the property used for the binding.</param>
        <summary>Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</summary>
        <returns>Records the conditions of the binding. This return value can be useful for error checking.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é um método conveniente para chamar <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, que passa a instância atual como o <xref:System.Windows.DependencyObject>e cria um novo <xref:System.Windows.Data.Binding> com base em fornecidos `path` parâmetro. Esta assinatura é mais conveniente se você estiver estabelecendo uma associação simples padrão. Se você precisa especificar as propriedades de associação para condições não padrão ou se desejar usar um <xref:System.Windows.Data.MultiBinding> ou <xref:System.Windows.Data.PriorityBinding>, você deve usar o <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> assinatura.  
  
   
  
## Examples  
 O exemplo a seguir define uma associação usando um caminho específico.  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">Identifies the property where the binding should be established.</param>
        <param name="binding">Represents the specifics of the data binding.</param>
        <summary>Attaches a binding to this element, based on the provided binding object.</summary>
        <returns>Records the conditions of the binding. This return value can be useful for error checking.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é um método conveniente para chamar <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, que passa a instância atual como o <xref:System.Windows.DependencyObject>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">The element that specifies a flow direction.</param>
        <param name="value">A value of the enumeration, specifying the direction.</param>
        <summary>Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método dá suporte a sintaxe da propriedade anexada para o <xref:System.Windows.FrameworkElement.FlowDirection%2A> propriedade, portanto, permitindo que o filho elementos de um fornecido <xref:System.Windows.FrameworkElement> para especificar a direção de fluxo para a organização em seu elemento pai. Para definir o valor no atual <xref:System.Windows.FrameworkElement>, use o direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] acessador <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">The property to which the resource is bound.</param>
        <param name="name">The name of the resource.</param>
        <summary>Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma referência de recurso é semelhante ao uso de um [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) na marcação. A referência de recurso cria uma expressão interna que fornece o valor da propriedade especificada em uma base de tempo de execução adiada. A expressão será avaliada novamente sempre que o dicionário de recurso indica um valor alterado por meio de eventos internos ou sempre que o elemento atual é alterado o nível superior (uma alteração de pai alteraria o caminho de pesquisa de dicionário).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso retornará `true` enquanto houver pelo menos um recurso com chave local <xref:System.Windows.FrameworkElement.Resources%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso retornará `true` se o <xref:System.Windows.Style> é definido localmente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método retorna `true` se o <xref:System.Windows.FrameworkElement.Triggers%2A> localmente está definida.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os eventos roteados diretos não seguem uma rota, somente são tratados dentro do mesmo elemento no qual eles são gerados. Eventos roteados diretos suportam outro comportamento eventos roteados: eles dão suporte a uma coleção de manipuladores acessível e pode ser usados como um <xref:System.Windows.EventTrigger> em um estilo.  
  
 O sistema de layout lê propriedades dentro de <xref:System.Windows.SizeChangedEventArgs> classe de argumento desse evento, para determinar se as alterações de tamanho relatado devem ser consideradas significativas. Isso permite que o sistema de layout ou de suas implementações de layout de controle específicos para evitar a imposição de uma alteração de layout devido a diferenças visualmente imperceptível entre valores de largura ou altura antiga e nova. As diferenças imperceptível podem ser devido a cálculos de arredondamento ou mesmo resultado um ponto flutuante de tipos de dados.  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the source value changes for any existing property binding on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Data.Binding.SourceUpdated> evento que é gerado por qualquer <xref:System.Windows.Data.Binding> associado a este elemento.  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style used by this element when it is rendered.</summary>
        <value>O estilo não padrão aplicado a esse elemento, se houver. Caso contrário, <see langword="null" />. O padrão para um <see cref="T:System.Windows.FrameworkElement" /> construído por padrão é <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para controles, o estilo atual normalmente é fornecido por um estilo de padrão de temas de controle, ou de estilos geralmente aplicado aos controles desse tipo por recursos no nível do aplicativo ou página (um estilo implícito). Essa propriedade não padrão não definido ou retorno estilos (tema), mas ela retorna um estilo implícito ou um estilo explícito que está atuando no elemento. No caso de estilos implícitos ou explícitos, não importa se o estilo é especificado como um recurso ou definido localmente.  
  
 Definir os estilos tem algumas restrições. Você pode redefinir todo o <xref:System.Windows.FrameworkElement.Style%2A> propriedade para um novo <xref:System.Windows.Style> a qualquer momento, forçando uma recomposition de layout. No entanto, assim que esse estilo é colocado em uso por um elemento carregado, o <xref:System.Windows.Style> devem ser consideradas lacrado. Tentativa de alterar qualquer propriedade individual de um estilo em uso (como qualquer coisa dentro da coleção de <xref:System.Windows.Style.Setters%2A>) faz com que uma exceção seja lançada. Um estilo que é definido na marcação é considerado para estar em uso assim que ele é carregado de um dicionário de recurso (para recursos), ou a página que está contida na for carregada (para estilos embutidos).  
  
 <xref:System.Windows.FrameworkElement.Style%2A> é uma propriedade de dependência com precedência especial. Definido localmente estilo geralmente opera na precedência mais alta no sistema de propriedade. Se o <xref:System.Windows.FrameworkElement.Style%2A> é nulo neste momento, durante o carregamento, o sistema de propriedade verifica estilos implícitos em recursos locais ou aplicativos que especificam o tipo. Se o estilo for null ainda após essa etapa, o estilo de ação para fins de apresentação geralmente vêm de estilo padrão (tema), mas o estilo padrão não é retornado no <xref:System.Windows.FrameworkElement.Style%2A> o valor da propriedade. Consulte [precedência de valor de propriedade de dependência](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) ou [estilos e modelagem](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *resourceExtension*  
 Um dos seguintes:, ou. Consulte [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 A chave que identifica o estilo que está sendo solicitado. A chave refere-se a um recurso existente em um <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Sintaxe de elemento de propriedade é tecnicamente possível, mas não recomendado na maioria dos cenários de estilo. Consulte [modelos e estilos in-line](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Uma referência de associação usando ou <xref:System.Windows.Data.Binding> também é possível, mas não é comum.  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 O exemplo a seguir define um estilo em um dicionário de recursos.  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the requested ambient property.</param>
        <summary>For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</summary>
        <returns>
          <see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Windows.FrameworkElement> é convertida em uma interface de <xref:System.Windows.Markup.IQueryAmbient>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an arbitrary object value that can be used to store custom information about this element.</summary>
        <value>O valor desejado. Esta propriedade não tem valor padrão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade equivale a propriedades da marca em outros modelos de programação Microsoft, como o Visual Basic para aplicativos ou formulários do Windows. <xref:System.Windows.FrameworkElement.Tag%2A> visa fornecer um local de propriedade pré-existente, onde você pode armazenar alguns básicas informações personalizadas sobre qualquer <xref:System.Windows.FrameworkElement> sem a necessidade de subclasse de um elemento.  
  
 Como essa propriedade tem um objeto, você precisa usar o uso do elemento de propriedade para definir o <xref:System.Windows.FrameworkElement.Tag%2A> propriedade em XAML para algo diferente de um objeto com um conversor de tipo conhecido e internos, como uma cadeia de caracteres. Objetos usados dessa maneira normalmente não estão nos namespaces padrão do WPF e, portanto, podem exigir o mapeamento de namespace para o namespace externo para ser apresentado como elementos XAML. Para obter detalhes, consulte [Namespaces XAML e o mapeamento de Namespace para WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) e [XAML e Classes personalizadas para WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.TagProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the target value changes for any property binding on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse evento cria um alias para o <xref:System.Windows.Data.Binding.TargetUpdated> evento que é gerado por qualquer <xref:System.Windows.Data.Binding> associado a este elemento. Geralmente, isso significa que a associação em questão é uma associação bidirecional, e que a propriedade de dependência associado confirmará que o valor da propriedade anterior agora é inválido de acordo com qualquer validação ou esquema de cache que dão suporte a propriedade ou a fonte de dados.  
  
 Use os dados do evento de <xref:System.Windows.FrameworkElement.TargetUpdated> evento para determinar a propriedade específica que está relatando a atualização do valor de destino.  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.</summary>
        <value>O elemento cujo <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> causou esse elemento a ser criado. Esse valor é frequentemente <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> é frequentemente `null` para objetos que são criados na sua marcação de aplicativo ou código. Isso ocorre porque você cria esses objetos diretamente, não por meio de um modelo. Obtido percorrendo a árvore lógica da raiz, ou por referências de nome típico de referências de objeto, não vêm de um modelo.  
  
 Casos onde <xref:System.Windows.FrameworkElement.TemplatedParent%2A> pode não ser `null` incluem operações como teste de clique, a manipulação de eventos para certos eventos de entrada baixo nível, percorra a árvore visual com <xref:System.Windows.Media.VisualTreeHelper>, ou trabalhar com enumeradores, que podem retornar elementos fornecido de modelos. Outra situação é se você chamar especificamente <xref:System.Windows.FrameworkTemplate.FindName%2A> em relação a um existente <xref:System.Windows.FrameworkTemplate> e trabalhar com o objeto retornado.  
  
 Modelos são objetos compartilhados na verdade, onde o conteúdo do modelo é criado apenas uma vez. Portanto, se você obtiver uma referência de objeto para um elemento que veio de um modelo, você pode achar que a árvore lógica aparente não acessar a raiz da página. Para conectar-se uma referência de modelo de árvore lógica da página, você deve obter o <xref:System.Windows.FrameworkElement.TemplatedParent%2A> valor e continuar a navegar árvore elemento conforme desejado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>O objeto de dica de ferramenta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o valor dessa propriedade é do tipo <xref:System.Windows.Controls.ToolTip>, em seguida, esse valor é a dica de ferramenta que será usada no [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  Se o valor for de qualquer outro tipo, esse valor será usado como o *conteúdo* para um <xref:System.Windows.Controls.ToolTip> fornecido (construído) pelo sistema. Para obter mais informações, consulte <xref:System.Windows.Controls.ToolTipService>. A classe de serviço fornece as propriedades anexadas que podem ser usadas para personalizar um <xref:System.Windows.Controls.ToolTip>.  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *toolTipContent*  
 Uma cadeia de caracteres que se torna o texto exibido para o <xref:System.Windows.FrameworkElement.ToolTip%2A>.  
  
 *toolTipObjectContent*  
 Um objeto, fornecido na forma de elemento de objeto, que deve ser usada como o conteúdo para o <xref:System.Windows.FrameworkElement> . Geralmente isso seria uma <xref:System.Windows.FrameworkElement> ou algum outro elemento que cria a composição de layout para o <xref:System.Windows.FrameworkElement.ToolTip%2A>, eventualmente com o conteúdo de texto dentro da composição. Nesse exemplo, o <xref:System.Windows.Controls.ToolTip> elemento é criado implicitamente de analisada [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]e o *toolTipObjectContent* o conteúdo está definido como seu <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> propriedade.  
  
 <`ToolTip` ... / >  
 Consulte <xref:System.Windows.Controls.ToolTip>.  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|Propriedades de metadados é definido como `true`|Nenhum|  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.Windows.Controls.ToolTip> em código e, em seguida, configura o <xref:System.Windows.FrameworkElement.ToolTip%2A> propriedade em um <xref:System.Windows.Controls.Primitives.StatusBar> controle.  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs just before any tooltip on the element is closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Marcar o <xref:System.Windows.FrameworkElement.ToolTipClosing> evento tratados não Cancelar para fechar a dica de ferramenta. Depois que a dica de ferramenta é exibida, fechando a dica de ferramenta é feito apenas em resposta à interação do usuário com a interface do usuário.  
  
 Esse evento não pode ser um <xref:System.Windows.EventTrigger> em um estilo. Isso ocorre porque o campo de identificador desse evento reutiliza uma implementação de um serviço que não expõe métodos de adicionar ou remover de evento para o evento de nível de serviço.  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Substituir <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> para implementar a manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any tooltip on the element is opened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para impedir que uma dica de ferramenta que aparece na interface do usuário, o manipulador para <xref:System.Windows.FrameworkElement.ToolTipOpening> pode marcar a <xref:System.Windows.Controls.ToolTipEventArgs> dados de eventos manipulados. Caso contrário, a dica de ferramenta é exibida, usando o valor da <xref:System.Windows.FrameworkElement.ToolTip%2A> a propriedade como o conteúdo da dica de ferramenta. Outro cenário possível é que você pode escrever um manipulador que redefine o valor de <xref:System.Windows.FrameworkElement.ToolTip%2A> propriedade para o elemento que é a origem do evento, antes que a dica de ferramenta é exibida.  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening> não será gerado se o valor de <xref:System.Windows.FrameworkElement.ToolTip%2A> é `null` ou de outra forma não definida. Não defina deliberadamente <xref:System.Windows.FrameworkElement.ToolTip%2A> para `null` enquanto uma dica de ferramenta está aberta ou abrindo; isso não terá o efeito de fechamento a dica de ferramenta e em vez disso, criará um artefato visual indesejável na interface de usuário.  
  
 O <xref:System.Windows.FrameworkElement.ToolTipOpening> evento não pode ser um <xref:System.Windows.EventTrigger> em um estilo. Isso ocorre porque o campo de identificador desse evento reutiliza uma implementação de um serviço que não expõe métodos de adicionar ou remover de evento para o evento de nível de serviço.  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Substituir <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> para implementar a manipulação de classe para esse evento em classes derivadas.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of triggers established directly on this element, or in child elements.</summary>
        <value>Uma coleção fortemente tipada de objetos <see cref="T:System.Windows.Trigger" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Esta propriedade só pode ser definida [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] por meio de mostra a sintaxe de coleção, ou acessar o objeto de coleção e usar seus vários métodos, como adicionar. A propriedade para acessar o objeto de coleção é somente leitura, a coleção em si é leitura / gravação. A propriedade existe somente em elementos raiz; tentando encontrá-lo ou defini-lo em outro lugar fará com que uma exceção seja lançada.  
  
 Essa propriedade permite que você examine gatilhos que existem como parte de estilos em uso neste elemento. O utilitário só reporta a coleção de gatilhos literalmente são adicionados à coleção, na marcação ou código. Elementos normalmente não tem elementos existentes por padrão (por meio de um modelo para a instância); é mais comum para gatilhos que vêm de composição de controle seja estabelecida em estilos.  
  
 Em termos de comportamento (e tentando estabelecer quais efeito veio de qual elemento da declarado <xref:System.Windows.FrameworkElement.Triggers%2A> coleção), a condição de disparo e o efeito do gatilho pode ser neste elemento, ou pode estar em seus elementos filho na árvore lógica. Observe que, se você usar eventos de tempo de vida, como <xref:System.Windows.FrameworkElement.Loaded> para obter essa coleção, os gatilhos do elemento filho não ainda seja totalmente carregados e a coleção será menor do que seria realmente em tempo de execução.  
  
 Observe que a coleção de gatilhos estabelecida em um elemento só oferece suporte a <xref:System.Windows.EventTrigger>, não os disparadores de propriedade (<xref:System.Windows.Trigger>). Se você precisar de disparadores de propriedade, você deve colocá-los em um estilo ou modelo e, em seguida, atribuir esse estilo ou modelo para o elemento ou diretamente por meio de <xref:System.Windows.FrameworkElement.Style%2A> propriedade, ou indiretamente por meio de uma referência de estilo implícito.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Uso do elemento propriedade XAML  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreTriggers*  
 Um ou mais definido <xref:System.Windows.EventTrigger> elementos. Cada gatilho tal deve conter referências e ações de storyboard válida. Observe que esta coleção só pode ser estabelecida no elemento raiz de uma página. Para obter mais informações, consulte [Visão geral de storyboards](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">The key identifier of the resource to be found.</param>
        <summary>Searches for a resource with the specified key, and returns that resource if found.</summary>
        <returns>The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o recurso não foi encontrado no elemento de chamada, a árvore de recursos pai é pesquisada para cima através de árvore lógica, da mesma forma que a árvore será pesquisada se um recurso foi solicitado por chave em tempo de execução. O método retorna `null` somente se nenhum recurso de chave existe em qualquer lugar na árvore de recursos por condições existentes da árvore no momento em que <xref:System.Windows.FrameworkElement.TryFindResource%2A> é chamado.  
  
 Normalmente você imediatamente atribui o valor de retorno para o tipo da propriedade que você está tentando definido com o valor retornado do recurso.  
  
 O <xref:System.Windows.FrameworkElement.FindResource%2A> método tem um comportamento semelhante, exceto que ele lança uma exceção se nenhum recurso com a chave fornecida foi retornado.  
  
   
  
## Examples  
 O exemplo a seguir é implementado como um manipulador de botão, onde o botão sendo clicado conjuntos de seu plano de fundo para um pincel definido pelo recurso obtido chamando <xref:System.Windows.FrameworkElement.TryFindResource%2A> em si mesmo. Isso ajuda a árvore de elementos e localiza o recurso (o recurso em si é definido em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] e não é mostrado).  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the element is removed from within an element tree of loaded elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os eventos roteados diretos não seguem uma rota, somente são tratados dentro do mesmo elemento no qual eles são gerados. Eventos roteados diretos suportam outro comportamento eventos roteados: eles dão suporte a uma coleção de manipuladores acessível e pode ser usados como um <xref:System.Windows.EventTrigger> em um estilo.  
  
 <xref:System.Windows.FrameworkElement.Loaded> e <xref:System.Windows.FrameworkElement.Unloaded> podem ser gerados em controles como resultado das alterações de tema do sistema iniciada pelo usuário. Uma alteração de tema faz com que um invalidação do modelo de controle e a árvore visual independente, que por sua vez faz com que todo o controle descarregar e recarregar. Portanto, <xref:System.Windows.FrameworkElement.Unloaded> não é considerado como ocorrem somente na navegação para fora da página.  
  
 Observe que o <xref:System.Windows.FrameworkElement.Unloaded> evento não é gerado depois que um aplicativo começa o desligamento. Encerramento do aplicativo ocorre quando a condição definida pelo <xref:System.Windows.Application.ShutdownMode%2A> propriedade ocorre. Se você colocar o código de limpeza dentro de um manipulador para o <xref:System.Windows.FrameworkElement.Unloaded> evento, tal como para um <xref:System.Windows.Window> ou um <xref:System.Windows.Controls.UserControl>, ele não pode ser chamado conforme o esperado.  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a>Informações de evento encaminhado  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|Estratégia de roteamento|Direto|  
|delegado|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.  
  
 Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name of the name-object pair to remove from the current scope.</param>
        <summary>Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você só precisa cancelar o registro nomes se você pretende registrar novamente o outro elemento com o mesmo nome.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</summary>
        <value>
          <see langword="true" /> se o arredondamento de layout for aplicado; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> é de propriedade para um elemento `true`, todos os valores de pixel integral não são calculados durante o <xref:System.Windows.UIElement.Measure%2A> e <xref:System.Windows.UIElement.Arrange%2A> passa é arredondadas para valores de inteiro de pixels.  
  
 Essa propriedade é herdada por elementos filho.  
  
> [!NOTE]
>  Você deve definir <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> para `true` no elemento raiz. O sistema de layout adiciona coordenadas filho com as coordenadas pai; Portanto, se as coordenadas pai não estiverem em um limite de pixel, as coordenadas de filho também não são em um limite de pixel. Se <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> não pode ser definido na raiz, defina <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> no filho para obter o efeito desejado.  
  
 Objetos de desenho em limites de pixel elimina as bordas semitransparentes que são produzidas por suavização, quando uma borda fica no meio de um pixel de dispositivo. A ilustração a seguir mostra a saída de uma linha de largura de pixel único que está no meio de um pixel de dispositivo. A linha à esquerda não use o arredondamento de layout e é sem alias. A linha à direita usa arredondamento de layout.  
  
 ![Anti&#45;linha de um alias em comparação comparada a linha de pixel único. ] (~/add/media/pixelsnaplinecompare.PNG "Linha suavizada comparada à linha de pixel único.")  
  
 Quando você usa arredondamento de layout e <xref:System.Windows.GridUnitType.Star> de dimensionamento, o sistema de layout cria pequenas variações nas medidas de linha ou coluna para evitar a renderização sub-pixel. Por exemplo, se uma grade tem uma largura total de 100 com 3 colunas de tamanho <xref:System.Windows.GridUnitType.Star>, em vez de criar três colunas que têm uma largura igual de 33,3, o sistema de layout cria 2 colunas que têm uma largura de 33 e um que tenha uma largura de 34.  
  
> [!NOTE]
>  Foram feitas alterações ao layout de arredondamento para reduzir as instâncias de recorte em controles de bordas em .NET 4.6. Por padrão, esse recurso é habilitado se a estrutura de destino é .NET Framework 4.6 ou posterior. Aplicativos que versões anteriores do framework de destino podem aceitar o novo comportamento adicionando a seguinte configuração para um arquivo App. config: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` a configuração terá efeito somente quando o aplicativo está em execução no .NET Framework 4.6.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o efeito que o <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> propriedade tem em uma linha de largura de pixel único. A linha à esquerda não use o arredondamento de layout e a linha à direita usa arredondamento de layout. Se você lentamente redimensionar a janela, você pode ver a diferença que arredondamento torna o layout.  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</summary>
        <value>Uma configuração de alinhamento vertical. O padrão é <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.Width%2A> propriedades são definidas explicitamente em um elemento, essas medidas levar precedentes de layout e cancelam os efeitos de definir esta propriedade <xref:System.Windows.VerticalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> é o [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] acessador de propriedade para o que é na verdade uma propriedade de dependência. Essa propriedade de dependência particular com bastante frequência tem seu valor aparente "padrão" definido em classes de elemento derivado, particularmente os controles de modo diferente. Isso geralmente ocorre em uma das duas maneiras: a propriedade de dependência é registrada novamente para uma determinada classe derivada, mas com diferentes metadados para a configuração de seus padrões; ou há um estilo de padrão que está sendo aplicado que define esse valor de propriedade de dependência de maneira diferente. Por exemplo, o aparente "padrão" de <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> para um <xref:System.Windows.Controls.ComboBoxItem> controle será <xref:System.Windows.VerticalAlignment.Center>, embora <xref:System.Windows.Controls.ComboBoxItem> herda <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direta de <xref:System.Windows.FrameworkElement>. Isso ocorre porque esse valor foi redefinida no estilo padrão de <xref:System.Windows.Controls.ComboBoxItem>, no modelo de controle do estilo.  
  
 <xref:System.Windows.Controls.Canvas> Não use <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> ao compor o layout, porque <xref:System.Windows.Controls.Canvas> baseia-se no posicionamento absoluto.  
  
 Quando herdado por <xref:System.Windows.Controls.ComboBoxItem> ou qualquer classes derivadas, <xref:System.Windows.Controls.ComboBoxItem> redefine o valor padrão dessa propriedade para ser <xref:System.Windows.VerticalAlignment.Center>.  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of visual child elements within this element.</summary>
        <value>O número de elementos filho visuais para esse elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.FrameworkElement> implementação de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> sempre retorna zero ou um. As classes que mantêm uma coleção de filhos visuais que pode exceder uma devem substituir essa propriedade e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 Essa propriedade é geralmente usada para determinar os limites superiores da coleção filho atual para fins de implementar as substituições de layout (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).  
  
   
  
## Examples  
 O exemplo a seguir mostra como um adorner personalizado usa os valores de declarada por um <xref:System.Windows.Media.VisualCollection> que mantém seus vários filhos visual e reporta esses valores por meio de substituições de <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se sua classe oferece suporte a mais de um visual filho em uma coleção de elementos filho, ignorar esta propriedade para retornar a contagem de elementos na coleção. Você deve fazer isso mesmo que o próprio objeto de coleção retorna uma contagem. Lógica de layout do elemento no nível do framework WPF presume que todos os elementos retornará uma contagem válida por meio de seus <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> propriedade.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the element.</summary>
        <value>A largura do elemento, em [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. O valor padrão é <see cref="F:System.Double.NaN" />. Este valor deve ser igual ou maior que 0,0. Consulte os Comentários para ver informações sobre o limite superior.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta é uma das três propriedades em <xref:System.Windows.FrameworkElement> que especificam as informações de largura.  As outras duas são <xref:System.Windows.FrameworkElement.MinWidth%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Se houver um conflito entre esses valores, a ordem do aplicativo para a determinação de largura real é primeiro <xref:System.Windows.FrameworkElement.MinWidth%2A> devem ser cumprido, em seguida, <xref:System.Windows.FrameworkElement.MaxWidth%2A>e, finalmente, se cada um deles está dentro dos limites, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 O valor de retorno dessa propriedade é sempre igual a qualquer valor que foi definido para ele. Em contraste, o valor de <xref:System.Windows.FrameworkElement.ActualWidth%2A> podem variar. O layout pode ter o tamanho sugerido rejeitada por algum motivo. Além disso, o sistema de layout funciona de forma assíncrona em relação ao conjunto de sistema de propriedade de <xref:System.Windows.FrameworkElement.Width%2A> e pode não ter processado específica dimensionamento de alteração de propriedade ainda.  
  
 Além disso, para aceitável <xref:System.Double> valores, essa propriedade também pode ser <xref:System.Double.NaN?displayProperty=nameWithType>. Isso é como especificar comportamento de dimensionamento automático. Em [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] você definir o valor para a cadeia de caracteres "Automática" (não diferencia maiusculas de minúsculas) para habilitar o comportamento de dimensionamento de auto. Comportamento de dimensionamento de auto implica que o elemento preencher a largura disponível para ele. No entanto, observe que os controles específicos frequentemente fornecem valores padrão em seus estilos padrão que irá desabilitar o auto comportamento de dimensionamento, a menos que ela seja reativada especificamente.  
  
 Além de verificação de validação, há um valor superior não determinístico associado para <xref:System.Windows.FrameworkElement.Width%2A> que é imposta pelo sistema de layout (Este é um número muito grande, maior do que <xref:System.Single.MaxValue?displayProperty=nameWithType> mas menor do que <xref:System.Double.MaxValue?displayProperty=nameWithType>). Se você exceder esse associado, o elemento não será processada e nenhuma exceção é lançada. Não defina <xref:System.Windows.FrameworkElement.Width%2A> para um valor que é significativamente maior do que o tamanho máximo de qualquer exibição visual possíveis, ou você pode exceder esse limite superior não determinístico.  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
  
```  
<object Width="double"/>  
- or –  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 <xref:System.Double>  
  
 Representação de cadeia de caracteres um <xref:System.Double> valor igual ou maior que 0.0. Consulte os Comentários para ver informações sobre o limite superior. Esse valor é interpretado como um [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Cadeias de caracteres não precisam explicitamente incluir pontos decimais. Por exemplo, um valor de `1` é aceitável.  
  
 *qualifiedDouble*  
 Um *duplo* valor conforme descrito acima, seguido por um dos seguintes unidade declaração cadeias de caracteres: `px`, `in`, `cm`, `pt`.  
  
 `px` é (padrão) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` polegadas; em 1 = = 96px  
  
 `cm` centímetros; 1cm==(96/2.54) px  
  
 `pt` pontos; 1pt==(96/72) px  
  
 `Auto`  
 Habilita o comportamento de dimensionamento automático. Consulte Observações.  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a>Informações da propriedade de dependência  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|Propriedades de metadados é definido como `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>