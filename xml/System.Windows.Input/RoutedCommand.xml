<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659620" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define um comando que implementa o <see cref="T:System.Windows.Input.ICommand" /> e é encaminhado por meio da árvore de elementos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Input.RoutedCommand.Execute%2A> e <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> métodos em um <xref:System.Windows.Input.RoutedCommand> não contêm a lógica do aplicativo para o comando que é o caso típico <xref:System.Windows.Input.ICommand>, mas em vez disso, esses métodos geram eventos que atravessam a árvore de elementos procurando por um objeto com um <xref:System.Windows.Input.CommandBinding>.  Os manipuladores de eventos anexados para o <xref:System.Windows.Input.CommandBinding> contêm a lógica de comando.  
  
 O <xref:System.Windows.Input.RoutedCommand.Execute%2A> método gera o <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> eventos.  O <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método gera o <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e <xref:System.Windows.Input.CommandManager.CanExecute> eventos.  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>Uso do Atributo XAML  
 \<*object* *property*="*predefinedCommandName*"/>  
  
 \- ou -  
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
 \- ou -  
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *predefinedClassName*  
 Uma das classes de comando predefinidos.  
  
 *predefinedCommandName*  
 Um dos comandos predefinidos.  
  
 *customClassName*  
 Uma classe personalizada que contém o comando personalizado. Classes personalizadas geralmente exigem um `xlmns` mapeamento de prefixo, consulte [Namespaces XAML e o mapeamento de Namespace para WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 *customCommandName*  
 Um comando personalizado.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Nome declarado para serialização.</param>
        <param name="ownerType">O tipo que está registrando o comando.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" /> com o tipo de proprietário e o nome especificados.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ownerType" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">Nome declarado para serialização.</param>
        <param name="ownerType">O tipo que está registrando o comando.</param>
        <param name="inputGestures">Gestos de entrada padrão associados com este comando.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" /> com o nome, o tipo de proprietário e a coleção de gestos especificados.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">o tamanho de <paramref name="name" /> é zero  
  
 \- ou -  
  
 <paramref name="ownerType" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Um tipo de dados definido pelo usuário.</param>
        <param name="target">O destino do comando.</param>
        <summary>Determina se este <see cref="T:System.Windows.Input.RoutedCommand" /> pode ser executado em seu estado atual.</summary>
        <returns>
          <see langword="true" /> se o comando puder ser executado no destino de comando atual; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A lógica real que determina se um <xref:System.Windows.Input.RoutedCommand> podem executar no atual destino do comando não está contido no <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> métodos, em vez disso, <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> gera o <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e o <xref:System.Windows.Input.CommandManager.CanExecute> eventos túnel e bolha por meio do elemento de árvore procurando por um objeto com um <xref:System.Windows.Input.CommandBinding>.  Se um <xref:System.Windows.Input.CommandBinding> para que <xref:System.Windows.Input.RoutedCommand> for encontrado, o <xref:System.Windows.Input.CanExecuteRoutedEventHandler> anexado ao <xref:System.Windows.Input.CommandBinding> é chamado.  Esses manipuladores fornecem lógica de programação para determinar se o <xref:System.Windows.Input.RoutedCommand> pode executar ou não.  
  
 O <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e <xref:System.Windows.Input.CommandManager.PreviewExecuted> eventos são gerados a <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Se o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> não está definido no <xref:System.Windows.Input.ICommandSource>, o <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e <xref:System.Windows.Input.CommandManager.CanExecute> os eventos são gerados no elemento com o foco do teclado.  
  
   
  
## Examples  
 O exemplo a seguir é um <xref:System.Windows.Input.ICommand.CanExecuteChanged> manipulador de eventos de uma implementação personalizada de <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` Neste exemplo é o <xref:System.Windows.Input.ICommandSource.Command%2A> propriedade o <xref:System.Windows.Input.ICommandSource>.  Se o comando não é `null`, o comando é convertido em um <xref:System.Windows.Input.RoutedCommand>.  Se o comando for um <xref:System.Windows.Input.RoutedCommand>, em seguida, o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> e <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Se o comando não é um <xref:System.Windows.Input.RoutedCommand>, ela será convertida em uma <xref:System.Windows.Input.ICommand> e <xref:System.Windows.Input.ICommand.CanExecute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Se o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método retorna `true`, em seguida, o controle está habilitado; caso contrário, o controle está desabilitada.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> não é um <see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando alterações na fonte de comando são detectadas pelo gerenciador de comandos. Geralmente, essas alterações afetam se o comando deve ser executado no destino de comando atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Input.RoutedCommand> ouve o <xref:System.Windows.Input.CommandManager.RequerySuggested> evento, que é gerado pelo <xref:System.Windows.Input.CommandManager>. O <xref:System.Windows.Input.CommandManager.RequerySuggested> é gerado sempre que as condições que podem ser alterados se o comando deve executar, como uma alteração em foco do teclado.  Quando o comando recebe o <xref:System.Windows.Input.CommandManager.RequerySuggested> evento, ele gera o <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> evento.  Em geral, a fonte de comando escutará para este evento e a consulta a <xref:System.Windows.Input.RoutedCommand> por meio do <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método.  A maioria das fontes de comando serão desabilitado se o comando não pode ser executado, como parte de sua associação de comando.  Um exemplo disso é quando um <xref:System.Windows.Controls.MenuItem> grays próprio limite quando o comando não pode ser executado.  
  
 Em algumas situações, o <xref:System.Windows.Input.CommandManager> não sabe nada sobre uma alteração nas condições que altera a capacidade de um comando seja executado.  Nesses casos, você pode forçar o <xref:System.Windows.Input.CommandManager> para gerar o <xref:System.Windows.Input.CommandManager.RequerySuggested> evento chamando o <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> método, isso por sua vez fará o <xref:System.Windows.Input.RoutedCommand> para gerar o <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> evento.  
  
   
  
## Examples  
 O exemplo a seguir é um <xref:System.Windows.Input.ICommand.CanExecuteChanged> manipulador de eventos de uma implementação personalizada de <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` Neste exemplo é o <xref:System.Windows.Input.ICommandSource.Command%2A> propriedade o <xref:System.Windows.Input.ICommandSource>.  Se o comando não é `null`, o comando é convertido em um <xref:System.Windows.Input.RoutedCommand>.  Se o comando for um <xref:System.Windows.Input.RoutedCommand>, em seguida, o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> e <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Se o comando não é um <xref:System.Windows.Input.RoutedCommand>, ela será convertida em uma <xref:System.Windows.Input.ICommand> e <xref:System.Windows.Input.ICommand.CanExecute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Se o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método retorna `true`, em seguida, o controle está habilitado; caso contrário, o controle está desabilitado.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Parâmetro definido pelo usuário a ser passado para o manipulador.</param>
        <param name="target">Elemento no qual começar a procurar por manipuladores de comandos.</param>
        <summary>Executa o <see cref="T:System.Windows.Input.RoutedCommand" /> no destino de comando atual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A lógica real que executa o <xref:System.Windows.Input.RoutedCommand> não está contida no <xref:System.Windows.Input.RoutedCommand.Execute%2A> métodos.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> gera o <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> eventos túnel e bolha por meio do elemento de árvore procurando por um objeto com um <xref:System.Windows.Input.CommandBinding>.  Se um <xref:System.Windows.Input.CommandBinding> para que <xref:System.Windows.Input.RoutedCommand> for encontrado, o <xref:System.Windows.Input.ExecutedRoutedEventHandler> anexado ao <xref:System.Windows.Input.CommandBinding> é chamado.  Esses manipuladores de fornecem a lógica de programação que executa o <xref:System.Windows.Input.RoutedCommand>.  
  
 O <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> eventos são gerados a <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Se o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> não está definido no <xref:System.Windows.Input.ICommandSource>, o <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> os eventos são gerados no elemento com o foco do teclado.  
  
   
  
## Examples  
 O exemplo a seguir é de uma implementação personalizada de <xref:System.Windows.Input.ICommandSource> exemplo.  
  
 `this.Command` Neste exemplo é a propriedade do comando sobre o <xref:System.Windows.Input.ICommandSource>.  Se o comando não for null, o comando é convertido em um <xref:System.Windows.Input.RoutedCommand>.  Se for um <xref:System.Windows.Input.RoutedCommand>, o <xref:System.Windows.Input.RoutedCommand.Execute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> e <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Se o comando não é um <xref:System.Windows.Input.RoutedCommand>, ela será convertida em uma <xref:System.Windows.Input.ICommand> e <xref:System.Windows.Input.ICommand.Execute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> não é um <see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a coleção de objetos <see cref="T:System.Windows.Input.InputGesture" /> associados a esse comando.</summary>
        <value>Os gestos de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como adicionar um novo <xref:System.Windows.Input.MouseGesture> para um <xref:System.Windows.Input.RoutedCommand>.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome do comando.</summary>
        <value>O nome do comando.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade pode ser usada ao fazer referência a um <xref:System.Windows.Input.RoutedCommand> em [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tipo que é registrado com o comando.</summary>
        <value>O tipo do proprietário do comando.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Dados usados pelo comando.  Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</param>
        <summary>Para obter uma descrição desses membros, consulte <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</summary>
        <returns>
          <see langword="true" /> se esse comando puder ser executado; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Windows.Input.RoutedCommand> é convertida em uma interface de <xref:System.Windows.Input.ICommand>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Dados usados pelo comando.  Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</param>
        <summary>Para obter uma descrição desses membros, consulte <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Windows.Input.RoutedCommand> é convertida em uma interface de <xref:System.Windows.Input.ICommand>.  
  
   
  
## Examples  
 Consulte também  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>