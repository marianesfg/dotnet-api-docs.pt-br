<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6cb4b0887eb9edb341d7337240bcb48e0f262dfe" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015018" /></Metadata><TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ff0ec-101">Define um comando que implementa o <see cref="T:System.Windows.Input.ICommand" /> e é encaminhado por meio da árvore de elementos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff0ec-102">O <xref:System.Windows.Input.RoutedCommand.Execute%2A> e <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> métodos em um <xref:System.Windows.Input.RoutedCommand> não contêm a lógica do aplicativo para o comando como é o caso com um típico <xref:System.Windows.Input.ICommand>, mas em vez disso, esses métodos geram eventos que atravessam a árvore de elementos procurando um objeto com um <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="ff0ec-103">Os manipuladores de eventos anexados para o <xref:System.Windows.Input.CommandBinding> contêm a lógica de comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="ff0ec-104">O <xref:System.Windows.Input.RoutedCommand.Execute%2A> método gera a <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> eventos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="ff0ec-105">O <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método gera a <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e <xref:System.Windows.Input.CommandManager.CanExecute> eventos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ff0ec-106">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="ff0ec-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="ff0ec-107">\<*object* *property*="*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="ff0ec-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="ff0ec-108">- ou -</span><span class="sxs-lookup"><span data-stu-id="ff0ec-108">-or-</span></span>
  
 <span data-ttu-id="ff0ec-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="ff0ec-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="ff0ec-110">- ou -</span><span class="sxs-lookup"><span data-stu-id="ff0ec-110">-or-</span></span>
  
 <span data-ttu-id="ff0ec-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span><span class="sxs-lookup"><span data-stu-id="ff0ec-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ff0ec-112">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="ff0ec-112">XAML Values</span></span>  
 <span data-ttu-id="ff0ec-113">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="ff0ec-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="ff0ec-114">Uma das classes de comando predefinidos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="ff0ec-115">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="ff0ec-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="ff0ec-116">Um dos comandos predefinidos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="ff0ec-117">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="ff0ec-117">*customClassName*</span></span>  
 <span data-ttu-id="ff0ec-118">Uma classe personalizada que contém o comando personalizado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="ff0ec-119">Classes personalizadas geralmente exigem um `xlmns` mapeamento de prefixo; consulte [Namespaces de XAML e mapeamento de Namespace para XAML WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="ff0ec-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="ff0ec-120">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="ff0ec-120">*customCommandName*</span></span>  
 <span data-ttu-id="ff0ec-121">Um comando personalizado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ff0ec-122">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ff0ec-123">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ff0ec-124">Nome declarado para serialização.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-124">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="ff0ec-125">O tipo que está registrando o comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-125">The type which is registering the command.</span></span></param>
        <summary><span data-ttu-id="ff0ec-126">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" /> com o tipo de proprietário e o nome especificados.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ff0ec-127"><paramref name="name" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-127"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ff0ec-128"><paramref name="ownerType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-128"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ff0ec-129">Nome declarado para serialização.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-129">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="ff0ec-130">O tipo que está registrando o comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-130">The type that is registering the command.</span></span></param>
        <param name="inputGestures"><span data-ttu-id="ff0ec-131">Gestos de entrada padrão associados com este comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-131">Default input gestures associated with this command.</span></span></param>
        <summary><span data-ttu-id="ff0ec-132">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.RoutedCommand" /> com o nome, o tipo de proprietário e a coleção de gestos especificados.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ff0ec-133"><paramref name="name" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-133"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ff0ec-134">o tamanho de <paramref name="name" /> é zero</span><span class="sxs-lookup"><span data-stu-id="ff0ec-134">the length of <paramref name="name" /> is zero</span></span> 
<span data-ttu-id="ff0ec-135">- ou -</span><span class="sxs-lookup"><span data-stu-id="ff0ec-135">-or-</span></span> 
 <span data-ttu-id="ff0ec-136"><paramref name="ownerType" /> é <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-136"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ff0ec-137">Um tipo de dados definido pelo usuário.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-137">A user defined data type.</span></span></param>
        <param name="target"><span data-ttu-id="ff0ec-138">O destino do comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-138">The command target.</span></span></param>
        <summary><span data-ttu-id="ff0ec-139">Determina se este <see cref="T:System.Windows.Input.RoutedCommand" /> pode ser executado em seu estado atual.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-139">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span></span></summary>
        <returns><span data-ttu-id="ff0ec-140"><see langword="true" /> se o comando puder ser executado no destino de comando atual; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-140"><see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff0ec-141">A lógica real que determina se um <xref:System.Windows.Input.RoutedCommand> podem ser executadas em atual destino do comando não está contido na <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> métodos, em vez disso <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> gera o <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e o <xref:System.Windows.Input.CommandManager.CanExecute> eventos que criar um túnel e de bolhas por meio do elemento árvore à procura de um objeto com um <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-141">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="ff0ec-142">Se um <xref:System.Windows.Input.CommandBinding> para fazer isso <xref:System.Windows.Input.RoutedCommand> for encontrado, o <xref:System.Windows.Input.CanExecuteRoutedEventHandler> anexados a <xref:System.Windows.Input.CommandBinding> é chamado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-142">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="ff0ec-143">Esses manipuladores de fornecem a lógica de programação para determinar se o <xref:System.Windows.Input.RoutedCommand> pode ser executado ou não.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-143">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="ff0ec-144">O <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e <xref:System.Windows.Input.CommandManager.PreviewExecuted> eventos são gerados a <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-144">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="ff0ec-145">Se o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> não está definida na <xref:System.Windows.Input.ICommandSource>, o <xref:System.Windows.Input.CommandManager.PreviewCanExecute> e <xref:System.Windows.Input.CommandManager.CanExecute> eventos são gerados no elemento com foco do teclado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-145">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff0ec-146">O exemplo a seguir é um <xref:System.Windows.Input.ICommand.CanExecuteChanged> manipulador de eventos de uma implementação personalizada de <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-146">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="ff0ec-147">`this.Command` Neste exemplo é o <xref:System.Windows.Input.ICommandSource.Command%2A> propriedade no <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-147">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="ff0ec-148">Se o comando não for `null`, o comando é convertido para um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-148">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="ff0ec-149">Se o comando for um <xref:System.Windows.Input.RoutedCommand>, em seguida, a <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método é chamado, passando a <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> e o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-149">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="ff0ec-150">Se o comando não é um <xref:System.Windows.Input.RoutedCommand>, ela será convertida em um <xref:System.Windows.Input.ICommand> e o <xref:System.Windows.Input.ICommand.CanExecute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-150">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="ff0ec-151">Se o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> retorno do método `true`, em seguida, o controle está habilitado; caso contrário, o controle é disable.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-151">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ff0ec-152"><paramref name="target" /> não é um <see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-152"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Input.ICommand.CanExecuteChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ff0ec-153">Ocorre quando alterações na fonte de comando são detectadas pelo gerenciador de comandos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-153">Occurs when changes to the command source are detected by the command manager.</span></span> <span data-ttu-id="ff0ec-154">Geralmente, essas alterações afetam se o comando deve ser executado no destino de comando atual.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-154">These changes often affect whether the command should execute on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff0ec-155">O <xref:System.Windows.Input.RoutedCommand> escuta para o <xref:System.Windows.Input.CommandManager.RequerySuggested> evento, que é gerado pelo <xref:System.Windows.Input.CommandManager>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-155">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="ff0ec-156">O <xref:System.Windows.Input.CommandManager.RequerySuggested> é gerado sempre que condições que podem ser alterados se o comando deve executar, como uma alteração de foco do teclado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-156">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="ff0ec-157">Quando o comando recebe o <xref:System.Windows.Input.CommandManager.RequerySuggested> emitirá um evento, o <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> eventos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-157">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="ff0ec-158">Em geral, a fonte do comando escutará esse evento e a consulta a <xref:System.Windows.Input.RoutedCommand> por meio do <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-158">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="ff0ec-159">A maioria das fontes de comando desabilitará a mesmos se o comando não pode ser executado, como parte de sua respectiva associação de comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-159">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="ff0ec-160">Um exemplo disso é quando um <xref:System.Windows.Controls.MenuItem> grays em si-out quando o comando não pode ser executado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-160">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="ff0ec-161">Em algumas situações, o <xref:System.Windows.Input.CommandManager> não fica ciente de uma alteração em condições que altera a capacidade de um comando seja executado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-161">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="ff0ec-162">Nesses casos, você pode forçar o <xref:System.Windows.Input.CommandManager> para gerar o <xref:System.Windows.Input.CommandManager.RequerySuggested> evento chamando o <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> método, isso por sua vez fará a <xref:System.Windows.Input.RoutedCommand> para gerar o <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> eventos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-162">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff0ec-163">O exemplo a seguir é um <xref:System.Windows.Input.ICommand.CanExecuteChanged> manipulador de eventos de uma implementação personalizada de <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-163">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="ff0ec-164">`this.Command` Neste exemplo é o <xref:System.Windows.Input.ICommandSource.Command%2A> propriedade no <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-164">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="ff0ec-165">Se o comando não for `null`, o comando é convertido para um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-165">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="ff0ec-166">Se o comando for um <xref:System.Windows.Input.RoutedCommand>, em seguida, a <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método é chamado, passando a <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> e o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-166">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="ff0ec-167">Se o comando não é um <xref:System.Windows.Input.RoutedCommand>, ela será convertida em um <xref:System.Windows.Input.ICommand> e o <xref:System.Windows.Input.ICommand.CanExecute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-167">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="ff0ec-168">Se o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> retorno do método `true`, em seguida, o controle está habilitado; caso contrário, o controle está desabilitado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-168">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ff0ec-169">Parâmetro definido pelo usuário a ser passado para o manipulador.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-169">User defined parameter to be passed to the handler.</span></span></param>
        <param name="target"><span data-ttu-id="ff0ec-170">Elemento no qual começar a procurar por manipuladores de comandos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-170">Element at which to begin looking for command handlers.</span></span></param>
        <summary><span data-ttu-id="ff0ec-171">Executa o <see cref="T:System.Windows.Input.RoutedCommand" /> no destino de comando atual.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-171">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff0ec-172">A lógica real que executa o <xref:System.Windows.Input.RoutedCommand> não está contido no <xref:System.Windows.Input.RoutedCommand.Execute%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-172">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="ff0ec-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> gera o <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> eventos, que atravessam e se propagam através de elemento de árvore procurando por um objeto com um <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="ff0ec-174">Se um <xref:System.Windows.Input.CommandBinding> para fazer isso <xref:System.Windows.Input.RoutedCommand> for encontrado, o <xref:System.Windows.Input.ExecutedRoutedEventHandler> anexados a <xref:System.Windows.Input.CommandBinding> é chamado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-174">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="ff0ec-175">Esses manipuladores de fornecem a lógica de programação que executa o <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-175">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="ff0ec-176">O <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> eventos são gerados a <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-176">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="ff0ec-177">Se o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> não está definida na <xref:System.Windows.Input.ICommandSource>, o <xref:System.Windows.Input.CommandManager.PreviewExecuted> e <xref:System.Windows.Input.CommandManager.Executed> eventos são gerados no elemento com foco do teclado.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-177">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff0ec-178">O exemplo a seguir é de uma implementação personalizada de <xref:System.Windows.Input.ICommandSource> exemplo.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-178">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="ff0ec-179">`this.Command` Neste exemplo é a propriedade Command no <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-179">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="ff0ec-180">Se o comando não for nulo, o comando é convertido para um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-180">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="ff0ec-181">Se for um <xref:System.Windows.Input.RoutedCommand>, em seguida, a <xref:System.Windows.Input.RoutedCommand.Execute%2A> método é chamado, passando a <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> e o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-181">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="ff0ec-182">Se o comando não é um <xref:System.Windows.Input.RoutedCommand>, ela será convertida em um <xref:System.Windows.Input.ICommand> e o <xref:System.Windows.Input.ICommand.Execute%2A> método é chamado, passando o <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-182">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ff0ec-183"><paramref name="target" /> não é um <see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-183"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ff0ec-184">Obtém a coleção de objetos <see cref="T:System.Windows.Input.InputGesture" /> associados a esse comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-184">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span></span></summary>
        <value><span data-ttu-id="ff0ec-185">Os gestos de entrada.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-185">The input gestures.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ff0ec-186">O exemplo a seguir mostra como adicionar um novo <xref:System.Windows.Input.MouseGesture> para um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-186">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ff0ec-187">Obtém o nome do comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-187">Gets the name of the command.</span></span></summary>
        <value><span data-ttu-id="ff0ec-188">O nome do comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-188">The name of the command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff0ec-189">Essa propriedade pode ser usada ao fazer referência a um <xref:System.Windows.Input.RoutedCommand> em [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="ff0ec-189">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ff0ec-190">Obtém o tipo que é registrado com o comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-190">Gets the type that is registered with the command.</span></span></summary>
        <value><span data-ttu-id="ff0ec-191">O tipo de proprietário do comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-191">The type of the command owner.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.CanExecute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ff0ec-192">Dados usados pelo comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-192">Data used by the command.</span></span>  <span data-ttu-id="ff0ec-193">Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-193">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ff0ec-194">Para obter uma descrição desses membros, consulte <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-194">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="ff0ec-195"><see langword="true" /> se esse comando puder ser executado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-195"><see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff0ec-196">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ff0ec-197">Ele só pode ser usado quando a instância de <xref:System.Windows.Input.RoutedCommand> é convertida em uma interface de <xref:System.Windows.Input.ICommand>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-197">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.Execute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ff0ec-198">Dados usados pelo comando.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-198">Data used by the command.</span></span>  <span data-ttu-id="ff0ec-199">Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-199">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ff0ec-200">Para obter uma descrição desses membros, consulte <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-200">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff0ec-201">Este membro é uma implementação do membro de interface explícita.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-201">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ff0ec-202">Ele só pode ser usado quando a instância de <xref:System.Windows.Input.RoutedCommand> é convertida em uma interface de <xref:System.Windows.Input.ICommand>.</span><span class="sxs-lookup"><span data-stu-id="ff0ec-202">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff0ec-203">Consulte também</span><span class="sxs-lookup"><span data-stu-id="ff0ec-203">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>