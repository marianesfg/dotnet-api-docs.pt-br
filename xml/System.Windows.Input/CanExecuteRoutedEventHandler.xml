<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40314ee81839ebd0b1ef25f5f831b2e68f2b0ad5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30646660" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">
      <span data-ttu-id="f7341-101">O destino do comando que invoca o manipulador.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f7341-101">The command target that is invoking the handler.</span>
      </span>
    </param>
    <param name="e">
      <span data-ttu-id="f7341-102">Os dados do evento.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f7341-102">The event data.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="f7341-103">Representa o método que manipulará o evento de <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> .</span>
      <span class="sxs-lookup">
        <span data-stu-id="f7341-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7341-104">O <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determina se o comando associado a origem do evento é capaz de executar o destino de comando.</span><span class="sxs-lookup"><span data-stu-id="f7341-104">The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target.</span></span> <span data-ttu-id="f7341-105">Se o comando tem uma fonte de comando que especifica um destino, as informações de destino podem ser obtidas por meio de `sender`.</span><span class="sxs-lookup"><span data-stu-id="f7341-105">If the command has a command source that specifies a target, then the target information can be obtained through `sender`.</span></span> <span data-ttu-id="f7341-106">Se o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> não estiver definido, o elemento com o foco do teclado é o destino e também pode ser obtido por meio de `sender`.</span><span class="sxs-lookup"><span data-stu-id="f7341-106">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.</span></span>  <span data-ttu-id="f7341-107">Se for determinado que o comando pode ser executado no destino, o <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> propriedade deve ser definida como `true`; caso contrário, defina-a como `false`.</span><span class="sxs-lookup"><span data-stu-id="f7341-107">If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> property should be set to `true`; otherwise, set it to `false`.</span></span>  
  
 <span data-ttu-id="f7341-108">Você não precisa confiar nos dados do evento para determinar o comando, origem e destino.</span><span class="sxs-lookup"><span data-stu-id="f7341-108">You do not need to rely on event data to determine the command, source, and target.</span></span> <span data-ttu-id="f7341-109">Você pode limitar o uso do manipulador para invocações de comando possíveis conhecido, embora isso seja mais difícil fazer se a sua estrutura de comando utiliza extensivamente o roteamento de comando para executar o mesmo comando sucessivas destinos possíveis em uma rota de evento.</span><span class="sxs-lookup"><span data-stu-id="f7341-109">You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7341-110">A exemplo a seguir mostra um <xref:System.Windows.Input.CanExecuteRoutedEventHandler> que define <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> para `true`.</span><span class="sxs-lookup"><span data-stu-id="f7341-110">The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>