<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9faed7ee3f9fc34c964959fd76ce682c2b443b34" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48601063" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="aab50-101">Representa uma associação entre um <see cref="T:System.Windows.Input.InputGesture" /> e um comando.</span>
      <span class="sxs-lookup">
        <span data-stu-id="aab50-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span>
      </span>
      <span data-ttu-id="aab50-102">O comando é potencialmente um <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="aab50-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aab50-103">Você pode especificar que a entrada do usuário invoca um comando com a criação de um <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="aab50-104">Quando o usuário executa a entrada especificada, o <xref:System.Windows.Input.ICommand> que é definido como o <xref:System.Windows.Input.InputBinding.Command%2A> propriedade é executada.</span><span class="sxs-lookup"><span data-stu-id="aab50-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="aab50-105">Você pode especificar que o <xref:System.Windows.Input.InputBinding> invoca um comando que é definido em um objeto, criando uma associação em de <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, e <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="aab50-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="aab50-106">Isso permite que você defina um comando personalizado e associá-lo a entrada do usuário.</span><span class="sxs-lookup"><span data-stu-id="aab50-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="aab50-107">Para obter mais informações, consulte o segundo exemplo na seção exemplos.</span><span class="sxs-lookup"><span data-stu-id="aab50-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="aab50-108">Uma <xref:System.Windows.Input.InputBinding> podem ser definidas em um objeto específico ou no nível de classe, registrando um <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> com o <xref:System.Windows.Input.CommandManager>.</span><span class="sxs-lookup"><span data-stu-id="aab50-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="aab50-109">O <xref:System.Windows.Input.InputBinding> própria classe não dá suporte ao uso do XAML porque ele não expõe um construtor público padrão (não há um construtor padrão, mas ele é protegido).</span><span class="sxs-lookup"><span data-stu-id="aab50-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="aab50-110">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode definir propriedades em que são herdadas da classe derivada <xref:System.Windows.Input.InputBinding> com um uso XAML.</span><span class="sxs-lookup"><span data-stu-id="aab50-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="aab50-111">Dois existente <xref:System.Windows.Input.InputBinding>-as classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML são <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="aab50-112">A propriedade típica na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] de programação que é definido em XAML e usa um ou mais <xref:System.Windows.Input.InputBinding> objetos como valores é o <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="aab50-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="aab50-113">Uso de elemento Object do XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="aab50-114">\<*inputBindingDerivedClass…/*></span><span class="sxs-lookup"><span data-stu-id="aab50-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="aab50-115">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="aab50-116">Uma classe derivada de <xref:System.Windows.Input.InputBinding> que dá suporte à sintaxe de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="aab50-117">Consulte Observações.</span><span class="sxs-lookup"><span data-stu-id="aab50-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aab50-118">O exemplo a seguir mostra como usar um <xref:System.Windows.Input.KeyBinding> para associar uma <xref:System.Windows.Input.KeyGesture> para o <xref:System.Windows.Input.ApplicationCommands.Open%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="aab50-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="aab50-119">Quando o gesto de chave é executado, o comando Open é invocado.</span><span class="sxs-lookup"><span data-stu-id="aab50-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="aab50-120">Os exemplos a seguir mostram como associar um comando personalizado para <xref:System.Windows.Input.InputBinding> objetos.</span><span class="sxs-lookup"><span data-stu-id="aab50-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="aab50-121">Esses exemplos criam um aplicativo que permite ao usuário alterar a cor do plano de fundo ao executando uma das seguintes ações:</span><span class="sxs-lookup"><span data-stu-id="aab50-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="aab50-122">Clicar em um botão.</span><span class="sxs-lookup"><span data-stu-id="aab50-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="aab50-123">Pressionar CTRL + C.</span><span class="sxs-lookup"><span data-stu-id="aab50-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="aab50-124">Clicando duas vezes uma <xref:System.Windows.Controls.StackPanel> (fora de <xref:System.Windows.Controls.ListBox>).</span><span class="sxs-lookup"><span data-stu-id="aab50-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="aab50-125">O primeiro exemplo cria uma classe chamada `SimpleDelegateCommand`.</span><span class="sxs-lookup"><span data-stu-id="aab50-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="aab50-126">Essa classe aceita um delegado para que o objeto de criar o comando pode definir a ação que ocorre quando o comando é executado.</span><span class="sxs-lookup"><span data-stu-id="aab50-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="aab50-127">`SimpleDelegateCommand` também define as propriedades que especificam o que a chave e o mouse entrada invoca o comando.</span><span class="sxs-lookup"><span data-stu-id="aab50-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="aab50-128">`GestureKey` e `GestureModifier` especificar o teclado de entrada; `MouseGesture` Especifica a entrada de mouse.</span><span class="sxs-lookup"><span data-stu-id="aab50-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="aab50-129">O exemplo a seguir cria e inicializa o `ColorChangeCommand`, que é um `SimpleDelegateCommand`.</span><span class="sxs-lookup"><span data-stu-id="aab50-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="aab50-130">O exemplo também define o método que é executado quando o comando é invocado e define o `GestureKey`, `GestureModifier`, e `MouseGesture` propriedades.</span><span class="sxs-lookup"><span data-stu-id="aab50-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="aab50-131">Um aplicativo poderia chamar o `InitializeCommand` método quando o programa é iniciado, como o construtor de um <xref:System.Windows.Window>.</span><span class="sxs-lookup"><span data-stu-id="aab50-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="aab50-132">Finalmente, o exemplo a seguir cria a interface do usuário.</span><span class="sxs-lookup"><span data-stu-id="aab50-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="aab50-133">O exemplo adiciona uma <xref:System.Windows.Input.KeyBinding> e uma <xref:System.Windows.Input.MouseBinding> para um <xref:System.Windows.Controls.StackPanel> que contém um <xref:System.Windows.Controls.Button> e um <xref:System.Windows.Controls.ListBox>.</span><span class="sxs-lookup"><span data-stu-id="aab50-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="aab50-134">Quando o usuário seleciona um item no <xref:System.Windows.Controls.ListBox>, ele ou ela pode alterar a cor do plano de fundo para a cor selecionada.</span><span class="sxs-lookup"><span data-stu-id="aab50-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="aab50-135">Em cada caso, o `CommandParameter` propriedade está associada ao item selecionado na <xref:System.Windows.Controls.ListBox>e o `Command` propriedade está associada a `ColorChangeCommand`.</span><span class="sxs-lookup"><span data-stu-id="aab50-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="aab50-136">O <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, e <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> propriedades são associadas às propriedades correspondentes `SimpleDelegateCommand` classe.</span><span class="sxs-lookup"><span data-stu-id="aab50-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-137">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.InputBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="aab50-138">Fornece a inicialização de base para classes derivadas de <see cref="T:System.Windows.Input.InputBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aab50-139"><xref:System.Windows.Input.InputBinding> não é tecnicamente uma classe abstrata, mas o construtor padrão é deliberadamente acesso protegido.</span><span class="sxs-lookup"><span data-stu-id="aab50-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access.</span></span> <span data-ttu-id="aab50-140">Isso tem o efeito de tornar <xref:System.Windows.Input.InputBinding> uma classe "abstrata" para XAML.</span><span class="sxs-lookup"><span data-stu-id="aab50-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="aab50-141">Há propriedades existentes em [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] que tem usos XAML que espera objetos do tipo <xref:System.Windows.Input.InputBinding>, mas não é possível especificar um <xref:System.Windows.Input.InputBinding> instância no XAML.</span><span class="sxs-lookup"><span data-stu-id="aab50-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="aab50-142">Em vez disso, você pode especificar um dos específicos do dispositivo <xref:System.Windows.Input.InputBinding> as classes derivadas como valores, por exemplo <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="aab50-143">Se você implementar um personalizado <see cref="T:System.Windows.Input.InputBinding" /> que dá suporte ao uso de XAML, use este construtor para inicialização de base.</span>
            <span class="sxs-lookup">
              <span data-stu-id="aab50-143">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="aab50-144">O comando a associar ao <c>gesto</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-144">The command to associate with <c>gesture</c>.</span>
          </span>
        </param>
        <param name="gesture">
          <span data-ttu-id="aab50-145">O gesto de entrada a associar ao <c>comando</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-145">The input gesture to associate with <c>command</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aab50-146">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.InputBinding" /> com o comando e o gesto de entrada especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aab50-147">Se você for um desenvolvedor de software usando classes de associação de entrada existente, você geralmente não usará esse construtor, mesmo se você estiver definindo comandos personalizados.</span><span class="sxs-lookup"><span data-stu-id="aab50-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="aab50-148">Em vez disso, você irá usar construtores de classes derivadas (<xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>), ou você usará esse construtor, como a instanciação de base de uma classe personalizada.</span><span class="sxs-lookup"><span data-stu-id="aab50-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="aab50-149">Embora o <xref:System.Windows.Input.InputBinding> classe dá suporte a dispositivos de entrada diferentes em princípio, na prática, você deve escolher qual dispositivo representará a associação de entrada.</span><span class="sxs-lookup"><span data-stu-id="aab50-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="aab50-150">Você só pode definir apenas um <xref:System.Windows.Input.InputBinding.Gesture%2A> valor na associação de entrada e gestos são específicos do dispositivo.</span><span class="sxs-lookup"><span data-stu-id="aab50-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aab50-151">O exemplo a seguir mostra como usar esse construtor para associar uma <xref:System.Windows.Input.KeyGesture> com um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="aab50-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aab50-152">
            <paramref name="command" /> ou <paramref name="gesture" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-152">
              <paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="aab50-153">O objeto a ser clonado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-153">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aab50-154">Copia os valores base (não animados) das propriedades do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-154">Copies the base (non-animated) values of the properties of the specified object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCurrentValueCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="aab50-155">O objeto a ser clonado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-155">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aab50-156">Copia os valores atuais das propriedades do objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-156">Copies the current values of the properties of the specified object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-157">Obtém ou define o <see cref="T:System.Windows.Input.ICommand" /> associado a esta associação de entrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="aab50-158">O comando associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-158">The associated command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aab50-159">O <xref:System.Windows.Input.InputBinding> classe não dá suporte ao uso do XAML porque ele não expõe um construtor padrão público (ele tem um construtor padrão, mas ele é protegido).</span><span class="sxs-lookup"><span data-stu-id="aab50-159">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="aab50-160">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode usar as propriedades que são herdadas de <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="aab50-161">Dois existente <xref:System.Windows.Input.InputBinding> são classes derivadas que podem ser instanciadas em XAML e podem definir propriedades com usos XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="aab50-162"><xref:System.Windows.Input.ICommand> faz referência a um conversor de tipo que permite que determinados preexistente <xref:System.Windows.Input.ICommand> implementações para especificar os valores na forma de uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="aab50-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="aab50-163">Esse comportamento de conversão de tipo define o formulário de atributo de valor dessa propriedade.</span><span class="sxs-lookup"><span data-stu-id="aab50-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="aab50-164">Você também pode associar a <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, e <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propriedades para um <xref:System.Windows.Input.ICommand> que é definido em um objeto.</span><span class="sxs-lookup"><span data-stu-id="aab50-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="aab50-165">Isso permite que você defina um comando personalizado e associá-lo a entrada do usuário.</span><span class="sxs-lookup"><span data-stu-id="aab50-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="aab50-166">Para obter mais informações, consulte o segundo exemplo <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="aab50-167">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="aab50-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="aab50-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="aab50-169">Uso do elemento propriedade XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="aab50-170">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="aab50-171">Uma classe derivada de <xref:System.Windows.Input.InputBinding> que dá suporte à sintaxe de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="aab50-172">Consulte Observações.</span><span class="sxs-lookup"><span data-stu-id="aab50-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="aab50-173">Uma implementação de objeto de <xref:System.Windows.Input.ICommand> que dá suporte à sintaxe de elemento de objeto (tem um construtor padrão público).</span><span class="sxs-lookup"><span data-stu-id="aab50-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aab50-174">O exemplo a seguir mostra como usar um <xref:System.Windows.Input.KeyBinding> para associar uma <xref:System.Windows.Input.KeyGesture> para o <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> comando.</span><span class="sxs-lookup"><span data-stu-id="aab50-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="aab50-175">Quando o gesto de chave é executado, o comando Open é invocado.</span><span class="sxs-lookup"><span data-stu-id="aab50-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aab50-176">O valor <see cref="P:System.Windows.Input.InputBinding.Command" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-177">Obtém ou define os dados específicos do comando para um determinado comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-177">Gets or sets the command-specific data for a particular command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="aab50-178">Os dados específicos do comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-178">The command-specific data.</span>
          </span>
          <span data-ttu-id="aab50-179">O padrão é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-179">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aab50-180">O <xref:System.Windows.Input.InputBinding.CommandParameter%2A> propriedade é usada para passar informações específicas para o comando quando ele é executado.</span><span class="sxs-lookup"><span data-stu-id="aab50-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="aab50-181">O tipo de dados é definido pelo comando.</span><span class="sxs-lookup"><span data-stu-id="aab50-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="aab50-182">Muitos comandos não esperam parâmetros do comando. para que esses comandos, quaisquer parâmetros de comando passados serão ignorados.</span><span class="sxs-lookup"><span data-stu-id="aab50-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="aab50-183">Se o comando que uma associação de entrada está associada é um <xref:System.Windows.Input.RoutedCommand>, o <xref:System.Windows.Input.InputBinding.CommandParameter%2A> de associação de entrada é passada para o <xref:System.Windows.Input.RoutedCommand> manipuladores por meio do <xref:System.Windows.Input.ExecutedRoutedEventArgs> e o <xref:System.Windows.Input.CanExecuteRoutedEventArgs> dados de evento quando o comando é processado.</span><span class="sxs-lookup"><span data-stu-id="aab50-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="aab50-184">O tipo de dados e a finalidade do parâmetro de comando são definidos de forma diferente para cada comando e pode ser `null`.</span><span class="sxs-lookup"><span data-stu-id="aab50-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="aab50-185">Você pode associar o <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, e <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propriedades para um <xref:System.Windows.Input.ICommand> que é definido em um objeto.</span><span class="sxs-lookup"><span data-stu-id="aab50-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="aab50-186">Isso permite que você defina um comando personalizado e associá-lo a entrada do usuário.</span><span class="sxs-lookup"><span data-stu-id="aab50-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="aab50-187">Para obter mais informações, consulte o segundo exemplo <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="aab50-188">O <xref:System.Windows.Input.InputBinding> classe não dá suporte ao uso do XAML porque ele não expõe um construtor padrão público (ele tem um construtor padrão, mas ele é protegido).</span><span class="sxs-lookup"><span data-stu-id="aab50-188">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="aab50-189">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode definir as propriedades que são herdadas de <xref:System.Windows.Input.InputBinding> com o uso do XAML.</span><span class="sxs-lookup"><span data-stu-id="aab50-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="aab50-190">Dois existente <xref:System.Windows.Input.InputBinding> são classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="aab50-191">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="aab50-192">Uso do elemento propriedade XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="aab50-193">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="aab50-194">Uma classe derivada de <xref:System.Windows.Input.InputBinding> que dá suporte à sintaxe de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="aab50-195">Consulte Observações.</span><span class="sxs-lookup"><span data-stu-id="aab50-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="aab50-196">Uma cadeia de caracteres que é processada por um determinado comando.</span><span class="sxs-lookup"><span data-stu-id="aab50-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="aab50-197">Cadeias de caracteres são o tipo comum usado para parâmetros de comando porque eles podem ser facilmente definidos em XAML.</span><span class="sxs-lookup"><span data-stu-id="aab50-197">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="aab50-198">Para o formato de cadeia de caracteres esperada e sua finalidade, consulte a documentação para o comando específico que a associação de entrada está associada.</span><span class="sxs-lookup"><span data-stu-id="aab50-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="aab50-199">Muitos comandos não esperam parâmetros.</span><span class="sxs-lookup"><span data-stu-id="aab50-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="aab50-200">Um objeto que é processado por um determinado comando.</span><span class="sxs-lookup"><span data-stu-id="aab50-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="aab50-201">Todas as suas [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] comandos usam cadeias de caracteres.</span><span class="sxs-lookup"><span data-stu-id="aab50-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="aab50-202">Portanto, essa sintaxe de elemento de propriedade só é relevante para cenários de comando personalizado.</span><span class="sxs-lookup"><span data-stu-id="aab50-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="aab50-203">Para dar suporte a essa sintaxe, o `commandParameterObject` objeto também deve dar suporte a sintaxe de elemento de objeto (deve ter um construtor padrão público).</span><span class="sxs-lookup"><span data-stu-id="aab50-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-204">Identifica a propriedade de dependência <see cref="P:System.Windows.Input.InputBinding.CommandParameter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-205">Identifica a propriedade de dependência <see cref="P:System.Windows.Input.InputBinding.Command" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-206">Obtém ou define o elemento de destino do comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-206">Gets or sets the target element of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="aab50-207">O destino do comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-207">The target of the command.</span>
          </span>
          <span data-ttu-id="aab50-208">O padrão é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-208">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aab50-209">No Windows Presentation Foundation dos comandos de sistema, o <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propriedade em um <xref:System.Windows.Input.ICommandSource> objeto é aplicável somente quando o <xref:System.Windows.Input.ICommand> é um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="aab50-209">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="aab50-210">Se o <xref:System.Windows.Input.InputBinding.CommandTarget%2A> estiver definido em uma <xref:System.Windows.Input.ICommandSource> e o comando correspondente não for um <xref:System.Windows.Input.RoutedCommand>, o destino de comando será ignorado.</span><span class="sxs-lookup"><span data-stu-id="aab50-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="aab50-211">Quando usado com um <xref:System.Windows.Input.RoutedCommand>, o destino do comando é o objeto no qual o <xref:System.Windows.Input.CommandManager.Executed> e <xref:System.Windows.Input.CommandManager.CanExecute> eventos são gerados.</span><span class="sxs-lookup"><span data-stu-id="aab50-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="aab50-212">Se o <xref:System.Windows.Input.InputBinding.CommandTarget%2A> não está definida, o elemento com foco do teclado é usado como o destino.</span><span class="sxs-lookup"><span data-stu-id="aab50-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="aab50-213">O <xref:System.Windows.Input.InputBinding> própria classe não dá suporte ao uso do XAML, porque ele não expõe um construtor público padrão (não há um construtor padrão, mas ele é protegido).</span><span class="sxs-lookup"><span data-stu-id="aab50-213">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="aab50-214">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode definir as propriedades que são herdadas de <xref:System.Windows.Input.InputBinding> com um uso XAML.</span><span class="sxs-lookup"><span data-stu-id="aab50-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="aab50-215">Dois existente <xref:System.Windows.Input.InputBinding> são classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="aab50-216">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="aab50-217">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="aab50-218">Uma classe derivada de <xref:System.Windows.Input.InputBinding> que dá suporte à sintaxe de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="aab50-219">Consulte Observações.</span><span class="sxs-lookup"><span data-stu-id="aab50-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="aab50-220">Elemento nomeado de uma cadeia de caracteres que usa um tipo de sintaxe de associação que pode retornar uma referência de objeto a um existente.</span><span class="sxs-lookup"><span data-stu-id="aab50-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="aab50-221">Consulte Observações.</span><span class="sxs-lookup"><span data-stu-id="aab50-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-222">Identifica a propriedade de dependência <see cref="P:System.Windows.Input.InputBinding.CommandTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="aab50-223">Cria uma instância de um <see cref="T:System.Windows.Input.InputBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="aab50-224">O novo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-224">The new object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="aab50-225">Obtém ou define o <see cref="T:System.Windows.Input.InputGesture" /> associado a esta associação de entrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="aab50-226">O gesto associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-226">The associated gesture.</span>
          </span>
          <span data-ttu-id="aab50-227">O padrão é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-227">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aab50-228">O gesto de entrada é a ação que invoca o comando.</span><span class="sxs-lookup"><span data-stu-id="aab50-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="aab50-229">Exemplos de gestos de entrada em [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] estão <xref:System.Windows.Input.KeyGesture> e <xref:System.Windows.Input.MouseGesture>.</span><span class="sxs-lookup"><span data-stu-id="aab50-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="aab50-230">Um <xref:System.Windows.Input.KeyGesture> é uma combinação de um <xref:System.Windows.Input.Key> e um conjunto de <xref:System.Windows.Input.ModifierKeys>.</span><span class="sxs-lookup"><span data-stu-id="aab50-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="aab50-231">Um <xref:System.Windows.Input.MouseGesture> é uma combinação de um <xref:System.Windows.Input.MouseAction> e um conjunto de <xref:System.Windows.Input.ModifierKeys>.</span><span class="sxs-lookup"><span data-stu-id="aab50-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="aab50-232">O <xref:System.Windows.Input.InputBinding> própria classe não dá suporte ao uso do XAML, porque ele não expõe um construtor público padrão (não há um construtor padrão, mas ele é protegido).</span><span class="sxs-lookup"><span data-stu-id="aab50-232">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="aab50-233">No entanto, as classes derivadas podem expor um construtor público e, portanto, pode definir as propriedades que são herdadas de <xref:System.Windows.Input.InputBinding> com um uso XAML.</span><span class="sxs-lookup"><span data-stu-id="aab50-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="aab50-234">Dois existente <xref:System.Windows.Input.InputBinding> são classes derivadas que podem ser instanciadas em XAML e podem definir propriedades em XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="aab50-235">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="aab50-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="aab50-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
 <span data-ttu-id="aab50-237">\- ou -</span><span class="sxs-lookup"><span data-stu-id="aab50-237">\- or -</span></span>  
  
 <span data-ttu-id="aab50-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="aab50-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
 <span data-ttu-id="aab50-239">\- ou -</span><span class="sxs-lookup"><span data-stu-id="aab50-239">\- or -</span></span>  
  
 <span data-ttu-id="aab50-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="aab50-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="aab50-241">Uso do elemento propriedade XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="aab50-242">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="aab50-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="aab50-243">Uma classe derivada de <xref:System.Windows.Input.InputBinding> que dá suporte à sintaxe de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="aab50-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="aab50-244">Consulte Observações.</span><span class="sxs-lookup"><span data-stu-id="aab50-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="aab50-245">Um personalizado classe derivada de <xref:System.Windows.Input.InputGesture> que dá suporte à sintaxe de elemento de objeto.</span><span class="sxs-lookup"><span data-stu-id="aab50-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aab50-246">O exemplo a seguir mostra como usar um <xref:System.Windows.Input.KeyBinding> para associar uma <xref:System.Windows.Input.KeyGesture> para um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="aab50-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="aab50-247">Quando o <xref:System.Windows.Input.KeyGesture> ALT + L é pressionado, o <xref:System.Windows.Input.ApplicationCommands.Close%2A> comando é invocado.</span><span class="sxs-lookup"><span data-stu-id="aab50-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="aab50-248">O objeto a ser clonado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-248">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aab50-249">Torna a instância um clone congelado do <see cref="T:System.Windows.Freezable" /> especificado usando valores de propriedade base (não animados).</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="aab50-250">O objeto a ser clonado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-250">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aab50-251">Torna a instância atual um clone congelado do <see cref="T:System.Windows.Freezable" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span>
          </span>
          <span data-ttu-id="aab50-252">Se o objeto tiver propriedades de dependência animadas, seus valores animados atuais serão copiados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aab50-252">If the object has animated dependency properties, their current animated values are copied.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>