<Type Name="ICommand" FullName="System.Windows.Input.ICommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea5eff6a81bd27b0ab5ad70e628f1d59b7ee7f56" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647930" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommand" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommand" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommand" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5201c-101">Define um comando.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5201c-101">Defines a command.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5201c-102"><xref:System.Windows.Input.RoutedCommand> e <xref:System.Windows.Input.RoutedUICommand> são duas implementações de <xref:System.Windows.Input.ICommand> interface em [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="5201c-102"><xref:System.Windows.Input.RoutedCommand> and <xref:System.Windows.Input.RoutedUICommand> are two implementations of the <xref:System.Windows.Input.ICommand> interface in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</span></span>  
  
## <a name="icommand-in-windows-runtime-apps"></a><span data-ttu-id="5201c-103">ICommand no Windows aplicativos de tempo de execução</span><span class="sxs-lookup"><span data-stu-id="5201c-103">ICommand in Windows Runtime apps</span></span>  
 <span data-ttu-id="5201c-104">O <xref:System.Windows.Input.ICommand> interface é o contrato de código para os comandos que são escritos em aplicativos .NET para Windows Runtime.</span><span class="sxs-lookup"><span data-stu-id="5201c-104">The <xref:System.Windows.Input.ICommand> interface is the code contract for commands that are written in .NET for Windows Runtime apps.</span></span> <span data-ttu-id="5201c-105">Esses comandos fornecem o comportamento de comando para elementos de interface do usuário, como um XAML de tempo de execução do Windows `Button` e especificamente um `AppBarButton`.</span><span class="sxs-lookup"><span data-stu-id="5201c-105">These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML `Button` and in particular an `AppBarButton`.</span></span> <span data-ttu-id="5201c-106">Se você está definindo comandos para aplicativos do Windows Runtime use basicamente as mesmas técnicas que você deseja usar para definir os comandos para um aplicativo .NET.</span><span class="sxs-lookup"><span data-stu-id="5201c-106">If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app.</span></span> <span data-ttu-id="5201c-107">Implementar o comando com a definição de uma classe que implementa <xref:System.Windows.Input.ICommand> e implementar especificamente o <xref:System.Windows.Input.ICommand.Execute%2A> método.</span><span class="sxs-lookup"><span data-stu-id="5201c-107">Implement the command by defining a class that implements <xref:System.Windows.Input.ICommand> and specifically implement the <xref:System.Windows.Input.ICommand.Execute%2A> method.</span></span>  
  
 <span data-ttu-id="5201c-108">XAML para Windows Runtime não oferece suporte x`:Static`, portanto, não tente usar o `x:Static` extensão de marcação se for usado o comando do Windows em tempo de execução XAML.</span><span class="sxs-lookup"><span data-stu-id="5201c-108">XAML for Windows Runtime does not support x`:Static`, so don't attempt to use the `x:Static` markup extension if the command is used from Windows Runtime XAML.</span></span> <span data-ttu-id="5201c-109">Além disso, o tempo de execução do Windows não tem qualquer biblioteca de comando predefinidos, portanto, realmente não se aplica a sintaxe XAML mostrada aqui para o caso em que você está implementando a interface e definir o comando para uso em tempo de execução do Windows.</span><span class="sxs-lookup"><span data-stu-id="5201c-109">Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.</span></span>  
  
<a name="xamlTextUsage_ICommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5201c-110">Uso do Atributo XAML</span><span class="sxs-lookup"><span data-stu-id="5201c-110">XAML Attribute Usage</span></span>  
 <span data-ttu-id="5201c-111">\<*object property*="*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="5201c-111">\<*object property*="*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="5201c-112">\- ou -</span><span class="sxs-lookup"><span data-stu-id="5201c-112">\- or -</span></span>  
  
 <span data-ttu-id="5201c-113">\<*object property*="*predefinedCommandName.predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="5201c-113">\<*object property*="*predefinedCommandName.predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="5201c-114">\- ou -</span><span class="sxs-lookup"><span data-stu-id="5201c-114">\- or -</span></span>  
  
 <span data-ttu-id="5201c-115">\<*object property*="{ *customClassName.customCommandName*}"/></span><span class="sxs-lookup"><span data-stu-id="5201c-115">\<*object property*="{ *customClassName.customCommandName*}"/></span></span>  
  
<a name="xamlValues_ICommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="5201c-116">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="5201c-116">XAML Values</span></span>  
 <span data-ttu-id="5201c-117">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="5201c-117">*predefinedClassName*</span></span>  
 <span data-ttu-id="5201c-118">Uma das classes de comando predefinidos.</span><span class="sxs-lookup"><span data-stu-id="5201c-118">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="5201c-119">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="5201c-119">*predefinedCommandName*</span></span>  
 <span data-ttu-id="5201c-120">Um dos comandos predefinidos.</span><span class="sxs-lookup"><span data-stu-id="5201c-120">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="5201c-121">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="5201c-121">*customClassName*</span></span>  
 <span data-ttu-id="5201c-122">Uma classe personalizada que contém o comando personalizado.</span><span class="sxs-lookup"><span data-stu-id="5201c-122">A custom class that contains the custom command.</span></span> <span data-ttu-id="5201c-123">Classes personalizadas geralmente exigem um `xlmns` mapeamento de prefixo, consulte [Namespaces XAML e o mapeamento de Namespace para WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="5201c-123">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="5201c-124">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="5201c-124">*customCommandName*</span></span>  
 <span data-ttu-id="5201c-125">Um comando personalizado.</span><span class="sxs-lookup"><span data-stu-id="5201c-125">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="5201c-126">Dados usados pelo comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-126">Data used by the command.</span>
          </span>
          <span data-ttu-id="5201c-127">Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-127">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5201c-128">Define o método que determina se o comando pode ser executado em seu estado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-128">Defines the method that determines whether the command can execute in its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5201c-129">
            <see langword="true" /> se esse comando puder ser executado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-129">
              <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5201c-130">Normalmente, uma fonte de comando chama o <xref:System.Windows.Input.ICommand.CanExecute%2A> método quando o <xref:System.Windows.Input.ICommand.CanExecuteChanged> é gerado.</span><span class="sxs-lookup"><span data-stu-id="5201c-130">Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.ICommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5201c-131">Ocorre em caso de alterações que afetam se o comando deve ser executado ou não.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-131">Occurs when changes occur that affect whether or not the command should execute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5201c-132">Normalmente, uma fonte de comando chama <xref:System.Windows.Input.ICommand.CanExecute%2A> no comando quando esse evento ocorrer.</span><span class="sxs-lookup"><span data-stu-id="5201c-132">Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs.</span></span>  
  
 <span data-ttu-id="5201c-133">Normalmente, se não puder executar o comando, a fonte de comando desabilita em si.</span><span class="sxs-lookup"><span data-stu-id="5201c-133">Normally, if the command cannot execute, the command source disables itself.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="5201c-134">Dados usados pelo comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-134">Data used by the command.</span>
          </span>
          <span data-ttu-id="5201c-135">Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-135">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5201c-136">Define o método a ser chamado quando o comando for invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5201c-136">Defines the method to be called when the command is invoked.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>