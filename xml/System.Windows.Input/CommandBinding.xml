<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c8aab-101">Associa um <see cref="T:System.Windows.Input.RoutedCommand" /> aos manipuladores de eventos que implementam o comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-101">Binds a <see cref="T:System.Windows.Input.RoutedCommand" /> to the event handlers that implement the command.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8aab-102">Um <xref:System.Windows.Input.CommandBinding> associa um comando com o <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> e <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> eventos que implementam e determinarem o status do comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-102">A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.</span></span>  
  
 <span data-ttu-id="c8aab-103">Quando o <xref:System.Windows.Input.RoutedCommand.Execute%2A> ou <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método de um <xref:System.Windows.Input.RoutedCommand> é chamado, o <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> ou <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> os eventos são gerados no destino de comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-103">When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.</span></span>  <span data-ttu-id="c8aab-104">Se o destino do comando tiver um <xref:System.Windows.Input.CommandBinding> para o comando, são chamados os manipuladores apropriados.</span><span class="sxs-lookup"><span data-stu-id="c8aab-104">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.</span></span>  <span data-ttu-id="c8aab-105">Se o destino do comando não tem um <xref:System.Windows.Input.CommandBinding> para o comando, os eventos são roteados através da árvore de elementos até que um elemento que tem um <xref:System.Windows.Input.CommandBinding> foi encontrado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-105">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.</span></span>  
  
 <span data-ttu-id="c8aab-106">Um <xref:System.Windows.Input.CommandBinding> tem uso limitado com um <xref:System.Windows.Input.ICommand> que não é um <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="c8aab-106">A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="c8aab-107">Isso ocorre porque um <xref:System.Windows.Input.CommandBinding> associa o comando para o <xref:System.Windows.Input.ExecutedRoutedEventHandler> e o <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qual escutar o <xref:System.Windows.Input.CommandManager.Executed> e <xref:System.Windows.Input.CommandManager.CanExecute> os eventos que são roteados gerado quando o <xref:System.Windows.Input.RoutedCommand.Execute%2A> e <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método do <xref:System.Windows.Input.RoutedCommand> são chamados.</span><span class="sxs-lookup"><span data-stu-id="c8aab-107">This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c8aab-108">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.CommandBinding" />.</span><span class="sxs-lookup"><span data-stu-id="c8aab-108">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c8aab-109">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.CommandBinding" />.</span><span class="sxs-lookup"><span data-stu-id="c8aab-109">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="c8aab-110">O comando no qual o novo <see cref="T:System.Windows.Input.RoutedCommand" /> é baseado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-110">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span></span></param>
        <summary><span data-ttu-id="c8aab-111">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.CommandBinding" /> usando o <see cref="T:System.Windows.Input.ICommand" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-111">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="c8aab-112">O comando no qual o novo <see cref="T:System.Windows.Input.RoutedCommand" /> é baseado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-112">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span></span></param>
        <param name="executed"><span data-ttu-id="c8aab-113">O manipulador para o evento <see cref="E:System.Windows.Input.CommandBinding.Executed" /> no novo <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="c8aab-113">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></param>
        <summary><span data-ttu-id="c8aab-114">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.CommandBinding" /> usando o <see cref="T:System.Windows.Input.ICommand" /> e o manipulador de eventos <see cref="E:System.Windows.Input.CommandBinding.Executed" /> especificados.</span><span class="sxs-lookup"><span data-stu-id="c8aab-114">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event handler.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler, canExecute As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed, System::Windows::Input::CanExecuteRoutedEventHandler ^ canExecute);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="c8aab-115">O comando no qual o novo <see cref="T:System.Windows.Input.RoutedCommand" /> é baseado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-115">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span></span></param>
        <param name="executed"><span data-ttu-id="c8aab-116">O manipulador para o evento <see cref="E:System.Windows.Input.CommandBinding.Executed" /> no novo <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="c8aab-116">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></param>
        <param name="canExecute"><span data-ttu-id="c8aab-117">O manipulador para o evento <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> no novo <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="c8aab-117">The handler for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></param>
        <summary><span data-ttu-id="c8aab-118">Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.CommandBinding" /> usando o <see cref="T:System.Windows.Input.ICommand" /> especificado e os manipuladores de eventos <see cref="E:System.Windows.Input.CommandBinding.Executed" /> e <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> especificados.</span><span class="sxs-lookup"><span data-stu-id="c8aab-118">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event handlers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event CanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ CanExecute;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8aab-119">Ocorre quando o comando associado a essa <see cref="T:System.Windows.Input.CommandBinding" /> inicia uma verificação para determinar se o comando pode ser executado no destino do comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-119">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8aab-120">Quando o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método em um <xref:System.Windows.Input.RoutedCommand> é chamado, o <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> é gerado no seu destino.</span><span class="sxs-lookup"><span data-stu-id="c8aab-120">When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.</span></span>  <span data-ttu-id="c8aab-121">Se o evento não é tratado, o <xref:System.Windows.Input.CommandBinding.CanExecute> é gerado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-121">If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.</span></span>  <span data-ttu-id="c8aab-122">Se o destino do comando tiver um <xref:System.Windows.Input.CommandBinding> para o comando, o <xref:System.Windows.Input.CommandBinding.CanExecute> manipulador que <xref:System.Windows.Input.CommandBinding> é chamado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-122">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c8aab-123">Se o destino do comando não tem um <xref:System.Windows.Input.CommandBinding> para o comando, o <xref:System.Windows.Input.CommandBinding.CanExecute> bolhas de evento até a árvore de elementos procurando por um elemento que tem um <xref:System.Windows.Input.CommandBinding> associada ao comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-123">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c8aab-124">Informações de evento encaminhado</span><span class="sxs-lookup"><span data-stu-id="c8aab-124">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c8aab-125">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="c8aab-125">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|<span data-ttu-id="c8aab-126">Estratégia de roteamento</span><span class="sxs-lookup"><span data-stu-id="c8aab-126">Routing strategy</span></span>|<span data-ttu-id="c8aab-127">Bolha</span><span class="sxs-lookup"><span data-stu-id="c8aab-127">Bubbling</span></span>|  
|<span data-ttu-id="c8aab-128">delegado</span><span class="sxs-lookup"><span data-stu-id="c8aab-128">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   <span data-ttu-id="c8aab-129">O evento de túnel correspondente é <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</span><span class="sxs-lookup"><span data-stu-id="c8aab-129">The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8aab-130">O exemplo a seguir cria um <xref:System.Windows.Input.CommandBinding> que mapeia um <xref:System.Windows.Input.ExecutedRoutedEventHandler> e um <xref:System.Windows.Input.CanExecuteRoutedEventArgs> manipulador para o <xref:System.Windows.Input.ApplicationCommands.Open%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-130">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="c8aab-131">A seguir mostra o <xref:System.Windows.Input.CanExecuteRoutedEventHandler> quais conjuntos de <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> para `true`.</span><span class="sxs-lookup"><span data-stu-id="c8aab-131">The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8aab-132">Obtém ou define o <see cref="T:System.Windows.Input.ICommand" /> associado a esse <see cref="T:System.Windows.Input.CommandBinding" />.</span><span class="sxs-lookup"><span data-stu-id="c8aab-132">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this <see cref="T:System.Windows.Input.CommandBinding" />.</span></span></summary>
        <value><span data-ttu-id="c8aab-133">O comando associado a essa associação.</span><span class="sxs-lookup"><span data-stu-id="c8aab-133">The command associated with this binding.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c8aab-134">O exemplo a seguir cria um <xref:System.Windows.Input.CommandBinding> que mapeia um <xref:System.Windows.Input.ExecutedRoutedEventHandler> e um <xref:System.Windows.Input.CanExecuteRoutedEventArgs> manipulador para o <xref:System.Windows.Input.ApplicationCommands.Open%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-134">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="c8aab-135">A seguir mostra o <xref:System.Windows.Input.CanExecuteRoutedEventHandler> quais conjuntos de <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> para `true`.</span><span class="sxs-lookup"><span data-stu-id="c8aab-135">The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 <span data-ttu-id="c8aab-136">A seguir mostra o <xref:System.Windows.Input.ExecutedRoutedEventHandler> que cria um <xref:System.Windows.MessageBox> quando o comando é executado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-136">The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberSignature Language="VB.NET" Value="Public Event Executed As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ Executed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8aab-137">Ocorre quando o comando associado a este <see cref="T:System.Windows.Input.CommandBinding" /> é executado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-137">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8aab-138">Quando um <xref:System.Windows.Input.RoutedCommand> é executado, ele gera o <xref:System.Windows.Input.CommandBinding.PreviewExecuted> eventos no destino de comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-138">When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.</span></span>  <span data-ttu-id="c8aab-139">Se o <xref:System.Windows.Input.CommandBinding.PreviewExecuted> evento não é tratado, o <xref:System.Windows.Input.CommandBinding.Executed> é gerado no seu destino.</span><span class="sxs-lookup"><span data-stu-id="c8aab-139">If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.</span></span>  <span data-ttu-id="c8aab-140">Se o destino do comando tiver um <xref:System.Windows.Input.CommandBinding> para o comando específico, o <xref:System.Windows.Input.CommandBinding.Executed> manipulador que <xref:System.Windows.Input.CommandBinding> é chamado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-140">If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c8aab-141">Se o destino do comando não tem um <xref:System.Windows.Input.CommandBinding> para esse comando específico a <xref:System.Windows.Input.CommandBinding.Executed> bolhas de evento até a árvore de elementos procurando por um elemento que tem um <xref:System.Windows.Input.CommandBinding> associada ao comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-141">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="c8aab-142">Se um <xref:System.Windows.Input.CommandBinding> não for encontrado, o comando não é manipulado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-142">If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.</span></span>  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c8aab-143">Informações de evento encaminhado</span><span class="sxs-lookup"><span data-stu-id="c8aab-143">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c8aab-144">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="c8aab-144">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|<span data-ttu-id="c8aab-145">Estratégia de roteamento</span><span class="sxs-lookup"><span data-stu-id="c8aab-145">Routing strategy</span></span>|<span data-ttu-id="c8aab-146">Bolha</span><span class="sxs-lookup"><span data-stu-id="c8aab-146">Bubbling</span></span>|  
|<span data-ttu-id="c8aab-147">delegado</span><span class="sxs-lookup"><span data-stu-id="c8aab-147">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   <span data-ttu-id="c8aab-148">O evento de túnel correspondente é <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</span><span class="sxs-lookup"><span data-stu-id="c8aab-148">The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8aab-149">O exemplo a seguir cria um <xref:System.Windows.Input.CommandBinding> que mapeia um <xref:System.Windows.Input.ExecutedRoutedEventHandler> e um <xref:System.Windows.Input.CanExecuteRoutedEventArgs> manipulador para o <xref:System.Windows.Input.ApplicationCommands.Open%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-149">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="c8aab-150">A seguir mostra o <xref:System.Windows.Input.ExecutedRoutedEventHandler> que cria um <xref:System.Windows.MessageBox> quando o comando é executado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-150">The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewCanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ PreviewCanExecute;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8aab-151">Ocorre quando o comando associado a essa <see cref="T:System.Windows.Input.CommandBinding" /> inicia uma verificação para determinar se o comando pode ser executado no destino do comando atual.</span><span class="sxs-lookup"><span data-stu-id="c8aab-151">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8aab-152">Quando o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> método em um <xref:System.Windows.Input.RoutedCommand> é chamado, o <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> é gerado no seu destino se o destino do comando tiver um <xref:System.Windows.Input.CommandBinding> para o comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-152">When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command.</span></span> <span data-ttu-id="c8aab-153">Em seguida, o <xref:System.Windows.Input.CommandBinding.CanExecute> manipulador que <xref:System.Windows.Input.CommandBinding> é chamado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-153">Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c8aab-154">Se o destino do comando não tem um <xref:System.Windows.Input.CommandBinding> para o comando, o <xref:System.Windows.Input.CommandBinding.CanExecute> bolhas de evento até a árvore de elementos procurando por um elemento que tem um <xref:System.Windows.Input.CommandBinding> associada ao comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-154">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="c8aab-155">Se o evento não é tratado, o <xref:System.Windows.Input.CommandBinding.CanExecute> é gerado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-155">If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.</span></span>  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c8aab-156">Informações de evento encaminhado</span><span class="sxs-lookup"><span data-stu-id="c8aab-156">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c8aab-157">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="c8aab-157">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|<span data-ttu-id="c8aab-158">Estratégia de roteamento</span><span class="sxs-lookup"><span data-stu-id="c8aab-158">Routing strategy</span></span>|<span data-ttu-id="c8aab-159">Túnel</span><span class="sxs-lookup"><span data-stu-id="c8aab-159">Tunneling</span></span>|  
|<span data-ttu-id="c8aab-160">delegado</span><span class="sxs-lookup"><span data-stu-id="c8aab-160">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   <span data-ttu-id="c8aab-161">O evento correspondente é <xref:System.Windows.Input.CommandBinding.CanExecute>.</span><span class="sxs-lookup"><span data-stu-id="c8aab-161">The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewExecuted As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ PreviewExecuted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8aab-162">Ocorre quando o comando associado a este <see cref="T:System.Windows.Input.CommandBinding" /> é executado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-162">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8aab-163">Quando um <xref:System.Windows.Input.RoutedCommand> é executado, ele gera o <xref:System.Windows.Input.CommandBinding.PreviewExecuted> eventos no destino de comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-163">When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.</span></span>  <span data-ttu-id="c8aab-164">Se o destino do comando tiver um <xref:System.Windows.Input.CommandBinding> para o comando de <xref:System.Windows.Input.CommandBinding.PreviewExecuted> manipulador que <xref:System.Windows.Input.CommandBinding> é chamado.</span><span class="sxs-lookup"><span data-stu-id="c8aab-164">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c8aab-165">Se o destino do comando não tem um <xref:System.Windows.Input.CommandBinding> para o comando de <xref:System.Windows.Input.CommandBinding.PreviewExecuted> túneis de evento para baixo da árvore de elementos procurando por um elemento que tem um <xref:System.Windows.Input.CommandBinding> associada ao comando.</span><span class="sxs-lookup"><span data-stu-id="c8aab-165">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="c8aab-166">Se o evento de visualização não é tratado, o <xref:System.Windows.Input.CommandBinding.Executed> é gerado no destino.</span><span class="sxs-lookup"><span data-stu-id="c8aab-166">If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.</span></span>  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c8aab-167">Informações de evento encaminhado</span><span class="sxs-lookup"><span data-stu-id="c8aab-167">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c8aab-168">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="c8aab-168">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|<span data-ttu-id="c8aab-169">Estratégia de roteamento</span><span class="sxs-lookup"><span data-stu-id="c8aab-169">Routing strategy</span></span>|<span data-ttu-id="c8aab-170">Túnel</span><span class="sxs-lookup"><span data-stu-id="c8aab-170">Tunneling</span></span>|  
|<span data-ttu-id="c8aab-171">delegado</span><span class="sxs-lookup"><span data-stu-id="c8aab-171">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   <span data-ttu-id="c8aab-172">O evento correspondente é <xref:System.Windows.Input.CommandBinding.Executed>.</span><span class="sxs-lookup"><span data-stu-id="c8aab-172">The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>