<Type Name="IFragmentCapableXmlDictionaryWriter" FullName="System.Xml.IFragmentCapableXmlDictionaryWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4280186aaca2bcf519af30ba243d6a4fce3f24ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFragmentCapableXmlDictionaryWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a11e2-101">Contém propriedades e métodos que, quando implementados por um <see cref="T:System.Xml.XmlDictionaryWriter" />, permitem o processamento de fragmentos XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a11e2-101">Contains properties and methods that when implemented by a <see cref="T:System.Xml.XmlDictionaryWriter" />, allows processing of XML fragments.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a11e2-102">Essa classe define as propriedades e métodos relacionados a capacidade de um <xref:System.Xml.XmlDictionaryWriter> para redirecionar parte de sua saída (um ' fragment') para um fluxo diferente que ele foi criado com o fluxo de e para inserir diretamente tal um fragmento capturado pelo redirecionamento de volta para o fluxo principal do gravador mesmo em um momento posterior.</span><span class="sxs-lookup"><span data-stu-id="a11e2-102">This class defines the properties and methods related to the capability of an <xref:System.Xml.XmlDictionaryWriter> to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanFragment">
      <MemberSignature Language="C#" Value="public bool CanFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFragment" />
      <MemberSignature Language="DocId" Value="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFragment { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a11e2-103">Obtém um valor que indica se este <see cref="T:System.Xml.XmlDictionaryWriter" /> pode processar fragmentos XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-103">Gets a value that indicates whether this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a11e2-104">
            <see langword="true" /> Se este <see cref="T:System.Xml.XmlDictionaryWriter" /> pode processar fragmentos XML; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-104">
              <see langword="true" /> if this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a11e2-105">Retorna `true` se o gravador que implementa essa interface pode gerar e aceitar fragmentos XML.</span><span class="sxs-lookup"><span data-stu-id="a11e2-105">Returns `true` if the writer that implements this interface can generate and accept XML fragments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndFragment">
      <MemberSignature Language="C#" Value="public void EndFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndFragment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndFragment ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndFragment();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a11e2-106">Termina o processamento de um fragmento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-106">Ends the processing of an XML fragment.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a11e2-107">Redirecionando a saída para o fluxo fornecido pela correspondência de paradas `StartFragment` chamar.</span><span class="sxs-lookup"><span data-stu-id="a11e2-107">Stops redirecting output to the stream supplied by the matching `StartFragment` call.</span></span> <span data-ttu-id="a11e2-108">Após essa chamada, o XML gravar a saída vai para o fluxo usado originalmente pelo gravador antes do `StartFragment` chamar.</span><span class="sxs-lookup"><span data-stu-id="a11e2-108">After this call, the XML writing output goes to the stream originally used by the writer before the `StartFragment` call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartFragment">
      <MemberSignature Language="C#" Value="public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartFragment(class System.IO.Stream stream, bool generateSelfContainedTextFragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartFragment(System::IO::Stream ^ stream, bool generateSelfContainedTextFragment);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="generateSelfContainedTextFragment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="a11e2-109">O fluxo para gravação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-109">The stream to write to.</span>
          </span>
        </param>
        <param name="generateSelfContainedTextFragment">
          <span data-ttu-id="a11e2-110">Se <see langword="true" />, todos os namespaces declarados fora do fragmento são declarados novamente se usados dentro dele; se <see langword="false" />, os namespaces não são declarados novamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-110">If <see langword="true" />, any namespaces declared outside the fragment is declared again if used inside of it; if <see langword="false" /> the namespaces are not declared again.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a11e2-111">Inicia o processamento de um fragmento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-111">Starts the processing of an XML fragment.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a11e2-112">Inicia temporariamente redirecionando a gravação da saída XML para o fluxo fornecido até `EndFragment` é chamado.</span><span class="sxs-lookup"><span data-stu-id="a11e2-112">Temporarily starts redirecting the writing of the XML output to the supplied stream until `EndFragment` is called.</span></span> <span data-ttu-id="a11e2-113">Se `generateSelfContainedTextFragment` é `true`, em seguida, o XML de redirecionamento de saída sempre é texto XML e é independente em termos de seu contexto de namespace.</span><span class="sxs-lookup"><span data-stu-id="a11e2-113">If `generateSelfContainedTextFragment` is `true`, then the redirected XML output is always text XML and is self-contained in terms of its namespace context.</span></span> <span data-ttu-id="a11e2-114">`StartFragment`() chama não pode ser aninhadas.</span><span class="sxs-lookup"><span data-stu-id="a11e2-114">`StartFragment`() calls cannot be nested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFragment">
      <MemberSignature Language="C#" Value="public void WriteFragment (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFragment(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteFragment (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteFragment(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="a11e2-115">O buffer para o qual gravar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-115">The buffer to write to.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="a11e2-116">A posição inicial da qual gravar no <c>buffer</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-116">The starting position from which to write in <c>buffer</c>.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="a11e2-117">O número de bytes a serem gravados no <c>buffer</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-117">The number of bytes to be written to the <c>buffer</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a11e2-118">Grava um fragmento XML para o fluxo subjacente do gravador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a11e2-118">Writes an XML fragment to the underlying stream of the writer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a11e2-119">Grava um fragmento capturado entre `StartFragment` e `EndFragment` e chamadas de volta no fluxo principal do XmlDictionaryWriter.</span><span class="sxs-lookup"><span data-stu-id="a11e2-119">Writes a fragment captured between `StartFragment` and `EndFragment` and calls back into the XmlDictionaryWriter's main stream.</span></span> <span data-ttu-id="a11e2-120">O fragmento gravado é `count` bytes, começando no índice `offset` de fornecido `buffer`.</span><span class="sxs-lookup"><span data-stu-id="a11e2-120">The fragment written is `count` bytes starting at the index `offset` from the supplied `buffer`.</span></span> <span data-ttu-id="a11e2-121">O comportamento será indefinido se o fragmento fornecido não foi capturado usando esta instância de gravador.</span><span class="sxs-lookup"><span data-stu-id="a11e2-121">The behavior is undefined if the supplied fragment was not captured using this writer instance.</span></span>  
  
   
  
## Examples  
  
```  
MemoryStream stream = new MemoryStream();  
MemoryStream fragmentStream = new MemoryStream();  
XmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  
IXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  
if (fragmentWriter == null || !fragmentWriter.CanFragment)  
{  
Console.WriteLine("This writer doesn't support fragments");  
return;  
}  
writer.WriteStartElement("Root");  
fragmentWriter.StartFragment(fragmentStream, false);  
writer.WriteStartElement("Body");  
writer.WriteString("This is my body");  
writer.WriteEndElement();  
fragmentWriter.EndFragment();  
writer.WriteStartElement("CharsInTheBody");  
writer.WriteValue(fragmentStream.Length);  
writer.WriteEndElement();  
fragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  
writer.WriteEndElement(); // Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>