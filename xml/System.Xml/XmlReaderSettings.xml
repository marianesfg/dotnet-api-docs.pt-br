<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="adf00ca7f047d43ff6881b848edebef8034fd9f7" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56402596" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Especifica um conjunto de recursos para dar suporte ao objeto <see cref="T:System.Xml.XmlReader" /> criado pelo método <see cref="Overload:System.Xml.XmlReader.Create" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você usa o <xref:System.Xml.XmlReader.Create%2A> método para obter <xref:System.Xml.XmlReader> instâncias. Esse método usa o <xref:System.Xml.XmlReaderSettings> classe para especificar quais recursos implementar no <xref:System.Xml.XmlReader> cria do objeto.  
  
 Consulte as seções de comentários do <xref:System.Xml.XmlReader> e <xref:System.Xml.XmlReader.Create%2A> páginas para obter informações sobre quais configurações usar para verificações de conformidade, validação e outros cenários comuns de referência. Consulte o <xref:System.Xml.XmlReaderSettings.%23ctor> construtor para obter uma lista das configurações padrão.  
  
## <a name="security-considerations"></a>Considerações sobre segurança  
 Considere o seguinte ao usar o <xref:System.Xml.XmlReaderSettings> classe.  
  
-   Os sinalizadores de validação de <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e de <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> de um objeto de <xref:System.Xml.XmlReaderSettings> não são definidos por padrão. Quando esses sinalizadores são definidos, <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> do objeto de <xref:System.Xml.XmlReaderSettings> é usado para resolver os locais de esquema encontrados no documento de instância em <xref:System.Xml.XmlReader>. Se o <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> objeto está `null`, locais de esquema não são resolvidos mesmo se o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> sinalizadores de validação são definidos.  
  
-   Os esquemas adicionados durante a validação adicionar novos tipos e podem alterar o resultado de validação de documento que está sendo validada. Como resultado, os esquemas externos só devem ser resolvidos de fontes confiáveis.  
  
-   Mensagens de erro de validação podem expor informações confidenciais de modelo de conteúdo. Mensagens de aviso e erro de validação são tratadas usando o <xref:System.Xml.Schema.ValidationEventHandler> delegar ou são expostos como um <xref:System.Xml.Schema.XmlSchemaValidationException> se nenhum manipulador de eventos é fornecido para o <xref:System.Xml.XmlReaderSettings> objeto (avisos de validação não causam uma <xref:System.Xml.Schema.XmlSchemaValidationException> seja lançada). Essas informações de modelo de conteúdo não devem ser expostas em cenários não confiáveis. Mensagens de aviso de validação são suprimidas por padrão e podem ser relatadas, definindo o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> sinalizador.  
  
-   O <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriedade de um <xref:System.Xml.Schema.XmlSchemaValidationException> retorna o caminho URI para o arquivo de esquema que causou a exceção. O <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriedade não deve ser exposta em cenários não confiáveis.  
  
-   Desabilitando o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> sinalizador (habilitada por padrão) é recomendado quando o XML de validação e não confiável, grande documentos em cenários de alta disponibilidade com um esquema com restrições de identidade sobre uma grande parte do documento.  
  
-   os objetos de<xref:System.Xml.XmlReaderSettings> podem conter informações sigilosas como credenciais do usuário. Você deve ser cuidadoso ao armazenar em cachê <xref:System.Xml.XmlReaderSettings> objetos, ou para passar o objeto de <xref:System.Xml.XmlReaderSettings> de um componente para outro.  
  
-   O processamento de DTD é desativado por padrão. Se você habilitar o processamento de DTD, você precisa estar atento incluindo DTDs de fontes não confiáveis e de possíveis ataques de negação de serviço. Use o <xref:System.Xml.XmlSecureResolver> para restringir os recursos que o <xref:System.Xml.XmlReader> pode acessar.  
  
-   Aceitar componentes de suporte, como <xref:System.Xml.NameTable>, <xref:System.Xml.XmlNamespaceManager>, e objetos de <xref:System.Xml.XmlResolver> , de uma fonte não confiável.  
  
-   O uso de memória de um aplicativo que usa <xref:System.Xml.XmlReader> pode ter uma correlação o tamanho do documento XML analisado. Um formulário de ataque de negação de serviço é quando os documentos XML excessivamente grande são enviados para ser analisados. Você pode limitar o tamanho do documento que pode ser analisado definindo a <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> propriedade e, em seguida, limite o número de caracteres resultantes de expanda entidades definindo a <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> propriedade.  
  
   
  
## Examples  
 O exemplo a seguir cria uma <xref:System.Xml.XmlReader> que usa um <xref:System.Xml.XmlUrlResolver> com as credenciais necessárias.  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">Documentos e dados XML</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tabela a seguir mostra os valores de propriedade inicial para uma instância do <xref:System.Xml.XmlReaderSettings>.  
  
|Propriedade|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (não há nenhum limite no número de caracteres resultantes de expanda entidades).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (não há nenhum limite no tamanho do documento XML).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Esta propriedade está obsoleta. Use <xref:System.Xml.XmlTextReader.DtdProcessing%2A> em seu lugar. Se você tivesse definido <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> para seu valor padrão `true` defina <xref:System.Xml.XmlTextReader.DtdProcessing%2A> para `Prohibit`. Se você tivesse definido <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à `false` defina <xref:System.Xml.XmlTextReader.DtdProcessing%2A> para `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Um objeto <xref:System.Xml.Schema.XmlSchemaSet> vazio.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Um novo objeto <xref:System.Xml.XmlUrlResolver>.|  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de configurações que pode ser usado para construir um leitor que retira o espaço em branco insignificante, comentários e instruções de processamento.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">O resolvedor XML.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define se métodos <see cref="T:System.Xml.XmlReader" /> assíncronos podem ser usados em uma determinada instância do <see cref="T:System.Xml.XmlReader" />.</summary>
        <value><see langword="true" /> se métodos assíncronos puderem ser usados; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você deve definir esse valor `true` quando você cria um novo <xref:System.Xml.XmlReader> da instância se você quiser usar assíncrona <xref:System.Xml.XmlReader> métodos nessa instância. Após o <xref:System.Xml.XmlReader> instância é criada, o <xref:System.Xml.XmlReaderSettings.Async%2A> propriedade é somente leitura. O valor padrão dessa propriedade é `false`.  
  
 Esse sinalizador é ignorado pelo <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> de sobrecarga. Isso significa que, se você criar um novo <xref:System.Xml.XmlReader> com base em um existente <xref:System.Xml.XmlReader>, o comportamento assíncrono depende de entrada <xref:System.Xml.XmlReader>, e você não pode usar o <xref:System.Xml.XmlReaderSettings.Async%2A> sinalizador para alterar o comportamento assíncrono.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se a verificação de caracteres deve ser feita ou não.</summary>
        <value><see langword="true" /> para fazer a verificação de caracteres de; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.  
  
 <block subset="none" type="note"><para>  
 Se o <see cref="T:System.Xml.XmlReader" /> está processando dados de texto, ele sempre verifica que o conteúdo de texto e nomes XML são válidos, independentemente da configuração de propriedade. A definição de <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> como <see langword="false" /> desativa a verificação de caracteres em referências de entidade de caracteres.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propriedade instrui o leitor de XML para verificar os caracteres em dados XML que está lendo e lançar um <xref:System.Xml.XmlException> se qualquer caractere está fora do intervalo de caracteres XML legais. Quando a verificação de caractere é ativado, você está assegurado o seguinte:  
  
-   Caracteres estão dentro do intervalo de caracteres XML legais, conforme definido pela [2.2 caracteres](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets) seção recomendação W3C XML 1.0.  
  
-   Todos os nomes XML são válidos, conforme definido pela [2.3 comuns sintática constrói](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) seção recomendação W3C XML 1.0.  
  
 Quando essa propriedade é definida como `true`, que é a configuração padrão, um <xref:System.Xml.XmlException> exceção será lançada se o arquivo XML contém caracteres inválidos ou nomes XML inválidos (por exemplo, um nome de elemento inicia com um número).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma cópia da instância <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
        <returns>O objeto <see cref="T:System.Xml.XmlReaderSettings" /> clonado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clonado <xref:System.Xml.XmlReaderSettings> objeto poderá ser modificado sem afetar as configurações no objeto original.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o fluxo subjacente ou o <see cref="T:System.IO.TextReader" /> deverá ser fechado quando o leitor for fechado.</summary>
        <value><see langword="true" /> para fechar o fluxo subjacente ou <see cref="T:System.IO.TextReader" /> quando o leitor for fechado, caso contrário <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa configuração é usada quando um fluxo ou <xref:System.IO.TextReader> é passado para o <xref:System.Xml.XmlReader.Create%2A> método. Se um fluxo é criado pelo leitor para o seu próprio processamento, como quando o leitor é criado com um URI ou quando ele é aberto um document type definition externo, ela sempre será fechada quando o leitor está fechado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nível de conformidade que o <see cref="T:System.Xml.XmlReader" /> cumprirá.</summary>
        <value>Um dos valores de enumeração que especifica o nível de conformidade que será imposto pelo leitor de XML. O padrão é <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os leitores XML que são criados pelo <xref:System.Xml.XmlReader.Create%2A> método cumprir os seguintes requisitos de conformidade por padrão:  
  
-   Novas linhas e o valor de atributo são normalizados de acordo com o W3C [recomendação XML 1.0](https://www.w3.org/TR/2006/REC-xml-20060816/).  
  
-   Todas as entidades são expandidas automaticamente.  
  
-   Atributos padrões declarados na definição de tipo de documento sempre são adicionados, mesmo quando o leitor não é validado.  
  
-   Declaração de prefixo XML mapeado para o URI de namespace XML correto é permitida.  
  
-   Os nomes de notação em uma única `NotationType` declaração de atributo e `NmTokens` em uma única `Enumeration` declaração de atributo são diferentes.  
  
 Você pode usar o <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> propriedade para verificar e garantir que o fluxo que está sendo lido está em conformidade com as regras para um documento XML bem formado 1,0 ou fragmento de documento. Se os dados não está em conformidade, um <xref:System.Xml.XmlException> exceção é lançada. O padrão é <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (conformidade de nível de documento).  
  
 Os níveis de conformidade três com são:  
  
|Configuração|Descrição|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Garante que os dados XML está de acordo com as regras para um documento XML 1.0 bem-formado. Esse nível de verificação assegura que qualquer processador possa receber o fluxo que está sendo lido como uma [documento XML bem formado 1,0](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed).<br /><br /> As verificações do leitor para o seguinte:<br /><br /> – O item de nível superior não deve ter todos os nós que não sejam declaração XML, definição de tipo de documento (DTD), elemento, comentário, espaço em branco ou instrução de processamento.<br />-Os dados XML devem ter exatamente um nó de elemento de nível superior.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Garante que os dados XML está de acordo com as regras para um fragmento de documento XML 1.0 bem-formado.<br /><br /> Essa configuração aceita dados XML com vários elementos de raiz, ou nós de texto no de nível superior. Esse nível de verificação assegura que qualquer processador possa receber o fluxo que está sendo lido como uma [externo analisado entidade](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities).|  
|<xref:System.Xml.ConformanceLevel.Auto>|Especifica que o leitor deve determinar o nível de verificação de compatibilidade com base nos dados de entrada.<br /><br /> Verificação de compatibilidade do documento é aplicado se os dados XML contêm informações de DTD.<br /><br /> Verificação de compatibilidade de fragmento é aplicado se os dados XML contêm um dos seguintes:<br /><br /> -Nó de referência texto, CDATA ou entidade no nível raiz.<br />-Mais de um elemento no nível raiz.<br />-Nenhum elemento no nível raiz.<br /><br /> <xref:System.Xml.XmlException> é lançada se houver um conflito, como quando há um nó de texto e um DTD no nível raiz.<br /><br /> Esta configuração pode ser usada em envolver cenários quando o método de <xref:System.Xml.XmlReader.Create%2A> é usado para adicionar recursos adicionais a <xref:System.Xml.XmlReader>existente. Nesse caso, <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> não adiciona qualquer novo verificação de conformidade. Verificação de compatibilidade é deixado em <xref:System.Xml.XmlReader> que está sendo empacotado.|  
  
> [!NOTE]
>  A recomendação XML 1,0 requer compatibilidade de um documento nível quando um DTD presente. Portanto, se o leitor está configurado para suportar <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>, mas os dados XML contêm um document type definition (DTD), um <xref:System.Xml.XmlException> é gerada.  
  
 Aqui está como o leitor trata as violações de conformidade específico dependendo da configuração de <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> propriedade:  
  
|Condição|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Um valor tipado ou texto é exibido no nível superior.|<xref:System.Xml.XmlException> será gerada.|Não considerado uma violação para essa configuração.|Não considerado uma violação para essa configuração.|  
|Vários elementos ou nenhum elemento aparecer no nível superior.|<xref:System.Xml.XmlException> será gerada.|Não considerado uma violação para essa configuração.|Não considerado uma violação para essa configuração.|  
|Item de nível superior é o espaço em branco.|Não considerado uma violação para essa configuração.|Não considerado uma violação para essa configuração.|Não considerado uma violação para essa configuração.|  
|Item de nível superior é um atributo (reconhecido como um nó de texto).|<xref:System.Xml.XmlException> será gerada.|Não considerado uma violação para essa configuração.|Não considerado uma violação para essa configuração.|  
|Várias, nós contíguos de texto for encontrado.|Não considerado uma violação para essa configuração.|Não considerado uma violação para essa configuração.|Não considerado uma violação para essa configuração.|  
|O mesmo prefixo de namespace é declarado duas vezes no mesmo escopo local.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|  
|O namespace em um elemento ou atributo não existe no escopo local.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|  
|Os dados contêm uma incompatibilidade de namespace de prefixo.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|  
|`xml:space` atributo contém um valor inválido.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|  
|Um nome inválido é localizado.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|  
|O `xml` prefixo não é correspondente ao http://www.w3.org/XML/1998/namespace URI.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|<xref:System.Xml.XmlException> será gerada.|  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.Xml.XmlReader> objeto que lê um fragmento XML.  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que determina o processamento de DTDs.</summary>
        <value>Um dos valores de enumeração que determina o processamento de DTDs. O padrão é <see cref="F:System.Xml.DtdProcessing.Prohibit" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Validação de DTD (definição) de tipo de documento é implementada usando as restrições de validade definidas no W3C [Extensible Markup Language (XML) 1.0 (quarta edição) recomendação](https://www.w3.org/TR/2006/REC-xml-20060816/). Os DTDs usam uma gramática formal para descrever a estrutura e sintaxe dos documentos XML em conformidade. eles especificam o conteúdo e os valores permitidos para o documento XML.  
  
 Essa propriedade pode ter um dos seguintes valores:  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> Para habilitar o processamento de DTD.  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> para lançar um <xref:System.Xml.XmlException> exceção quando um DTD for encontrado.  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> Para desabilitar o processamento sem avisos ou exceções de DTD.  
  
 Para executar a validação em um DTD, o <xref:System.Xml.XmlReader> usa o DTD definida na declaração DOCTYPE de um documento XML. A declaração DOCTYPE pode apontar para um DTD embutido ou pode ser uma referência a um arquivo DTD externo. Para validar um arquivo XML em um DTD:  
  
-   Defina a propriedade <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> como `DtdProcessing.Parse.`  
  
-   Defina a propriedade <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> como `ValidationType.DTD`.  
  
-   Se o DTD é um arquivo externo armazenado em um recurso de rede que requer autenticação, passe um objeto <xref:System.Xml.XmlResolver> com as credenciais necessárias para o método <xref:System.Xml.XmlReader.Create%2A>.  
  
> [!IMPORTANT]
>  Se o <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> estiver definida como <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, o <xref:System.Xml.XmlReader> não relatará os DTDs. Isso significa que o DTD/DOCTYPE será perdido na saída.  
  
   
  
## Examples  
 O exemplo a seguir valida um arquivo XML usando um arquivo DTD.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>Entrada  
 O exemplo usa o arquivo `itemDTD.xml` como entrada.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se os comentários devem ser ignorados.</summary>
        <value><see langword="true" /> para ignorar comentários, caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Definir essa propriedade como `true` pode resultar em vários nós contíguos de texto que está sendo retornados do leitor. Isso não afeta a validação.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de configurações que pode ser usado para construir um leitor que retira o espaço em branco insignificante, comentários e instruções de processamento.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se as instruções de processamento devem ser ignoradas.</summary>
        <value><see langword="true" /> para ignorar as instruções de processamento; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Definir essa propriedade como `true` pode resultar em vários nós contíguos de texto que está sendo retornados do leitor. Isso não afeta a validação.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de configurações que pode ser usado para construir um leitor que retira o espaço em branco insignificante, comentários e instruções de processamento.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se os espaços em branco insignificantes devem ser ignorados.</summary>
        <value><see langword="true" /> para ignorar espaços em branco; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Espaço em branco que não é considerado ser significativo inclui espaços, tabulações e usadas para separar a marcação para facilitar a leitura maior de linhas em branco. Um exemplo disso é o espaço em branco no conteúdo do elemento.  
  
 A configuração dessa propriedade não afeta o espaço em branco entre marcação em um modo de conteúdo misto ou espaço em branco que ocorre dentro do escopo de um `xml:space='preserve'` atributo.  
  
   
  
## Examples  
 O exemplo a seguir cria um objeto de configurações que pode ser usado para construir um leitor que retira o espaço em branco insignificante, comentários e instruções de processamento.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o deslocamento do número de linha do objeto <see cref="T:System.Xml.XmlReader" />.</summary>
        <value>O deslocamento do número de linha. O padrão é 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A> determina o ponto em que o <xref:System.Xml.IXmlLineInfo.LineNumber%2A> propriedade inicia a contagem. Isso é útil se os dados XML são incorporados em um documento maior. Por exemplo, se seus dados XML foram inseridos em um documento maior e seus dados iniciada na linha 101 do documento, você talvez queira especificar que o leitor inicial na linha 100. Portanto, se o leitor emitiu uma exceção ao analisar a primeira linha do XML, ele seria relatar o número de linha como linha 101, em vez da linha 1.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o deslocamento da posição de linha do objeto <see cref="T:System.Xml.XmlReader" />.</summary>
        <value>O deslocamento de posição de linha. O padrão é 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A> determina o ponto em que o <xref:System.Xml.IXmlLineInfo.LinePosition%2A> propriedade inicia a contagem. Isso é útil se os dados XML são incorporados em um documento maior e não há nenhuma nova linha no início do XML. Nesse caso, se o leitor de lançar uma exceção ao analisar o XML, você deseja retornar a posição da linha em relação ao documento principal, não apenas em relação ao fragmento XML.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica o número máximo permitido de caracteres em um documento resultante da expansão de entidades.</summary>
        <value>O número máximo permitido de caracteres de entidades expandidas. O padrão é 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um valor zero (0) significa que não há limite para o número de caracteres resultantes de expanda entidades. Um valor diferente de zero especifica o número máximo de caracteres que podem resultar da expansão de entidades.  
  
 Se o leitor tentará ler um documento que contém entidades, de modo que o tamanho expandido excederá a essa propriedade, um <xref:System.Xml.XmlException> será lançada.  
  
 Essa propriedade permite que você a reduzir ataques negação de serviço em que o invasor envia documentos XML que tentarem exceder os limites de memória por meio de expansão de entidades. Limitando os caracteres que resultam de entidades expandidas, é possível detectar o ataque e recuperar de forma confiável.  
  
   
  
## Examples  
 O código a seguir define essa propriedade e, em seguida, tenta analisar um documento que contém uma entidade que se expande para um tamanho maior que o limite definido. Em um cenário do mundo real, você definiria esse limite como um valor grande o suficiente para lidar com os documentos válidos, ainda pequeno o suficiente para limitar a ameaça de documentos mal-intencionado.  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Este exemplo gera a seguinte saída:  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica o número máximo permitido de caracteres em um documento XML. Um valor zero (0) significa que não há limite para o tamanho do documento XML. Um valor diferente de zero especifica o tamanho máximo, em caracteres.</summary>
        <value>O número máximo permitido de caracteres em um documento XML. O padrão é 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um valor zero (0) significa que não há limite para o número de caracteres no documento analisado. Um valor diferente de zero especifica o número máximo de caracteres que pode ser analisado.  
  
 O número de máximo de caracteres para o documento inclui a contagem de caracteres resultantes de entidades expandidas.  
  
 Se o leitor tenta ler um documento com um tamanho que exceda essa propriedade, um <xref:System.Xml.XmlException> será lançada.  
  
 Essa propriedade permite que você a reduzir ataques negação de serviço em que o invasor envia documentos XML muito grandes. Limitando o tamanho de um documento, você pode detectar o ataque e recuperar de forma confiável.  
  
   
  
## Examples  
 O código a seguir define essa propriedade e, em seguida, tenta analisar um documento maior que o limite. Em um cenário do mundo real, você definiria esse limite como um valor grande o suficiente para lidar com os documentos válidos, ainda pequeno o suficiente para limitar a ameaça de documentos mal-intencionado.  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Esse código gera a seguinte saída:  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Xml.XmlNameTable" /> usado para comparações de cadeia de caracteres atomizadas.</summary>
        <value>O <see cref="T:System.Xml.XmlNameTable" /> que armazena todos os as cadeias de caracteres atomizadas usadas por todos os <see cref="T:System.Xml.XmlReader" /> instâncias criadas usando esse <see cref="T:System.Xml.XmlReaderSettings" /> objeto.  
  
O padrão é <see langword="null" />. Criado <see cref="T:System.Xml.XmlReader" /> instância usará um novo vazio <see cref="T:System.Xml.NameTable" /> se esse valor for <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Defina essa propriedade como uma <xref:System.Xml.XmlNameTable> da instância se você quiser compartilhar uma tabela de nome comum entre todos os criado <xref:System.Xml.XmlReader> instâncias.  
  
> [!NOTE]
>  O <xref:System.Xml.NameTable> classe não é thread-safe. Portanto, não pode ser compartilhado entre <xref:System.Xml.XmlReader> objetos que são executados simultaneamente em threads diferentes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o processamento de DTD (definição de tipo de documento) deve ser proibido. Esta propriedade está obsoleta. Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> em seu lugar.</summary>
        <value><see langword="true" /> para proibir o processamento de DTD; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando definido como `true`, o <xref:System.Xml.XmlReader> lança um <xref:System.Xml.XmlException> quando qualquer conteúdo DTD for encontrado. Não habilite o processamento de DTD se você estiver preocupado sobre problemas de negação de serviço ou se você está tratando as fontes não confiáveis.  
  
 Se você tiver o processamento de DTD ativado, você pode usar <xref:System.Xml.XmlSecureResolver> para restringir os recursos que <xref:System.Xml.XmlReader> pode acessar. Você também pode criar seu aplicativo para que processar XML é memória e hora restritos. Por exemplo, configurar limites de tempo limite no seu aplicativo ASP.NET.  
  
 Esta propriedade está obsoleta. Use <xref:System.Xml.XmlTextReader.DtdProcessing%2A> em seu lugar. Se você tivesse definido <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> para seu valor padrão `true` defina <xref:System.Xml.XmlTextReader.DtdProcessing%2A> para `Prohibit`. Se você tivesse definido <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à `false` defina <xref:System.Xml.XmlTextReader.DtdProcessing%2A> para `Parse`.  
  
   
  
## Examples  
 O exemplo a seguir valida os dados usando uma DTD.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 O exemplo usa o arquivo itemDTD.xml como entrada.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redefine os membros da classe de configurações para seus valores padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tabela a seguir mostra os valores de propriedade inicial para uma instância do <xref:System.Xml.XmlReaderSettings>.  
  
|Propriedade|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (não há nenhum limite no número de caracteres resultantes de expanda entidades).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (não há nenhum limite no tamanho do documento XML).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Esta propriedade está obsoleta. Use <xref:System.Xml.XmlTextReader.DtdProcessing%2A> em seu lugar. Se você tivesse definido <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> para seu valor padrão `true` defina <xref:System.Xml.XmlTextReader.DtdProcessing%2A> para `Prohibit`. Se você tivesse definido <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à `false` defina <xref:System.Xml.XmlTextReader.DtdProcessing%2A> para `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Um objeto <xref:System.Xml.Schema.XmlSchemaSet> vazio.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Um novo objeto <xref:System.Xml.XmlUrlResolver>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Xml.Schema.XmlSchemaSet" /> a ser usado ao executar a validação de esquema.</summary>
        <value>O <see cref="T:System.Xml.Schema.XmlSchemaSet" /> a ser usado ao executar a validação de esquema. O padrão é um objeto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vazio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   Não use esquemas de fontes desconhecidas ou não confiáveis ou locais. Ao fazer isso comprometerá a segurança do seu código.  
> -   Esquemas XML (incluindo esquemas in-line) são inerentemente vulneráveis a ataques negação de serviço; não aceitá-los em cenários não confiáveis.  
> -   Exceções e mensagens de erro de validação de esquema podem expor informações confidenciais sobre o modelo de conteúdo ou os caminhos URI para o arquivo de esquema. Tenha cuidado para não expor essas informações para os chamadores não confiáveis.  
> -   Para obter mais informações, consulte a seção "Considerações sobre segurança".  
  
 O <xref:System.Xml.Schema.XmlSchemaSet> classe só dá suporte a esquemas XSD (linguagem) de definição de esquema XML. <xref:System.Xml.XmlReader> instâncias criadas pelo <xref:System.Xml.XmlReader.Create%2A> método não pode ser configurado para habilitar a validação de esquema XML-Data Reduced (XDR).  
  
## <a name="security-considerations"></a>Considerações sobre segurança  
  
-   Não use esquemas de fontes desconhecidas ou não confiáveis. Ao fazer isso comprometerá a segurança do seu código. O <xref:System.Xml.XmlUrlResolver> classe é usada para resolver esquemas externos, por padrão. Para desabilitar a resolução de inclusão, importação e redefina os elementos de um esquema, defina as <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> propriedade para `null`.  
  
-   As exceções geradas como resultado do uso de <xref:System.Xml.Schema.XmlSchemaSet> classe, como o <xref:System.Xml.Schema.XmlSchemaException> classe pode conter informações confidenciais que não devem ser expostas em cenários não confiáveis. Por exemplo, o <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriedade de um <xref:System.Xml.Schema.XmlSchemaException> retorna o caminho URI para o arquivo de esquema que causou a exceção. O <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriedade não deve ser exposta em cenários não confiáveis. As exceções devem ser manipuladas corretamente para que essas informações confidenciais não são expostas em cenários não confiáveis.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlReaderSettings> objeto e o <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> método para associar um esquema de um documento XML. O esquema é adicionado para o <xref:System.Xml.XmlReaderSettings.Schemas%2A> propriedade do <xref:System.Xml.XmlReaderSettings> objeto. O valor de <xref:System.Xml.XmlReaderSettings.Schemas%2A> propriedade é um <xref:System.Xml.Schema.XmlSchemaSet> objeto. O esquema é usado para validar que o documento XML está de acordo com o modelo de conteúdo do esquema. Erros de validação de esquema e os avisos são tratados pelo <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> definido no <xref:System.Xml.XmlReaderSettings> objeto.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 O exemplo usa o arquivo de Books. XML como entrada.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 O exemplo usa o arquivo de Books. xsd como entrada.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o leitor encontra erros de validação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esses eventos ocorrem durante a leitura de um documento de instância XML se o <xref:System.Xml.XmlReaderSettings.ValidationType%2A> está definida como <xref:System.Xml.ValidationType.DTD> ou <xref:System.Xml.ValidationType.Schema>. Se o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> configuração estiver habilitada no <xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> esses eventos também ocorrem quando forem encontrados quaisquer avisos de validação de propriedade.  
  
 Se o leitor estiver configurado para validação e nenhum manipulador de eventos de validação tiver sido definido, um <xref:System.Xml.Schema.XmlSchemaValidationException> é lançada para todos os erros de validação. (Avisos de validação não causam uma <xref:System.Xml.Schema.XmlSchemaValidationException> seja lançada).  
  
> [!IMPORTANT]
>  Mensagens de erro de validação podem expor informações confidenciais de modelo de conteúdo. Mensagens de aviso e erro de validação são tratadas usando o <xref:System.Xml.Schema.ValidationEventHandler> delegar ou são expostos como um <xref:System.Xml.Schema.XmlSchemaValidationException> se nenhum manipulador de eventos é fornecido para o <xref:System.Xml.XmlReaderSettings> objeto (avisos de validação não causam uma <xref:System.Xml.Schema.XmlSchemaValidationException> seja lançada). Essas informações de modelo de conteúdo não devem ser expostas em cenários não confiáveis. Mensagens de aviso de validação são suprimidas por padrão e podem ser relatadas, definindo o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> sinalizador.  
>   
>  O <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriedade de um <xref:System.Xml.Schema.XmlSchemaValidationException> retorna o caminho URI para o arquivo de esquema que causou a exceção. O <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriedade não deve ser exposta em cenários não confiáveis.  
  
   
  
## Examples  
 O exemplo a seguir mostra as configurações para especificar para criar um leitor que valida usando um esquema embutido e que também exibe avisos de validação. O manipulador de eventos de validação usa o <xref:System.Xml.Schema.XmlSeverityType> enumeração para diferenciar entre os erros e avisos.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica as configurações de validação de esquema. Essa configuração aplica-se a objetos <see cref="T:System.Xml.XmlReader" /> que validam esquemas (a propriedade <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> definida como <see langword="ValidationType.Schema" />).</summary>
        <value>Uma combinação bit a bit dos valores de enumeração que especifica as opções de validação. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> e <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> são habilitadas por padrão. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> e <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> são desabilitados por padrão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Os sinalizadores de validação de <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e de <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> de um objeto de <xref:System.Xml.XmlReaderSettings> não são definidos por padrão. Quando esses sinalizadores são definidos, <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> do objeto de <xref:System.Xml.XmlReaderSettings> é usado para resolver os locais de esquema encontrados no documento de instância em <xref:System.Xml.XmlReader>. Se o <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> objeto está `null`, locais de esquema não são resolvidos mesmo se o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> sinalizadores de validação são definidos.  
>   
>  Os esquemas adicionados durante a validação adicionar novos tipos e podem alterar o resultado de validação de documento que está sendo validada. Como resultado, os esquemas externos só devem ser resolvidos de fontes confiáveis.  
>   
>  Desabilitando o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> sinalizador (habilitada por padrão) é recomendado quando o XML de validação e não confiável, grande documentos em cenários de alta disponibilidade com um esquema com restrições de identidade sobre uma grande parte do documento.  
  
   
  
## Examples  
 O exemplo a seguir valida um arquivo XML em relação a um esquema XML embutido, habilitando o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> configuração. O leitor de XML está configurado para exibir avisos de validação, sp você também vê o aviso esperado no elemento raiz.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>Entrada  
 O exemplo usa o arquivo inlineSchema.xml como entrada.  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>Saída  
 Aviso:   Esquema correspondente não encontrado. Nenhuma validação. Não foi possível encontrar informações sobre o elemento 'root'.  
  
 Erro de validação:   O elemento 'xsdheadcount: HeadCount' tem um elemento filho inválido 'division'. 'ID' esperado.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o <see cref="T:System.Xml.XmlReader" /> executará a validação ou digitará a atribuição durante a leitura.</summary>
        <value>Um dos valores <see cref="T:System.Xml.ValidationType" /> que indica se o XmlReader executará a validação ou digitará atribuição durante a leitura. O padrão é <see langword="ValidationType.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tabela a seguir descreve o <xref:System.Xml.ValidationType> valores.  
  
> [!NOTE]
>  O <xref:System.Xml.ValidationType.Auto> e <xref:System.Xml.ValidationType.XDR> valores de enumeração estão obsoletos no .NET Framework versão 2.0.  
  
|ValidationType|Descrição|  
|--------------------|-----------------|  
|`DTD`|Validação é executada usando um document type definition (DTD). **Observação:**  O <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> propriedade também deve ser definida como <xref:System.Xml.DtdProcessing.Parse>.|  
|`None`|O <xref:System.Xml.XmlReader> não validar os dados ou executar qualquer tipo de atribuição.|  
|`Schema`|Validação e o tipo de atribuição é executada usando um esquema XSD (linguagem) de definição de esquema XML. O leitor acessa o esquema XML usando o seguinte:<br /><br /> -Usa a <xref:System.Xml.XmlReaderSettings.Schemas%2A> propriedade para acessar o <xref:System.Xml.Schema.XmlSchemaSet> objeto associado a este leitor.<br />– Usa o esquema embutido contido no documento de instância XML. (O <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> opção deve ser habilitada.)<br />-Usa o esquema de XML especificado por dicas de localização de esquema (`xsi:schemaLocation` ou `xsi:noNamespaceSchemaLocation` atributo) encontrado no documento de instância XML. (O <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> opção deve ser habilitada.)|  
  
   
  
## Examples  
 O exemplo a seguir valida usando um esquema armazenado no <xref:System.Xml.Schema.XmlSchemaSet>.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 O exemplo usa os seguintes arquivos de entrada:  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Define o <see cref="T:System.Xml.XmlResolver" /> usado para acessar documentos externos.</summary>
        <value>Um <see cref="T:System.Xml.XmlResolver" /> usado para acessar documentos externos. Se definido como <see langword="null" />, uma <see cref="T:System.Xml.XmlException" /> é gerada quando o <see cref="T:System.Xml.XmlReader" /> tenta acessar um recurso externo. O padrão é um novo <see cref="T:System.Xml.XmlUrlResolver" /> sem credenciais.  Começando com o .NET Framework 4.5.2, essa configuração tem um valor padrão de <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Xml.XmlResolver> é usado para localizar e abrir um documento de instância XML, ou para localizar e abrir todos os recursos externos referenciados pelo documento de instância XML. Isso pode incluir entidades, DTD ou esquemas. O <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> propriedade pode ser usada para especificar as credenciais necessárias para autenticação de rede.  
  
> [!IMPORTANT]
>  Porque o <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> podem conter informações sigilosas como credenciais do usuário, você deve ter cuidado ao armazenar em cache <xref:System.Xml.XmlReaderSettings> objetos, ou ao passar o <xref:System.Xml.XmlReaderSettings> objeto de um componente para outro.  
>   
>  Um <xref:System.Xml.XmlSecureResolver> pode ser usado para acessar documentos externos. O <xref:System.Xml.XmlSecureResolver> classe ajuda a proteger outra implementação de <xref:System.Xml.XmlResolver> encapsulando a <xref:System.Xml.XmlResolver> objeto e restringir os recursos que subjacente <xref:System.Xml.XmlResolver> tem acesso ao.  
>   
>  Os sinalizadores de validação de <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e de <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> de um objeto de <xref:System.Xml.XmlReaderSettings> não são definidos por padrão. Quando esses sinalizadores são definidos, <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> do objeto de <xref:System.Xml.XmlReaderSettings> é usado para resolver os locais de esquema encontrados no documento de instância em <xref:System.Xml.XmlReader>. Se o <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> objeto está `null`, locais de esquema não são resolvidos mesmo se o <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> sinalizadores de validação são definidos.  
>   
>  Os esquemas adicionados durante a validação adicionar novos tipos e podem alterar o resultado de validação de documento que está sendo validada. Como resultado, os esquemas externos só devem ser resolvidos de fontes confiáveis.  
  
   
  
## Examples  
 O exemplo a seguir cria uma <xref:System.Xml.XmlReader> que usa um <xref:System.Xml.XmlSecureResolver> com credenciais padrão.  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>