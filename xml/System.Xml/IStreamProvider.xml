<Type Name="IStreamProvider" FullName="System.Xml.IStreamProvider">
  <TypeSignature Language="C#" Value="public interface IStreamProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStreamProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IStreamProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStreamProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStreamProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9c6cb-101">Representa uma interface que pode ser implementada pelas classes que fornecem fluxos.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-101">Represents an interface that can be implemented by classes providing streams.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c6cb-102">Ao escrever uma mensagem de saída que contém um corpo transmitido para um gravador XML, o <xref:System.ServiceModel.Channels.Message> usará uma sequência de chamadas semelhantes à seguinte na sua <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> implementação:</span><span class="sxs-lookup"><span data-stu-id="9c6cb-102">When writing an outgoing message containing a streamed body to an XML writer, the <xref:System.ServiceModel.Channels.Message> will use a sequence of calls similar to the following in its <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> implementation:</span></span>  
  
-   <span data-ttu-id="9c6cb-103">Grave todas as informações necessárias antes do fluxo (por exemplo, a marca de abertura XML).</span><span class="sxs-lookup"><span data-stu-id="9c6cb-103">Write any necessary information preceding the stream (For example, the opening XML tag).</span></span>  
  
-   <span data-ttu-id="9c6cb-104">O fluxo de gravação.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-104">Write the stream.</span></span>  
  
-   <span data-ttu-id="9c6cb-105">Grave todas as informações a seguir o fluxo (por exemplo, o marca XML de fechamento).</span><span class="sxs-lookup"><span data-stu-id="9c6cb-105">Write any information following the stream (For example, the closing XML tag).</span></span>  
  
 <span data-ttu-id="9c6cb-106">Isso funciona bem com codificações que são semelhantes a codificação XML textual.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-106">This works well with encodings that are similar to the textual XML encoding.</span></span> <span data-ttu-id="9c6cb-107">No entanto, há algumas codificações que não colocar informações de infoset XML (por exemplo, marcas de início e término elementos XML) junto com os dados contidos em elementos.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-107">However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</span></span> <span data-ttu-id="9c6cb-108">Por exemplo, a codificação de MTOM, a mensagem é dividida em várias partes.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-108">For example, in the MTOM encoding, the message is split into multiple parts.</span></span> <span data-ttu-id="9c6cb-109">Uma parte contém infoset XML, que pode conter referências a outras partes do conteúdo de elemento real.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-109">One part contains the XML infoset, which may contain references to other parts for actual element contents.</span></span> <span data-ttu-id="9c6cb-110">Como o XML infoset normalmente será pequeno comparado ao conteúdo em fluxo, faz sentido infoset de buffer, grave-o e, em seguida, gravar o conteúdo de uma maneira em fluxo.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-110">Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</span></span> <span data-ttu-id="9c6cb-111">Isso significa que, no momento o fechamento marca do elemento é gravada, podemos deve não ter é gravado o fluxo ainda.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-111">This means that by the time the closing element tag is written, we should not have written out the stream yet.</span></span>  
  
 <span data-ttu-id="9c6cb-112">Para essa finalidade, o <xref:System.Xml.IStreamProvider> interface é usada.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-112">For this purpose, the <xref:System.Xml.IStreamProvider> interface is used.</span></span> <span data-ttu-id="9c6cb-113">A interface tiver um <xref:System.Xml.IStreamProvider.GetStream> método que retorna o fluxo a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-113">The interface has a <xref:System.Xml.IStreamProvider.GetStream> method that returns the stream to be written.</span></span> <span data-ttu-id="9c6cb-114">A maneira correta de gravar um corpo de mensagem transmitida em <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> é o seguinte:</span><span class="sxs-lookup"><span data-stu-id="9c6cb-114">The correct way to write out a streamed message body in <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> is as follows:</span></span>  
  
-   <span data-ttu-id="9c6cb-115">Gravar todas as informações necessárias antes do fluxo (por exemplo, a marca de abertura XML)</span><span class="sxs-lookup"><span data-stu-id="9c6cb-115">Write any necessary information preceding the stream (For example, the opening XML tag)</span></span>  
  
-   <span data-ttu-id="9c6cb-116">Chamar o `WriteValue` de sobrecarga no <xref:System.Xml.XmlDictionaryWriter> que leva um <xref:System.Xml.IStreamProvider>, com um `IStreamProvider` implementação que retorna o fluxo a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-116">Call the `WriteValue` overload on the <xref:System.Xml.XmlDictionaryWriter> that takes an <xref:System.Xml.IStreamProvider>, with an `IStreamProvider` implementation that returns the stream to be written.</span></span>  
  
-   <span data-ttu-id="9c6cb-117">Gravar todas as informações a seguir o fluxo (por exemplo, a marca de fechamento XML)</span><span class="sxs-lookup"><span data-stu-id="9c6cb-117">Write any information following the stream (For example, the closing XML tag)</span></span>  
  
 <span data-ttu-id="9c6cb-118">Com essa abordagem, o gravador de XML tem uma opção de quando chamar <xref:System.Xml.IStreamProvider.GetStream> e gravar os dados transmitidos.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-118">With this approach, the XML writer has a choice of when to call <xref:System.Xml.IStreamProvider.GetStream> and write out the streamed data.</span></span> <span data-ttu-id="9c6cb-119">Por exemplo, os gravadores XML binários e textuais irá chamá-lo imediatamente e gravar o conteúdo em fluxo entre as marcas de início e término.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-119">For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</span></span> <span data-ttu-id="9c6cb-120">O gravador MTOM pode optar por chamar <xref:System.Xml.IStreamProvider.GetStream> posteriormente, quando estiver pronto para gravar a parte apropriada da mensagem.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-120">The MTOM writer may decide to call <xref:System.Xml.IStreamProvider.GetStream> later, when it is ready to write the appropriate part of the message.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9c6cb-121">Obtém um fluxo.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-121">Gets a stream.</span></span></summary>
        <returns><span data-ttu-id="9c6cb-122">Um objeto <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-122">A <see cref="T:System.IO.Stream" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c6cb-123">Esse método pode ser usado para retornar o fluxo a ser gravado.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-123">This method can be used to return the stream to be written.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseStream">
      <MemberSignature Language="C#" Value="public void ReleaseStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseStream(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9c6cb-124">O fluxo que está sendo liberado.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-124">The stream being released.</span></span></param>
        <summary><span data-ttu-id="9c6cb-125">Libera um fluxo para a saída.</span><span class="sxs-lookup"><span data-stu-id="9c6cb-125">Releases a stream to output.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>