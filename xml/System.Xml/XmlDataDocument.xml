<Type Name="XmlDataDocument" FullName="System.Xml.XmlDataDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="04468dfdaffe0651a1c8a5d299f43addee6d2261" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48606996" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlDataDocument : System.Xml.XmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataDocument extends System.Xml.XmlDocument" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlDataDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataDocument&#xA;Inherits XmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataDocument : System::Xml::XmlDocument" />
  <TypeSignature Language="F#" Value="type XmlDataDocument = class&#xA;    inherit XmlDocument" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlDocument</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Obsolete("XmlDataDocument class will be removed in a future release.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite que os dados estruturados sejam armazenados, recuperados e manipulados por meio de um <see cref="T:System.Data.DataSet" /> relacional.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe estende <xref:System.Xml.XmlDocument>. Ele permite que você carregue dados relacionais ou dados XML e manipular esses dados usando o modelo de objeto de documento (DOM) o World Wide Web Consortium (W3C). O DOM apresenta os dados como uma hierarquia de objetos de nó. Porque `XmlDataDocument` implementa o <xref:System.Xml.XPath.IXPathNavigable> interface, ele também pode ser usado como o documento de origem para o <xref:System.Xml.Xsl.XslTransform> classe.  
  
 `XmlDataDocument` tem uma fechamento afiliação com o `DataSet` classe, que fornece uma exibição relacional dos dados XML carregados. Todas as alterações feitas a `XmlDataDocument` são refletidas no `DataSet` e vice-versa.  
  
 Para carregar uma `DataSet` com dados XML, use <xref:System.Data.DataSet.ReadXmlSchema%2A> para criar um mapeamento relacional. Os dados XML podem então ser carregados usando <xref:System.Xml.XmlDataDocument.Load%2A> ou <xref:System.Xml.XmlDocument.LoadXml%2A>.  
  
 Para carregar dados relacionais, especifique o `DataSet` que contém os dados relacionais, como o parâmetro no <xref:System.Xml.XmlDataDocument.%23ctor%2A> construtor.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.XmlDataDocument" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.XmlDataDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vazio <xref:System.Data.DataSet> é criado e associado com o `XmlDataDocument`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataDocument (System.Data.DataSet dataset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.DataSet dataset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataDocument(System::Data::DataSet ^ dataset);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlDataDocument : System.Data.DataSet -&gt; System.Xml.XmlDataDocument" Usage="new System.Xml.XmlDataDocument dataset" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataset" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataset">O <see langword="DataSet" /> a ser carregado no <see langword="XmlDataDocument" />.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.XmlDataDocument" /> com o <see cref="T:System.Data.DataSet" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `XmlDataDocument` é sincronizado com o `DataSet`. Todos os dados na `DataSet` fica imediatamente disponível por meio de `XmlDataDocument`. Todas as alterações na `DataSet` são propagadas no `XmlDataDocument`. As alterações feitas na `XmlDataDocument`, desde que eles correspondem a `DataSet` esquema, são propagadas no `DataSet`.  
  
   
  
## Examples  
 O exemplo a seguir carrega uma tabela de cliente em um `XmlDataDocument`.  
  
 O exemplo usa o banco de dados Northwind do SQL Server 2000.  
  
 [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlConnection" />
        <altmember cref="T:System.Data.SqlClient.SqlDataAdapter" />
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlNode ^ CloneNode(bool deep);" />
      <MemberSignature Language="F#" Value="abstract member CloneNode : bool -&gt; System.Xml.XmlNode&#xA;override this.CloneNode : bool -&gt; System.Xml.XmlNode" Usage="xmlDataDocument.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">
          <see langword="true" /> para recursivamente clonar a subárvore abaixo do nó especificado; <see langword="false" /> para clonar apenas o próprio nó.</param>
        <summary>Cria uma duplicata do nó atual.</summary>
        <returns>O nó clonado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clonagem de `XmlDataDocument` também clona o <xref:System.Data.DataSet> esquema.  
  
 Se `deep` é definido como `false`, clonado `DataSet` tem nenhum dado; que é, nenhuma linha.  
  
 Se `deep` é definido como `true`, clonado `DataSet` é definido com o esquema e, em seguida, preenchido com os dados.  
  
 Ver <xref:System.Xml.XmlNode.CloneNode%2A> no `XmlNode` classe para ver uma tabela que descreve como esse método se comporta com cada um dos tipos de nó diferente.  
  
   
  
## Examples  
 O exemplo a seguir carrega um `DataSet` em um `XmlDataDocument` e, em seguida, cria um clone superficial do `XmlDataDocument`.  
  
 O exemplo usa o banco de dados Northwind do SQL Server 2000.  
  
 [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement CreateElement(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateElement (prefix As String, localName As String, namespaceURI As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlElement ^ CreateElement(System::String ^ prefix, System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member CreateElement : string * string * string -&gt; System.Xml.XmlElement&#xA;override this.CreateElement : string * string * string -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.CreateElement (prefix, localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do novo elemento. Se String.Empty ou <see langword="null" />, não há nenhum prefixo.</param>
        <param name="localName">O nome local do novo elemento.</param>
        <param name="namespaceURI">O URI (Uniform Resource Identifier) do namespace do novo elemento. Se String.Empty ou <see langword="null" />, não há nenhum namespaceURI.</param>
        <summary>Cria um elemento com <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> e <see cref="P:System.Xml.XmlNode.NamespaceURI" /> especificados.</summary>
        <returns>Um novo <see cref="T:System.Xml.XmlElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Note to Inheritors` Se você sobrecarregar essa função, ele não pode ser usado para extensibilidade. Em vez disso, você pode retornar um elemento criado pela classe base, nesse caso, `XmlDataDocument`. Consulte o exemplo a seguir.  
  
```csharp  
class MyXmlDataDocument : XmlDataDocument {  
 public override XmlElement CreateElement(string prefix, string localName, string nsURI) {  
   //Ensure we are returning the base class implementation of element.  
   XmlElement e = base.CreateElement(prefix, localName, nsURI);  
   //Add additional code here.  
   return e;    //Return the element created by XmlDataDocument.  
 }      
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEntityReference">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlEntityReference CreateEntityReference (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlEntityReference CreateEntityReference(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateEntityReference (name As String) As XmlEntityReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlEntityReference ^ CreateEntityReference(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member CreateEntityReference : string -&gt; System.Xml.XmlEntityReference&#xA;override this.CreateEntityReference : string -&gt; System.Xml.XmlEntityReference" Usage="xmlDataDocument.CreateEntityReference name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlEntityReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome da referência da entidade.</param>
        <summary>Cria um <see cref="T:System.Xml.XmlEntityReference" /> com o nome especificado.</summary>
        <returns>Um <see cref="T:System.Xml.XmlEntityReference" /> com o nome especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlEntityReference> nós não podem ser criados para <xref:System.Xml.XmlDataDocument> objetos. Chamar esse método gerará uma exceção.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Chamar esse método.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator(class System.Xml.XmlNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateNavigator (node As XmlNode) As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Xml::XPath::XPathNavigator ^ CreateNavigator(System::Xml::XmlNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member CreateNavigator : System.Xml.XmlNode -&gt; System.Xml.XPath.XPathNavigator&#xA;override this.CreateNavigator : System.Xml.XmlNode -&gt; System.Xml.XPath.XPathNavigator" Usage="xmlDataDocument.CreateNavigator node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="node">O <see cref="T:System.Xml.XmlNode" /> no qual você deseja que o navegador seja inicialmente posicionado.</param>
        <summary>Cria um novo objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> para navegar nesse documento. O <see langword="XPathNavigator" /> é posicionado no nó especificado no parâmetro <paramref name="node" />.</summary>
        <returns>Um <see langword="XPathNavigator" /> usado para navegar pelo documento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `XPathNavigator` fornece acesso aleatório, somente leitura aos dados. Porque é otimizado para transformações XSLT, ele fornece benefícios de desempenho quando usado como um mecanismo de entrada para o <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
   
  
## Examples  
 Para ver uma transformação XSLT usando `XmlDataDocument` e uma `XPathNavigator`, consulte o <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XslTransform" />
      </Docs>
    </Member>
    <Member MemberName="DataSet">
      <MemberSignature Language="C#" Value="public System.Data.DataSet DataSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataSet DataSet" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDataDocument.DataSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSet As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSet ^ DataSet { System::Data::DataSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSet : System.Data.DataSet" Usage="System.Xml.XmlDataDocument.DataSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um <see cref="T:System.Data.DataSet" /> que fornece uma representação relacional dos dados no <see langword="XmlDataDocument" />.</summary>
        <value>Um <see langword="DataSet" /> que pode ser usado para acessar os dados no <see langword="XmlDataDocument" /> usando um modelo relacional.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `DataSet` permite que você acesse os dados no `XmlDataDocument` usando um modelo relacional. Isso significa que você pode manipular os dados como tabelas e modos de exibição, linhas e colunas, relações e assim por diante. As alterações feitas de `DataSet` ficam imediatamente visíveis no `XmlDataDocument`.  
  
   
  
## Examples  
 O exemplo a seguir modifica o preço de um catálogo usando o `DataSet` métodos.  
  
 [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/VB/source.vb#1)]  
  
 O exemplo usa dois arquivos a seguir como entrada.  
  
 `2books.xml`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement GetElementById (string elemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement GetElementById(string elemId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementById (elemId As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlElement ^ GetElementById(System::String ^ elemId);" />
      <MemberSignature Language="F#" Value="abstract member GetElementById : string -&gt; System.Xml.XmlElement&#xA;override this.GetElementById : string -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.GetElementById elemId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elemId">A ID do atributo a ser correspondida.</param>
        <summary>Obtém o <see cref="T:System.Xml.XmlElement" /> com a ID especificada. Este método não tem suporte na classe <see cref="T:System.Xml.XmlDataDocument" />. Chamar esse método gerará uma exceção.</summary>
        <returns>Um <see cref="T:System.Xml.XmlElement" /> com a ID especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método não tem suporte na classe <xref:System.Xml.XmlDataDocument>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Chamar esse método.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromRow">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement GetElementFromRow(class System.Data.DataRow r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementFromRow (r As DataRow) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ GetElementFromRow(System::Data::DataRow ^ r);" />
      <MemberSignature Language="F#" Value="member this.GetElementFromRow : System.Data.DataRow -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.GetElementFromRow r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Data.DataRow" />
      </Parameters>
      <Docs>
        <param name="r">O <see langword="DataRow" /> cujo <see langword="XmlElement" /> associado você deseja recuperar.</param>
        <summary>Recupera o <see cref="T:System.Xml.XmlElement" /> associado ao <see cref="T:System.Data.DataRow" /> especificado.</summary>
        <returns>O <see langword="XmlElement" /> que contém uma representação do <see langword="DataRow" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir carrega um `DataSet` em um `XmlDataDocument` e, em seguida, cria um `XmlElement` que representa o primeiro registro do cliente.  
  
 O exemplo usa o banco de dados Northwind do SQL Server 2000.  
  
 [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeList GetElementsByTagName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNodeList GetElementsByTagName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementsByTagName (name As String) As XmlNodeList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlNodeList ^ GetElementsByTagName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetElementsByTagName : string -&gt; System.Xml.XmlNodeList&#xA;override this.GetElementsByTagName : string -&gt; System.Xml.XmlNodeList" Usage="xmlDataDocument.GetElementsByTagName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome qualificado para correspondência. Ele é comparado com a propriedade <see cref="P:System.Xml.XmlDocument.Name" /> do nó correspondente. O valor especial “*” corresponde a todas as marcas.</param>
        <summary>Retorna um <see cref="T:System.Xml.XmlNodeList" /> que contém uma lista de todos os elementos descendentes que correspondem ao <see cref="P:System.Xml.XmlDocument.Name" /> especificado.</summary>
        <returns>Um <see cref="T:System.Xml.XmlNodeList" /> que contém uma lista de todos os nós correspondentes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  É recomendável que você use o <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> ou <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=nameWithType> método em vez do <xref:System.Xml.XmlDataDocument.GetElementsByTagName%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowFromElement">
      <MemberSignature Language="C#" Value="public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow GetRowFromElement(class System.Xml.XmlElement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowFromElement (e As XmlElement) As DataRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ GetRowFromElement(System::Xml::XmlElement ^ e);" />
      <MemberSignature Language="F#" Value="member this.GetRowFromElement : System.Xml.XmlElement -&gt; System.Data.DataRow" Usage="xmlDataDocument.GetRowFromElement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="e">O <see langword="XmlElement" /> cujo <see langword="DataRow" /> associado você deseja recuperar.</param>
        <summary>Recupera o <see cref="T:System.Data.DataRow" /> associado ao <see cref="T:System.Xml.XmlElement" /> especificado.</summary>
        <returns>O <see langword="DataRow" /> que contém uma representação do <see langword="XmlElement" />; <see langword="null" /> se não houver nenhum <see langword="DataRow" /> associado a <see langword="XmlElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir modifica o preço do primeiro livro.  
  
 [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/CPP/getrow.cpp#1)]
 [!code-csharp[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/CS/getrow.cs#1)]
 [!code-vb[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/VB/getrow.vb#1)]  
  
 O exemplo usa os seguintes arquivos de entrada:  
  
 `2books.xml`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carrega o <see langword="XmlDataDocument" /> usando a fonte de dados especificada e sincroniza o <see cref="T:System.Data.DataSet" /> com os dados carregados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Para exibir os dados XML, relacional, você deve primeiro especificar um esquema a ser usado para mapeamento de dados. Isso pode ser feito por meio da chamada a <xref:System.Data.DataSet.ReadXmlSchema%2A> método ou pela criação de tabelas e colunas dentro de `DataSet` manualmente. Esta etapa deve ser feita antes de chamar `Load`.  
  
 `XmlDataDocument` não oferece suporte a criação de referências de entidade. Se os dados incluem referências a entidades, o `Load` método resolve e expande todas as referências de entidade. No entanto, se você estiver usando o `Load` sobrecarga que utiliza um <xref:System.Xml.XmlReader> como um argumento, você deve especificar um `XmlReader` que pode resolver entidades.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.IO.Stream inStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.IO.Stream inStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (inStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::IO::Stream ^ inStream);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.IO.Stream -&gt; unit&#xA;override this.Load : System.IO.Stream -&gt; unit" Usage="xmlDataDocument.Load inStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inStream">O fluxo que contém o documento XML a ser carregado.</param>
        <summary>Carrega o <see langword="XmlDataDocument" /> do fluxo especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlDataDocument` não oferece suporte a criação de referências de entidade. Se os dados incluem referências a entidades, o `Load` método resolve e expande todas as referências de entidade.  
  
> [!NOTE]
>  Para exibir os dados XML, relacional, você deve primeiro especificar um esquema a ser usado para mapeamento de dados. Isso pode ser feito por meio da chamada a <xref:System.Data.DataSet.ReadXmlSchema%2A> método ou pela criação de tabelas e colunas dentro de `DataSet` manualmente. Esta etapa deve ser feita antes de chamar `Load`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.IO.TextReader txtReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.IO.TextReader txtReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (txtReader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::IO::TextReader ^ txtReader);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.IO.TextReader -&gt; unit&#xA;override this.Load : System.IO.TextReader -&gt; unit" Usage="xmlDataDocument.Load txtReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txtReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="txtReader">O <see langword="TextReader" /> usado para alimentar os dados XML no documento.</param>
        <summary>Carrega o <see langword="XmlDataDocument" /> do <see cref="T:System.IO.TextReader" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlDataDocument` não oferece suporte a criação de referências de entidade. Se os dados incluem referências a entidades, o `Load` método resolve e expande todas as referências de entidade.  
  
> [!NOTE]
>  Para exibir os dados XML, relacional, você deve primeiro especificar um esquema a ser usado para mapeamento de dados. Isso pode ser feito por meio da chamada a <xref:System.Data.DataSet.ReadXmlSchema%2A> método ou pela criação de tabelas e colunas dentro de `DataSet` manualmente. Esta etapa deve ser feita antes de chamar `Load`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="abstract member Load : string -&gt; unit&#xA;override this.Load : string -&gt; unit" Usage="xmlDataDocument.Load filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">A URL do arquivo que contém o documento XML a ser carregado.</param>
        <summary>Carrega o <see langword="XmlDataDocument" /> usando a URL especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlDataDocument` não oferece suporte a criação de referências de entidade. Se os dados incluem referências a entidades, o `Load` método resolve e expande todas as referências de entidade.  
  
> [!NOTE]
>  Para exibir os dados XML, relacional, você deve primeiro especificar um esquema a ser usado para mapeamento de dados. Isso pode ser feito por meio da chamada a <xref:System.Data.DataSet.ReadXmlSchema%2A> método ou pela criação de tabelas e colunas dentro de `DataSet` manualmente. Esta etapa deve ser feita antes de chamar `Load`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Xml.XmlReader -&gt; unit&#xA;override this.Load : System.Xml.XmlReader -&gt; unit" Usage="xmlDataDocument.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">O <see langword="XmlReader" /> que contém o documento XML a ser carregado.</param>
        <summary>Carrega o <see langword="XmlDataDocument" /> do <see cref="T:System.Xml.XmlReader" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlDataDocument` não oferece suporte a criação de referências de entidade. Se a fonte de dados contiver referências a entidades, você deve criar uma <xref:System.Xml.XmlValidatingReader> com o <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> propriedade definida como EntityHandling. ExpandEntities (que é o comportamento padrão) e passar a `XmlValidatingReader` para o `Load` método. Se você não usar um `XmlValidatingReader`, o `Load` método lançará uma exceção.  
  
 O `Load` método sempre preserva espaço em branco significativo. O <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> propriedade determina se o espaço em branco é preservado. O padrão é `false`, espaço em branco não é preservado.  
  
 Se o leitor estiver no estado inicial (ou seja, ReadState=ReadState.Initial) `Load` consome todo o conteúdo do leitor e compila o DOM do que encontrar.  
  
 Se o leitor já estiver posicionado em algum nó em profundidade "n", em seguida, esse método carrega esse nó e todos os irmãos posteriores até a marca de fim que fecha a profundidade "n". Isso tem os seguintes resultados.  
  
 Se o nó atual e seus irmãos seguir semelhante ao seguinte:  
  
```xml  
<!--comment--><element1>one</element1><element2>two</element2>  
```  
  
 `Load` gera uma exceção, pois um documento não pode ter dois elementos de nível raiz. Se o nó atual e seus irmãos seguir semelhante ao seguinte:  
  
```xml  
<!--comment--><?process  
    instruction?><!--comment--></endtag>  
```  
  
 `Load` for bem-sucedida; No entanto, você terá uma árvore DOM incompleta, porque não há nenhum elemento de nível raiz. Você precisa adicionar um elemento de nível raiz antes de salvar o documento. Caso contrário, o <xref:System.Xml.XmlDocument.Save%2A> método lançará uma exceção.  
  
 Se o leitor é posicionado em um nó folha que não é válido para o nível raiz de um documento (por exemplo, um espaço em branco ou um nó de atributo), o leitor continua a ler até que está localizado em um nó que pode ser usado para a raiz. O documento começa a carregar no momento.  
  
   
  
## Examples  
 O exemplo a seguir modifica o preço de um catálogo usando o `DataSet` métodos.  
  
 [!code-cpp[XmlDataDocument.Load#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDataDocument.Load/CPP/loadrdr.cpp#1)]
 [!code-csharp[XmlDataDocument.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.Load/CS/loadrdr.cs#1)]
 [!code-vb[XmlDataDocument.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.Load/VB/loadrdr.vb#1)]  
  
 O exemplo usa os dois seguintes arquivos de entrada.  
  
 `2books.xml`  
  
 [!code-xml[XmlDataDocument.Load#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.Load/XML/2books.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[XmlDataDocument.Load#3](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.Load/XML/test.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">O XML que está sendo carregado contém referências a entidades e o leitor não pode resolver entidades.</exception>
      </Docs>
    </Member>
  </Members>
</Type>