<Type Name="XmlWriter" FullName="System.Xml.XmlWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a9edf94878e0bcc3ffbbe2c4063b9ab30b5bc8b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58720370" /></Metadata><TypeSignature Language="C#" Value="public abstract class XmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriter abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XmlWriter = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa um gravador que fornece uma maneira rápida, não armazenada em cache e somente de encaminhamento de gerar fluxos ou arquivos que contém dados XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Xml.XmlWriter> classe grava dados XML em um fluxo, arquivo, o leitor de texto ou cadeia de caracteres. Ele dá suporte a W3C [Extensible Markup Language (XML) 1.0 (quarta edição)](https://www.w3.org/TR/2006/REC-xml-20060816/) e [Namespaces no XML 1.0 (terceira edição)](https://www.w3.org/TR/REC-xml-names/) recomendações.  
  
 Os membros do <xref:System.Xml.XmlWriter> classe permitem que você:  
  
-   Verificar se os caracteres são caracteres XML legais e se os nomes de elementos e atributos são nomes XML válidos.  
  
-   Verificar se o documento XML é bem-formado.  
  
-   Codificar bytes binários como Base64 ou BinHex e grava o texto resultante.  
  
-   Passe valores usando tipos common language runtime em vez de cadeias de caracteres, para evitar ter que manualmente realizar conversões de valor.  
  
-   Gravar vários documentos em um fluxo de saída.  
  
-   Gravar nomes válidos, nomes qualificados e tokens de nomes.  
  
 Nesta seção:  
  
 [Criar um gravador de XML](#create)   
 [Especificar o formato de saída](#output)   
 [Compatibilidade de dados](#conformance)   
 [Elementos de gravação](#writing_elements)   
 [Atributos de gravação](#writing_attributes)   
 [Manipulando namespaces](#handling_ns)   
 [Gravando dados digitados](#writing_types)   
 [O gravador de XML de fechamento](#close)   
 [Programação assíncrona](#async)   
 [Considerações sobre segurança](#security)  
  
<a name="create"></a>   
## <a name="creating-an-xml-writer"></a>Criar um gravador de XML  
 Para criar uma <xref:System.Xml.XmlWriter> da instância, use o <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> método. Para especificar o conjunto de recursos que você deseja ativar o gravador de XML, passe uma <xref:System.Xml.XmlWriterSettings> para o <xref:System.Xml.XmlWriter.Create%2A> método. Caso contrário, as configurações padrão são usadas. Consulte o <xref:System.Xml.XmlWriter.Create%2A> páginas para obter detalhes de referência.  
  
<a name="output"></a>   
## <a name="specifying-the-output-format"></a>Especificar o formato de saída  
 O <xref:System.Xml.XmlWriterSettings> classe inclui várias propriedades que controlam como <xref:System.Xml.XmlWriter> a saída é formatada:  
  
|Propriedade|Descrição|  
|--------------|-----------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Especifica a codificação de texto para usar. O padrão é `Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|Indica se recuar elementos. O padrão é `false` (Nenhum recuo).|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Especifica a cadeia de caracteres para usar ao recuar. O padrão é os dois espaços.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Especifica a cadeia de caracteres para usar quebras de linha. O padrão é `\r\n` (retorno de carro, alimentação de linha).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Especifica como lidar com caracteres de nova linha.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|Indica se escrever atributos em uma nova linha. <xref:System.Xml.XmlWriterSettings.Indent%2A> deve ser definido como `true` ao usar essa propriedade. O padrão é `false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Indica se escrever uma declaração XML. O padrão é `false`.|  
  
 As propriedades de <xref:System.Xml.XmlWriterSettings.Indent%2A> e de <xref:System.Xml.XmlWriterSettings.IndentChars%2A> controlam como o espaço em branco irrisória é formatado. Por exemplo, para recuar nós de elemento:  
  
 [!code-csharp[XmlWriter_v2#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#8)]
 [!code-vb[XmlWriter_v2#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#8)]  
  
 Use o <xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A> para escrever cada atributo em uma nova linha com um nível extra de recuo:  
  
 [!code-csharp[XmlWriter_v2#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#9)]
 [!code-vb[XmlWriter_v2#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#9)]  
  
<a name="conformance"></a>   
## <a name="data-conformance"></a>Compatibilidade de dados  
 Um gravador de XML usa duas propriedades do <xref:System.Xml.XmlWriterSettings> classe para verificar se há compatibilidade de dados:  
  
-   O <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> propriedade instrui o gravador de XML para verificar caracteres e lançar um <xref:System.Xml.XmlException> exceção se qualquer caractere está fora do intervalo legal, conforme definido pelo W3C.  
  
-   O <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> propriedade configura o gravador de XML para verificar se o fluxo que estão sendo gravado está em conformidade com as regras para um documento XML bem formado 1,0 ou fragmento de documento, conforme definido pelo W3C. Os níveis de conformidade três com são descritos na tabela a seguir. O padrão é <xref:System.Xml.ConformanceLevel.Document>. Para obter detalhes, consulte o <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> propriedade e o <xref:System.Xml.ConformanceLevel?displayProperty=nameWithType> enumeração.  
  
    |Nível|Descrição|  
    |-----------|-----------------|  
    |<xref:System.Xml.ConformanceLevel.Document>|A saída XML esteja de acordo com as regras para um documento XML 1.0 bem-formado e pode ser processada por qualquer processador de conformação.|  
    |<xref:System.Xml.ConformanceLevel.Fragment>|A saída XML esteja de acordo com as regras para um fragmento de documento XML 1.0 bem-formado.|  
    |<xref:System.Xml.ConformanceLevel.Auto>|O gravador de XML determina qual nível de conformação Verifique se aplique (documento ou fragmento) com base nos dados de entrada.|  
  
<a name="writing_elements"></a>   
## <a name="writing-elements"></a>Elementos de gravação  
 Você pode usar o seguinte <xref:System.Xml.XmlWriter> métodos para gravar nós de elemento. Para obter exemplos, consulte os métodos listados.  
  
|Use|Para|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteElementString%2A>|Gravar um nó de elemento inteiro, incluindo um valor de cadeia de caracteres.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>|Para gravar um valor de elemento usando várias chamadas de método.  Por exemplo, você pode chamar <xref:System.Xml.XmlWriter.WriteValue%2A> para gravar um valor tipado, <xref:System.Xml.XmlWriter.WriteCharEntity%2A> para gravar uma entidade de caracteres, <xref:System.Xml.XmlWriter.WriteAttributeString%2A> para escrever um atributo, ou você pode escrever um elemento filho. Esta é uma versão mais sofisticada do <xref:System.Xml.XmlWriter.WriteElementString%2A> método.<br /><br /> Para fechar o elemento, você chama o <xref:System.Xml.XmlWriter.WriteEndElement%2A> ou <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> método.|  
|<xref:System.Xml.XmlWriter.WriteNode%2A>|Para copiar um nó de elemento encontrado na posição atual de um <xref:System.Xml.XmlReader> ou <xref:System.Xml.XPath.XPathNavigator> objeto. Quando chamado, copia todos do objeto de origem para a instância de <xref:System.Xml.XmlWriter> .|  
  
<a name="writing_attributes"></a>   
## <a name="writing-attributes"></a>Atributos de gravação  
 Você pode usar o seguinte <xref:System.Xml.XmlWriter> métodos para gravar atributos em nós de elemento. Esses métodos também podem ser usados para criar declarações de namespace em um elemento, conforme discutido na próxima seção.  
  
|Use|Para|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteAttributeString%2A>|Para gravar um nó de atributo inteiro, incluindo um valor de cadeia de caracteres.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>|Para gravar o valor do atributo usando várias chamadas de método. Por exemplo, você pode chamar <xref:System.Xml.XmlWriter.WriteValue%2A> para gravar um valor tipado. Esta é uma versão mais sofisticada do <xref:System.Xml.XmlWriter.WriteElementString%2A> método.<br /><br /> Para fechar o elemento, você deve chamar o <xref:System.Xml.XmlWriter.WriteEndAttribute%2A> método.|  
|<xref:System.Xml.XmlWriter.WriteAttributes%2A>|Para copiar todos os atributos localizados na posição atual de um <xref:System.Xml.XmlReader> objeto. Os atributos que são gravados dependem o tipo de nó, que o leitor está posicionado no momento:<br /><br /> – Para um nó de atributo, ele grava o atributo atual e, em seguida, o restante dos atributos até o marca de fechamento do elemento.<br />– Para um nó de elemento, ele grava todos os atributos contidos pelo elemento.<br />– Para um nó de declaração XML, ele grava todos os atributos na declaração.<br />– Para todos os outros tipos de nó, o método gera uma exceção.|  
  
<a name="handling_ns"></a>   
## <a name="handling-namespaces"></a>Manipulando namespaces  
 Namespaces são usados para qualificar nomes de elementos e atributos em um documento XML. Prefixos de Namespace associar elementos e atributos com namespaces, que por sua vez associados com as referências de URI. Namespaces criam a exclusividade de nome de elementos e atributos em um documento XML.  
  
 O <xref:System.Xml.XmlWriter> mantém uma pilha de namespace que corresponde a todos os namespaces definidos no escopo do namespace atual. Ao escrever os elementos e atributos você pode utilizar namespaces das seguintes maneiras:  
  
-   Declarar namespaces manualmente usando o <xref:System.Xml.XmlWriter.WriteAttributeString%2A> método. Isso pode ser útil quando você souber a melhor otimizar o número de declarações de namespace. Por exemplo, consulte o <xref:System.Xml.XmlWriter.WriteAttributeString%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> método.  
  
-   Substitua a declaração atual do namespace com um novo namespace. No código a seguir, o <xref:System.Xml.XmlWriter.WriteAttributeString%2A> método altera o URI de namespace para o `"x"` do prefixo `"123"` para `"abc"`.  
  
     [!code-csharp[XmlWriter_v2#18](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#18)]
     [!code-vb[XmlWriter_v2#18](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#18)]  
  
     O código gerencia a seguinte cadeia de caracteres XML:  
  
    ```xml  
    <x:root xmlns:x="123">  
      <item xmlns:x="abc" />  
    </x:root>  
    ```  
  
-   Especificar um prefixo de namespace para escrever atributos ou elementos. Muitos dos métodos usados para gravar o elemento e atributos permitem que você faça isso. Por exemplo, o <xref:System.Xml.XmlWriter.WriteStartElement%28System.String%2CSystem.String%2CSystem.String%29> método grava uma marca de início e a associa com um namespace e prefixo.  
  
<a name="writing_types"></a>   
## <a name="writing-typed-data"></a>Gravando dados digitados  
 O <xref:System.Xml.XmlWriter.WriteValue%2A> método aceita um objeto do common language runtime (CLR), converte o valor de entrada em sua representação de cadeia de caracteres de acordo com a definição de esquema XML XSD (linguagem) regras de conversão do tipo de dados e grava-o usando o <xref:System.Xml.XmlWriter.WriteString%2A> método. Isso é mais fácil do que usando os métodos no <xref:System.Xml.XmlConvert> classe para converter os dados digitados em um valor de cadeia de caracteres antes de escrever para fora.  
  
 Ao gravar texto, o valor tipado é serializado para texto usando o <xref:System.Xml.XmlConvert> regras para esse tipo de esquema.  
  
 Padrão XSD tipos de dados que correspondem aos tipos CLR, consulte o <xref:System.Xml.XmlWriter.WriteValue%2A> método.  
  
 O <xref:System.Xml.XmlWriter> também pode ser usado para gravar em um repositório de dados XML. Por exemplo, a classe de <xref:System.Xml.XPath.XPathNavigator> pode criar um objeto de <xref:System.Xml.XmlWriter> para criar nós para um objeto de <xref:System.Xml.XmlDocument> . Se o repositório de dados tem as informações de esquema disponíveis para ele, o <xref:System.Xml.XmlWriter.WriteValue%2A> método gera uma exceção se você tentar converter para um tipo que não é permitido. Se o armazenamento de dados não tem informações de esquema disponíveis para ele, o <xref:System.Xml.XmlWriter.WriteValue%2A> método trata todos os valores como um `xsd:anySimpleType` tipo.  
  
<a name="close"></a>   
## <a name="closing-the-xml-writer"></a>O gravador de XML de fechamento  
 Quando você usa <xref:System.Xml.XmlWriter> métodos de saída XML, os elementos e atributos não são gravados até que você chame o <xref:System.Xml.XmlWriter.Close%2A> método. Por exemplo, se você estiver usando <xref:System.Xml.XmlWriter> para preencher um <xref:System.Xml.XmlDocument> do objeto, não será capaz de ver os elementos escritos e atributos no documento de destino até que você feche o <xref:System.Xml.XmlWriter> instância.  
  
<a name="async"></a>   
## <a name="asynchronous-programming"></a>Programação assíncrona  
 A maioria do <xref:System.Xml.XmlWriter> métodos têm contrapartes assíncronos com "Async" ao final de seus nomes de método. Por exemplo, o equivalente assíncrono do <xref:System.Xml.XmlWriter.WriteAttributeString%2A> é <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
 Para o <xref:System.Xml.XmlWriter.WriteValue%2A> método, que não tem um equivalente assíncrono, converter o valor de retorno em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método em vez disso.  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Considerações sobre segurança  
 Considere o seguinte ao trabalhar com o <xref:System.Xml.XmlWriter> classe:  
  
-   Exceções geradas pelo <xref:System.Xml.XmlWriter> pode divulgar informações de caminho que você deseja não transferidos até o aplicativo. Seu aplicativo deve capturar exceções e processá-las adequadamente.  
  
-   <xref:System.Xml.XmlWriter> não valida todos os dados que são passados para o <xref:System.Xml.XmlWriter.WriteDocType%2A> ou <xref:System.Xml.XmlWriter.WriteRaw%2A> método. Você não deve passar dados arbitrários para esses métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar a API assíncrona para gerar o XML.  
  
```csharp  
async Task TestWriter(Stream stream)   
{  
    XmlWriterSettings settings = new XmlWriterSettings();  
    settings.Async = true;  
  
    using (XmlWriter writer = XmlWriter.Create(stream, settings)) {  
        await writer.WriteStartElementAsync("pf", "root", "http://ns");  
        await writer.WriteStartElementAsync(null, "sub", null);  
        await writer.WriteAttributeStringAsync(null, "att", null, "val");  
        await writer.WriteStringAsync("text");  
        await writer.WriteEndElementAsync();  
        await writer.WriteProcessingInstructionAsync("pName", "pValue");  
        await writer.WriteCommentAsync("cValue");  
        await writer.WriteCDataAsync("cdata value");  
        await writer.WriteEndElementAsync();  
        await writer.FlushAsync();  
    }  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">Documentos e dados XML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="xmlWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, fecha este fluxo e o fluxo subjacente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos os elementos ou atributos deixados abertos são fechados automaticamente.  
  
> [!NOTE]
>  Quando você usa o <xref:System.Xml.XmlWriter> métodos de saída XML, os elementos e atributos não serão gravados até que você chame o <xref:System.Xml.XmlWriter.Close%2A> método. Por exemplo, se você estiver usando o XmlWriter para preencher uma <xref:System.Xml.XmlDocument>, até que você feche o <xref:System.Xml.XmlWriter>, não será capaz de observar a escrita de elementos e atributos no documento de destino.  
  
   
  
## Examples  
 O exemplo a seguir grava um nó XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">É realizada uma chamada para gravar mais saídas após <see langword="Close" /> ter sido chamado ou se o resultado dessa chamada for um documento XML inválido.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cria uma nova instância <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alguns dos <xref:System.Xml.XmlWriter.Create%2A> sobrecargas incluem um `settings` parâmetro que aceita um <xref:System.Xml.XmlWriterSettings> objeto. Você pode usar esse objeto para:  
  
-   Especifique quais recursos deseja dar suporte no criado <xref:System.Xml.XmlWriter> objeto.  
  
-   Reutilizar o <xref:System.Xml.XmlWriterSettings> objeto para criar vários objetos do gravador. O objeto <xref:System.Xml.XmlWriterSettings> é copiado e marcado como somente leitura para cada gravador criado. As alterações às configurações em uma instância de <xref:System.Xml.XmlWriterSettings> não afetam gravadores existentes com as mesmas configurações. Assim, você pode usar as mesmas configurações para criar vários gravadores com a mesma funcionalidade. Ou você pode alterar as configurações em uma instância de <xref:System.Xml.XmlWriterSettings> e criar um novo gravador com um conjunto diferente de recursos.  
  
-   Adicione recursos a um gravador XML existente. O método <xref:System.Xml.XmlWriter.Create%2A> pode aceitar outro objeto <xref:System.Xml.XmlWriter>. Subjacente <xref:System.Xml.XmlWriter> objeto não precisa ser um gravador XML criado pelo estático <xref:System.Xml.XmlWriter.Create%2A> método. Por exemplo, você pode especificar um gravador XML definido pelo usuário para adicionar recursos adicionais.  
  
-   Pode aproveitar recursos como melhores verificação de compatibilidade e conformidade com o [recomendação XML 1.0](https://www.w3.org/TR/2006/REC-xml-20060816/) que estão disponíveis apenas nas <xref:System.Xml.XmlWriter> objetos criados pelo estático <xref:System.Xml.XmlWriter.Create%2A> método.  
  
 Se você usar um <xref:System.Xml.XmlWriter.Create%2A> sobrecarga que não aceita um <xref:System.Xml.XmlWriterSettings> do objeto, as seguintes configurações de gravador padrão são usadas:  
  
|Configuração|Padrão|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Dois espaços|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nenhuma remoção)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (linha de novos, retorno de carro)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
> [!NOTE]
>  Embora o .NET Framework inclui o <xref:System.Xml.XmlTextWriter> classe, que é uma implementação concreta do <xref:System.Xml.XmlWriter> classe, é recomendável que você crie <xref:System.Xml.XmlWriter> instâncias usando o <xref:System.Xml.XmlWriter.Create%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O fluxo no qual você deseja fazer a gravação. O <see cref="T:System.Xml.XmlWriter" /> grava a sintaxe de texto XML 1.0 e a anexa ao fluxo especificado.</param>
        <summary>Cria uma nova instância de <see cref="T:System.Xml.XmlWriter" /> usando o fluxo especificado.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você usar essa sobrecarga, um <xref:System.Xml.XmlWriterSettings> objeto com as seguintes configurações padrão é usado para criar o gravador de XML:  
  
|Configuração|Padrão|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Dois espaços|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nenhuma remoção)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (linha de novos, retorno de carro)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se você quiser especificar os recursos para dar suporte ao gravador criado, use uma sobrecarga que utiliza um <xref:System.Xml.XmlWriterSettings> do objeto como um de seus argumentos e passe um <xref:System.Xml.XmlWriterSettings> objeto com as configurações personalizadas.  
  
 Além disso, XmlWriter sempre grava uma marca de ordem de Byte (BOM) para o fluxo de dados subjacente; No entanto, alguns fluxos não devem ter um BOM. Para omitir a BOM, crie um novo <xref:System.Xml.XmlWriterSettings> do objeto e defina a propriedade de codificação para ser um novo <xref:System.Text.UTF8Encoding> objeto com o valor booliano no construtor definido como false.  
  
   
  
## Examples  
 O exemplo a seguir grava um fragmento XML em um fluxo de memória. (Ele usa o <xref:System.Xml.XmlWriter.Create%28System.IO.Stream%2CSystem.Xml.XmlWriterSettings%29> sobrecarregar, que também configura as configurações na nova instância do gravador XML.)  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="stream" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextWriter -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O <see cref="T:System.IO.TextWriter" /> no qual você deseja gravar. O <see cref="T:System.Xml.XmlWriter" /> grava a sintaxe de texto XML 1.0 e a anexa ao <see cref="T:System.IO.TextWriter" /> especificado.</param>
        <summary>Cria uma nova instância <see cref="T:System.Xml.XmlWriter" /> usando o <see cref="T:System.IO.TextWriter" /> especificado.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você usar essa sobrecarga, um <xref:System.Xml.XmlWriterSettings> objeto com as configurações padrão é usado para criar o gravador XML.  
  
|Configuração|Padrão|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Dois espaços|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nenhuma remoção)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (linha de novos, retorno de carro)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se você quiser especificar os recursos para dar suporte ao gravador criado, use uma sobrecarga que utiliza um <xref:System.Xml.XmlWriterSettings> do objeto como um de seus argumentos e passe um <xref:System.Xml.XmlWriterSettings> objeto com as configurações personalizadas.  
  
   
  
## Examples  
 O exemplo a seguir cria um gravador que gera como saída para o console.  
  
 [!code-csharp[XmlWriter_v2#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#3)]
 [!code-vb[XmlWriter_v2#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="text" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create outputFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="outputFileName">O arquivo no qual você deseja gravar. O <see cref="T:System.Xml.XmlWriter" /> cria um arquivo no caminho especificado e grava na sintaxe de texto XML 1.0. O <paramref name="outputFileName" /> deve ser um caminho de sistema de arquivos.</param>
        <summary>Cria uma nova instância <see cref="T:System.Xml.XmlWriter" /> usando o nome de arquivo especificado.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você usar essa sobrecarga, um <xref:System.Xml.XmlWriterSettings> objeto com as configurações padrão é usado para criar o gravador XML.  
  
|Configuração|Padrão|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Dois espaços|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nenhuma remoção)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (linha de novos, retorno de carro)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se você quiser especificar os recursos para dar suporte ao gravador XML criado, use uma sobrecarga que utiliza um <xref:System.Xml.XmlWriterSettings> do objeto como um de seus argumentos e passe um <xref:System.Xml.XmlWriterSettings> objeto com as configurações personalizadas.  
  
   
  
## Examples  
 O exemplo a seguir cria um <xref:System.Xml.XmlWriter> de objeto e grava um nó de livro.  
  
 [!code-csharp[XmlWriter_v2#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#2)]
 [!code-vb[XmlWriter_v2#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="url" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.Text.StringBuilder -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O <see cref="T:System.Text.StringBuilder" /> no qual será gravado. Conteúdo gravado pelo <see cref="T:System.Xml.XmlWriter" /> é acrescentado ao <see cref="T:System.Text.StringBuilder" />.</param>
        <summary>Cria uma nova instância <see cref="T:System.Xml.XmlWriter" /> usando o <see cref="T:System.Text.StringBuilder" /> especificado.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando você usar essa sobrecarga, um <xref:System.Xml.XmlWriterSettings> objeto com as configurações padrão é usado para criar o gravador XML.  
  
|Configuração|Padrão|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Dois espaços|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nenhuma remoção)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (linha de novos, retorno de carro)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se você quiser especificar os recursos para dar suporte ao gravador XML criado, use uma sobrecarga que utiliza um <xref:System.Xml.XmlWriterSettings> do objeto como um de seus argumentos e passe um <xref:System.Xml.XmlWriterSettings> objeto com as configurações personalizadas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="builder" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.Xml.XmlWriter -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O objeto <see cref="T:System.Xml.XmlWriter" /> que você deseja usar como o gravador subjacente.</param>
        <summary>Cria uma nova instância <see cref="T:System.Xml.XmlWriter" /> usando o objeto <see cref="T:System.Xml.XmlWriter" /> especificado.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" /> encapsulado em torno do objeto <see cref="T:System.Xml.XmlWriter" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método permite que você adicionar recursos a uma subjacente <xref:System.Xml.XmlWriter> objeto. Subjacente <xref:System.Xml.XmlWriter> objeto pode ser um objeto criado pelo <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> método ou um objeto criado usando o <xref:System.Xml.XmlTextWriter> implementação.  
  
 Quando você usar essa sobrecarga, um <xref:System.Xml.XmlWriterSettings> objeto com as configurações padrão é usado para criar o gravador XML.  
  
|Configuração|Padrão|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Dois espaços|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nenhuma remoção)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (linha de novos, retorno de carro)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se você quiser especificar os recursos para dar suporte ao gravador XML criado, use uma sobrecarga que utiliza um <xref:System.Xml.XmlWriterSettings> do objeto como um de seus argumentos e passe um <xref:System.Xml.XmlWriterSettings> objeto com as configurações personalizadas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="writer" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O fluxo no qual você deseja fazer a gravação. O <see cref="T:System.Xml.XmlWriter" /> grava a sintaxe de texto XML 1.0 e a anexa ao fluxo especificado.</param>
        <param name="settings">O objeto <see cref="T:System.Xml.XmlWriterSettings" /> usado para configurar a nova instância do <see cref="T:System.Xml.XmlWriter" />. Se for <see langword="null" />, um <see cref="T:System.Xml.XmlWriterSettings" /> com configuração padrão é utilizado.  
  
Se o <see cref="T:System.Xml.XmlWriter" /> está sendo usado com o método <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, você deve usar a propriedade <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> para obter um objeto <see cref="T:System.Xml.XmlWriterSettings" /> com as configurações corretas. Isso assegura que o objeto <see cref="T:System.Xml.XmlWriter" /> criado tenha as configurações de saída correta.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Xml.XmlWriter" /> usando o fluxo e o objeto <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XmlWriter sempre grava uma marca de ordem de Byte (BOM) para o fluxo de dados subjacente; No entanto, alguns fluxos não devem ter um BOM. Para omitir a BOM, crie um novo <xref:System.Xml.XmlWriterSettings> do objeto e defina a propriedade de codificação para ser um novo <xref:System.Text.UTF8Encoding> objeto com o valor booliano no construtor definido como false.  
  
   
  
## Examples  
 O exemplo a seguir grava um fragmento XML em um fluxo de memória.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="stream" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextWriter * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O <see cref="T:System.IO.TextWriter" /> no qual você deseja gravar. O <see cref="T:System.Xml.XmlWriter" /> grava a sintaxe de texto XML 1.0 e a anexa ao <see cref="T:System.IO.TextWriter" /> especificado.</param>
        <param name="settings">O objeto <see cref="T:System.Xml.XmlWriterSettings" /> usado para configurar a nova instância do <see cref="T:System.Xml.XmlWriter" />. Se for <see langword="null" />, um <see cref="T:System.Xml.XmlWriterSettings" /> com configuração padrão é utilizado.  
  
Se o <see cref="T:System.Xml.XmlWriter" /> está sendo usado com o método <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, você deve usar a propriedade <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> para obter um objeto <see cref="T:System.Xml.XmlWriterSettings" /> com as configurações corretas. Isso assegura que o objeto <see cref="T:System.Xml.XmlWriter" /> criado tenha as configurações de saída correta.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Xml.XmlWriter" /> usando os objetos <see cref="T:System.IO.TextWriter" /> e <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir grava uma cadeia de caracteres XML.  
  
 [!code-csharp[XmlWriter_v2#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#4)]
 [!code-vb[XmlWriter_v2#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="text" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : string * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (outputFileName, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="outputFileName">O arquivo no qual você deseja gravar. O <see cref="T:System.Xml.XmlWriter" /> cria um arquivo no caminho especificado e grava na sintaxe de texto XML 1.0. O <paramref name="outputFileName" /> deve ser um caminho de sistema de arquivos.</param>
        <param name="settings">O objeto <see cref="T:System.Xml.XmlWriterSettings" /> usado para configurar a nova instância do <see cref="T:System.Xml.XmlWriter" />. Se for <see langword="null" />, um <see cref="T:System.Xml.XmlWriterSettings" /> com configuração padrão é utilizado.  
  
Se o <see cref="T:System.Xml.XmlWriter" /> está sendo usado com o método <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, você deve usar a propriedade <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> para obter um objeto <see cref="T:System.Xml.XmlWriterSettings" /> com as configurações corretas. Isso assegura que o objeto <see cref="T:System.Xml.XmlWriter" /> criado tenha as configurações de saída correta.</param>
        <summary>Cria uma nova <see cref="T:System.Xml.XmlWriter" /> instância usando o nome do arquivo e <see cref="T:System.Xml.XmlWriterSettings" /> objeto.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir cria um <xref:System.Xml.XmlWriter> objeto com as configurações definidas.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="url" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.Text.StringBuilder * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O <see cref="T:System.Text.StringBuilder" /> no qual será gravado. Conteúdo gravado pelo <see cref="T:System.Xml.XmlWriter" /> é acrescentado ao <see cref="T:System.Text.StringBuilder" />.</param>
        <param name="settings">O objeto <see cref="T:System.Xml.XmlWriterSettings" /> usado para configurar a nova instância do <see cref="T:System.Xml.XmlWriter" />. Se for <see langword="null" />, um <see cref="T:System.Xml.XmlWriterSettings" /> com configuração padrão é utilizado.  
  
Se o <see cref="T:System.Xml.XmlWriter" /> está sendo usado com o método <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, você deve usar a propriedade <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> para obter um objeto <see cref="T:System.Xml.XmlWriterSettings" /> com as configurações corretas. Isso assegura que o objeto <see cref="T:System.Xml.XmlWriter" /> criado tenha as configurações de saída correta.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Xml.XmlWriter" /> usando os objetos <see cref="T:System.Text.StringBuilder" /> e <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="builder" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.Xml.XmlWriter * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output">O objeto <see cref="T:System.Xml.XmlWriter" /> que você deseja usar como o gravador subjacente.</param>
        <param name="settings">O objeto <see cref="T:System.Xml.XmlWriterSettings" /> usado para configurar a nova instância do <see cref="T:System.Xml.XmlWriter" />. Se for <see langword="null" />, um <see cref="T:System.Xml.XmlWriterSettings" /> com configuração padrão é utilizado.  
  
Se o <see cref="T:System.Xml.XmlWriter" /> está sendo usado com o método <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, você deve usar a propriedade <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> para obter um objeto <see cref="T:System.Xml.XmlWriterSettings" /> com as configurações corretas. Isso assegura que o objeto <see cref="T:System.Xml.XmlWriter" /> criado tenha as configurações de saída correta.</param>
        <summary>Cria uma nova instância <see cref="T:System.Xml.XmlWriter" /> usando os objetos <see cref="T:System.Xml.XmlWriter" /> e <see cref="T:System.Xml.XmlWriterSettings" /> especificados.</summary>
        <returns>Um objeto <see cref="T:System.Xml.XmlWriter" /> encapsulado em torno do objeto <see cref="T:System.Xml.XmlWriter" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método permite que você adicione recursos adicionais para uma subjacente <xref:System.Xml.XmlWriter> objeto. Subjacente <xref:System.Xml.XmlWriter> objeto pode ser um objeto criado pelo <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> método ou um objeto criado usando o <xref:System.Xml.XmlTextWriter> implementação.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor <paramref name="writer" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Libera os recursos usados pela classe <see cref="T:System.Xml.XmlWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="xmlWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xmlWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Xml.XmlWriter" /> e opcionalmente libera os recursos gerenciados.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit" Usage="xmlWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, libera o que está no buffer para os fluxos subjacentes e também libera o fluxo subjacente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso é chamado em vez de <xref:System.Xml.XmlWriter.Close%2A> quando você deseja escrever mais para o fluxo subjacente sem perder o que ainda está em buffer.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.FlushAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava dois fragmentos XML.  
  
 [!code-cpp[XmlWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Flush/CPP/write2docs_v2.cpp#1)]
 [!code-csharp[XmlWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Flush/CS/write2docs_v2.cs#1)]
 [!code-vb[XmlWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Flush/VB/write2docs_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberSignature Language="F#" Value="abstract member FlushAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.FlushAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.FlushAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera de maneira assíncrona tudo o que está no buffer para os fluxos subjacentes e também libera o fluxo subjacente.</summary>
        <returns>Uma tarefa que representa a operação <see langword="Flush" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.Flush%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public abstract string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member LookupPrefix : string -&gt; string" Usage="xmlWriter.LookupPrefix ns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">O URI de namespace cujo prefixo você deseja localizar.</param>
        <summary>Quando substituído em uma classe derivada, retorna o prefixo mais próximo definido no escopo do namespace atual para o URI de namespace.</summary>
        <returns>O prefixo correspondente ou <see langword="null" /> se nenhum URI de namespace correspondente for encontrado no escopo atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir grava um livro.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ns" /> é <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriterSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Settings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlWriterSettings ^ Settings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlWriterSettings" Usage="System.Xml.XmlWriter.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto <see cref="T:System.Xml.XmlWriterSettings" /> usado para criar essa instância <see cref="T:System.Xml.XmlWriter" />.</summary>
        <value>O objeto <see cref="T:System.Xml.XmlWriterSettings" /> usado para criar essa instância do gravador. Se esse gravador não foi criado usando o <see cref="Overload:System.Xml.XmlWriter.Create" /> método, essa propriedade retornará <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Xml.XmlWriterSettings> classe é usada para especificar o conjunto de recursos para dar suporte na instância do gravador criado. O <xref:System.Xml.XmlWriterSettings> objeto retornado pelo <xref:System.Xml.XmlWriter.Settings%2A> propriedade não pode ser modificada. Qualquer tentativa alterar as configurações individuais resulta em uma exceção sendo lançada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.IDisposable.Dispose" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Xml.XmlWriter> é convertida em uma interface de <xref:System.IDisposable>.

Esse membro pode se comportar de maneira diferente quando ele é usado em um projeto de biblioteca de classes portátil. Para obter mais informações, consulte [diferenças de API na biblioteca de classes portátil](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/gg597392(v=vs.100)).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributes">
      <MemberSignature Language="C#" Value="public virtual void WriteAttributes (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttributes(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttributes (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttributes(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttributes : System.Xml.XmlReader * bool -&gt; unit&#xA;override this.WriteAttributes : System.Xml.XmlReader * bool -&gt; unit" Usage="xmlWriter.WriteAttributes (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">O <see langword="XmlReader" /> do qual copiar os atributos.</param>
        <param name="defattr"><see langword="true" /> para copiar os atributos padrão do <see langword="XmlReader" />; caso contrário, <see langword="false" />.</param>
        <summary>Quando substituído em uma classe derivada, grava todos os atributos localizados na posição atual no <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o leitor estiver posicionado em um `element` nó `WriteAttributes` copia todos os atributos contidos. Se o leitor estiver posicionado em um `attribute` nó, esse método grava o atributo atual e, em seguida, o restante dos atributos até o marca de fechamento do elemento. Se o leitor estiver posicionado em um `XmlDeclaration` nó, esse método grava todos os atributos na declaração. Se o leitor estiver posicionado em qualquer outro tipo de nó este método lança um <xref:System.Xml.XmlException>.  
  
 Se esse método for chamado usando <xref:System.Xml.XmlValidatingReader>, para garantir que qualquer conteúdo (que foi expandido de entidades) que pode resultar em um documento inválido é substituído quando gravados de XML bem formado. Por exemplo, se um atributo inclui um `&gt;` entidade que foi expandida, para garantir que um documento bem formado expandidos > é substituído quando gravadas com `&gt;`.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteAttributesAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir copia todos os elementos na saída, altera os nomes de marcas em letras maiusculas e copia todos os atributos inalterados.  
  
 [!code-cpp[XmlWriter.WriteAttributes#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributes/CPP/writeattrs_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributes/CS/writeattrs_v2.cs#1)]
 [!code-vb[XmlWriter.WriteAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributes/VB/writeattrs_v2.vb#1)]  
  
 O exemplo usa o arquivo `test1.xml`, como entrada.  
  
 [!code-xml[XmlWriter.WriteAttributes#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteAttributes/XML/test1.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException">O leitor não está posicionado em um nó <see langword="element" />, <see langword="attribute" /> ou <see langword="XmlDeclaration" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAttributesAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAttributesAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAttributesAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAttributesAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttributesAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAttributesAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteAttributesAsync (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;netcore-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defattr" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">O <see langword="XmlReader" /> do qual copiar os atributos.</param>
        <param name="defattr"><see langword="true" /> para copiar os atributos padrão do <see langword="XmlReader" />; caso contrário, <see langword="false" />.</param>
        <summary>Grava de forma assíncrona todos os atributos encontrados na posição atual no <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteAttributes" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteAttributes%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttributeString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Quando substituído em uma classe derivada, grava um atributo com o valor especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeString : string * string -&gt; unit" Usage="xmlWriter.WriteAttributeString (localName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do atributo.</param>
        <param name="value">O valor do atributo.</param>
        <summary>Quando substituído em uma classe derivada, grava o atributo com o nome local e o valor especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteAttributeString` faz o seguinte:  
  
-   Se o valor do atributo incluir aspas duplas ou simples, eles serão substituídos pelos `&quot;` e `&apos;` , respectivamente.  
  
-   Se escrever um `xml:space` atributo, o gravador verifica se o valor do atributo é válido. (Os valores válidos são `preserve` ou `default`.)  
  
-   Se escrever um `xml:lang` atributo, o gravador não verifica se o valor do atributo é válido de acordo com a recomendação W3C XML 1.0.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um livro.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O estado do gravador não é <see langword="WriteState.Element" /> ou o gravador está fechado.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.ArgumentException">O valor do atributo <see langword="xml:space" /> ou <see langword="xml:lang" /> é inválido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeString : string * string * string -&gt; unit" Usage="xmlWriter.WriteAttributeString (localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do atributo.</param>
        <param name="ns">O URI do namespace para associar ao atributo.</param>
        <param name="value">O valor do atributo.</param>
        <summary>Quando substituído em uma classe derivada, grava um atributo com o nome local, URI do namespace e o valor especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método grava o atributo com um prefixo de namespace definidos do usuário e a associa ao namespace fornecido. Se `localName` é "xmlns", em seguida, esse método também trata isso como uma declaração de namespace. Nesse caso, o `ns` argumento pode ser `null`.  
  
 `WriteAttributeString` faz o seguinte:  
  
-   Se o valor do atributo incluir aspas duplas ou simples, eles serão substituídos pelos `&quot;` e `&apos;` , respectivamente.  
  
-   Se escrever um `xml:space` atributo, o gravador verifica se o valor do atributo é válido. (Os valores válidos são `preserve` ou `default`.)  
  
-   Se escrever um `xml:lang` atributo, o gravador não verifica se o valor do atributo é válido de acordo com a recomendação W3C XML 1.0.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlWriter.WriteAttributeString%2A> método escrever uma declaração de namespace.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O estado do gravador não é <see langword="WriteState.Element" /> ou o gravador está fechado.

- ou - 
Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.ArgumentException">O valor do atributo <see langword="xml:space" /> ou <see langword="xml:lang" /> é inválido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeString : string * string * string * string -&gt; unit" Usage="xmlWriter.WriteAttributeString (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do namespace do atributo.</param>
        <param name="localName">O nome local do atributo.</param>
        <param name="ns">O URI do namespace do atributo.</param>
        <param name="value">O valor do atributo.</param>
        <summary>Quando substituído em uma classe derivada, grava o atributo com o prefixo, nome local, URI do namespace e o valor especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método grava o atributo com um prefixo de namespace definidos do usuário e a associa ao namespace fornecido. Se o prefixo é "xmlns", em seguida, esse método também trata isso como uma declaração de namespace e associa o prefixo declarado com o namespace que URI fornecido no valor de atributo determinado. Nesse caso, o `ns` argumento pode ser `null`.  
  
 `WriteAttributeString` faz o seguinte:  
  
-   Se o valor do atributo incluir aspas duplas ou simples, eles serão substituídos pelos `&quot;` e `&apos;` , respectivamente.  
  
-   Se escrever um `xml:space` atributo, o gravador verifica se o valor do atributo é válido. (Os valores válidos são `preserve` ou `default`.)  
  
-   Se escrever um `xml:lang` atributo, o gravador não verifica se o valor do atributo é válido de acordo com a recomendação W3C XML 1.0.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlWriter.WriteAttributeString%2A> método escrever uma declaração de namespace.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O estado do gravador não é <see langword="WriteState.Element" /> ou o gravador está fechado.

- ou - 
Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.ArgumentException">O valor do atributo <see langword="xml:space" /> ou <see langword="xml:lang" /> é inválido.</exception>
        <exception cref="T:System.Xml.XmlException">O <paramref name="localName" /> ou <paramref name="ns" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAttributeStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAttributeStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAttributeStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeStringAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteAttributeStringAsync (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localName" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ns" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.String" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do namespace do atributo.</param>
        <param name="localName">O nome local do atributo.</param>
        <param name="ns">O URI do namespace do atributo.</param>
        <param name="value">O valor do atributo.</param>
        <summary>Grava de forma assíncrona o atributo com o prefixo especificado, o nome local, o URI de namespace e o valor.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteAttributeString" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou - 
Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public abstract void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBase64 : byte[] * int * int -&gt; unit" Usage="xmlWriter.WriteBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matriz de bytes a ser codificada.</param>
        <param name="index">A posição no buffer que indica o início dos bytes a serem gravados.</param>
        <param name="count">O número de bytes a serem gravados.</param>
        <summary>Quando substituído em uma classe derivada, codifica os bytes binários especificados como Base64 e grava o texto resultante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por exemplo, o buffer de bytes pode conter o conteúdo binário de uma imagem GIF. Isso claramente não é um XML válido. O `Base64` codificação foi projetada para representar sequências de bytes arbitrário em um formato de texto composto de caracteres US-ASCII 65 ([A-Za-z e 0-9 c++ /CLI =]) em que cada caractere codifica 6 bits dos dados binários. Para obter mais informações, consulte as solicitações de comentários (RFC) 1521 localizado na [para o site da Web de comentários de solicitação](https://www.rfc-editor.org).  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteBase64Async%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlWriter.WriteBase64%2A> método para gravar `Base64` dados. O `Base64` os dados são inseridos dentro de um `<image>` elemento.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#3)]
 [!code-vb[XmlReader_Read_Write_Binary#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ou <paramref name="count" /> é menor que zero.  
  
- ou - 
O tamanho do buffer menos <paramref name="index" /> é menor que <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBase64Async (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBase64Async(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteBase64Async (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Matriz de bytes a ser codificada.</param>
        <param name="index">A posição no buffer que indica o início dos bytes a serem gravados.</param>
        <param name="count">O número de bytes a serem gravados.</param>
        <summary>Codifica de forma assíncrona os bytes binários especificados como Base64 e grava o texto resultante.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteBase64" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteBase64%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public virtual void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBinHex : byte[] * int * int -&gt; unit&#xA;override this.WriteBinHex : byte[] * int * int -&gt; unit" Usage="xmlWriter.WriteBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matriz de bytes a ser codificada.</param>
        <param name="index">A posição no buffer que indica o início dos bytes a serem gravados.</param>
        <param name="count">O número de bytes a serem gravados.</param>
        <summary>Quando substituído em uma classe derivada, codifica os bytes binários especificados como <see langword="BinHex" /> e grava o texto resultante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteBinHexAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlWriter.WriteBinHex%2A> método para gravar `BinHex` dados. O `BinHex` os dados são inseridos dentro de um `<image>` elemento.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#1)]
 [!code-vb[XmlReader_Read_Write_Binary#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">O gravador está fechado ou em estado de erro.
- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ou <paramref name="count" /> é menor que zero.  
  
- ou - 
O tamanho do buffer menos <paramref name="index" /> é menor que <paramref name="count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBinHexAsync (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBinHexAsync(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteBinHexAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Matriz de bytes a ser codificada.</param>
        <param name="index">A posição no buffer que indica o início dos bytes a serem gravados.</param>
        <param name="count">O número de bytes a serem gravados.</param>
        <summary>Codifica de forma assíncrona os bytes binários especificados como <see langword="BinHex" /> e grava o texto resultante.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteBinHex" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteBinHex%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public abstract void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCData(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteCData : string -&gt; unit" Usage="xmlWriter.WriteCData text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">O texto a ser colocado no bloco CDATA.</param>
        <summary>Quando substituído em uma classe derivada, grava um bloco &lt;![CDATA[...]]&gt; que contém o texto especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `text` seja `null` ou `String.Empty`, esse método grava um bloco CDATA vazio, por exemplo \<! [ [] CDATA]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O texto poderia resultar em um documento XML malformado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCDataAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCDataAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCDataAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCDataAsync(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteCDataAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCDataAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCDataAsync text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="text">O texto a ser colocado no bloco CDATA.</param>
        <summary>Grava de forma assíncrona um bloco &lt;![CDATA[...]]&gt; que contém o texto especificado.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteCData" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteCData%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCharEntity(char ch);" />
      <MemberSignature Language="F#" Value="abstract member WriteCharEntity : char -&gt; unit" Usage="xmlWriter.WriteCharEntity ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">O caractere Unicode para o qual uma entidade de caracteres será gerada.</param>
        <summary>Quando substituído em uma classe derivada, força a geração de uma entidade de caracteres para o valor especificado de caracteres Unicode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método grava o caractere Unicode em formato de referência de entidade de caractere hexadecimal.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteCharEntityAsync%2A>.  
  
   
  
## Examples  
 Consulte <xref:System.Xml.XmlTextWriter.WriteCharEntity%2A?displayProperty=nameWithType> para obter um exemplo usando esse método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O caractere está dentro do intervalo de caracteres do par alternativo, <see langword="0xd800" /> - <see langword="0xdfff" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharEntityAsync (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharEntityAsync(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharEntityAsync (ch As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharEntityAsync(char ch);" />
      <MemberSignature Language="F#" Value="abstract member WriteCharEntityAsync : char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCharEntityAsync : char -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCharEntityAsync ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ch">O caractere Unicode para o qual uma entidade de caracteres será gerada.</param>
        <summary>Força de forma assíncrona a geração de uma entidade de caracteres para o valor de caractere Unicode especificado.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteCharEntity" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteCharEntity%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public abstract void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteChars : char[] * int * int -&gt; unit" Usage="xmlWriter.WriteChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz de caracteres que contém o texto a ser gravado.</param>
        <param name="index">A posição do buffer que indica o início do texto a ser gravado.</param>
        <param name="count">O número de caracteres a serem gravados.</param>
        <summary>Quando substituído em uma classe derivada, grava texto um buffer por vez.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser usado para gravar grandes quantidades de texto um buffer por vez.  
  
 Tratamento especial deve ser feito para garantir que o `WriteChars` método não dividir os caracteres do par substituto em várias gravações de buffer. A especificação XML define os intervalos válidos para pares substitutos.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteCharsAsync%2A>.  
  
   
  
## Examples  
 [!code-csharp[XmlWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ou <paramref name="count" /> é menor que zero.  
  
- ou - 
O tamanho do buffer menos <paramref name="index" /> é menor que <paramref name="count" />; a chamada resulta em caracteres do par alternativo sendo divididos ou na gravação de um par alternativo inválido.</exception>
        <exception cref="T:System.ArgumentException">O valor do parâmetro <paramref name="buffer" /> não é válido.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharsAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharsAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharsAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteCharsAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCharsAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCharsAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz de caracteres que contém o texto a ser gravado.</param>
        <param name="index">A posição do buffer que indica o início do texto a ser gravado.</param>
        <param name="count">O número de caracteres a serem gravados.</param>
        <summary>Grava texto de forma assíncrona um buffer por vez.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteChars" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteChars%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public abstract void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteComment(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteComment : string -&gt; unit" Usage="xmlWriter.WriteComment text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texto a colocar dentro do comentário.</param>
        <summary>Quando substituído em uma classe derivada, grava um comentário &lt;!--...--&gt; que contém o texto especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `text` seja `null` ou `String.Empty`, esse método grava um comentário sem conteúdo de dados, por exemplo \<!--->.  
  
 Se `text` contém uma sequência de dois traços inválida "-" a <xref:System.Xml.XmlWriter> podem ambos throw um <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> objetos) ou inserir um espaço entre os traços "- -" para que o texto é um comentário XML válido (<xref:System.Xml.XmlWriter> objetos criados pelo <xref:System.Xml.XmlWriter.Create%2A> método).  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteCommentAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um arquivo XML que representa um livro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O texto pode resultar em um documento XML malformado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCommentAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCommentAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCommentAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCommentAsync(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteCommentAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCommentAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCommentAsync text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="text">Texto a colocar dentro do comentário.</param>
        <summary>Grava de forma assíncrona um comentário &lt;!--...--&gt; que contém o texto especificado.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteComment" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteComment%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public abstract void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberSignature Language="F#" Value="abstract member WriteDocType : string * string * string * string -&gt; unit" Usage="xmlWriter.WriteDocType (name, pubid, sysid, subset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome do DOCTYPE. Isso deve ser não vazio.</param>
        <param name="pubid">Se for não nulo, ele também gravará PUBLIC "pubid" "sysid", em que <paramref name="pubid" /> e <paramref name="sysid" /> são substituídos pelo valor dos argumentos fornecidos.</param>
        <param name="sysid">Se <paramref name="pubid" /> for <see langword="null" /> e <paramref name="sysid" /> for não nulo, ele gravará SYSTEM "sysid", em que <paramref name="sysid" /> será substituído pelo valor desse argumento.</param>
        <param name="subset">Se não for nulo, ele gravará [subset], em que subset é substituído pelo valor desse argumento.</param>
        <summary>Quando substituído em uma classe derivada, grava a declaração DOCTYPE com o nome especificado e os atributos opcionais.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não verifica a existência de caracteres inválidos na `pubid`, `sysid` ou `subset`. Ele também verifica se o subconjunto interno está bem formado.  
  
> [!IMPORTANT]
>  O <xref:System.Xml.XmlWriter> não valida os dados que são passados para o <xref:System.Xml.XmlWriter.WriteDocType%2A> método. Você não deve passar dados arbitrários para esse método.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteDocTypeAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um arquivo XML que representa um livro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Esse método foi chamado fora do prólogo (após o elemento raiz).

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.ArgumentException">O valor de <paramref name="name" /> resultaria em um XML inválido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteDocTypeAsync (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteDocTypeAsync (name As String, pubid As String, sysid As String, subset As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteDocTypeAsync(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberSignature Language="F#" Value="abstract member WriteDocTypeAsync : string * string * string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteDocTypeAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteDocTypeAsync (name, pubid, sysid, subset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pubid" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sysid" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="subset" Type="System.String" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">O nome do DOCTYPE. Isso deve ser não vazio.</param>
        <param name="pubid">Se for não nulo, ele também gravará PUBLIC "pubid" "sysid", em que <paramref name="pubid" /> e <paramref name="sysid" /> são substituídos pelo valor dos argumentos fornecidos.</param>
        <param name="sysid">Se <paramref name="pubid" /> for <see langword="null" /> e <paramref name="sysid" /> for não nulo, ele gravará SYSTEM "sysid", em que <paramref name="sysid" /> será substituído pelo valor desse argumento.</param>
        <param name="subset">Se não for nulo, ele gravará [subset], em que subset é substituído pelo valor desse argumento.</param>
        <summary>Grava de forma assíncrona a declaração DOCTYPE com o nome especificado e os atributos opcionais.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteDocType" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteDocType%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Grava um elemento que contém um valor de cadeia de caracteres.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementString : string * string -&gt; unit" Usage="xmlWriter.WriteElementString (localName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do elemento.</param>
        <param name="value">O valor do elemento.</param>
        <summary>Grava um elemento com o valor e o nome local especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa vários métodos de gravação para criar um fragmento XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O valor de <paramref name="localName" /> é <see langword="null" /> ou uma cadeia de caracteres vazia.  
  
- ou - 
Os valores de parâmetros não são válidos.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementString : string * string * string -&gt; unit" Usage="xmlWriter.WriteElementString (localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do elemento.</param>
        <param name="ns">O URI do namespace a ser associado ao elemento.</param>
        <param name="value">O valor do elemento.</param>
        <summary>Grava um elemento com o nome local, URI de namespace e valor especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa vários métodos de gravação para criar um fragmento XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O valor de <paramref name="localName" /> é <see langword="null" /> ou uma cadeia de caracteres vazia.  
  
- ou - 
Os valores de parâmetros não são válidos.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementString : string * string * string * string -&gt; unit" Usage="xmlWriter.WriteElementString (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localName" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ns" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.String" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do elemento.</param>
        <param name="localName">O nome local do elemento.</param>
        <param name="ns">O URI do namespace do elemento.</param>
        <param name="value">O valor do elemento.</param>
        <summary>Grava um elemento com o prefixo, o nome local, o URI do namespace e o valor especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O valor de <paramref name="localName" /> é <see langword="null" /> ou uma cadeia de caracteres vazia.  
  
- ou - 
Os valores de parâmetros não são válidos.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteElementStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteElementStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteElementStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementStringAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteElementStringAsync (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;netcore-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localName" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ns" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.String" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do elemento.</param>
        <param name="localName">O nome local do elemento.</param>
        <param name="ns">O URI do namespace do elemento.</param>
        <param name="value">O valor do elemento.</param>
        <summary>Grava de forma assíncrona um elemento com o prefixo especificado, o nome local, o URI de namespace e o valor.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteElementString" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteElementString%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndAttribute();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndAttribute : unit -&gt; unit" Usage="xmlWriter.WriteEndAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, fecha a chamada <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> anterior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você chamar `WriteStartAttribute`, você pode fechar o atributo com esse método.  
  
 Você também pode fechar o atributo chamando `WriteStartAttribute` novamente, chamando <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, ou chamar <xref:System.Xml.XmlWriter.WriteEndElement%2A>.  
  
> [!NOTE]
>  Quando você usa o <xref:System.Xml.XmlWriter> métodos de saída XML, os elementos e atributos não serão gravados até que você chame o <xref:System.Xml.XmlWriter.Close%2A> método. Por exemplo, se você estiver usando o XmlWriter para preencher uma <xref:System.Xml.XmlDocument>, até que você feche o <xref:System.Xml.XmlWriter>, não será capaz de observar a escrita de elementos e atributos no documento de destino.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteEndAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteEndAttributeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndAttributeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttributeAsync" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteEndAttributeAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndAttributeAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndAttributeAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEndAttributeAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEndAttributeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha de forma assíncrona a chamada <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> anterior.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteEndAttribute" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndDocument();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndDocument : unit -&gt; unit" Usage="xmlWriter.WriteEndDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, fecha todos os elementos ou atributos abertos e coloca o gravador de volta no estado Inicial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Quando você usa o <xref:System.Xml.XmlWriter> métodos de saída XML, os elementos e atributos não serão gravados até que você chame o <xref:System.Xml.XmlWriter.Close%2A> método. Por exemplo, se você estiver usando o XmlWriter para preencher uma <xref:System.Xml.XmlDocument>, até que você feche o <xref:System.Xml.XmlWriter>, não será capaz de observar a escrita de elementos e atributos no documento de destino.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteEndDocumentAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um arquivo XML que representa um livro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O documento XML é inválido.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndDocumentAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndDocumentAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEndDocumentAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEndDocumentAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha de forma assíncrona os elementos ou atributos abertos e coloca o gravador de volta no estado Inicial.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteEndDocument" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteEndDocument%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndElement();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndElement : unit -&gt; unit" Usage="xmlWriter.WriteEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, fecha um elemento e aciona o escopo de namespace correspondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o elemento não contém conteúdo, a marca de fim short "/ >" é gravado; Caso contrário, uma marca de fim completa é gravada.  
  
> [!NOTE]
>  Quando você usa o <xref:System.Xml.XmlWriter> métodos de saída XML, os elementos e atributos não serão gravados até que você chame o <xref:System.Xml.XmlWriter.Close%2A> método. Por exemplo, se você estiver usando o XmlWwriter para preencher uma <xref:System.Xml.XmlDocument>, até que você feche o <xref:System.Xml.XmlWriter>, não será capaz de observar a escrita de elementos e atributos no documento de destino.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteEndElementAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlWriter.WriteEndElement%2A> e o <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> métodos.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Isso resulta em um documento XML inválido.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndElementAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndElementAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEndElementAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEndElementAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha de forma assíncrona um elemento e remove o escopo de namespace correspondente da pilha.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteEndElement" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteEndElement%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public abstract void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEntityRef(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteEntityRef : string -&gt; unit" Usage="xmlWriter.WriteEntityRef name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome da referência da entidade.</param>
        <summary>Quando substituído em uma classe derivada, grava uma referência de entidade como <see langword="&amp;name;" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteEntityRefAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um arquivo XML que representa um livro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> é <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEntityRefAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEntityRefAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEntityRefAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEntityRefAsync(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteEntityRefAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEntityRefAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEntityRefAsync name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">O nome da referência da entidade.</param>
        <summary>Grava de forma assíncrona uma referência de entidade como <see langword="&amp;name;" />.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteEntityRef" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteEntityRef%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteFullEndElement();" />
      <MemberSignature Language="F#" Value="abstract member WriteFullEndElement : unit -&gt; unit" Usage="xmlWriter.WriteFullEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, fecha um elemento e aciona o escopo de namespace correspondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método sempre grava a marca de fim completa. Isso é útil ao lidar com os elementos que devem incluir uma marca de fim completa. Por exemplo, navegadores esperam os blocos de script HTML a ser fechado com " \< /script >".  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteFullEndElementAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlWriter.WriteEndElement%2A> e o <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> métodos.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteFullEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteFullEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteFullEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteFullEndElementAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteFullEndElementAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteFullEndElementAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteFullEndElementAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha de forma assíncrona um elemento e remove o escopo de namespace correspondente da pilha.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteFullEndElement" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public virtual void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteName : string -&gt; unit&#xA;override this.WriteName : string -&gt; unit" Usage="xmlWriter.WriteName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome a ser gravado.</param>
        <summary>Quando substituído em uma classe derivada, grava o nome especificado, garantindo que ele seja um nome válido de acordo com a recomendação do W3C XML 1.0 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Xml.XmlTextWriter.Namespaces%2A> é definido como `true`, `WriteName` também verifica se o nome também é válido de acordo com os Namespaces W3C na recomendação XML.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteNameAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> não é um nome XML válido; ou <paramref name="name" /> é <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNameAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNameAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNameAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNameAsync(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteNameAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNameAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNameAsync name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">O nome a ser gravado.</param>
        <summary>Grava de maneira assíncrona o nome especificado, garantindo que ele seja um nome válido de acordo com a recomendação do W3C XML 1.0 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteName" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteName%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public virtual void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNmToken(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteNmToken : string -&gt; unit&#xA;override this.WriteNmToken : string -&gt; unit" Usage="xmlWriter.WriteNmToken name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome a ser gravado.</param>
        <summary>Quando substituído em uma classe derivada, grava o nome especificado, garantindo que ele seja um NmToken válido de acordo com a recomendação do W3C XML 1.0 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteNmTokenAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> não é um NmToken válido; ou <paramref name="name" /> é <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNmTokenAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNmTokenAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNmTokenAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNmTokenAsync(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteNmTokenAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNmTokenAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNmTokenAsync name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">O nome a ser gravado.</param>
        <summary>Grava de maneira assíncrona o nome especificado, garantindo que ele seja um NmToken válido de acordo com a recomendação do W3C XML 1.0 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteNmToken" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteNmToken%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNode">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Copia tudo do objeto de origem para a instância atual do gravador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNode : System.Xml.XmlReader * bool -&gt; unit&#xA;override this.WriteNode : System.Xml.XmlReader * bool -&gt; unit" Usage="xmlWriter.WriteNode (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">O <see cref="T:System.Xml.XmlReader" /> para leitura.</param>
        <param name="defattr"><see langword="true" /> para copiar os atributos padrão do <see langword="XmlReader" />; caso contrário, <see langword="false" />.</param>
        <summary>Quando substituído em uma classe derivada, copia tudo do leitor no gravador e move o leitor para o início do próximo irmão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tabela a seguir mostra os tipos de nó com suporte para esse método.  
  
|NodeType|Comportamento de WriteNode|  
|--------------|------------------------|  
|`None`|Grava todos os nós, independentemente do tipo. Ou seja, o gravador consome o <xref:System.Xml.XmlReader> e grava todos os nós de leitura incluindo atributos, instruções de processamento, comentários e assim por diante.<br /><br /> Essa situação ocorre quando o <xref:System.Xml.XmlReader> está em um estado inicial. (O <xref:System.Xml.XmlReader.ReadState%2A?displayProperty=nameWithType> propriedade retorna `ReaderState.Initial`).|  
|`Element`|Grava o nó de elemento e qualquer nó de atributo.|  
|`Attribute`|Sem operação. Use <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> ou <xref:System.Xml.XmlWriter.WriteAttributeString%2A> em vez disso.|  
|`Text`|Remove o nó de texto.|  
|`CDATA`|remove o nó da seção CDATA.|  
|`EntityReference`|Grava o nó de referência de entidade.|  
|`ProcessingInstruction`|Grava o nó de instrução de processamento.|  
|`Comment`|Remove o nó de comentário.|  
|`DocumentType`|Remove o nó de tipo de documento.|  
|`SignificantWhitespace`|Remove o nó de espaço em branco significativo.|  
|`Whitespace`|Remove o nó de espaço em branco.|  
|`EndElement`|Grava a marca do elemento final.|  
|`EndEntity`|Sem operação.|  
|`XmlDeclaration`|Grava o nó de declaração XML.|  
  
 Se o leitor estiver no estado inicial, esse método Move o leitor para o final do arquivo. Se o leitor já estiver no final do arquivo ou em um estado fechado, esse método é não operacional.  
  
 O código c# a seguir copia um documento de entrada XML inteiro para o console:  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
XmlWriter writer = XmlWriter.Create(Console.Out);  
writer.WriteNode(reader, false);  
```  
  
 Se você tiver movido do nó raiz e é posicionados em outro lugar no documento de exemplo c# a seguir grava corretamente os nós.  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
reader.Read(); // Read PI  
reader.Read(); // Read Comment  
reader.Read(); // Read DOCType  
XmlWriter writer = XmlWriter.Create(Console.Out);  
while (!reader.EOF){  
  writer.WriteNode(reader, false);  
 }  
```  
  
 Se o leitor é configurado para retornar o espaço em branco e tem o gravador está configurado para recuar a saída, `WriteNode` podem produzir saída estranha. Você essencialmente obterá duplas de formatação.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava os nós de primeiro e último livro no console.  
  
 [!code-cpp[XmlWriter.WriteNode#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteNode/CPP/writenode.cpp#1)]
 [!code-csharp[XmlWriter.WriteNode#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteNode/CS/writenode.cs#1)]
 [!code-vb[XmlWriter.WriteNode#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteNode/VB/writenode.vb#1)]  
  
 O exemplo usa o arquivo `books.xml`, como entrada.  
  
 [!code-xml[XmlWriter.WriteNode#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteNode/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> contém caracteres inválidos.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (navigator As XPathNavigator, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNode : System.Xml.XPath.XPathNavigator * bool -&gt; unit&#xA;override this.WriteNode : System.Xml.XPath.XPathNavigator * bool -&gt; unit" Usage="xmlWriter.WriteNode (navigator, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="defattr" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="navigator">O <see cref="T:System.Xml.XPath.XPathNavigator" /> do qual copiar.</param>
        <param name="defattr"><see langword="true" /> para copiar os atributos padrão; caso contrário, <see langword="false" />.</param>
        <summary>Copia tudo do objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> no gravador. A posição do <see cref="T:System.Xml.XPath.XPathNavigator" /> permanece inalterada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tabela a seguir mostra com suporte `XPath` tipos de nó para esse método.  
  
|XPathNodeType|Comportamento de WriteNode|  
|-------------------|------------------------|  
|`Root`|Grava todos os nós, independentemente do tipo. Ou seja, o gravador consome o <xref:System.Xml.XPath.XPathNavigator> e grava todos os nós do nó raiz (incluindo atributos, instruções de processamento, comentários e assim por diante).|  
|`Element`|Grava o nó de elemento e qualquer nó de atributo.|  
|`Attribute`|Sem operação. Use <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> ou <xref:System.Xml.XmlWriter.WriteAttributeString%2A> em vez disso.|  
|`Text`|Remove o nó de texto.|  
|`Namespace`|Sem operação. Use o <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> ou <xref:System.Xml.XmlWriter.WriteAttributeString%2A> método para gravar a declaração de namespace.|  
|`ProcessingInstruction`|Grava o nó de instrução de processamento.|  
|`Comment`|Remove o nó de comentário.|  
|`SignificantWhitespace`|Remove o nó de espaço em branco significativo.|  
|`Whitespace`|Remove o nó de espaço em branco.|  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Xml.XmlWriter.WriteNode%2A> método para copiar o primeiro nó de livro de um documento e gravá-lo no console.  
  
 [!code-csharp[XmlWriteNode_nav#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriteNode_nav/CS/XmlWriteNode_nav.cs#1)]
 [!code-vb[XmlWriteNode_nav#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriteNode_nav/VB/XmlWriteNode_nav.vb#1)]  
  
 O exemplo usa o arquivo de Books. XML como entrada.  
  
 [!code-xml[XPathXMLExamples#1](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/books.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="navigator" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNodeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <summary>Copia de forma assíncrona tudo do objeto de origem para a instância atual do gravador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteNode%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNodeAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNodeAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNodeAsync (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defattr" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">O <see cref="T:System.Xml.XmlReader" /> para leitura.</param>
        <param name="defattr"><see langword="true" /> para copiar os atributos padrão do <see langword="XmlReader" />; caso contrário, <see langword="false" />.</param>
        <summary>Copia de forma assíncrona tudo do leitor no gravador e move o leitor para o início do próximo irmão.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteNode" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteNode%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (navigator As XPathNavigator, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNodeAsync : System.Xml.XPath.XPathNavigator * bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNodeAsync : System.Xml.XPath.XPathNavigator * bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNodeAsync (navigator, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;netcore-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="defattr" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="navigator">O <see cref="T:System.Xml.XPath.XPathNavigator" /> do qual copiar.</param>
        <param name="defattr"><see langword="true" /> para copiar os atributos padrão; caso contrário, <see langword="false" />.</param>
        <summary>Copia de forma assíncrona tudo do objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> para o gravador. A posição do <see cref="T:System.Xml.XPath.XPathNavigator" /> permanece inalterada.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteNode" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteNode%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public abstract void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteProcessingInstruction : string * string -&gt; unit" Usage="xmlWriter.WriteProcessingInstruction (name, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome da instrução de processamento.</param>
        <param name="text">O texto a ser incluído na instrução de processamento.</param>
        <summary>Quando substituído em uma classe derivada, grava uma instrução de processamento com um espaço entre o nome e o texto da seguinte maneira: &lt;?nome texto?&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser usado para gravar a declaração XML (em vez de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>). Isso pode resultar no atributo de codificação que está sendo escrito incorretamente. Por exemplo, o código c# a seguir resultaria em um documento XML inválido porque a codificação padrão é UTF-8.  
  
```csharp  
XmlWriter writer = XmlWriter.Create("output.xml");  
writer.WriteProcessingInstruction("xml", "version='1.0' encoding='UTF-16'");  
writer.WriteStartElement("root");  
writer.Close();  
```  
  
 Se `text` seja `null` ou `String.Empty`, esse método grava uma `ProcessingInstruction` sem dados de conteúdo, por exemplo \<? nome? >.  
  
 Se o texto contém uma sequência inválida de "? >", o <xref:System.Xml.XmlWriter> podem ambos throw uma <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> objetos) ou inserir um espaço "? > "para evitar a escrita de XML inválido (<xref:System.Xml.XmlWriter> objetos criados pelo <xref:System.Xml.XmlWriter.Create%2A> método).  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteProcessingInstructionAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um arquivo XML que representa um livro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O texto poderia resultar em um documento XML malformado.  
  
 <paramref name="name" /> é <see langword="null" /> ou <see langword="String.Empty" />.  
  
Esse método está sendo usado para criar uma declaração XML após uma chamada a <see cref="M:System.Xml.XmlWriter.WriteStartDocument" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstructionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteProcessingInstructionAsync (name As String, text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteProcessingInstructionAsync(System::String ^ name, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteProcessingInstructionAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteProcessingInstructionAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteProcessingInstructionAsync (name, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">O nome da instrução de processamento.</param>
        <param name="text">O texto a ser incluído na instrução de processamento.</param>
        <summary>Grava de forma assíncrona uma instrução de processamento com um espaço entre o nome e o texto da seguinte maneira: &lt;? nome texto?&gt;.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteProcessingInstruction" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteQualifiedName : string * string -&gt; unit&#xA;override this.WriteQualifiedName : string * string -&gt; unit" Usage="xmlWriter.WriteQualifiedName (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local a ser gravado.</param>
        <param name="ns">O URI do namespace para o nome.</param>
        <summary>Quando substituído em uma classe derivada, grava o nome qualificado do namespace. Este método pesquisa o prefixo que está no escopo para o namespace fornecido.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `ns` é mapeado para o namespace padrão atual, nenhum prefixo é gerado.  
  
 Ao escrever os valores de atributo, este método gera um prefixo se `ns` não for encontrado. Ao gravar o conteúdo do elemento, ele gera uma exceção se `ns` não for encontrado.  
  
> [!NOTE]
>  Se uma classe derivada de <xref:System.Xml.XmlWriter> substituem esse método `localName` não é verificado para ser um nome válido de XML do W3C. Nesse caso, antes de chamar esse método, a validade da cadeia de caracteres pode ser verificada pelo <xref:System.Xml.XmlReader.IsName%2A> método.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteQualifiedNameAsync%2A>.  
  
   
  
## Examples  
 O exemplo grava o elemento a seguir:  
  
```xml  
<root xmlns:x="urn:abc">  
  <item href="#x:test"/>  
</root>  
```  
  
 [!code-csharp[XmlWriter_v2#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#5)]
 [!code-vb[XmlWriter_v2#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="localName" /> é <see langword="null" /> ou <see langword="String.Empty" />.  
  
 <paramref name="localName" /> não é um nome válido.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteQualifiedNameAsync (localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteQualifiedNameAsync(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteQualifiedNameAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteQualifiedNameAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteQualifiedNameAsync (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;netcore-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ns" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local a ser gravado.</param>
        <param name="ns">O URI do namespace para o nome.</param>
        <summary>Grava de forma assíncrona o nome qualificado do namespace. Este método pesquisa o prefixo que está no escopo para o namespace fornecido.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteQualifiedName" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Quando substituído em uma classe derivada, grava uma marcação bruta manualmente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(System::String ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRaw : string -&gt; unit" Usage="xmlWriter.WriteRaw data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">A cadeia de caracteres que contém o texto a ser gravado.</param>
        <summary>Quando substituído em uma classe derivada, grava manualmente a marcação bruta de uma cadeia de caracteres.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não escapa caracteres especiais.  
  
> [!IMPORTANT]
>  O <xref:System.Xml.XmlWriter> não valida os dados que são passados para o <xref:System.Xml.XmlWriter.WriteRaw%2A> método. Você não deve passar dados arbitrários para esse método.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
   
  
## Examples  
 Consulte <xref:System.Xml.XmlTextWriter.WriteRaw%2A?displayProperty=nameWithType> para obter um exemplo usando esse método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="data" /> é <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteRaw : char[] * int * int -&gt; unit" Usage="xmlWriter.WriteRaw (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz de caracteres que contém o texto a ser gravado.</param>
        <param name="index">A posição no buffer que indica o início do texto a ser escrito.</param>
        <param name="count">O número de caracteres a serem gravados.</param>
        <summary>Quando substituído em uma classe derivada, grava a marcação bruta manualmente de um buffer de caracteres.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não escapa caracteres especiais.  
  
> [!IMPORTANT]
>  O <xref:System.Xml.XmlWriter> não valida os dados que são passados para o <xref:System.Xml.XmlWriter.WriteRaw%2A> método. Você não deve passar dados arbitrários para esse método.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ou <paramref name="count" /> é menor que zero.  
  
- ou - 
O tamanho do buffer menos <paramref name="index" /> é menor que <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRawAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <summary>Grava de forma assíncrona e manual a marcação bruta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteRaw%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (data As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(System::String ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRawAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteRawAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteRawAsync data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="data">A cadeia de caracteres que contém o texto a ser gravado.</param>
        <summary>Grava de forma assíncrona e manual a marcação bruta de uma cadeia de caracteres.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteRaw" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteRaw%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteRawAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteRawAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteRawAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Uma matriz de caracteres que contém o texto a ser gravado.</param>
        <param name="index">A posição no buffer que indica o início do texto a ser escrito.</param>
        <param name="count">O número de caracteres a serem gravados.</param>
        <summary>Grava de forma assíncrona e manual a marcação bruta de um buffer de caracteres.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteRaw" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteRaw%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Quando substituído em uma classe derivada, grava o início de um atributo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartAttribute : string -&gt; unit" Usage="xmlWriter.WriteStartAttribute localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do atributo.</param>
        <summary>Grava o início de um atributo com o nome do local especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método permite que você escreva um valor usando vários métodos de gravação.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O gravador está fechado.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="member this.WriteStartAttribute : string * string -&gt; unit" Usage="xmlWriter.WriteStartAttribute (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do atributo.</param>
        <param name="ns">O URI do namespace do atributo.</param>
        <summary>Grava o início de um atributo com o nome do local e o URI de namespace especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta é uma versão mais avançada dos <xref:System.Xml.XmlWriter.WriteAttributeString%2A> que permite que você escreva um valor de atributo usando vários métodos de gravação, como <xref:System.Xml.XmlWriter.WriteString%2A>, <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>e assim por diante.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
   
  
## Examples  
 Consulte <xref:System.Xml.XmlTextWriter.WriteStartAttribute%2A?displayProperty=nameWithType> para obter um exemplo usando esse método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <altmember cref="M:System.Xml.XmlWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartAttribute : string * string * string -&gt; unit" Usage="xmlWriter.WriteStartAttribute (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do namespace do atributo.</param>
        <param name="localName">O nome local do atributo.</param>
        <param name="ns">O URI do namespace para o atributo.</param>
        <summary>Quando substituído em uma classe derivada, grava o início de um atributo com o prefixo especificado, o nome local e o URI de namespace.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método permite que você escreva um valor usando vários métodos de gravação.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteStartAttributeAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteStartAttributeAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartAttributeAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartAttributeAsync : string * string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartAttributeAsync : string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartAttributeAsync (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localName" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ns" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do namespace do atributo.</param>
        <param name="localName">O nome local do atributo.</param>
        <param name="ns">O URI do namespace para o atributo.</param>
        <summary>Grava de forma assíncrona o início de um atributo com o prefixo, o nome local e o URI de namespace especificados.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteStartAttribute" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteStartAttribute%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Quando substituído em uma classe derivada, grava a declaração XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument();" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocument : unit -&gt; unit" Usage="xmlWriter.WriteStartDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, grava a declaração XML com a versão "1.0".</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nível de codificação do documento é determinado por como o gravador é implementado. Por exemplo, se um <xref:System.Text.Encoding> especificado no objeto de `XmlTextWriter` construtor, isso determina o valor do atributo de codificação. Esse método não cria um atributo autônomo.  
  
 Quando `WriteStartDocument` é chamado o gravador valida que você estiver escrevendo um documento XML bem formado. Por exemplo, ele verifica se a declaração XML é o primeiro nó, o que um e apenas um elemento de nível raiz existe e assim por diante. Se esse método não for chamado, o gravador pressupõe um fragmento XML está sendo gravado e aplica-se nenhuma regra de nível raiz.  
  
 Se `WriteStartDocument` foi chamado e, em seguida, o <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> método é usado para criar outra declaração XML, uma exceção será gerada.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Este não é o primeiro método de gravação chamado após o construtor.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument(bool standalone);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocument : bool -&gt; unit" Usage="xmlWriter.WriteStartDocument standalone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Se <see langword="true" />, grava "standalone=yes"; se <see langword="false" />, ele grava "standalone=no".</param>
        <summary>Quando substituído em uma classe derivada, grava a declaração XML com a versão "1.0" e o atributo autônomo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nível de codificação do documento é determinado por como o gravador é implementado. Por exemplo, se um <xref:System.Text.Encoding> especificado no objeto de `XmlTextWriter` construtor, isso determina o valor do atributo de codificação.  
  
 Quando `WriteStartDocument` é chamado, o gravador valida que você estiver escrevendo um documento XML bem formado. Por exemplo, ele verifica se a declaração XML é o primeiro nó, o que um e apenas um elemento de nível raiz existe e assim por diante. Se esse método não for chamado, o gravador pressupõe um fragmento XML está sendo gravado e aplica-se nenhuma regra de nível raiz.  
  
 Se `WriteStartDocument` foi chamado e, em seguida, o <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> método é usado para criar outra declaração XML, uma exceção será gerada.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Este não é o primeiro método de gravação chamado após o construtor.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocumentAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <summary>Grava de forma assíncrona a declaração XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocumentAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartDocumentAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartDocumentAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Grava de forma assíncrona a declaração XML com a versão “1.0”.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteStartDocument" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync (standalone As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync(bool standalone);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocumentAsync : bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartDocumentAsync : bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartDocumentAsync standalone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="standalone">Se <see langword="true" />, grava "standalone=yes"; se <see langword="false" />, ele grava "standalone=no".</param>
        <summary>Grava de forma assíncrona a declaração XML com a versão “1.0” e o atributo autônomo.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteStartDocument" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Quando substituído em uma classe derivada, grava a marca de início especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartElement : string -&gt; unit" Usage="xmlWriter.WriteStartElement localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do elemento.</param>
        <summary>Quando substituído em uma classe derivada, grava uma marca de início com o nome local especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um nó XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O gravador está fechado.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="member this.WriteStartElement : string * string -&gt; unit" Usage="xmlWriter.WriteStartElement (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">O nome local do elemento.</param>
        <param name="ns">O URI do namespace a ser associado ao elemento. Se este namespace já estiver no escopo e tiver um prefixo associado, o gravador gravará esse prefixo também automaticamente.</param>
        <summary>Quando substituído em uma classe derivada, grava a marca de início especificada e a associa ao namespace específico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Depois de chamar esse método, você pode gravar atributos ou criar conteúdo usando <xref:System.Xml.XmlWriter.WriteComment%2A>, <xref:System.Xml.XmlWriter.WriteString%2A>, ou `WriteStartElement` para elementos filho. Você pode fechar o elemento com um <xref:System.Xml.XmlWriter.WriteEndElement%2A> ou <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>. Por exemplo, o código c# a seguir:  
  
```csharp  
writer.WriteStartElement("item",null);  
writer.WriteString("some text");  
writer.WriteEndElement();  
```  
  
 Gera a saída a seguir:  
  
```xml  
<item>some text</item>  
```  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O gravador está fechado.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartElement : string * string * string -&gt; unit" Usage="xmlWriter.WriteStartElement (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do namespace do elemento.</param>
        <param name="localName">O nome local do elemento.</param>
        <param name="ns">O URI do namespace a ser associado ao elemento.</param>
        <summary>Quando substituído em uma classe derivada, grava a marca de início especificada e a associa ao prefixo e ao namespace específicos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um fragmento XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O gravador está fechado.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Há um caractere no buffer que é um caractere XML válido, mas que não é válido para a codificação de saída. Por exemplo, se a codificação de saída for ASCII, use apenas caracteres no intervalo de 0 a 127 para nomes de elemento e de atributo. O caractere inválido pode estar no argumento do método ou em um argumento dos métodos anteriores que foram gravados no buffer. Esses caracteres são substituídos por referências de entidade de caracteres de escape quando possível (por exemplo, em nós de texto ou valores de atributo). No entanto, a referência de entidade de caracteres não é permitida em nomes de elemento e de atributo, comentários, instruções de processamento ou seções de CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartElementAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartElementAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartElementAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartElementAsync : string * string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartElementAsync : string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartElementAsync (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localName" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ns" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">O prefixo do namespace do elemento.</param>
        <param name="localName">O nome local do elemento.</param>
        <param name="ns">O URI do namespace a ser associado ao elemento.</param>
        <summary>Grava de forma assíncrona a marca de início especificada e a associa ao namespace e ao prefixo fornecidos.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteStartElement" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteStartElement%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteState : System.Xml.WriteState" Usage="System.Xml.XmlWriter.WriteState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando substituído em uma classe derivada, obtém o estado do gravador.</summary>
        <value>Um dos valores de <see cref="T:System.Xml.WriteState" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteString(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteString : string -&gt; unit" Usage="xmlWriter.WriteString text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">O texto a gravação.</param>
        <summary>Quando substituído em uma classe derivada, grava o conteúdo de texto especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteString` faz o seguinte:  
  
-   Os caracteres `&`, `<`, e `>` são substituídos por `&amp;`, `&lt;`, e `&gt;`, respectivamente.  
  
-   O comportamento padrão de um <xref:System.Xml.XmlWriter> criado usando <xref:System.Xml.XmlWriter.Create%2A> é lançar um <xref:System.ArgumentException> ao tentar gravar valores de caractere no x-0x1F de intervalo de 0 (excluindo o espaço em branco caracteres 0xD, 0xA e 0x9). Esses caracteres XML inválidos podem ser gravados, ao criar o <xref:System.Xml.XmlWriter> com o <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> propriedade definida como `false`. Isso resultará em caracteres que está sendo substituídos com entidades de caractere numérico (&\#0; a & #0x1F). Além disso, uma <xref:System.Xml.XmlTextWriter> criado com o `new` operador substituirá os caracteres inválidos com entidades de caractere numérico por padrão.  
  
 **Observação** Microsoft Incentive a prática de escrever caracteres XML inválidos, pois muitos aplicativos que consomem o XML não são projetados para lidar com caracteres inválidos.  
  
-   Se `WriteString` é chamado no contexto de um valor de atributo, aspas simples e duplas são substituídas por `&quot;` e `&apos;` , respectivamente.  
  
 Por exemplo, essa cadeia de caracteres de entrada `test<item>test` é escrito como  
  
```  
test&lt;item&gt;test  
```  
  
 Se `text` seja `null` ou `String.Empty`, esse método grava um nó de texto sem conteúdo de dados.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteStringAsync%2A>.  
  
   
  
## Examples  
 O exemplo a seguir grava um nó XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A cadeia de caracteres contém um par alternativo inválido.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStringAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStringAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStringAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStringAsync(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteStringAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStringAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStringAsync text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="text">O texto a gravação.</param>
        <summary>Grava de forma assíncrona o conteúdo de texto fornecido.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteString" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteString%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberSignature Language="F#" Value="abstract member WriteSurrogateCharEntity : char * char -&gt; unit" Usage="xmlWriter.WriteSurrogateCharEntity (lowChar, highChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">A alternativa baixa. Este deve ser um valor entre 0xDC00 e 0xDFFF.</param>
        <param name="highChar">A alternativa alta. Este deve ser um valor entre 0xD800 e 0xDBFF.</param>
        <summary>Quando substituído em uma classe derivada, gera e grava a entidade de caracteres alternativos para o par de caracteres alternativos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método só é aplicável em sistemas que usam a codificação UTF-16.  
  
 A entidade de caracteres substituta é gravada em formato hexadecimal. O intervalo de caracteres substitutos é #x10 10000 para #x10FFFF. A fórmula a seguir é usada para gerar a entidade de caracteres substituta: (`highChar` -0xD800) * 0x400 + (`lowChar` -0xDC00) + 0x10000  
  
 Para HTML e XML, o conjunto de caracteres do documento (e, portanto, a notação de referências de caractere numérico) se baseia em UCS [ISO-10646]. Uma referência de caractere numérico único em um documento de origem, portanto, pode em alguns casos corresponder a duas unidades de 16 bits em uma cadeia de caracteres (um substituto alto e um substituto baixo). Essas unidades de 16 bits são chamadas de um par substituto.  
  
 Para obter mais informações sobre caracteres ou substitutos, consulte a seção 3.7 do Unicode 3.0/Unicode 2.0 padrão localizado em <https://www.unicode.org>, ou [seção 2.2 de recomendação do W3C XML 1.0](https://www.w3.org/TR/REC-xml#charsets).  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um par de caracteres alternativos inválido foi passado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteSurrogateCharEntityAsync (lowChar As Char, highChar As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteSurrogateCharEntityAsync(char lowChar, char highChar);" />
      <MemberSignature Language="F#" Value="abstract member WriteSurrogateCharEntityAsync : char * char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteSurrogateCharEntityAsync : char * char -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteSurrogateCharEntityAsync (lowChar, highChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="highChar" Type="System.Char" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="lowChar">A alternativa baixa. Este deve ser um valor entre 0xDC00 e 0xDFFF.</param>
        <param name="highChar">A alternativa alta. Este deve ser um valor entre 0xD800 e 0xDBFF.</param>
        <summary>Gera e grava a entidade de caracteres alternativos de forma assíncrona para o par de caracteres alternativos.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteSurrogateCharEntity" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteSurrogateCharEntity%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteValue">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
        <summary>Grava um único valor de tipo simples.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Xml.XmlWriter.WriteValue%2A> método aceita simples-tipados valores do common language runtime (CLR), converte-os em suas representações de cadeia de caracteres acordo com as regras de conversão XML schema definition language (XSD) dados tipo e grava-os para fora usando o <xref:System.Xml.XmlWriter.WriteString%2A> método. Isso lhe permite fazer o pipeline de valores de tipo simples com mínima sobrecarga reanálise ao passar dados entre <xref:System.Xml.XPath.XPathDocument>, <xref:System.Xml.XmlReader>, e <xref:System.Xml.XmlWriter> objetos. Essa capacidade também é útil ao lidar com tipos simples de CLR e um <xref:System.Xml.XmlWriter> instância. Você pode chamar o <xref:System.Xml.XmlWriter.WriteValue%2A> método para gravar o valor tipado em vez de usar os métodos de <xref:System.Xml.XmlConvert> classe para converter os dados digitados em um valor de cadeia de caracteres antes de escrever para fora.  
  
 Para operações assíncronas, converter o valor de retorno <xref:System.Xml.XmlWriter.WriteValue%2A> para uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 A tabela a seguir mostra o padrão de tipos de dados XSD que correspondem aos tipos CLR.  
  
 Se o objeto CLR é um tipo de lista, como <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList>, ou <xref:System.Collections.ICollection>, é tratado como uma matriz de tipo de valor.  
  
|Tipo CLR|Tipo de dados XSD padrão|  
|--------------|---------------------------|  
|<xref:System.Boolean?displayProperty=nameWithType>|xsd:boolean|  
|<xref:System.Byte?displayProperty=nameWithType>**|xsd:integer|  
|Matriz <xref:System.Byte?displayProperty=nameWithType>|xsd:base64Binary|  
|<xref:System.Char?displayProperty=nameWithType>**|xsd:string|  
|<xref:System.DateTime?displayProperty=nameWithType>|xsd:dateTime|  
|<xref:System.Decimal?displayProperty=nameWithType>|xsd:decimal|  
|<xref:System.Double?displayProperty=nameWithType>|xsd:double|  
|<xref:System.Int16?displayProperty=nameWithType>**|xsd:integer|  
|<xref:System.Int32?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Int64?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Single?displayProperty=nameWithType>|xsd:float|  
|<xref:System.String?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.TextReader?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.BinaryReader?displayProperty=nameWithType>|xsd:base64Binary|  
  
 ** Esses tipos não são compatíveis com CLS. Eles não têm correspondentes <xref:System.Xml.XmlWriter.WriteValue%2A> métodos.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(bool value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : bool -&gt; unit&#xA;override this.WriteValue : bool -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.Boolean" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.Boolean" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Quando o método de <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado, <xref:System.Xml.XmlWriter> converte o valor em suas representações de cadeia de caracteres de acordo com as regras e grava o tipo de dados de (XSD) de esquema XML ele usa para fora o método de <xref:System.Xml.XmlWriter.WriteString%2A> .  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : DateTime -&gt; unit&#xA;override this.WriteValue : DateTime -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.DateTime" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Quando o método de <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado, <xref:System.Xml.XmlWriter> converte o valor em suas representações de cadeia de caracteres de acordo com as regras e grava o tipo de dados de (XSD) de esquema XML ele usa para fora o método de <xref:System.Xml.XmlWriter.WriteString%2A> .  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir grava um nó de livro usando dados digitados.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : DateTimeOffset -&gt; unit&#xA;override this.WriteValue : DateTimeOffset -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.DateTimeOffset" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.DateTimeOffset" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : decimal -&gt; unit&#xA;override this.WriteValue : decimal -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.Decimal" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.Decimal" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Quando o método de <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado, <xref:System.Xml.XmlWriter> converte o valor em suas representações de cadeia de caracteres de acordo com as regras e grava o tipo de dados de (XSD) de esquema XML ele usa para fora o método de <xref:System.Xml.XmlWriter.WriteString%2A> .  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(double value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : double -&gt; unit&#xA;override this.WriteValue : double -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.Double" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.Double" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Quando o método de <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado, <xref:System.Xml.XmlWriter> converte o valor em suas representações de cadeia de caracteres de acordo com as regras e grava o tipo de dados de (XSD) de esquema XML ele usa para fora o método de <xref:System.Xml.XmlWriter.WriteString%2A> .  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir grava um nó de livro usando dados digitados.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(int value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : int -&gt; unit&#xA;override this.WriteValue : int -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.Int32" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.Int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Quando o método de <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado, <xref:System.Xml.XmlWriter> converte o valor em suas representações de cadeia de caracteres de acordo com as regras e grava o tipo de dados de (XSD) de esquema XML ele usa para fora o método de <xref:System.Xml.XmlWriter.WriteString%2A> .  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(long value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : int64 -&gt; unit&#xA;override this.WriteValue : int64 -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.Int64" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.Int64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Quando o método de <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado, <xref:System.Xml.XmlWriter> converte o valor em suas representações de cadeia de caracteres de acordo com as regras e grava o tipo de dados de (XSD) de esquema XML ele usa para fora o método de <xref:System.Xml.XmlWriter.WriteString%2A> .  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : obj -&gt; unit&#xA;override this.WriteValue : obj -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor do objeto a ser gravado.  
  
 **Observação** na versão .NET Framework 3.5, esse método aceita <see cref="T:System.DateTimeOffset" /> como um parâmetro.</param>
        <summary>Grava o valor do objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime (CLR) e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Se o objeto CLR é um tipo de lista, como <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList>, ou <xref:System.Collections.ICollection>, ela será tratada como uma matriz do tipo de valor. O <xref:System.Xml.XmlWriter> converte o valor para suas representações de cadeia de caracteres acordo com o tipo de dados de esquema XML (XSD) de regras e grava-o usando o <xref:System.Xml.XmlWriter.WriteString%2A> método.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.ArgumentNullException">O <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">O gravador está fechado ou em estado de erro.

- ou -

Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(float value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : single -&gt; unit&#xA;override this.WriteValue : single -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O número de ponto flutuante de precisão simples a ser gravado.</param>
        <summary>Grava um número de ponto flutuante de precisão simples.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Quando o método de <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado, <xref:System.Xml.XmlWriter> converte o valor em suas representações de cadeia de caracteres de acordo com as regras e grava o tipo de dados de (XSD) de esquema XML ele usa para fora o método de <xref:System.Xml.XmlWriter.WriteString%2A> .  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, converter o valor de retorno desse método em uma cadeia de caracteres e usar o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : string -&gt; unit&#xA;override this.WriteValue : string -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">O valor <see cref="T:System.String" /> a ser gravado.</param>
        <summary>Grava um valor <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa o objeto do common language runtime e converte o valor de entrada para o tipo de saída desejado usando regras de conversão de tipo de dados de esquema XML definição XSD (linguagem).  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> é chamado várias vezes sucessivamente, os valores não são delimitados por um espaço. Você deve chamar <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre chamadas a <xref:System.Xml.XmlWriter.WriteValue%2A> para inserir o espaço em branco. Passar um tipo de matriz para o <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> sobrecarga para gravar uma matriz de valores distintos.  
  
 Se esse método for chamado em um <xref:System.Xml.XmlWriter> que saídas somente texto, o valor tipado é serializado para texto da instância.  
  
 Para operações assíncronas, use o <xref:System.Xml.XmlWriter.WriteStringAsync%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Um valor inválido foi especificado.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public abstract void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteWhitespace(System::String ^ ws);" />
      <MemberSignature Language="F#" Value="abstract member WriteWhitespace : string -&gt; unit" Usage="xmlWriter.WriteWhitespace ws" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">A cadeia de caracteres de espaço em branco.</param>
        <summary>Quando substituído em uma classe derivada, grava o espaço em branco determinado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é usado para formatar manualmente seu documento.  
  
 Para obter a versão assíncrona deste método, consulte <xref:System.Xml.XmlWriter.WriteWhitespaceAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A cadeia de caracteres contém caracteres que não sejam em branco.</exception>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteWhitespaceAsync (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteWhitespaceAsync (ws As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteWhitespaceAsync(System::String ^ ws);" />
      <MemberSignature Language="F#" Value="abstract member WriteWhitespaceAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteWhitespaceAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteWhitespaceAsync ws" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ws">A cadeia de caracteres de espaço em branco.</param>
        <summary>Grava de forma assíncrona o espaço em branco determinado.</summary>
        <returns>Uma tarefa que representa a operação <see langword="WriteWhitespace" /> assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa é a versão assíncrona de <xref:System.Xml.XmlWriter.WriteWhitespace%2A>, com a mesma funcionalidade. Para usar esse método, você deve definir a <xref:System.Xml.XmlWriterSettings.Async%2A> sinalizador como `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.

- ou -

Um método assíncrono <see cref="T:System.Xml.XmlWriter" /> foi chamado sem definir o sinalizador <see cref="P:System.Xml.XmlWriterSettings.Async" /> como <see langword="true" />. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Defina XmlWriterSettings.Async como verdadeiro se desejar usar Métodos Assíncronos”.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programação assíncrona com Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlWriter.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando substituído em uma classe derivada, obtém o escopo <see langword="xml:lang" /> atual.</summary>
        <value>Atual <see langword="xml:lang" /> escopo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade permite que um componente descobrir em qual estado a que outro componente deixou o gravador. Por exemplo, talvez um componente quer dizer que texto de ajuda de idioma para gerar a outra. As informações de idioma são comunicadas ao escrever um `xml:lang` atributo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlWriter.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando substituído em uma classe derivada, obtém um <see cref="T:System.Xml.XmlSpace" /> que representa o escopo <see langword="xml:space" /> atual.</summary>
        <value>Um <see langword="XmlSpace" /> que representa o escopo de <see langword="xml:space" /> atual.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Significado 
 </description></listheader><item><term><see langword="None" /></term><description> Esse é o padrão se nenhuma <see langword="xml:space" /> escopo existe.  
  
 </description></item><item><term><see langword="Default" /></term><description> O escopo atual é <see langword="xml:space" />= "default".  
  
 </description></item><item><term><see langword="Preserve" /></term><description> O escopo atual é <see langword="xml:space" />= "preserve".  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso permite que um componente descobrir qual estado a outro componente deixou o gravador no.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um método <see cref="T:System.Xml.XmlWriter" /> foi chamado antes do término de uma operação assíncrona anterior. Nesse caso, <see cref="T:System.InvalidOperationException" /> será gerado com a mensagem “Uma operação assíncrona já está em andamento”.</exception>
      </Docs>
    </Member>
  </Members>
</Type>