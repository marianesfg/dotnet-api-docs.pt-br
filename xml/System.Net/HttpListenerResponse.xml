<Type Name="HttpListenerResponse" FullName="System.Net.HttpListenerResponse">
  <Metadata><Meta Name="ms.openlocfilehash" Value="609f8d676c948d9879669f6825a3d23aef1c4078" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53222116" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListenerResponse : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerResponse extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerResponse" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerResponse&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerResponse sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type HttpListenerResponse = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa uma resposta a uma solicitação que está sendo tratada por um <see cref="T:System.Net.HttpListener" /> objeto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um cliente faz uma solicitação para um recurso manipulado por um <xref:System.Net.HttpListener> do objeto, a solicitação e resposta são disponibilizadas para seu aplicativo em um <xref:System.Net.HttpListenerContext> objeto. A solicitação é representada por um <xref:System.Net.HttpListenerRequest> do objeto e está disponível no <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> propriedade. A resposta é representada por um <xref:System.Net.HttpListenerResponse> do objeto e está disponível no <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> propriedade.  
  
 Você pode personalizar a resposta, definindo diversas propriedades, tais como <xref:System.Net.HttpListenerResponse.StatusCode%2A>, <xref:System.Net.HttpListenerResponse.StatusDescription%2A>, e <xref:System.Net.HttpListenerResponse.Cookies%2A>. Use o <xref:System.Net.HttpListenerResponse.OutputStream%2A?displayProperty=nameWithType> propriedade para obter um <xref:System.IO.Stream> instância à qual resposta os dados podem ser gravados. Por fim, envie os dados de resposta ao cliente chamando o <xref:System.Net.HttpListenerResponse.Close%2A> método.  
 
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="T:System.Net.HttpListenerContext" />
    <altmember cref="T:System.Net.HttpListenerRequest" />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="httpListenerResponse.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fecha a conexão com o cliente sem enviar uma resposta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método em um objeto que já foi fechado não tem nenhum efeito. Se a resposta já não foi fechada, este método fecha a ele e os respectivos <xref:System.Net.HttpListenerRequest> e <xref:System.Net.HttpListenerContext> objetos. A conexão para o cliente também é fechado, independentemente do <xref:System.Net.HttpListenerRequest.KeepAlive%2A> valor da propriedade da solicitação do cliente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="public void AddHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHeader(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHeader (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHeader(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddHeader : string * string -&gt; unit" Usage="httpListenerResponse.AddHeader (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome do cabeçalho HTTP a ser definido.</param>
        <param name="value">O valor do cabeçalho <paramref name="name" />.</param>
        <summary>Adiciona o cabeçalho e o valor especificados aos cabeçalhos HTTP dessa resposta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método é equivalente a chamar o <xref:System.Net.WebHeaderCollection.Set%2A> método na coleção retornada pela <xref:System.Net.HttpListenerResponse.Headers%2A> propriedade.  
  
 Se o cabeçalho especificado na `name` não existir, esse método insere um novo cabeçalho para o <xref:System.Net.HttpListenerResponse.Headers%2A> coleção da propriedade. Se `name` está presente na coleção, esse substitui o método existente de valor com `value`. Para adicionar um valor a um cabeçalho existente sem substituir o valor existente, use o <xref:System.Net.HttpListenerResponse.AppendHeader%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como adicionar um cabeçalho usando esta propriedade.  
  
 [!code-csharp[Net_Listener_Basic#26](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> é <see langword="null" /> ou uma cadeia de caracteres vazia ("").</exception>
        <exception cref="T:System.ArgumentException">Você não tem permissão para especificar um valor para o cabeçalho especificado.  
  
- ou - 
 <paramref name="name" /> ou <paramref name="value" /> contém caracteres inválidos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tamanho de <paramref name="value" /> é maior que 65.535 caracteres.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
        <altmember cref="T:System.Net.WebHeaderCollection" />
      </Docs>
    </Member>
    <Member MemberName="AppendCookie">
      <MemberSignature Language="C#" Value="public void AppendCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendCookie(System::Net::Cookie ^ cookie);" />
      <MemberSignature Language="F#" Value="member this.AppendCookie : System.Net.Cookie -&gt; unit" Usage="httpListenerResponse.AppendCookie cookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">O <see cref="T:System.Net.Cookie" /> a adicionar à coleção a ser enviada com essa resposta.</param>
        <summary>Adiciona o <see cref="T:System.Net.Cookie" /> especificado à coleção de cookies para essa resposta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método é equivalente a chamar o <xref:System.Net.CookieCollection.Add%2A> método na coleção retornada pela <xref:System.Net.HttpListenerResponse.Cookies%2A> propriedade.  
  
 Se o cookie especificado não existe na <xref:System.Net.HttpListenerResponse.Cookies%2A> coleção da propriedade, `cookie` é adicionado. Se o cookie existe na coleção, `cookie` substitui-lo.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como adicionar um cookie para uma resposta  
  
 [!code-csharp[Net_Listener_Basic#20](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cookie" /> é <see langword="null" />.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="AppendHeader">
      <MemberSignature Language="C#" Value="public void AppendHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendHeader(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendHeader (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendHeader(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AppendHeader : string * string -&gt; unit" Usage="httpListenerResponse.AppendHeader (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome do cabeçalho HTTP ao qual acrescentar <paramref name="value" />.</param>
        <param name="value">O valor para acrescentar ao cabeçalho <paramref name="name" />.</param>
        <summary>Acrescenta um valor ao cabeçalho HTTP especificado a ser enviado com essa resposta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar esse método é equivalente a chamar o <xref:System.Net.WebHeaderCollection.Add%2A> método na coleção retornada pela <xref:System.Net.HttpListenerResponse.Headers%2A> propriedade.  
  
 Se o cabeçalho especificado na `header` não existir, esse método insere um novo cabeçalho para o <xref:System.Net.HttpListenerResponse.Headers%2A> coleção da propriedade. Se `header` está presente na coleção, esse método adiciona `value` para os valores existentes. Para substituir o valor de um cabeçalho existente, use o <xref:System.Net.HttpListenerResponse.AddHeader%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> é <see langword="null" /> ou uma cadeia de caracteres vazia ("").  
  
- ou - 
Você não tem permissão para especificar um valor para o cabeçalho especificado.  
  
- ou - 
 <paramref name="name" /> ou <paramref name="value" /> contém caracteres inválidos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O tamanho de <paramref name="value" /> é maior que 65.535 caracteres.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Close">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envia a resposta ao cliente e libera os recursos mantidos por esta instância de <see cref="T:System.Net.HttpListenerResponse" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="httpListenerResponse.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Envia a resposta ao cliente e libera os recursos mantidos por esta instância de <see cref="T:System.Net.HttpListenerResponse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método fecha o fluxo de resposta e o <xref:System.Net.HttpListenerRequest> associado à resposta.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra a chamada desse método para enviar um <xref:System.Net.HttpStatusCode.Forbidden> (403) resposta ao cliente.  
  
 [!code-csharp[NclListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (byte[] responseEntity, bool willBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(unsigned int8[] responseEntity, bool willBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (responseEntity As Byte(), willBlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(cli::array &lt;System::Byte&gt; ^ responseEntity, bool willBlock);" />
      <MemberSignature Language="F#" Value="member this.Close : byte[] * bool -&gt; unit" Usage="httpListenerResponse.Close (responseEntity, willBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseEntity" Type="System.Byte[]" />
        <Parameter Name="willBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="responseEntity">Uma matriz <see cref="T:System.Byte" /> que contém a resposta a enviar ao cliente.</param>
        <param name="willBlock"><see langword="true" /> para bloquear a execução ao liberar o fluxo para o cliente; caso contrário, <see langword="false" />.</param>
        <summary>Retorna a matriz de bytes especificada ao cliente e libera os recursos mantidos por esta instância de <see cref="T:System.Net.HttpListenerResponse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você estiver enviando o corpo de dados com a resposta, você pode usar esse método para enviá-lo como um <xref:System.Byte> matriz em vez de escrever o corpo de dados para o <xref:System.Net.HttpListenerResponse.OutputStream%2A> propriedade e chamar o <xref:System.Net.HttpListenerResponse.Close%2A> método.  
  
 Este método fecha o fluxo de resposta e o <xref:System.Net.HttpListenerRequest> associado à resposta.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método.  
  
 [!code-csharp[Net_Listener_Basic#24](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="responseEntity" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ContentEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ContentEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ ContentEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentEncoding : System.Text.Encoding with get, set" Usage="System.Net.HttpListenerResponse.ContentEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a <see cref="T:System.Text.Encoding" /> para o <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> desta resposta.</summary>
        <value>Um objeto <see cref="T:System.Text.Encoding" /> adequado para usar com os dados na propriedade <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> ou <see langword="null" />, se nenhuma codificação for especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Text.Encoding> objeto pode ser usado para converter as sequências de bytes em conjuntos de caracteres (páginas de código) e caracteres em sequências de bytes.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar essa propriedade.  
  
 [!code-csharp[NclListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentLength64">
      <MemberSignature Language="C#" Value="public long ContentLength64 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength64" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentLength64" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentLength64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ContentLength64 { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ContentLength64 : int64 with get, set" Usage="System.Net.HttpListenerResponse.ContentLength64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o número de bytes nos dados do corpo incluídos na resposta.</summary>
        <value>O valor do cabeçalho <see langword="Content-Length" /> da resposta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Content-Length` cabeçalho expressa o comprimento, em bytes, dos dados do corpo da resposta. Quando usar um formato que não envia os dados em partes ou bruto, você deve definir o <xref:System.Net.HttpListenerResponse.ContentLength64%2A> propriedade. Se você não fizer isso, o <xref:System.Net.HttpListener> não envia os dados de resposta.  
  
 Para obter uma lista completa de cabeçalhos de resposta, consulte o <xref:System.Net.HttpResponseHeader> enumeração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir o valor dessa propriedade.  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor especificado para uma operação de conjuntos é menor que zero.</exception>
        <exception cref="T:System.InvalidOperationException">A resposta já está sendo enviada.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string with get, set" Usage="System.Net.HttpListenerResponse.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o tipo MIME do conteúdo retornado.</summary>
        <value>Uma instância de <see cref="T:System.String" /> que contém o texto do cabeçalho <see langword="Content-Type" /> da resposta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao se comunicar com um navegador da Web, você deve definir explicitamente essa propriedade ao retornar qualquer tipo de conteúdo diferente de `text/html`.  
  
 Para obter uma lista completa de cabeçalhos de resposta, consulte o <xref:System.Net.HttpResponseHeader> enumeração.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor especificado para uma operação de definição é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O valor especificado para uma operação de conjuntos é uma cadeia de caracteres vazia (“”).</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Net.CookieCollection Cookies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieCollection Cookies" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.Cookies" />
      <MemberSignature Language="VB.NET" Value="Public Property Cookies As CookieCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::CookieCollection ^ Cookies { System::Net::CookieCollection ^ get(); void set(System::Net::CookieCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cookies : System.Net.CookieCollection with get, set" Usage="System.Net.HttpListenerResponse.Cookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.CookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a coleção de cookies retornada com a resposta.</summary>
        <value>Um <see cref="T:System.Net.CookieCollection" /> que contém os cookies para acompanhar a resposta. A coleção estará vazia se nenhum cookie tiver sido adicionado à resposta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um cookie é dados de texto de nome/valor de um servidor Web que é armazenado no computador local (cliente). Há suporte para os seguintes formatos de cookie: RFC 2965, RFC 2109 e Netscape. A especificação de cookie do Netscape está disponível em http://wp.netscape.com/newsref/std/cookie_spec.html; os documentos da RFC estão disponíveis em [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).  
  
   
  
## Examples  
 O exemplo de código a seguir verifica uma solicitação para um cookie e retorna um novo cookie com a resposta se a solicitação não tiver uma.  
  
 [!code-csharp[Net_Listener_Basic#20](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="CopyFrom">
      <MemberSignature Language="C#" Value="public void CopyFrom (System.Net.HttpListenerResponse templateResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFrom(class System.Net.HttpListenerResponse templateResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFrom (templateResponse As HttpListenerResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFrom(System::Net::HttpListenerResponse ^ templateResponse);" />
      <MemberSignature Language="F#" Value="member this.CopyFrom : System.Net.HttpListenerResponse -&gt; unit" Usage="httpListenerResponse.CopyFrom templateResponse" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateResponse" Type="System.Net.HttpListenerResponse" />
      </Parameters>
      <Docs>
        <param name="templateResponse">A instância de <see cref="T:System.Net.HttpListenerResponse" /> a copiar.</param>
        <summary>Copia propriedades do <see cref="T:System.Net.HttpListenerResponse" /> especificado para esta resposta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se você alterar regularmente muitas propriedades de seus valores padrão para um conjunto fixo de novos valores, é conveniente usar um <xref:System.Net.HttpListenerResponse> instância como um modelo. Personalizar a resposta de modelo uma vez e, em vez de configurar cada resposta separadamente, chame o <xref:System.Net.HttpListenerResponse.CopyFrom%2A> método para configurar uma nova resposta com base nos valores de propriedade na resposta do modelo.  
  
 As propriedades a seguir são copiadas do `templateResponse` à instância atual.  
  
-   <xref:System.Net.HttpListenerResponse.Headers%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ContentLength64%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusCode%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusDescription%2A>  
  
-   <xref:System.Net.HttpListenerResponse.KeepAlive%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ProtocolVersion%2A>  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como criar uma resposta por meio da cópia de uma resposta de modelo.  
  
 [!code-csharp[NCLListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NCLListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Headers : System.Net.WebHeaderCollection with get, set" Usage="System.Net.HttpListenerResponse.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma coleção de pares de nome/valor de cabeçalho retornados pelo servidor.</summary>
        <value>Uma instância de <see cref="T:System.Net.WebHeaderCollection" /> que contém todos os cabeçalhos HTTP explicitamente definidos a serem incluídos na resposta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cabeçalhos de resposta contêm informações de metadados, como a data e o tempo de resposta, a identidade do servidor de resposta e o tipo MIME dos dados contidos no corpo da resposta.  
  
 Para obter uma lista completa de cabeçalhos de resposta, consulte o <xref:System.Net.HttpResponseHeader> enumeração.  
  
> [!NOTE]
>  Se você tentar definir Content-Length, Keep-Alive, codificação de transferência, ou o cabeçalho WWW-Authenticate usando a propriedade de cabeçalhos, uma exceção será lançado. Use o <xref:System.Net.HttpListenerResponse.KeepAlive%2A> ou <xref:System.Net.HttpListenerResponse.ContentLength64%2A> propriedades para definir esses cabeçalhos. Você não pode definir manualmente os cabeçalhos de codificação de transferência ou WWW-Authenticate.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir os cabeçalhos em uma <xref:System.Net.WebHeaderCollection>.  
  
 [!code-csharp[Net_Listener_Basic#23](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A instância de <see cref="T:System.Net.WebHeaderCollection" /> especificada para uma operação de conjuntos não é válida para uma resposta.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.KeepAlive" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepAlive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.KeepAlive : bool with get, set" Usage="System.Net.HttpListenerResponse.KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o servidor solicita uma conexão persistente.</summary>
        <value><see langword="true" /> se o servidor solicitar uma conexão persistente; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se um cliente HTTP e o servidor esperam trocar dados várias vezes em um curto período, uma conexão persistente acelera as suas comunicações, permitindo que eles evitar a sobrecarga necessária para abrir e fechar uma conexão TCP para cada mensagem. Conexões persistentes são amplamente utilizadas nas comunicações entre navegadores da Web modernos e servidores Web.  
  
 Conexões persistentes são descritas em detalhes a especificação de protocolo HTTP/1.1 (RFC 2616) disponível no site do Editor de RTF ([https://www.rfc-editor.org/](https://www.rfc-editor.org/)).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir o valor dessa propriedade.  
  
 [!code-csharp[NclListener#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#7)]
 [!code-vb[NclListener#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="OutputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream OutputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream OutputStream" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.OutputStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ OutputStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputStream : System.IO.Stream" Usage="System.Net.HttpListenerResponse.OutputStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto <see cref="T:System.IO.Stream" /> no qual uma resposta poderá ser gravada.</summary>
        <value>Um objeto <see cref="T:System.IO.Stream" /> no qual uma resposta poderá ser gravada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.HttpListenerResponse.ContentLength64%2A> propriedade deve ser definida explicitamente antes de gravar retornado <xref:System.IO.Stream> objeto.  
  
> [!NOTE]
>  Fechar a solicitação não fecha o fluxo retornado por essa propriedade. Quando você não precisa mais o fluxo, você deve fechá-lo chamando o método Close.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public Version ProtocolVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ProtocolVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtocolVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ ProtocolVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProtocolVersion : Version with get, set" Usage="System.Net.HttpListenerResponse.ProtocolVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a versão HTTP usada para a resposta.</summary>
        <value>Um <see cref="T:System.Version" /> objeto que indica a versão do HTTP usado ao responder ao cliente. Observe que essa propriedade agora é obsoleta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os recursos de versões diferentes do HTTP são especificados nos documentos disponíveis em [ https://www.ietf.org ](https://www.ietf.org).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir o valor dessa propriedade.  
  
 [!code-csharp[NclListener#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor especificado para uma operação de definição é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O valor especificado para uma operação definida que não tem sua propriedade <see cref="P:System.Version.Major" /> definida para 1 ou não tem sua propriedade <see cref="P:System.Version.Minor" /> definida para 0 ou 1.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Redirect">
      <MemberSignature Language="C#" Value="public void Redirect (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Redirect(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Redirect(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Redirect (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Redirect(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.Redirect : string -&gt; unit" Usage="httpListenerResponse.Redirect url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">A URL que o cliente deve usar para localizar o recurso solicitado.</param>
        <summary>Configura a resposta para redirecionar o cliente para a URL especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.HttpListenerResponse.Redirect%2A> método é usado para redirecionar um cliente para o novo local para um recurso. Esse método define a resposta `Location` cabeçalho `url`, o <xref:System.Net.HttpListenerResponse.StatusCode%2A> propriedade a ser <xref:System.Net.HttpStatusCode.Redirect>e o <xref:System.Net.HttpListenerResponse.StatusDescription%2A> propriedade como "Encontrados".  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método.  
  
 [!code-csharp[Net_Listener_Basic#27](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="RedirectLocation">
      <MemberSignature Language="C#" Value="public string RedirectLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedirectLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.RedirectLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property RedirectLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RedirectLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RedirectLocation : string with get, set" Usage="System.Net.HttpListenerResponse.RedirectLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o valor do cabeçalho HTTP <see langword="Location" /> nesta resposta.</summary>
        <value>Um <see cref="T:System.String" /> que contém a URL absoluta a serem enviados ao cliente no <see langword="Location" /> cabeçalho.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `Location` cabeçalho Especifica a URL à qual o cliente é direcionado para localizar um recurso solicitado.  
  
> [!NOTE]
>  Configuração dessa propriedade não define automaticamente o <xref:System.Net.HttpListenerResponse.StatusCode%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir essa propriedade.  
  
 [!code-csharp[Net_Listener_Basic#25](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O valor especificado para uma operação de conjuntos é uma cadeia de caracteres vazia (“”).</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="SendChunked">
      <MemberSignature Language="C#" Value="public bool SendChunked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendChunked" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.SendChunked" />
      <MemberSignature Language="VB.NET" Value="Public Property SendChunked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SendChunked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SendChunked : bool with get, set" Usage="System.Net.HttpListenerResponse.SendChunked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define se a resposta usa a codificação de transferência em bloco.</summary>
        <value><see langword="true" /> se a resposta estiver definida para usar a codificação de transferência em bloco; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O corpo de uma mensagem em partes é composto por uma série de blocos. Cada bloco é composto de duas partes: o tamanho dos dados parte e os dados reais. Quando definido como true, a resposta é enviada usando, codificação de transferência em bloco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCookie">
      <MemberSignature Language="C#" Value="public void SetCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCookie(System::Net::Cookie ^ cookie);" />
      <MemberSignature Language="F#" Value="member this.SetCookie : System.Net.Cookie -&gt; unit" Usage="httpListenerResponse.SetCookie cookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">Um <see cref="T:System.Net.Cookie" /> para esta resposta.</param>
        <summary>Adiciona ou atualiza um <see cref="T:System.Net.Cookie" /> na coleção de cookies enviados com esta resposta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dois cookies são considerados o mesmo se os valores das suas <xref:System.Net.Cookie.Name%2A>, <xref:System.Net.Cookie.Domain%2A>, e <xref:System.Net.Cookie.Path%2A> propriedades são iguais. Se esses três partes de informações forem iguais, o método tenta atualizar o cookie. As comparações de nome e o domínio não diferenciam maiusculas de minúsculas, mas a comparação de caminho diferencia maiusculas de minúsculas.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método.  
  
 [!code-csharp[Net_Listener_Basic#28](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cookie" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O cookie já existe na coleção e não foi possível substituí-lo.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="StatusCode">
      <MemberSignature Language="C#" Value="public int StatusCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StatusCode" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.StatusCode" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int StatusCode { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.StatusCode : int with get, set" Usage="System.Net.HttpListenerResponse.StatusCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o código de status HTTP a ser retornado ao cliente.</summary>
        <value>Um valor <see cref="T:System.Int32" /> que especifica o código de status HTTP para o recurso solicitado. O padrão é <see cref="F:System.Net.HttpStatusCode.OK" />, o que indica que o servidor processou a solicitação do cliente com êxito e incluiu o recurso solicitado no corpo da resposta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clientes usam o código de status retornado pelo servidor para decidir como proceder. Um valor de <xref:System.Net.HttpStatusCode.OK> indica que o servidor com êxito processou a solicitação do cliente e incluiu o recurso solicitado no corpo da resposta. Outros códigos de status comuns incluem <xref:System.Net.HttpStatusCode.NotFound>, indicando que o recurso solicitado não foi encontrado no servidor, e <xref:System.Net.HttpStatusCode.NotModified>, indicando que era desnecessário retornar o recurso solicitado no corpo da resposta porque o cliente da cópia armazenada em cache do o recurso está atualizado.  
  
 Para obter uma lista completa dos códigos de status possíveis, consulte o <xref:System.Net.HttpStatusCode> enumeração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir o valor dessa propriedade.  
  
 [!code-csharp[Net_Listener_Basic#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Este objeto está fechado.</exception>
        <exception cref="T:System.Net.ProtocolViolationException">O valor especificado para uma operação de conjuntos não é válido. Os valores válidos estão entre 100 e 999, inclusive.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="StatusDescription">
      <MemberSignature Language="C#" Value="public string StatusDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.StatusDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusDescription : string with get, set" Usage="System.Net.HttpListenerResponse.StatusDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma descrição de texto do código de status HTTP retornado ao cliente.</summary>
        <value>A descrição de texto do código de status HTTP retornado ao cliente. O padrão é a descrição do RFC 2616 para o <see cref="P:System.Net.HttpListenerResponse.StatusCode" /> valor da propriedade ou uma cadeia de caracteres vazia ("") se não existir uma descrição do RFC 2616.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A descrição do status geralmente fornece detalhes que explicam o <xref:System.Net.HttpListenerResponse.StatusCode%2A> valor.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir o valor dessa propriedade.  
  
 [!code-csharp[NclListener#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#7)]
 [!code-vb[NclListener#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor especificado para uma operação de definição é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O valor especificado para uma operação de conjuntos contém caracteres não imprimíveis.</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados pelo <see cref="T:System.Net.HttpListenerResponse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Net.HttpListenerResponse.Close%2A> método para enviar a resposta e liberar os recursos mantidos por um <xref:System.Net.HttpListenerResponse>. Para descartar a resposta e liberar os recursos mantidos por esta instância, use o <xref:System.Net.HttpListenerResponse.Abort%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
  </Members>
</Type>