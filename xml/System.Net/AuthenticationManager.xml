<Type Name="AuthenticationManager" FullName="System.Net.AuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6557aa33b5dbcbdad923774777f049037478e1e6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39959102" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AuthenticationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.AuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthenticationManager" />
  <TypeSignature Language="F#" Value="type AuthenticationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gerencia os módulos de autenticação chamados durante o processo de autenticação do cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager> é uma classe estática que gerencia os módulos de autenticação que um aplicativo usa. Quando uma solicitação é feita para recursos protegidos, o <xref:System.Net.AuthenticationManager> chamadas a <xref:System.Net.AuthenticationManager.Authenticate%2A> método para obter um <xref:System.Net.Authorization> instância a ser usada em solicitações subsequentes.  
  
 O <xref:System.Net.AuthenticationManager> consulta de cada módulo de autenticação registrado chamando o <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType> método para cada módulo. O primeiro módulo de autenticação para retornar um <xref:System.Net.Authorization> instância é usada para autenticar a solicitação.  
  
 Módulos que oferecem básica, digest, negotiate, NTLM e tipos de autenticação Kerberos são registrados com o <xref:System.Net.AuthenticationManager> por padrão. Módulos de autenticação adicional que implementam o <xref:System.Net.IAuthenticationModule> interface pode ser adicionado usando o <xref:System.Net.AuthenticationManager.Register%2A> método. Módulos de autenticação são chamados na ordem em que foram adicionados à lista.  
  
> [!NOTE]
>  O Kerberos e negotiate não há suporte para o tipo de autenticação no Windows 95/98 ou Windows NT 4.0.  
  
   
  
## Examples  
 [!code-cpp[System.Net.Authentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#1)]
 [!code-csharp[System.Net.Authentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#1)]
 [!code-vb[System.Net.Authentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization Authenticate(string challenge, class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (challenge As String, request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ Authenticate(System::String ^ challenge, System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.Authenticate (challenge, request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="System.String" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="challenge">O desafio retornado pelo recurso da Internet.</param>
        <param name="request">O <see cref="T:System.Net.WebRequest" /> que iniciou o desafio de autenticação.</param>
        <param name="credentials">O <see cref="T:System.Net.ICredentials" /> associado a esta solicitação.</param>
        <summary>Chama cada módulo de autenticação registrado para localizar o primeiro módulo que pode responder à solicitação de autenticação.</summary>
        <returns>Uma instância da classe <see cref="T:System.Net.Authorization" /> que contém o resultado da tentativa de autorização. Se não houver nenhum módulo de autenticação para responder ao desafio, esse método retornará <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.AuthenticationManager.Authenticate%2A> chamadas de método de <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType> método em cada módulo de autenticação registrado até que um do módulo responde com um <xref:System.Net.Authorization> instância.  
  
 A primeira <xref:System.Net.Authorization> instância retornada é usada para autenticar a solicitação. Se nenhum módulo de autenticação pode autenticar a solicitação, o <xref:System.Net.AuthenticationManager.Authenticate%2A> retorno do método `null`.  
  
 Módulos de autenticação são chamados na ordem em que eles são registrados com o <xref:System.Net.AuthenticationManager>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="challenge" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="request" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="credentials" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CredentialPolicy">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentialPolicy CredentialPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CredentialPolicy As ICredentialPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::ICredentialPolicy ^ CredentialPolicy { System::Net::ICredentialPolicy ^ get(); void set(System::Net::ICredentialPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CredentialPolicy : System.Net.ICredentialPolicy with get, set" Usage="System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a política de credencial a ser usada para solicitações de recurso que são feitas usando a classe <see cref="T:System.Net.HttpWebRequest" />.</summary>
        <value>Um objeto que implementa o <see cref="T:System.Net.ICredentialPolicy" /> interface que determina se as credenciais são enviadas com solicitações. O valor padrão é <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A política de credencial determina se deve enviar credenciais ao enviar uma solicitação para um recurso de rede, como o conteúdo de uma página da Web. Se as credenciais são enviadas, servidores que requerem autenticação de cliente podem tentar autenticar o cliente quando a solicitação é recebida em vez de enviar uma resposta que indica que as credenciais do cliente são necessárias. Enquanto isso economiza uma viagem de ida e volta ao servidor, isso deve ser equilibrado contra o risco de segurança inerente a enviar credenciais pela rede. Quando o servidor de destino não exige autenticação de cliente é melhor não enviar credenciais.  
  
 A política de credencial será chamada apenas para solicitações que especificam as credenciais ou usam um <xref:System.Net.WebProxy> objeto que especifica as credenciais.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir a política de credencial.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTargetNameDictionary">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Specialized.StringDictionary CustomTargetNameDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CustomTargetNameDictionary As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Specialized::StringDictionary ^ CustomTargetNameDictionary { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTargetNameDictionary : System.Collections.Specialized.StringDictionary" Usage="System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o dicionário que contém SPNs (Nomes de Entidade de Serviço) usados para identificar hosts durante a autenticação Kerberos em solicitações feitas usando <see cref="T:System.Net.WebRequest" /> e suas classes derivadas.</summary>
        <value>Um <see cref="T:System.Collections.Specialized.StringDictionary" /> gravável que contém os valores SPN para chaves compostas por informações do host.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um SPN é um nome pelo qual um cliente identifica exclusivamente uma instância de um serviço ou aplicativo em um servidor para fins de autenticação mútua. A autenticação mútua é solicitada por padrão, e pode exigir que ele definindo <xref:System.Net.WebRequest.AuthenticationLevel%2A?displayProperty=nameWithType> para <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> na sua solicitação.  
  
 Quando um <xref:System.Net.WebRequest> requer a autenticação mútua, o SPN para o destino deve ser fornecido pelo cliente. Se você souber o SPN, você pode adicioná-lo para o <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> antes de enviar a solicitação. Se você não adicionou informações de SPN para este dicionário, o <xref:System.Net.AuthenticationManager> usa o <xref:System.Net.WebRequest.RequestUri%2A> método para compor o SPN provavelmente; no entanto, isso é um valor computado e pode estar incorreto. Se a autenticação mútua é tentada e falha, você pode verificar o dicionário para determinar o SPN computado. Não há SPN é inserido no dicionário se o protocolo de autenticação não oferece suporte à autenticação mútua.  
  
 Para adicionar um valor SPN para este dicionário, use o <xref:System.Uri.AbsoluteUri%2A> do <xref:System.Net.WebRequest.RequestUri%2A> como a chave. Internamente, a chave é truncada para incluir a <xref:System.Uri.Scheme%2A>, <xref:System.Uri.Host%2A>e o <xref:System.Uri.Port%2A> se ele não é a porta padrão.  
  
> [!NOTE]
>  Acessando os métodos e propriedades do <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> requer irrestrito <xref:System.Net.WebPermission>.  
  
> [!NOTE]
>  Quando a autenticação Kerberos é realizada por meio de um proxy, o proxy e o nome de host final precisará ser resolvido para um SPN. A resolução de nome de proxy é protegida por um tempo limite. A resolução do nome do host final para um SPN requer uma pesquisa de DNS e não há nenhum tempo limite associado diretamente a essa operação. Portanto, operações síncronas podem demorar mais para o tempo limite. Para resolver este problema, adicione prefixo URI do host final para o cache SPN antes de fazer solicitações para ele.  
  
 A versão 3.5 SP1 agora usa como padrão a especificação do nome do host usado na URL da solicitação no SPN da troca de autenticação NTLM (NT LAN Manager) quando a propriedade <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> não está definida. O nome do host usado na URL da solicitação pode ser diferente do cabeçalho de Host especificado na <xref:System.Net.HttpRequestHeader?displayProperty=nameWithType> na solicitação do cliente. O nome do host usado na URL de solicitação pode ser diferente do nome do host real do servidor, do nome do computador do servidor, do endereço IP do computador ou do endereço de loopback. Nesses casos, o Windows falhará a solicitação de autenticação. Para resolver o problema, talvez seja necessário notificar o Windows em que o nome do host usado na URL da solicitação no cliente de solicitação ("contoso", por exemplo) é, na verdade, um nome alternativo para o computador local.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como exibir o conteúdo do <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A>.  
  
 [!code-cpp[NclCredPolicy#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#5)]
 [!code-csharp[NclCredPolicy#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization PreAuthenticate(class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PreAuthenticate (request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ PreAuthenticate(System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member PreAuthenticate : System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.PreAuthenticate (request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="request">Um <see cref="T:System.Net.WebRequest" /> para um recurso de Internet.</param>
        <param name="credentials">O <see cref="T:System.Net.ICredentials" /> associado a esta solicitação.</param>
        <summary>Pré-autentica uma solicitação.</summary>
        <returns>Uma instância da classe <see cref="T:System.Net.Authorization" /> se a solicitação puder ser pré-autenticada; caso contrário, <see langword="null" />. Se <paramref name="credentials" /> for <see langword="null" />, esse método retornará <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o módulo de autenticação pode pré-autenticar a solicitação, o <xref:System.Net.AuthenticationManager.PreAuthenticate%2A> método retorna uma instância de autenticação e envia as informações de autorização para o servidor de forma preventiva em vez de esperar o recurso emitir um desafio. Esse comportamento é descrito na seção 3.3 da RFC 2617 (autenticação HTTP: autenticação básica e Digest Access). Módulos de autenticação que dão suporte a pré-autenticação permitem que os clientes melhorar a eficiência de servidor, evitando extras viagens de ida e causadas por desafios de autenticação.  
  
 Módulos de autorização que podem ser pré-autenticada solicita um conjunto de <xref:System.Net.IAuthenticationModule.CanPreAuthenticate%2A?displayProperty=nameWithType> propriedade para `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="request" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Register (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Register(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Register : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Register authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">O <see cref="T:System.Net.IAuthenticationModule" /> a ser registrado com o gerenciador de autenticação.</param>
        <summary>Registra um módulo de autenticação com o gerenciador de autenticação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.AuthenticationManager.Register%2A> método adiciona módulos de autenticação ao final da lista de módulos chamado pelo <xref:System.Net.AuthenticationManager.Authenticate%2A> método. Módulos de autenticação são chamados na ordem em que foram adicionados à lista. Se um módulo com o mesmo <xref:System.Net.IAuthenticationModule.AuthenticationType%2A> é registrado, esse método Remove o módulo registrado e adiciona `authenticationModule` ao final da lista.  
  
   
  
## Examples  
 O exemplo a seguir registra um módulo de autenticação com o Gerenciador de autenticação. Para obter um exemplo completo, consulte o <xref:System.Net.AuthenticationManager> classe.  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> é <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para executar o código não gerenciado. Enumeração associada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RegisteredModules">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator RegisteredModules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEnumerator RegisteredModules" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.RegisteredModules" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RegisteredModules As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::IEnumerator ^ RegisteredModules { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegisteredModules : System.Collections.IEnumerator" Usage="System.Net.AuthenticationManager.RegisteredModules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma lista de módulos de autenticação que são registrados com o gerenciador de autenticação.</summary>
        <value>Um <see cref="T:System.Collections.IEnumerator" /> que permite que os módulos de autenticação registrados a serem lidos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.AuthenticationManager.RegisteredModules%2A> propriedade fornece um <xref:System.Collections.IEnumerator> registrado de instância que permite que a lista de módulos de autenticação a ser lido. O <xref:System.Net.AuthenticationManager.Register%2A> método adiciona módulos à lista e o <xref:System.Net.AuthenticationManager.Unregister%2A> método remove módulos dele.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Net.AuthenticationManager.RegisteredModules%2A> propriedade para obter uma lista de módulos de autenticação que são registrados com o Gerenciador de autenticação. Para obter um exemplo completo, consulte o <xref:System.Net.AuthenticationManager> classe.  
  
 [!code-cpp[System.Net.Authentication#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#8)]
 [!code-csharp[System.Net.Authentication#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#8)]
 [!code-vb[System.Net.Authentication#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unregister">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remove os módulos de autenticação da lista de módulos registrados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Unregister : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">O <see cref="T:System.Net.IAuthenticationModule" /> a ser removido da lista de módulos registrados.</param>
        <summary>Remove o módulo de autenticação especificado da lista de módulos registrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.AuthenticationManager.Unregister%2A> método Remove o módulo de autenticação especificado da lista de módulos de autenticação chamado pelo <xref:System.Net.AuthenticationManager.Authenticate%2A> método. O módulo deve ter sido adicionado à lista usando o <xref:System.Net.AuthenticationManager.Register%2A> método antes que ele pode ser removido da lista.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Net.AuthenticationManager.Unregister%2A> método para remover o módulo de autenticação especificado da lista de módulos registrados. Para obter um exemplo completo, consulte o <xref:System.Net.AuthenticationManager> classe.  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Net.IAuthenticationModule" /> especificado não está registrado.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para executar o código não gerenciado. Enumeração associada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string authenticationScheme);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string authenticationScheme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationScheme As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ authenticationScheme);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationScheme" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationScheme" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authenticationScheme">O esquema de autenticação do módulo a ser removido.</param>
        <summary>Remove os módulos de autenticação com o esquema de autenticação especificado da lista de módulos registrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.AuthenticationManager.Unregister%2A> método Remove o módulo de autenticação com o esquema de autenticação especificado da lista de módulos de autenticação chamado pelo <xref:System.Net.AuthenticationManager.Authenticate%2A> método. O módulo deve ter sido adicionado à lista usando o <xref:System.Net.AuthenticationManager.Register%2A> método antes que ele pode ser removido da lista.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Net.AuthenticationManager.Unregister%2A> método para remover um módulo de autenticação com o esquema de autenticação especificado da lista de módulos registrados.  
  
 [!code-cpp[AuthenticationManager_UnRegister2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CPP/authenticationmanager_unregister2.cpp#2)]
 [!code-csharp[AuthenticationManager_UnRegister2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CS/authenticationmanager_unregister2.cs#2)]
 [!code-vb[AuthenticationManager_UnRegister2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/VB/authenticationmanager_unregister2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationScheme" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Um módulo registado para este esquema de autenticação não está registrado.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para executar o código não gerenciado. Enumeração associada: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>