<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IPAddress.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b382b2e424f3335e396090615b29820d1cd62c1d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b382b2e424f3335e396090615b29820d1cd62c1d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Provides an Internet Protocol (IP) address.</source>
          <target state="translated">Fornece um endereço IP (Internet Protocol).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.IPAddress">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class contains the address of a computer on an IP network.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> classe contém o endereço de um computador em uma rede IP.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.IPAddress">
          <source>The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.</source>
          <target state="translated">O exemplo de código a seguir mostra como consultar um servidor para obter os endereços de família e os endereços IP ele suporta.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The byte array value of the IP address.</source>
          <target state="translated">O valor da matriz de bytes do endereço IP.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> array.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> com o endereço especificado como uma matriz <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> is created with the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id="ph3">`address`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> é criado com o <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> propriedade definida como <ph id="ph3">`address`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>If the length of <ph id="ph1">`address`</ph> is 4, <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</source>
          <target state="translated">Se o comprimento de <ph id="ph1">`address`</ph> é 4, <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constrói um endereço IPv4; caso contrário, um endereço IPv6 com um escopo de 0 é construído.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matriz devem para estar em ordem de bytes de rede com o byte mais significativo primeiro na posição de índice 0.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contains a bad IP address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contém um endereço IP inválido.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The long value of the IP address.</source>
          <target state="translated">O valor longo do endereço IP.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</source>
          <target state="translated">Por exemplo, o valor 0x2414188f no formato big endian seria o endereço IP "143.24.20.36".</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as an <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> com o endereço especificado como um <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> instance is created with the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id="ph3">`newAddress`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> instância é criada com o <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> propriedade definida como <ph id="ph3">`newAddress`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Int64&gt;</ph> value is assumed to be in network byte order.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valor devem para estar em ordem de bytes de rede.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 ou</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The byte array value of the IP address.</source>
          <target state="translated">O valor da matriz de bytes do endereço IP.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The long value of the scope identifier.</source>
          <target state="translated">O valor longo do identificador de escopo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> array and the specified scope identifier.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> com o endereço especificado como uma matriz <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> e o identificador de escopo especificado.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>This constructor instantiates an IPv6 address.</source>
          <target state="translated">Este construtor cria um endereço IPv6.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The <ph id="ph1">`scopeid`</ph> identifies a network interface in the case of a link-local address.</source>
          <target state="translated">O <ph id="ph1">`scopeid`</ph> identifica uma interface de rede no caso de um endereço de conexão local.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The scope is valid only for link-local and site-local addresses.</source>
          <target state="translated">O escopo é válido somente para endereços locais de site e local de link.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matriz devem para estar em ordem de bytes de rede com o byte mais significativo primeiro na posição de índice 0.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contains a bad IP address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contém um endereço IP inválido.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 ou</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.Address">
          <source>An Internet Protocol (IP) address.</source>
          <target state="translated">Um endereço IP (Internet Protocol).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>The long value of the IP address.</source>
          <target state="translated">O valor longo do endereço IP.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>This property is obsolete.</source>
          <target state="translated">Esta propriedade está obsoleta.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>Use <ph id="ph1">&lt;xref:System.Net.IPAddress.GetAddressBytes%2A&gt;</ph>.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Net.IPAddress.GetAddressBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>To convert <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> to dotted-quad notation, use the <ph id="ph2">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method.</source>
          <target state="translated">Para converter <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> notação pontilhada quad, use o <ph id="ph2">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> parameter to retrieve the IP address of the <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> parâmetro para recuperar o endereço IP do <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.Address">
          <source>The address family is <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph>.</source>
          <target state="translated">A família de endereços é <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Gets the address family of the IP address.</source>
          <target state="translated">Obtém a família de endereços do endereço IP.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /&gt;</ph> for IPv4 or <ph id="ph2">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> for IPv6.</source>
          <target state="translated">Retorna <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /&gt;</ph> para IPv4 ou <ph id="ph2">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> para IPv6.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Refer to the example in the <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class topic.</source>
          <target state="translated">Consulte o exemplo de <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> tópico sobre a classe.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Any">
          <source>Provides an IP address that indicates that the server must listen for client activity on all network interfaces.</source>
          <target state="translated">Fornece um endereço IP que indica que o servidor deve ouvir a atividade do cliente em todas as interfaces de rede.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Any">
          <source>This field is read-only.</source>
          <target state="translated">Este campo é somente leitura.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> instance must listen for client activity on all network interfaces.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Net.IPAddress.Any&gt;</ph> campo para indicar que um <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> instância deve escutar para a atividade de cliente em todas as interfaces de rede.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field is equivalent to 0.0.0.0 in dotted-quad notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> campo é equivalente à 0.0.0.0 na notação pontilhada quad.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Broadcast">
          <source>Provides the IP broadcast address.</source>
          <target state="translated">Fornece o endereço IP de difusão.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Broadcast">
          <source>This field is read-only.</source>
          <target state="translated">Este campo é somente leitura.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Broadcast">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> campo é equivalente à 255.255.255.255 na notação pontilhada quad.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Broadcast">
          <source>The following example prints the <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> address to the console.</source>
          <target state="translated">O exemplo a seguir imprime o <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> endereço para o console.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance to compare to the current instance.</source>
          <target state="translated">Uma instância do <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> a ser comparada com a instância atual.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>Compares two IP addresses.</source>
          <target state="translated">Compara dois endereços IP.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two addresses are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se os dois endereços forem iguais; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Equals%2A&gt;</ph> method compares the current <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance with the <ph id="ph3">`comparand`</ph> parameter and returns <ph id="ph4">`true`</ph> if the two instances contain the same IP address.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.Equals%2A&gt;</ph> método compara atual <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instância com o <ph id="ph3">`comparand`</ph> parâmetro e retorna <ph id="ph4">`true`</ph> se as duas instâncias contêm o mesmo endereço IP.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>Provides a copy of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> as an array of bytes.</source>
          <target state="translated">Fornece uma cópia do <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> como uma matriz de bytes.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> array.</source>
          <target state="translated">Uma matriz <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>The following code example shows how to get a server IP address in byte format.</source>
          <target state="translated">O exemplo de código a seguir mostra como obter um servidor de endereço IP no formato de byte.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetHashCode">
          <source>Returns a hash value for an IP address.</source>
          <target state="translated">Retorna um valor de hash para um endereço IP.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetHashCode">
          <source>An integer hash value.</source>
          <target state="translated">Um valor de hash inteiro.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.GetHashCode%2A&gt;</ph> method returns a hash code of the IP address.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.GetHashCode%2A&gt;</ph> método retorna um código hash do endereço IP.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetHashCode">
          <source>This value can be used as a key in hash tables.</source>
          <target state="translated">Esse valor pode ser usado como uma chave em tabelas de hash.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Converts a value from host byte order to network byte order.</source>
          <target state="translated">Converte um valor de ordem de byte de host em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>The number to convert, expressed in host byte order.</source>
          <target state="translated">O número a ser convertido, expresso em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Converts a short value from host byte order to network byte order.</source>
          <target state="translated">Converte um valor resumido da ordem de byte de host em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>A short value, expressed in network byte order.</source>
          <target state="translated">Um valor resumido, expresso em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Computadores diferentes usam diferentes convenções para ordenar os bytes dentro de valores inteiros multibyte.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">Alguns computadores colocados o byte mais significativo primeiro (conhecido como ordem big-endian) e outros colocar o byte menos significativo primeiro (conhecido como ordem de little endian).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Para trabalhar com computadores que usam a ordem de bytes diferentes, todos os valores de inteiro que são enviados pela rede são enviados na ordem de bytes de rede que tem o byte mais significativo primeiro.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> método converte valores inteiros multibyte que são armazenados no sistema de host da ordem de bytes usado pelo host para a ordem de bytes usado pela rede.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>The number to convert, expressed in host byte order.</source>
          <target state="translated">O número a ser convertido, expresso em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Converts an integer value from host byte order to network byte order.</source>
          <target state="translated">Converte um valor inteiro da ordem de byte de host para a ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>An integer value, expressed in network byte order.</source>
          <target state="translated">Um valor inteiro, expresso em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Computadores diferentes usam diferentes convenções para ordenar os bytes dentro de valores inteiros multibyte.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">Alguns computadores colocados o byte mais significativo primeiro (conhecido como ordem big-endian) e outros colocar o byte menos significativo primeiro (conhecido como ordem de little endian).</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Para trabalhar com computadores que usam a ordem de bytes diferentes, todos os valores de inteiro que são enviados pela rede são enviados na ordem de bytes de rede que tem o byte mais significativo primeiro.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> método converte valores inteiros multibyte que são armazenados no sistema de host da ordem de bytes usado pelo host para a ordem de bytes usado pela rede.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>The number to convert, expressed in host byte order.</source>
          <target state="translated">O número a ser convertido, expresso em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Converts a long value from host byte order to network byte order.</source>
          <target state="translated">Converte um valor longo de ordem de byte de host em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>A long value, expressed in network byte order.</source>
          <target state="translated">Um valor longo, expresso em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Computadores diferentes usam diferentes convenções para ordenar os bytes dentro de valores inteiros multibyte.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">Alguns computadores colocados o byte mais significativo primeiro (conhecido como ordem big-endian) e outros colocar o byte menos significativo primeiro (conhecido como ordem de little endian).</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Para trabalhar com computadores que usam a ordem de bytes diferentes, todos os valores de inteiro que são enviados pela rede são enviados na ordem de bytes de rede que tem o byte mais significativo primeiro.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> método converte valores inteiros multibyte que são armazenados no sistema de host da ordem de bytes usado pelo host para a ordem de bytes usado pela rede.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /&gt;</ph> method uses the <ph id="ph2">&lt;see cref="F:System.Net.IPAddress.IPv6Any" /&gt;</ph> field to indicate that a <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> must listen for client activity on all network interfaces.</source>
          <target state="translated">O método <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /&gt;</ph> utiliza o campo <ph id="ph2">&lt;see cref="F:System.Net.IPAddress.IPv6Any" /&gt;</ph> para indicar que um <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> deve escutar a atividade de cliente em todos os adaptadores de rede.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph> campo é equivalente à 0:0:0:0:0:0:0:0 em notação hexadecimal com dois-pontos ou:: na notação compact.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The following code example displays the value of the current host's Any address in standard compressed format.</source>
          <target state="translated">O exemplo de código a seguir exibe o valor atual qualquer endereço do host em formato compactado padrão.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>Provides the IP loopback address.</source>
          <target state="translated">Fornece o endereço de loopback de IP.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>This property is read-only.</source>
          <target state="translated">Esta propriedade é somente para leitura.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Loopback&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Loopback&gt;</ph> campo é equivalente à 0:0:0:0:0:0:0:1 em notação hexadecimal com dois-pontos ou:: 1 na notação compact.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>The following code example displays the value of the current host's loopback address in standard compressed format.</source>
          <target state="translated">O exemplo de código a seguir exibe o valor do endereço de loopback do host em formato compactado padrão.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6None">
          <source>Provides an IP address that indicates that no network interface should be used.</source>
          <target state="translated">Fornece um endereço IP que indica que nenhum adaptador de rede deve ser usado.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6None">
          <source>This property is read-only.</source>
          <target state="translated">Esta propriedade é somente para leitura.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> campo para indicar que um <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> não deve escutar para a atividade do cliente.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> campo é equivalente à 0:0:0:0:0:0:0:0 em notação hexadecimal com dois-pontos ou:: 0 na notação compact.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The following code example displays the value of the current host's None address in standard compressed format.</source>
          <target state="translated">O exemplo de código a seguir exibe o valor atual do host que nenhum endereço no formato compactado padrão.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Gets whether the IP address is an IPv4-mapped IPv6 address.</source>
          <target state="translated">Determina se o endereço IP é um endereço IPv6 mapeado por IPv4.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated">Retorna <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv4-mapped IPv6 address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o endereço IP for um endereço IPv6 mapeado por IPv4; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">Soquetes de pilha dupla sempre exigem endereços IPv6.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">A capacidade de interagir com um endereço IPv4 requer o uso do formato de endereço IPv6 mapeados para IPv4.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">Os endereços IPv4 devem ser representados no formato de endereço IPv6 mapeados para IPv4, que permite que um aplicativo somente IPv6 para se comunicar com um nó de IPv4.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">O formato do endereço IPv6 mapeados para IPv4 permite que o endereço IPv4 de um nó de IPv4 a ser representado como um endereço IPv6.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">O endereço IPv4 é codificado nos 32 bits de ordem inferior do endereço IPv6 e os bits de ordem alta 96 mantenha 0:0:0:0:0:FFFF o prefixo fixa.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">O formato do endereço IPv6 mapeados para IPv4 é especificado no RFC 4291.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6LinkLocal">
          <source>Gets whether the address is an IPv6 link local address.</source>
          <target state="translated">Determina se o endereço é um endereço local do link IPv6.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6LinkLocal">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 link local address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o endereço IP for um endereço local do link IPv6; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6Multicast">
          <source>Gets whether the address is an IPv6 multicast global address.</source>
          <target state="translated">Determina se o endereço é um endereço global multicast IPv6.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Multicast">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 multicast global address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Se o endereço IP é um multicast IPv6 global address; Caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6SiteLocal">
          <source>Gets whether the address is an IPv6 site local address.</source>
          <target state="translated">Determina se o endereço é um endereço local de site IPv6.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6SiteLocal">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 site local address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Se o endereço IP é um endereço de local do site do IPv6; Caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>Gets whether the address is an IPv6 Teredo address.</source>
          <target state="translated">Determina se o endereço é um endereço IPv6 Teredo.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 Teredo address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se o endereço IP for um endereço IPv6 Teredo; caso contrário, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>A Teredo address is an IPv6 address with the prefix of 2001::/32.</source>
          <target state="translated">Um endereço de Teredo é um endereço IPv6 com o prefixo de 2001::/ / 32.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</source>
          <target state="translated">Endereços Teredo podem ser retornados por meio da resolução de nome DNS normal ou enumerados como um endereço de IPv6 atribuído a uma interface local.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>An IP address.</source>
          <target state="translated">Um endereço IP.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>Indicates whether the specified IP address is the loopback address.</source>
          <target state="translated">Indica se o endereço IP especificado é o endereço de loopback.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="address" /&gt;</ph> is the loopback address; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="address" /&gt;</ph> é o endereço de loopback, caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method compares <ph id="ph2">`address`</ph> to <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> and returns <ph id="ph4">`true`</ph> if the two IP addresses are the same.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> método compara <ph id="ph2">`address`</ph> para <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> e retorna <ph id="ph4">`true`</ph> se os dois endereços IP forem iguais.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>In the case of IPv4, that the <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> (127.0.0.1).</source>
          <target state="translated">No caso de IPv4, que o <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> método <ph id="ph2">`true`</ph> para qualquer endereço IP do formulário 127.X.Y.Z (em que X, Y e Z estão no intervalo 0-255), não apenas <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> (127.0.0.1).</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method to determine whether the specified address is a loopback address.</source>
          <target state="translated">O seguinte exemplo de código usa o <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> método para determinar se o endereço especificado é um endereço de loopback.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Loopback">
          <source>Provides the IP loopback address.</source>
          <target state="translated">Fornece o endereço de loopback de IP.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Loopback">
          <source>This field is read-only.</source>
          <target state="translated">Este campo é somente leitura.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Loopback">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> field is equivalent to 127.0.0.1 in dotted-quad notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> campo é equivalente à 127.0.0.1 na notação pontilhada quad.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Loopback">
          <source>The following example prints the <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> address to the console.</source>
          <target state="translated">O exemplo a seguir imprime o <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> endereço para o console.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Maps the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> object to an IPv4 address.</source>
          <target state="translated">Mapeia o objeto <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> para um endereço IPv4.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</source>
          <target state="translated">Retorna <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>An IPv4 address.</source>
          <target state="translated">Um endereço IPv4.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">Soquetes de pilha dupla sempre exigem endereços IPv6.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">A capacidade de interagir com um endereço IPv4 requer o uso do formato de endereço IPv6 mapeados para IPv4.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">Os endereços IPv4 devem ser representados no formato de endereço IPv6 mapeados para IPv4, que permite que um aplicativo somente IPv6 para se comunicar com um nó de IPv4.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">O formato do endereço IPv6 mapeados para IPv4 permite que o endereço IPv4 de um nó de IPv4 a ser representado como um endereço IPv6.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">O endereço IPv4 é codificado nos 32 bits de ordem inferior do endereço IPv6 e os bits de ordem alta 96 mantenha 0:0:0:0:0:FFFF o prefixo fixa.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">O formato do endereço IPv6 mapeados para IPv4 é especificado no RFC 4291.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>If you want to use <ph id="ph1">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address.</source>
          <target state="translated">Se você quiser usar <ph id="ph1">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> para converter um endereço IPv4 do formato de IPv6 no formato IPv4, primeiro você deve assegurar que você tem um endereço IPv4.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Call <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph>, which will return <ph id="ph2">`true`</ph> if the IP address is originally IPv4 written as IPv6, or <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">Chamar <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph>, que retornará <ph id="ph2">`true`</ph> se o endereço IP é originalmente IPv4 gravados como IPv6, ou <ph id="ph3">`false`</ph> caso contrário.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>If <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, use <ph id="ph3">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to make the conversion.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph> retorna <ph id="ph2">`true`</ph>, use <ph id="ph3">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> para fazer a conversão.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Maps the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> object to an IPv6 address.</source>
          <target state="translated">Mapeia o objeto <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> para um endereço IPv6.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</source>
          <target state="translated">Retorna <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>An IPv6 address.</source>
          <target state="translated">Um endereço IPv6.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">Soquetes de pilha dupla sempre exigem endereços IPv6.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">A capacidade de interagir com um endereço IPv4 requer o uso do formato de endereço IPv6 mapeados para IPv4.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">Os endereços IPv4 devem ser representados no formato de endereço IPv6 mapeados para IPv4, que permite que um aplicativo somente IPv6 para se comunicar com um nó de IPv4.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">O formato do endereço IPv6 mapeados para IPv4 permite que o endereço IPv4 de um nó de IPv4 a ser representado como um endereço IPv6.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">O endereço IPv4 é codificado nos 32 bits de ordem inferior do endereço IPv6 e os bits de ordem alta 96 mantenha 0:0:0:0:0:FFFF o prefixo fixa.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">O formato do endereço IPv6 mapeados para IPv4 é especificado no RFC 4291.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Converts a number from network byte order to host byte order.</source>
          <target state="translated">Converte um número de ordem de byte de rede em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The number to convert, expressed in network byte order.</source>
          <target state="translated">O número a ser convertido, expresso em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Converts a short value from network byte order to host byte order.</source>
          <target state="translated">Converte um valor resumido da ordem de byte de rede em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>A short value, expressed in host byte order.</source>
          <target state="translated">Um valor resumido, expresso em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Computadores diferentes usam diferentes convenções para ordenar os bytes dentro de valores inteiros multibyte.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">Alguns computadores colocados o byte mais significativo primeiro (conhecido como ordem big-endian) e outros colocar o byte menos significativo primeiro (conhecido como ordem de little endian).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Para trabalhar com computadores que usam a ordem de bytes diferentes, todos os valores de inteiro que são enviados pela rede são enviados na ordem de bytes de rede que tem o byte mais significativo primeiro.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> método converte valores inteiros multibyte que são armazenados no sistema de host da ordem de bytes usado pela rede para a ordem de bytes usada pelo host.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert a short value from network byte order to host byte order.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> método para converter um valor curto de ordem de bytes de rede para ordem de byte do host.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The number to convert, expressed in network byte order.</source>
          <target state="translated">O número a ser convertido, expresso em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Converts an integer value from network byte order to host byte order.</source>
          <target state="translated">Converte um valor inteiro da ordem de byte de rede para a ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>An integer value, expressed in host byte order.</source>
          <target state="translated">Um valor de inteiro, expresso na ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Computadores diferentes usam diferentes convenções para ordenar os bytes dentro de valores inteiros multibyte.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">Alguns computadores colocados o byte mais significativo primeiro (conhecido como ordem big-endian) e outros colocar o byte menos significativo primeiro (conhecido como ordem de little endian).</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Para trabalhar com computadores que usam a ordem de bytes diferentes, todos os valores de inteiro que são enviados pela rede são enviados na ordem de bytes de rede que tem o byte mais significativo primeiro.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> método converte valores inteiros multibyte que são armazenados no sistema de host da ordem de bytes usado pela rede para a ordem de bytes usada pelo host.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert an integer value from network byte order to host byte order.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> método para converter um valor inteiro de ordem de bytes de rede para ordem de byte do host.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The number to convert, expressed in network byte order.</source>
          <target state="translated">O número a ser convertido, expresso em ordem de byte de rede.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Converts a long value from network byte order to host byte order.</source>
          <target state="translated">Converte um valor longo de ordem de byte de rede em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>A long value, expressed in host byte order.</source>
          <target state="translated">Um valor longo, expresso em ordem de byte de host.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Computadores diferentes usam diferentes convenções para ordenar os bytes dentro de valores inteiros multibyte.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">Alguns computadores colocados o byte mais significativo primeiro (conhecido como ordem big-endian) e outros colocar o byte menos significativo primeiro (conhecido como ordem de little endian).</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Para trabalhar com computadores que usam a ordem de bytes diferentes, todos os valores de inteiro que são enviados pela rede são enviados na ordem de bytes de rede que tem o byte mais significativo primeiro.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> método converte valores inteiros multibyte que são armazenados no sistema de host da ordem de bytes usado pela rede para a ordem de bytes usada pelo host.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert a long value from network byte order to host byte order.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> método para converter um valor longo de ordem de bytes de rede para ordem de byte do host.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.None">
          <source>Provides an IP address that indicates that no network interface should be used.</source>
          <target state="translated">Fornece um endereço IP que indica que nenhum adaptador de rede deve ser usado.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.None">
          <source>This field is read-only.</source>
          <target state="translated">Este campo é somente leitura.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.None&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> método usa o <ph id="ph2">&lt;xref:System.Net.IPAddress.None&gt;</ph> campo para indicar que um <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> não deve escutar para a atividade do cliente.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> campo é equivalente à 255.255.255.255 na notação pontilhada quad.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> property to indicate that no network interface should be used.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> propriedade para indicar que nenhuma interface de rede deve ser usada.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</source>
          <target state="translated">Uma cadeia de caracteres que contém um endereço IP em notação quádrupla com pontos para IPv4 e em notação hexadecimal com dois-pontos para IPv6.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Converts an IP address string to an <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance.</source>
          <target state="translated">Converte uma cadeia de caracteres de endereços IP em uma instância <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance.</source>
          <target state="translated">Uma instância <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The static <ph id="ph1">&lt;xref:System.Net.IPAddress.Parse%2A&gt;</ph> method creates an <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</source>
          <target state="translated">Estático <ph id="ph1">&lt;xref:System.Net.IPAddress.Parse%2A&gt;</ph> método cria um <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instância de um endereço IP expressada em notação pontilhada quad para IPv4 e em notação hexadecimal com dois-pontos para IPv6.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The number of parts (each part is separated by a period) in <ph id="ph1">`ipString`</ph> determines how the IP address is constructed.</source>
          <target state="translated">O número de partes (cada parte é separado por um período) em <ph id="ph1">`ipString`</ph> determina como o endereço IP é construído.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A one part address is stored directly in the network address.</source>
          <target state="translated">Um endereço de uma parte é armazenado diretamente no endereço de rede.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</source>
          <target state="translated">Um endereço de duas partes, conveniente para especificar um endereço de classe A, coloca a parte à esquerda do primeiro byte e a parte à direita de três bytes mais à direita do endereço de rede.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</source>
          <target state="translated">Um endereço de três partes, conveniente para especificar um endereço de classe B, coloca a primeira parte do primeiro byte, a segunda parte no segundo byte e a parte final de dois bytes mais à direita do endereço de rede.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Number of parts and example <ph id="ph1">`ipString`</ph></source>
          <target state="translated">Número de partes e exemplo <ph id="ph1">`ipString`</ph></target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>IPv4 address for IPAddress</source>
          <target state="translated">Endereço IPv4 para o endereço IP</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>1 -- "65535"</source>
          <target state="translated">1 -- "65535"</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>0.0.255.255</source>
          <target state="translated">0.0.255.255</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>2 -- "20.2"</source>
          <target state="translated">2 -- "20.2"</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>20.0.0.2</source>
          <target state="translated">20.0.0.2</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>2 -- "20.65535"</source>
          <target state="translated">2 -- "20.65535"</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>20.0.255.255</source>
          <target state="translated">20.0.255.255</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>3 -- "128.1.2"</source>
          <target state="translated">3 -- "128.1.2"</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>128.1.0.2</source>
          <target state="translated">128.1.0.2</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class.</source>
          <target state="translated">O código a seguir converte uma cadeia de caracteres que contém um endereço IP, em notação pontilhada quad para IPv4 ou em notação hexadecimal com dois-pontos para IPv6, em uma instância de <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Then it uses the overloaded <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method to display the address in standard notation.</source>
          <target state="translated">Em seguida, usa o sobrecarregado <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> método para exibir o endereço na notação padrão.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> is not a valid IP address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> não é um endereço IP válido.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source>Gets or sets the IPv6 address scope identifier.</source>
          <target state="translated">Obtém ou define o identificador de escopo de endereço IPv6.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>A long integer that specifies the scope of the address.</source>
          <target state="translated">Um inteiro longo que especifica o escopo do endereço.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>The meaning of <ph id="ph1">&lt;xref:System.Net.IPAddress.ScopeId%2A&gt;</ph> changes depending on the context in which it is used.</source>
          <target state="translated">O significado de <ph id="ph1">&lt;xref:System.Net.IPAddress.ScopeId%2A&gt;</ph> alterações dependendo do contexto no qual ele é usado.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Link-local address.</source>
          <target state="translated">Endereço de conexão local.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces.</source>
          <target state="translated">Em um host com várias interfaces conectadas para separar os links, o mesmo endereço de conexão local pode ser atribuído a várias interfaces.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.</source>
          <target state="translated">Para eliminar essa ambiguidade, um identificador de escopo é usado para especificar a interface através da qual as mensagens são trocadas.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.</source>
          <target state="translated">Endereços de conexão local, identificados por FE80 prefixo de formato (FP), são usados por nós ao se comunicar conosco vizinhos na mesma conexão.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Site-local addresses.</source>
          <target state="translated">Endereços de sites locais.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>A host can be connected to multiple sites.</source>
          <target state="translated">Um host pode ser conectado a vários sites.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>In this case, a scope identifier is used to indicate a specific site to communicate with.</source>
          <target state="translated">Nesse caso, um identificador de escopo é usado para indicar um site específico para se comunicar com.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.</source>
          <target state="translated">Endereços de sites locais, identificados por FEC0 prefixo de formato (FP), são usados por nós ao comunicar-se em intranets privadas.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>The notation that is used to specify the <ph id="ph1">`ScopeId`</ph> with an address is <ph id="ph2">`Address%ScopeId`</ph>.</source>
          <target state="translated">A notação usada para especificar o <ph id="ph1">`ScopeId`</ph> com um endereço é <ph id="ph2">`Address%ScopeId`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>For example, <ph id="ph1">`FE80::5EFE:192.168.41.30%2.`</ph></source>
          <target state="translated">Por exemplo, <ph id="ph1">`FE80::5EFE:192.168.41.30%2.`</ph></target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;see langword="AddressFamily" /&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;see langword="InterNetwork" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="AddressFamily" /&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;see langword="InterNetwork" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> ou -</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>Converts an Internet address to its standard notation.</source>
          <target state="translated">Converte um endereço de Internet em uma notação padrão.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</source>
          <target state="translated">Uma cadeia de caracteres que contém o endereço IP em qualquer notação pontilhada de IPv4 ou hexadecimal com dois pontos de IPv6.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method converts the IP address that is stored in the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> método converte o endereço IP que é armazenado no <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> propriedade quad pontilhada IPv4 ou IPv6 a notação hexadecimal.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>The address family is <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> and the address is bad.</source>
          <target state="translated">A família de endereços é <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> e o endereço é inválido.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>The string to validate.</source>
          <target state="translated">A cadeia de caracteres a ser validada.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> version of the string.</source>
          <target state="translated">A versão <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Determines whether a string is a valid IP address.</source>
          <target state="translated">Determina se uma cadeia de caracteres é um endereço IP válido.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="ipString" /&gt;</ph> was able to be parsed as an IP address; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se foi possível analisar <ph id="ph2">&lt;paramref name="ipString" /&gt;</ph> como um endereço IP; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Note that this method accepts as valid an ipString value that can be parsed as an <ph id="ph1">&lt;xref:System.Int64&gt;</ph>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%2A&gt;</ph> constructor does.</source>
          <target state="translated">Observe que esse método aceita como um ipString valor válido que pode ser analisado como um <ph id="ph1">&lt;xref:System.Int64&gt;</ph>e, em seguida, trata esse Int64 como o valor longo de um endereço IP na ordem de bytes de rede, de modo semelhante ao que o <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%2A&gt;</ph> construtor faz.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</source>
          <target state="translated">Isso significa que esse método retornará true se o Int64 é analisado com êxito, mesmo que ele representa um endereço que não é um endereço IP válido.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>For example, if ipString is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</source>
          <target state="translated">Por exemplo, se ipString é "1", este método retorna true, mesmo que "1" (ou 0.0.0.1) não é um endereço IP válido e você pode esperar que esse método para retornar false.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Fixing this bug would break existing apps, so the current behavior will not be changed.</source>
          <target state="translated">Corrigir esse erro interrompe aplicativos existentes, para que o comportamento atual não será alterado.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</source>
          <target state="translated">Seu código pode evitar esse comportamento, garantindo que ele usa apenas esse método para analisar os endereços IP no formato decimal pontilhado.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>