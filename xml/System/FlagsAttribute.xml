<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b6b10-101">Indica que uma enumeração pode ser tratada como um campo de bits; isto é, um conjunto de sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="b6b10-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6b10-102">Campos de bit são geralmente usados para listas de elementos que podem ocorrer em combinação, enquanto as constantes de enumeração são geralmente usadas para listas de elementos mutuamente exclusivos.</span><span class="sxs-lookup"><span data-stu-id="b6b10-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="b6b10-103">Portanto, os campos de bits são projetados para ser combinado com uma operação OR bit a bit para gerar valores sem nome, enquanto que não são de constantes enumeradas.</span><span class="sxs-lookup"><span data-stu-id="b6b10-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="b6b10-104">Os idiomas variam em seu uso de campos de bits em comparação às constantes de enumeração.</span><span class="sxs-lookup"><span data-stu-id="b6b10-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="b6b10-105">Atributos do FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="b6b10-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="b6b10-106"><xref:System.AttributeUsageAttribute> é aplicado a esta classe e sua <xref:System.AttributeUsageAttribute.Inherited%2A> propriedade especifica `false`.</span><span class="sxs-lookup"><span data-stu-id="b6b10-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="b6b10-107">Esse atributo só pode ser aplicado para enumerações.</span><span class="sxs-lookup"><span data-stu-id="b6b10-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="b6b10-108">Diretrizes para FlagsAttribute e Enum</span><span class="sxs-lookup"><span data-stu-id="b6b10-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="b6b10-109">Use o <xref:System.FlagsAttribute> atributo personalizado para uma enumeração somente se for uma operação bit a bit (AND, OR exclusivo ou) a ser executada em um valor numérico.</span><span class="sxs-lookup"><span data-stu-id="b6b10-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="b6b10-110">Defina constantes de enumeração em potências de dois, ou seja, 1, 2, 4, 8 e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="b6b10-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="b6b10-111">Isso significa que os sinalizadores individuais em constantes de enumeração combinado não se sobrepõem.</span><span class="sxs-lookup"><span data-stu-id="b6b10-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="b6b10-112">Considere a criação de uma constante enumerada para combinações de sinalizador usadas com frequência.</span><span class="sxs-lookup"><span data-stu-id="b6b10-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="b6b10-113">Por exemplo, se você tiver uma enumeração usada para operações de e/s de arquivo que contém as constantes enumeradas `Read = 1` e `Write = 2`, considere a criação de constante enumerada `ReadWrite = Read OR Write`, que combina o `Read` e `Write` sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="b6b10-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="b6b10-114">Além disso, a operação OR bit a bit usada para combinar os sinalizadores pode ser considerada um conceito avançado em algumas circunstâncias que não devem ser necessários para tarefas simples.</span><span class="sxs-lookup"><span data-stu-id="b6b10-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="b6b10-115">Tenha cuidado se você definir um número negativo como uma constante enumerada sinalizador porque várias posições de sinalizador podem ser definidas como 1, o que pode tornar o código confuso e incentivar erros de codificação.</span><span class="sxs-lookup"><span data-stu-id="b6b10-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="b6b10-116">Uma maneira conveniente para testar se um sinalizador é definido em um valor numérico é realizar um bit a bit e operação entre o valor numérico e a constante enumerada sinalizador, que define todos os bits no valor numérico para zero não corresponde ao sinalizador, teste se o resultado dessa operação é igual a constante enumerada de sinalizador.</span><span class="sxs-lookup"><span data-stu-id="b6b10-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="b6b10-117">Use `None` o nome do sinalizador enumerados constante cujo valor é zero.</span><span class="sxs-lookup"><span data-stu-id="b6b10-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="b6b10-118">Não é possível usar o `None` constante enumerada em uma operação AND bit a bit para testar um sinalizador porque o resultado sempre será zero.</span><span class="sxs-lookup"><span data-stu-id="b6b10-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="b6b10-119">No entanto, você pode executar uma operação lógica, não uma comparação bit a bit entre o valor numérico e `None` constante enumerado para determinar se qualquer bit no valor numérico está definida.</span><span class="sxs-lookup"><span data-stu-id="b6b10-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="b6b10-120">Se você criar uma enumeração do valor em vez de uma enumeração de sinalizadores, vale a pena ainda para criar um `None` constante enumerada.</span><span class="sxs-lookup"><span data-stu-id="b6b10-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="b6b10-121">O motivo é que, por padrão, a memória usada para a enumeração é inicializada com zero, o common language runtime.</span><span class="sxs-lookup"><span data-stu-id="b6b10-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="b6b10-122">Consequentemente, se você não definir uma constante cujo valor é zero, a enumeração conterá um valor ilegal quando ele é criado.</span><span class="sxs-lookup"><span data-stu-id="b6b10-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="b6b10-123">Se houver um caso de padrão óbvio que seu aplicativo precisa para representar, considere o uso de uma constante enumerada cujo valor é zero para representar o padrão.</span><span class="sxs-lookup"><span data-stu-id="b6b10-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="b6b10-124">Se não houver nenhum caso padrão, considere usar uma constante enumerada cujo valor é zero, que significa que não é representado por qualquer uma das outras constantes enumeradas.</span><span class="sxs-lookup"><span data-stu-id="b6b10-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="b6b10-125">Não defina um valor de enumeração exclusivamente para espelhar o estado de enumeração em si.</span><span class="sxs-lookup"><span data-stu-id="b6b10-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="b6b10-126">Por exemplo, não definem uma constante enumerada que simplesmente marca o fim da enumeração.</span><span class="sxs-lookup"><span data-stu-id="b6b10-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="b6b10-127">Se você precisar determinar o último valor da enumeração, verificar esse valor explicitamente.</span><span class="sxs-lookup"><span data-stu-id="b6b10-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="b6b10-128">Além disso, você pode executar uma verificação de intervalo para a constante enumerada primeira e o última se todos os valores dentro do intervalo válidos.</span><span class="sxs-lookup"><span data-stu-id="b6b10-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="b6b10-129">Não especifique constantes enumeradas são reservados para uso futuro.</span><span class="sxs-lookup"><span data-stu-id="b6b10-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="b6b10-130">Quando você define um método ou propriedade que utiliza uma constante enumerada como um valor, considere a possibilidade de validação do valor.</span><span class="sxs-lookup"><span data-stu-id="b6b10-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="b6b10-131">O motivo é que você pode converter um valor numérico para o tipo de enumeração, mesmo se esse valor numérico não está definido na enumeração.</span><span class="sxs-lookup"><span data-stu-id="b6b10-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6b10-132">O exemplo a seguir ilustra o uso do `FlagsAttribute` de atributos e mostra o efeito no <xref:System.Enum.ToString%2A> método de usar `FlagsAttribute` em um <xref:System.Enum> declaração.</span><span class="sxs-lookup"><span data-stu-id="b6b10-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="b6b10-133">O exemplo a seguir define duas enumerações relacionadas à cor `SingleHue` e `MultiHue`.</span><span class="sxs-lookup"><span data-stu-id="b6b10-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="b6b10-134">O segundo tem o `FlagsAttribute` atributo; o primeiro não.</span><span class="sxs-lookup"><span data-stu-id="b6b10-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="b6b10-135">O exemplo mostra a diferença no comportamento quando um intervalo de inteiros, incluindo números inteiros que representam valores subjacentes do tipo de enumeração, são convertidos para o tipo de enumeração e suas representações de cadeia de caracteres exibidas.</span><span class="sxs-lookup"><span data-stu-id="b6b10-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="b6b10-136">Por exemplo, observe que 3 não pode ser representado como um `SingleHue` valor porque 3 não é o valor subjacente de qualquer `SingleHue` membro, enquanto o `FlagsAttribute` atributo torna possível representar 3 como um `MultiHue` valor `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="b6b10-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b6b10-137">Inicializa uma nova instância da classe <see cref="T:System.FlagsAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="b6b10-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b6b10-138">O exemplo a seguir define um `PhoneService` enumeração que representa as formas de comunicação fornecida por uma empresa de telefone.</span><span class="sxs-lookup"><span data-stu-id="b6b10-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="b6b10-139">Ele inicializa três variáveis que representam o serviço fornecido aos três residências diferentes e indica quais residências não possui serviço, quais residências têm apenas o serviço de telefone celular, e quais residências tem o serviço de linha de telefone celular e terra.</span><span class="sxs-lookup"><span data-stu-id="b6b10-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="b6b10-140">Finalmente, ele chama implicitamente o <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> método para exibir os tipos de serviço fornecido para cada família.</span><span class="sxs-lookup"><span data-stu-id="b6b10-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="b6b10-141">O exemplo a seguir ilustra o uso do `FlagsAttribute` de atributos e mostra o efeito no <xref:System.Enum.ToString%2A> método de usar `FlagsAttribute` em um <xref:System.Enum> declaração.</span><span class="sxs-lookup"><span data-stu-id="b6b10-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>