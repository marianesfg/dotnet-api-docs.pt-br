<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnhandledExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnhandledExceptionEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4d7f9-101">Fornece dados para o evento gerado quando há uma exceção sem tratamento em um domínio de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-101">Provides data for the event that is raised when there is an exception that is not handled in any application domain.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d7f9-102"><xref:System.UnhandledExceptionEventArgs> fornece acesso ao objeto de exceção e um sinalizador que indica se o common language runtime está sendo encerrado.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-102"><xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</span></span> <span data-ttu-id="4d7f9-103">O <xref:System.UnhandledExceptionEventArgs> é um dos parâmetros passados para <xref:System.UnhandledExceptionEventHandler> para o <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> evento.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-103">The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="4d7f9-104">Para obter mais informações sobre delegados de manipulador de eventos, consulte [tratamento e gerando eventos](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="4d7f9-104">For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.UnhandledException" />
    <altmember cref="T:System.UnhandledExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Object, isTerminating As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnhandledExceptionEventArgs(System::Object ^ exception, bool isTerminating);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="4d7f9-105">A exceção que não foi tratada.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-105">The exception that is not handled.</span></span></param>
        <param name="isTerminating">
          <span data-ttu-id="4d7f9-106"><see langword="true" /> se o tempo de execução estiver sendo encerrado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-106"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4d7f9-107">Inicializa uma nova instância da classe <see cref="T:System.UnhandledExceptionEventArgs" /> com o objeto de exceção e um sinalizador de encerramento de Common Language Runtime.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-107">Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d7f9-108">Obtém o objeto de exceção sem tratamento.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-108">Gets the unhandled exception object.</span></span></summary>
        <value><span data-ttu-id="4d7f9-109">O objeto de exceção sem tratamento.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-109">The unhandled exception object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d7f9-110">Essa propriedade retorna um objeto do tipo <xref:System.Object> em vez de um derivado de <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-110">This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>.</span></span> <span data-ttu-id="4d7f9-111">Embora o Common Language Specification requer que todos os tipos de exceção derivam <xref:System.Exception>, é possível para métodos lançam exceções com objetos que não é derivados de <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-111">Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>.</span></span> <span data-ttu-id="4d7f9-112">Você pode fazer o seguinte ao trabalhar com esta exceção:</span><span class="sxs-lookup"><span data-stu-id="4d7f9-112">You can do the following to work with this exception:</span></span>  
  
-   <span data-ttu-id="4d7f9-113">Aplicar o <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> atributo com um <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> valor `true` para o assembly que contém o manipulador de eventos.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-113">Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> value of `true` to the assembly that contains the event handler.</span></span> <span data-ttu-id="4d7f9-114">Isso conclui todas as exceções não derivadas a <xref:System.Exception> classe em um <xref:System.Runtime.CompilerServices.RuntimeWrappedException> objeto.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-114">This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span> <span data-ttu-id="4d7f9-115">Você pode, em seguida, com segurança cast (em c#) ou converta (no Visual Basic), o objeto retornado por essa propriedade como um <xref:System.Exception> de objeto e recuperar o objeto de exceção original do <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-115">You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="4d7f9-116">Observe que alguns compiladores, como os compiladores c# e Visual Basic, automaticamente se aplicam a esse atributo.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-116">Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</span></span>  
  
-   <span data-ttu-id="4d7f9-117">Converter o objeto retornado por essa propriedade para um <xref:System.Exception> objeto.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-117">Cast the object returned by this property to an <xref:System.Exception> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d7f9-118">O exemplo a seguir demonstra o <xref:System.AppDomain.UnhandledException> evento.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-118">The following example demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="4d7f9-119">Define um manipulador de eventos, `MyHandler`, que é invocado sempre que é gerada uma exceção sem tratamento no domínio de aplicativo padrão.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-119">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="4d7f9-120">Em seguida, gera duas exceções.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-120">It then throws two exceptions.</span></span> <span data-ttu-id="4d7f9-121">A primeira é tratada por um **try/catch** bloco.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-121">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="4d7f9-122">O segundo é sem tratamento e invoca o `MyHandle` rotina antes do encerramento do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-122">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d7f9-123">Indica se o Common Language Runtime está sendo encerrado.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-123">Indicates whether the common language runtime is terminating.</span></span></summary>
        <value>
          <span data-ttu-id="4d7f9-124"><see langword="true" /> se o tempo de execução estiver sendo encerrado; caso contrário, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-124"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d7f9-125">Começando com o .NET Framework versão 2.0, essa propriedade retorna `true` para a maioria sem tratamento de exceções, a menos que um sinalizador de compatibilidade do aplicativo é usado para reverter para o comportamento de versões 1.0 e 1.1.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-125">Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</span></span> <span data-ttu-id="4d7f9-126">O motivo é que mais exceções sem tratamento em threads, inclusive threads do pool, têm permissão para continuar, naturalmente, o que normalmente resulta no encerramento do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-126">The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</span></span> <span data-ttu-id="4d7f9-127">Para obter mais informações, incluindo uma lista de casos em que não encerra o tempo de execução, consulte [exceções em Threads gerenciados](~/docs/standard/threading/exceptions-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="4d7f9-127">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="4d7f9-128">Informações de versão</span><span class="sxs-lookup"><span data-stu-id="4d7f9-128">Version Information</span></span>  
 <span data-ttu-id="4d7f9-129">O seguinte se aplica a versões do .NET Framework 1.0 e 1.1: esta propriedade retorna `true` quando uma exceção é recebida no, mas não manipulada pelo thread principal do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-129">The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread.</span></span> <span data-ttu-id="4d7f9-130">Essa propriedade também retorna `true` se um thread não gerenciado está executando código gerenciado e recebe uma exceção sem tratamento.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-130">This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception.</span></span> <span data-ttu-id="4d7f9-131">Por fim, essa propriedade retorna `false` para threads de pool e threads gerenciados criados por um aplicativo, porque as versões 1.0 e 1.1 capturem exceções sem tratamento em tais threads e ignorá-las.</span><span class="sxs-lookup"><span data-stu-id="4d7f9-131">Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>