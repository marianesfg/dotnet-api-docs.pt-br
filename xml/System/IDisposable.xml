<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20ef4ce10ae7d883f64127d17e5c321125ea4a32" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51896541" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece um mecanismo para liberar recursos não gerenciados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O principal uso dessa interface é liberar recursos não gerenciados. O coletor de lixo automaticamente libera a memória alocada para um objeto gerenciado quando esse objeto não é mais usado. No entanto, não é possível prever quando ocorrerá a coleta de lixo. Além disso, o coletor de lixo não tem conhecimento dos recursos não gerenciados, como identificadores de janela ou abrir arquivos e fluxos.  
  
 Use o <xref:System.IDisposable.Dispose%2A> método dessa interface explicitamente liberar recursos não gerenciados em conjunto com o coletor de lixo. O consumidor de um objeto pode chamar esse método quando o objeto não for mais necessário.  
  
> [!WARNING]
>  É uma alteração significativa para adicionar o <xref:System.IDisposable> interface para uma classe existente. Porque já existente de consumidores do seu tipo não é possível chamar <xref:System.IDisposable.Dispose%2A>, você não pode ter certeza de que recursos não gerenciados mantidos pelo seu tipo serão liberados.  
  
 Porque o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação é chamada pelo consumidor de um tipo quando os recursos pertencentes a uma instância não são mais necessários, ou você deve encapsular o objeto gerenciado em um <xref:System.Runtime.InteropServices.SafeHandle> (a alternativa recomendada), ou você deve substituir <xref:System.Object.Finalize%2A?displayProperty=nameWithType>liberar recursos não gerenciados que o consumidor esquece de chamar <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  No .NET Framework, o compilador C++ oferece suporte a descarte determinística de recursos e não permite a implementação direta do <xref:System.IDisposable.Dispose%2A> método.  
  
 Para uma discussão detalhada sobre como essa interface e o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método são usados, consulte a [coleta de lixo](~/docs/standard/garbage-collection/index.md) e [implementando um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) tópicos.  
  
## <a name="using-an-object-that-implements-idisposable"></a>Usando um objeto que implementa IDisposable  
 Se seu aplicativo simplesmente usa um objeto que implementa o <xref:System.IDisposable> interface, você deve chamar o objeto <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação quando tiver terminado de usá-lo. Dependendo da sua linguagem de programação, você pode fazer isso de duas maneiras:  
  
-   Usando uma linguagem como construir o `using` instrução em c# e Visual Basic.  
  
-   Encapsulando a chamada para o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação em um `try` / `finally` bloco.  
  
> [!NOTE]
>  Documentação para tipos que implementam <xref:System.IDisposable> Anote esse fato e incluir um lembrete para chamar sua <xref:System.IDisposable.Dispose%2A> implementação.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>A instrução c# e Visual Basic usando  
 Se o seu idioma oferece suporte a uma construção, como o [usando](~/docs/csharp/language-reference/keywords/using.md) instrução em c# e o [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) instrução no Visual Basic, você pode usá-lo em vez de chamar explicitamente <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> por conta própria. O exemplo a seguir usa essa abordagem na definição de um `WordCount` classe que preserva as informações sobre um arquivo e o número de palavras nele.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 O `using` instrução é realmente uma conveniência sintática. Em tempo de compilação, o compilador de linguagem implementa a IL (linguagem intermediária) para um `try` / `finally` bloco.  
  
 Para obter mais informações sobre o `using` instrução, consulte a [instrução Using](~/docs/visual-basic/language-reference/statements/using-statement.md) ou [usando a instrução](~/docs/csharp/language-reference/keywords/using-statement.md) tópicos.  
  
### <a name="the-tryfinally-block"></a>O bloco Try/Finally  
 Se sua linguagem de programação não oferece suporte a uma construção semelhante a `using` instrução em c# ou Visual Basic, ou se você preferir não usá-lo, você pode chamar o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação da `finally` block de um `try` / `finally` instrução. O exemplo a seguir substitui o `using` bloquear no exemplo anterior com um `try` / `finally` bloco.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Para obter mais informações sobre o `try` / `finally` padrão, consulte [tente... Catch... Instrução Finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), ou [instrução try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Implementando IDisposable  
 Você deve implementar <xref:System.IDisposable> somente se seu tipo usa os recursos não gerenciados diretamente. Os consumidores do seu tipo podem chamar seu <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação para liberar recursos quando a instância não for mais necessário. Para lidar com casos em que eles não chame <xref:System.IDisposable.Dispose%2A>, você deve usar uma classe derivada de <xref:System.Runtime.InteropServices.SafeHandle> encapsular os recursos não gerenciados, ou você deve substituir o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método para um tipo de referência. Em ambos os casos, você deve usar o <xref:System.IDisposable.Dispose%2A> método para executar qualquer limpeza é necessária depois de usar os recursos não gerenciados, como liberar, liberar ou redefinir os recursos não gerenciados.  
  
> [!IMPORTANT]
>  Se você estiver definindo uma classe base que usa recursos não gerenciados e que tenha ou é a probabilidade de ter subclasses que devem ser descartadas, você deve implementar o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> método e forneça uma segunda sobrecarga de `Dispose`, conforme discutido na próxima seção.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable e a hierarquia de herança  
 Uma classe base com subclasses que devem ser descartáveis deve implementar <xref:System.IDisposable> da seguinte maneira. Você deve usar esse padrão sempre que você implemente <xref:System.IDisposable> em qualquer tipo que não seja `sealed` (`NotInheritable` no Visual Basic).  
  
-   Ele deve fornecer uma pública não virtual <xref:System.IDisposable.Dispose> um protegidos e método virtual `Dispose(Boolean disposing)` método.  
  
-   O <xref:System.IDisposable.Dispose> método deve chamar `Dispose(true)` e deve suprimir a finalização para o desempenho.  
  
-   O tipo base não deve incluir finalizadores.  
  
 O fragmento de código a seguir reflete o padrão de descarte para classes base. Ele pressupõe que seu tipo não substitui o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 Se você substituir o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método, sua classe deve implementar o padrão a seguir.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 As subclasses devem implementar o padrão descartável desta maneira:  
  
-   Elas devem substituir `Dispose(Boolean)` e chamar a implementação `Dispose(Boolean)` da classe base.  
  
-   Podem fornecer um finalizador, se necessário. O finalizador deve chamar `Dispose(false)`.  
  
 Observe que classes derivadas não em si implementa o <xref:System.IDisposable> da interface e não incluem um sem parâmetros <xref:System.IDisposable.Dispose%2A> método. Eles apenas substituem a classe base `Dispose(Boolean)` método.  
  
 O fragmento de código a seguir reflete o padrão de descarte para classes derivadas. Ele pressupõe que seu tipo não substitui o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar uma classe de recurso que implementa o <xref:System.IDisposable> interface.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implementando um método Dispose</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Realiza tarefas definidas pelo aplicativo associadas à liberação ou à redefinição de recursos não gerenciados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use esse método para fechar ou liberar recursos não gerenciados, como arquivos, fluxos e identificadores mantidas por uma instância da classe que implementa essa interface. Por convenção, este método é usado para todas as tarefas associadas à liberação de recursos mantidos por um objeto, ou preparar um objeto para reutilização.  
  
> [!WARNING]
>  Se você estiver usando uma classe que implementa o <xref:System.IDisposable> interface, você deve chamar seu <xref:System.IDisposable.Dispose%2A> quando tiver terminado de usar a classe de implementação. Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico.  
  
 Ao implementar esse método, certifique-se de que todos os mantido recursos serão liberados, propagando a chamada por meio da hierarquia de confinamento. Por exemplo, se um objeto aloca um objeto B, e o objeto B C, em seguida, A um objeto <xref:System.IDisposable.Dispose%2A> deve chamar a implementação <xref:System.IDisposable.Dispose%2A> no B, que por sua vez deve chamar <xref:System.IDisposable.Dispose%2A> em C.  
  
> [!IMPORTANT]
>  O compilador C++ oferece suporte a descarte determinística de recursos e não permite a implementação direta do <xref:System.IDisposable.Dispose%2A> método.  
  
 Um objeto também deve chamar o <xref:System.IDisposable.Dispose%2A> método de sua classe base se a classe base implementa <xref:System.IDisposable>. Para obter mais informações sobre como implementar <xref:System.IDisposable> em uma classe base e suas subclasses, consulte a seção "IDisposable e a hierarquia de herança" o <xref:System.IDisposable> tópico.  
  
 Se um objeto <xref:System.IDisposable.Dispose%2A> método é chamado mais de uma vez, o objeto deve ignorar todas as chamadas após o primeiro. O objeto não deve lançar uma exceção se seu <xref:System.IDisposable.Dispose%2A> método é chamado várias vezes. Métodos de instância diferente de <xref:System.IDisposable.Dispose%2A> pode gerar um <xref:System.ObjectDisposedException> quando os recursos já são descartados.  
  
 Os usuários podem esperar um tipo de recurso para usar uma convenção específica para indicar um estado alocado versus um estado liberado. Um exemplo disso é a classes de fluxo, que tradicionalmente consideradas como aberta ou fechadas. O implementador de uma classe que tem uma convenção tal pode optar por implementar um método público com um nome personalizado, tal como `Close`, que chama o <xref:System.IDisposable.Dispose%2A> método.  
  
 Porque o <xref:System.IDisposable.Dispose%2A> método deve ser chamado explicitamente, sempre há um risco que os recursos não gerenciados não será lançado, pois o consumidor de um objeto não chamar seu <xref:System.IDisposable.Dispose%2A> método. Há duas maneiras de evitar isso:  
  
-   Encapsular o recurso gerenciado em um objeto derivado de <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Sua <xref:System.IDisposable.Dispose%2A> implementação, em seguida, chama o <xref:System.IDisposable.Dispose%2A> método o <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instâncias. Para obter mais informações, consulte a seção "A alternativa SafeHandle" a <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tópico.  
  
-   Implemente um finalizador para liberar recursos quando <xref:System.IDisposable.Dispose%2A> não é chamado. Por padrão, o coletor de lixo automaticamente chama o finalizador de um objeto antes da recuperação de sua memória. No entanto, se o <xref:System.IDisposable.Dispose%2A> método foi chamado, é geralmente desnecessário que o coletor de lixo chamar o finalizador do objeto descartado. Para evitar a finalização automática, <xref:System.IDisposable.Dispose%2A> implementações podem chamar o <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> método.  
  
 Quando você usa um objeto que acessa os recursos não gerenciados, como um <xref:System.IO.StreamWriter>, uma prática recomendada é criar a instância com um `using` instrução. O `using` instrução fecha automaticamente o fluxo e chama <xref:System.IDisposable.Dispose%2A> no objeto quando o código que está sendo usado foi concluída. Por exemplo, consulte o <xref:System.IO.StreamWriter> classe.  
  
   
  
## Examples  
 O exemplo a seguir mostra como você pode implementar o <xref:System.IDisposable.Dispose%2A> método.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implementando um método Dispose</related>
      </Docs>
    </Member>
  </Members>
</Type>