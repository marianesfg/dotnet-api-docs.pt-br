<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee9987222f28a3d2503b139f93b9f3068e0c994" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430236" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f110a-101">Fornece um mecanismo para liberar recursos não gerenciados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f110a-101">Provides a mechanism for releasing unmanaged resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f110a-102">O principal uso dessa interface é liberar recursos não gerenciados.</span><span class="sxs-lookup"><span data-stu-id="f110a-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="f110a-103">O coletor de lixo automaticamente libera a memória alocada para um objeto gerenciado quando esse objeto não é mais usado.</span><span class="sxs-lookup"><span data-stu-id="f110a-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="f110a-104">No entanto, não é possível prever quando ocorrerá a coleta de lixo.</span><span class="sxs-lookup"><span data-stu-id="f110a-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="f110a-105">Além disso, o coletor de lixo não tem conhecimento de recursos não gerenciados, como identificadores de janela, ou abrir arquivos e fluxos.</span><span class="sxs-lookup"><span data-stu-id="f110a-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="f110a-106">Use o <xref:System.IDisposable.Dispose%2A> método desta interface explicitamente liberar recursos não gerenciados em conjunto com o coletor de lixo.</span><span class="sxs-lookup"><span data-stu-id="f110a-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="f110a-107">O consumidor de um objeto pode chamar esse método quando o objeto não for mais necessário.</span><span class="sxs-lookup"><span data-stu-id="f110a-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="f110a-108">É uma alteração significativa para adicionar o <xref:System.IDisposable> interface para uma classe existente.</span><span class="sxs-lookup"><span data-stu-id="f110a-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="f110a-109">Porque pré-existente consumidores do seu tipo não é possível chamar <xref:System.IDisposable.Dispose%2A>, você não pode ter certeza de que recursos não gerenciados mantidos pelo seu tipo serão lançados.</span><span class="sxs-lookup"><span data-stu-id="f110a-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="f110a-110">Porque o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação é chamada pelo consumidor de um tipo quando os recursos pertencentes a uma instância não são mais necessários, ou você deve quebrar o objeto gerenciado em um <xref:System.Runtime.InteropServices.SafeHandle> (a alternativa recomendada), ou você deve substituir <xref:System.Object.Finalize%2A?displayProperty=nameWithType>para liberar recursos não gerenciados que o consumidor esquece de chamar <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="f110a-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f110a-111">No .NET Framework, o compilador do C++ dá suporte à disposição determinística de recursos e não permite a implementação direta do <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="f110a-112">Para obter uma discussão detalhada sobre como essa interface e o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método são usadas, consulte o [coleta de lixo](~/docs/standard/garbage-collection/index.md) e [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) tópicos.</span><span class="sxs-lookup"><span data-stu-id="f110a-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="f110a-113">Usando um objeto que implementa IDisposable</span><span class="sxs-lookup"><span data-stu-id="f110a-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="f110a-114">Se seu aplicativo simplesmente usa um objeto que implementa o <xref:System.IDisposable> interface, você deve chamar o objeto <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação quando tiver terminado de usá-lo.</span><span class="sxs-lookup"><span data-stu-id="f110a-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="f110a-115">Dependendo da linguagem de programação, você pode fazer isso de duas maneiras:</span><span class="sxs-lookup"><span data-stu-id="f110a-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="f110a-116">Usando uma linguagem, como construir o `using` instrução em c# e Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f110a-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="f110a-117">Encapsulando a chamada para o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação em um `try` / `finally` bloco.</span><span class="sxs-lookup"><span data-stu-id="f110a-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f110a-118">Documentação para tipos que implementam <xref:System.IDisposable> Observe esse fato e incluir um lembrete para chamar sua <xref:System.IDisposable.Dispose%2A> implementação.</span><span class="sxs-lookup"><span data-stu-id="f110a-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="f110a-119">A instrução c# e Visual Basic usando</span><span class="sxs-lookup"><span data-stu-id="f110a-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="f110a-120">Se o seu idioma oferece suporte a uma construção, como o [usando](~/docs/csharp/language-reference/keywords/using.md) instrução em c# e o [usando](~/docs/visual-basic/language-reference/statements/using-statement.md) instrução no Visual Basic, você pode usá-lo em vez de chamar explicitamente <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> por conta própria.</span><span class="sxs-lookup"><span data-stu-id="f110a-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="f110a-121">O exemplo a seguir usa essa abordagem para definir um `WordCount` classe que preserva as informações sobre um arquivo e o número de palavras nele.</span><span class="sxs-lookup"><span data-stu-id="f110a-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="f110a-122">O `using` instrução é realmente uma conveniência sintática.</span><span class="sxs-lookup"><span data-stu-id="f110a-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="f110a-123">Em tempo de compilação, o compilador de linguagem implementa a linguagem intermediária (IL) para um `try` / `finally` bloco.</span><span class="sxs-lookup"><span data-stu-id="f110a-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="f110a-124">Para obter mais informações sobre o `using` instrução, consulte o [instrução Using](~/docs/visual-basic/language-reference/statements/using-statement.md) ou [usando a instrução](~/docs/csharp/language-reference/keywords/using-statement.md) tópicos.</span><span class="sxs-lookup"><span data-stu-id="f110a-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="f110a-125">O bloco Try/Finally</span><span class="sxs-lookup"><span data-stu-id="f110a-125">The Try/Finally block</span></span>  
 <span data-ttu-id="f110a-126">Se a linguagem de programação não dá suporte a uma construção como o `using` instrução em c# ou Visual Basic, ou se você preferir não usá-lo, você pode chamar o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação do `finally` block de um `try` / `finally` instrução.</span><span class="sxs-lookup"><span data-stu-id="f110a-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="f110a-127">O exemplo a seguir substitui o `using` bloquear no exemplo anterior, com um `try` / `finally` bloco.</span><span class="sxs-lookup"><span data-stu-id="f110a-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="f110a-128">Para obter mais informações sobre o `try` / `finally` padrão, consulte [tente... Catch... Instrução Finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), ou [instrução try-finally](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="f110a-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="f110a-129">Implementando IDisposable</span><span class="sxs-lookup"><span data-stu-id="f110a-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="f110a-130">Você deve implementar <xref:System.IDisposable> somente se o tipo usa recursos não gerenciados diretamente.</span><span class="sxs-lookup"><span data-stu-id="f110a-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="f110a-131">Os consumidores de seu tipo podem chamar seu <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementação para liberar recursos quando a instância não é mais necessário.</span><span class="sxs-lookup"><span data-stu-id="f110a-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="f110a-132">Para lidar com casos em que eles não chamar <xref:System.IDisposable.Dispose%2A>, você deve usar uma classe derivada de <xref:System.Runtime.InteropServices.SafeHandle> incluir os recursos não gerenciados, ou você deve substituir o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método para um tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="f110a-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="f110a-133">Em ambos os casos, você deve usar o <xref:System.IDisposable.Dispose%2A> método para executar qualquer limpeza é necessária depois de usar os recursos não gerenciados, como à liberação ou redefinir os recursos não gerenciados.</span><span class="sxs-lookup"><span data-stu-id="f110a-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f110a-134">Se você estiver definindo uma classe base que usa recursos não gerenciados e que tem, ou deve ter subclasses que devem ser descartadas, você deve implementar o <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> método e fornecer uma segunda sobrecarga de `Dispose`, conforme descrito na próxima seção.</span><span class="sxs-lookup"><span data-stu-id="f110a-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="f110a-135">A hierarquia de herança e IDisposable</span><span class="sxs-lookup"><span data-stu-id="f110a-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="f110a-136">Uma classe base com subclasses que devem ser descartáveis deve implementar <xref:System.IDisposable> da seguinte maneira.</span><span class="sxs-lookup"><span data-stu-id="f110a-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="f110a-137">Você deve usar esse padrão sempre que você implementar <xref:System.IDisposable> em qualquer tipo que não seja `sealed` (`NotInheritable` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="f110a-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="f110a-138">Ele deve fornecer um público, não virtual <xref:System.IDisposable.Dispose> um protegidos e método virtual `Dispose(Boolean disposing)` método.</span><span class="sxs-lookup"><span data-stu-id="f110a-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="f110a-139">O <xref:System.IDisposable.Dispose> método deve chamar `Dispose(true)` e deve suprimir a finalização de desempenho.</span><span class="sxs-lookup"><span data-stu-id="f110a-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="f110a-140">O tipo base não deve incluir finalizadores.</span><span class="sxs-lookup"><span data-stu-id="f110a-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="f110a-141">O fragmento de código a seguir reflete o padrão dispose para classes de base.</span><span class="sxs-lookup"><span data-stu-id="f110a-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="f110a-142">Ele pressupõe que seu tipo não substitui o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="f110a-143">Se você substituir o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método, sua classe deve implementar o padrão a seguir.</span><span class="sxs-lookup"><span data-stu-id="f110a-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="f110a-144">As subclasses devem implementar o padrão descartável desta maneira:</span><span class="sxs-lookup"><span data-stu-id="f110a-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="f110a-145">Elas devem substituir `Dispose(Boolean)` e chamar a implementação `Dispose(Boolean)` da classe base.</span><span class="sxs-lookup"><span data-stu-id="f110a-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="f110a-146">Podem fornecer um finalizador, se necessário.</span><span class="sxs-lookup"><span data-stu-id="f110a-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="f110a-147">O finalizador deve chamar `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="f110a-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="f110a-148">Observe que as classes derivadas não se implementar a <xref:System.IDisposable> interface e não incluem um sem parâmetros <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="f110a-149">Eles apenas substituem a classe base `Dispose(Boolean)` método.</span><span class="sxs-lookup"><span data-stu-id="f110a-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="f110a-150">O fragmento de código a seguir reflete o padrão dispose para classes derivadas.</span><span class="sxs-lookup"><span data-stu-id="f110a-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="f110a-151">Ele pressupõe que seu tipo não substitui o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="f110a-152">O exemplo a seguir demonstra como criar uma classe de recurso que implementa o <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="f110a-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f110a-153">Realiza tarefas definidas pelo aplicativo associadas à liberação ou à redefinição de recursos não gerenciados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f110a-153">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f110a-154">Use esse método para fechar ou liberar recursos não gerenciados, como arquivos, fluxos e identificadores mantidos por uma instância da classe que implementa essa interface.</span><span class="sxs-lookup"><span data-stu-id="f110a-154">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="f110a-155">Por convenção, este método é usado para todas as tarefas associadas ao liberar os recursos mantidos por um objeto, ou preparar um objeto para reutilização.</span><span class="sxs-lookup"><span data-stu-id="f110a-155">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="f110a-156">Se você estiver usando uma classe que implementa o <xref:System.IDisposable> interface, você deve chamar seu <xref:System.IDisposable.Dispose%2A> quando terminar de usar a classe de implementação.</span><span class="sxs-lookup"><span data-stu-id="f110a-156">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="f110a-157">Para obter mais informações, consulte a seção "Usando um objeto que implementa IDisposable" o <xref:System.IDisposable> tópico.</span><span class="sxs-lookup"><span data-stu-id="f110a-157">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="f110a-158">Ao implementar esse método, certifique-se de que todos são recursos são liberados propagando a chamada por meio da hierarquia de confinamento.</span><span class="sxs-lookup"><span data-stu-id="f110a-158">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="f110a-159">Por exemplo, se um objeto um aloca um objeto B e o objeto B aloca um objeto C, então A <xref:System.IDisposable.Dispose%2A> implementação deve chamar <xref:System.IDisposable.Dispose%2A> no B, que por sua vez deve chamar <xref:System.IDisposable.Dispose%2A> em C.</span><span class="sxs-lookup"><span data-stu-id="f110a-159">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f110a-160">O compilador do C++ oferece suporte à disposição determinística de recursos e não permite a implementação direta do <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-160">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="f110a-161">Um objeto também deve chamar o <xref:System.IDisposable.Dispose%2A> método de sua classe base se implementa a classe base <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="f110a-161">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="f110a-162">Para obter mais informações sobre como implementar <xref:System.IDisposable> em uma classe base e suas subclasses, consulte a seção "IDisposable e a hierarquia de herança" o <xref:System.IDisposable> tópico.</span><span class="sxs-lookup"><span data-stu-id="f110a-162">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="f110a-163">Se um objeto <xref:System.IDisposable.Dispose%2A> método é chamado mais de uma vez, o objeto deve ignorar todas as chamadas feitas após o primeiro.</span><span class="sxs-lookup"><span data-stu-id="f110a-163">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="f110a-164">O objeto não deve lançar uma exceção se seu <xref:System.IDisposable.Dispose%2A> método for chamado várias vezes.</span><span class="sxs-lookup"><span data-stu-id="f110a-164">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="f110a-165">Métodos de instância diferente de <xref:System.IDisposable.Dispose%2A> pode lançar um <xref:System.ObjectDisposedException> quando os recursos já são descartados.</span><span class="sxs-lookup"><span data-stu-id="f110a-165">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="f110a-166">Os usuários podem esperar um tipo de recurso para usar uma convenção específica para indicar um estado alocado versus estado liberado.</span><span class="sxs-lookup"><span data-stu-id="f110a-166">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="f110a-167">Um exemplo disso é a classes de fluxo, que tradicionalmente pensados como aberta ou fechadas.</span><span class="sxs-lookup"><span data-stu-id="f110a-167">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="f110a-168">O implementador de uma classe que tem uma convenção tal pode optar por implementar um método público com um nome personalizado, como `Close`, que chama o <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-168">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="f110a-169">Porque o <xref:System.IDisposable.Dispose%2A> método deve ser chamado explicitamente, sempre há um risco de que os recursos não gerenciados não será liberada, porque o consumidor de um objeto Falha ao chamar seu <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-169">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="f110a-170">Há duas maneiras de evitar isso:</span><span class="sxs-lookup"><span data-stu-id="f110a-170">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="f110a-171">Encapsular o recurso gerenciado em um objeto derivado de <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f110a-171">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f110a-172">O <xref:System.IDisposable.Dispose%2A> implementação, em seguida, chama o <xref:System.IDisposable.Dispose%2A> método o <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instâncias.</span><span class="sxs-lookup"><span data-stu-id="f110a-172">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="f110a-173">Para obter mais informações, consulte a seção "A alternativa de SafeHandle" o <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tópico.</span><span class="sxs-lookup"><span data-stu-id="f110a-173">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="f110a-174">Implemente um finalizador para liberar recursos quando <xref:System.IDisposable.Dispose%2A> não for chamado.</span><span class="sxs-lookup"><span data-stu-id="f110a-174">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="f110a-175">Por padrão, o coletor de lixo chama automaticamente finalizador de um objeto antes da recuperação de sua memória.</span><span class="sxs-lookup"><span data-stu-id="f110a-175">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="f110a-176">No entanto, se o <xref:System.IDisposable.Dispose%2A> método foi chamado, geralmente é desnecessário para o coletor de lixo chamar o finalizador do objeto descartado.</span><span class="sxs-lookup"><span data-stu-id="f110a-176">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="f110a-177">Para evitar a finalização automática, <xref:System.IDisposable.Dispose%2A> implementações podem chamar o <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-177">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f110a-178">Quando você usa um objeto que acessa os recursos não gerenciados, como um <xref:System.IO.StreamWriter>, uma prática recomendada é criar a instância com um `using` instrução.</span><span class="sxs-lookup"><span data-stu-id="f110a-178">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="f110a-179">O `using` instrução fecha automaticamente o fluxo e chamadas <xref:System.IDisposable.Dispose%2A> no objeto quando o código que ele está em uso foi concluída.</span><span class="sxs-lookup"><span data-stu-id="f110a-179">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="f110a-180">Para obter um exemplo, consulte o <xref:System.IO.StreamWriter> classe.</span><span class="sxs-lookup"><span data-stu-id="f110a-180">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f110a-181">O exemplo a seguir mostra como você pode implementar o <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f110a-181">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>