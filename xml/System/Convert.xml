<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Convert.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe073bd516e9adc2eacdb9cda5fd35509153dd358a16.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bd516e9adc2eacdb9cda5fd35509153dd358a16</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a base data type to another base data type.</source>
          <target state="translated">Converte um tipo de dados base em outro tipo de dados base.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The static methods of the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class are primarily used to support conversion to and from the base data types in the .NET Framework.</source>
          <target state="translated">Os métodos estáticos do <ph id="ph1">&lt;xref:System.Convert&gt;</ph> classe são usados principalmente para oferecer suporte a conversão de e para os tipos de dados base no .NET Framework.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The supported base types are <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Char&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Byte&gt;</ph>, <ph id="ph5">&lt;xref:System.Int16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.Int64&gt;</ph>, <ph id="ph8">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph11">&lt;xref:System.Single&gt;</ph>, <ph id="ph12">&lt;xref:System.Double&gt;</ph>, <ph id="ph13">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph14">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph15">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Os tipos de base com suporte são <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Char&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Byte&gt;</ph>, <ph id="ph5">&lt;xref:System.Int16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.Int64&gt;</ph>, <ph id="ph8">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph11">&lt;xref:System.Single&gt;</ph>, <ph id="ph12">&lt;xref:System.Double&gt;</ph>, <ph id="ph13">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph14">&lt;xref:System.DateTime&gt;</ph> e <ph id="ph15">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class includes methods to support  other kinds of conversions.</source>
          <target state="translated">Além disso, a <ph id="ph1">&lt;xref:System.Convert&gt;</ph> classe inclui métodos para dar suporte a outros tipos de conversões.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This topic consists of the following sections:</source>
          <target state="translated">Este tópico é composto pelas seguintes seções:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Conversions to and from Base Types<ept id="p1">](#Base)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Conversões para e de tipos Base<ept id="p1">](#Base)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Non-Decimal Numbers<ept id="p1">](#NonDecimal)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Números decimais não<ept id="p1">](#NonDecimal)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Conversions from Custom Objects to Base Types<ept id="p1">](#Custom)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Conversões de tipos de Base de objetos personalizados<ept id="p1">](#Custom)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Culture-Specific Formatting Information<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Informações de formatação específica da cultura<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Base64 Encoding<ept id="p1">](#Base64)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>A codificação Base64<ept id="p1">](#Base64)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Other Common Conversions<ept id="p1">](#Other)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Outras conversões comuns<ept id="p1">](#Other)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions to and from Base Types</source>
          <target state="translated">Conversões em e de tipos de base</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A conversion method exists to convert every base type to every other base type.</source>
          <target state="translated">Existe um método de conversão para converter cada tipo base para todos os outros tipos de base.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type.</source>
          <target state="translated">No entanto, a chamada real para um método de conversão específica pode produzir um dos cinco resultados, dependendo do valor de tipo de base em tempo de execução e o tipo de base de destino.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>These five outcomes are:</source>
          <target state="translated">Esses cinco resultados são:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>No conversion.</source>
          <target state="translated">Nenhuma conversão.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when an attempt is made to convert from a type to itself (for example, by calling <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType&gt;</ph> with an argument of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>).</source>
          <target state="translated">Isso ocorre quando é feita uma tentativa de converter de um tipo para si mesmo (por exemplo, chamando <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType&gt;</ph> com um argumento de tipo <ph id="ph2">&lt;xref:System.Int32&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>In this case, the method simply returns an instance of the original type.</source>
          <target state="translated">Nesse caso, o método simplesmente retorna uma instância do tipo original.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when a particular conversion is not supported.</source>
          <target state="translated">Isso ocorre quando não há suporte para uma determinada conversão.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> is thrown for the following conversions:</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> é lançada para as conversões a seguir:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from <ph id="ph1">&lt;xref:System.Char&gt;</ph> to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Single&gt;</ph>, <ph id="ph4">&lt;xref:System.Double&gt;</ph>, <ph id="ph5">&lt;xref:System.Decimal&gt;</ph>, or <ph id="ph6">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">Conversões de <ph id="ph1">&lt;xref:System.Char&gt;</ph> para <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Single&gt;</ph>, <ph id="ph4">&lt;xref:System.Double&gt;</ph>, <ph id="ph5">&lt;xref:System.Decimal&gt;</ph>, ou <ph id="ph6">&lt;xref:System.DateTime&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Single&gt;</ph>, <ph id="ph3">&lt;xref:System.Double&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, or <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> to <ph id="ph6">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">Conversões de <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Single&gt;</ph>, <ph id="ph3">&lt;xref:System.Double&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, ou <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> para <ph id="ph6">&lt;xref:System.Char&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> to any other type except <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Conversões de <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> para qualquer outro tipo de exceção <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from any other type, except <ph id="ph1">&lt;xref:System.String&gt;</ph>, to <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">Conversões de qualquer outro tipo, exceto <ph id="ph1">&lt;xref:System.String&gt;</ph>, <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.FormatException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format.</source>
          <target state="translated">Isso ocorre quando a tentativa de converter um valor de cadeia de caracteres em qualquer outro tipo de base falhar porque a cadeia de caracteres não está no formato correto.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The exception is thrown for the following conversions:</source>
          <target state="translated">A exceção é lançada para as conversões a seguir:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value does not equal <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Uma cadeia de caracteres a ser convertido em um <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor não é igual a <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> ou <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value consists of multiple characters.</source>
          <target state="translated">Uma cadeia de caracteres a ser convertido em um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor consiste em vários caracteres.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to any numeric type is not recognized as a valid number.</source>
          <target state="translated">Uma cadeia de caracteres a ser convertido em qualquer tipo numérico não é reconhecida como um número válido.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> is not recognized as a valid date and time value.</source>
          <target state="translated">Uma cadeia de caracteres a ser convertido em um <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> não é reconhecido como uma data válida e um valor de tempo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A successful conversion.</source>
          <target state="translated">Uma conversão bem-sucedida.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.</source>
          <target state="translated">Para conversões entre dois tipos de base diferentes não listados nos resultados anteriores, todas as conversões ampliadoras, bem como todas as conversões de estreitamento não resultar em perda de dados serão bem-sucedida e o método retornará um valor do tipo de base de destino.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when a narrowing conversion results in a loss of data.</source>
          <target state="translated">Isso ocorre quando uma restrição resultados de conversão em uma perda de dados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For example, trying to convert a <ph id="ph1">&lt;xref:System.Int32&gt;</ph> instance whose value is 10000 to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> type throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph> because 10000 is outside the range of the <ph id="ph4">&lt;xref:System.Byte&gt;</ph> data type.</source>
          <target state="translated">Por exemplo, tentando converter um <ph id="ph1">&lt;xref:System.Int32&gt;</ph> instância cujo valor é 10000 para um <ph id="ph2">&lt;xref:System.Byte&gt;</ph> tipo lança uma <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph> porque 10000 está fora do intervalo da <ph id="ph4">&lt;xref:System.Byte&gt;</ph> tipo de dados.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits).</source>
          <target state="translated">Uma exceção não será lançada se a conversão de um tipo numérico resulta em perda de precisão (ou seja, a perda de alguns dígitos menos significantes).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.</source>
          <target state="translated">No entanto, uma exceção será lançada se o resultado for maior do que pode ser representado pelo tipo de valor de retorno do método de conversão específica.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For example, when a <ph id="ph1">&lt;xref:System.Double&gt;</ph> is converted to a <ph id="ph2">&lt;xref:System.Single&gt;</ph>, a loss of precision might occur but no exception is thrown.</source>
          <target state="translated">Por exemplo, quando um <ph id="ph1">&lt;xref:System.Double&gt;</ph> é convertido em um <ph id="ph2">&lt;xref:System.Single&gt;</ph>, pode ocorrer perda de precisão, mas nenhuma exceção é lançada.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, if the magnitude of the <ph id="ph1">&lt;xref:System.Double&gt;</ph> is too large to be represented by a <ph id="ph2">&lt;xref:System.Single&gt;</ph>, an overflow exception is thrown.</source>
          <target state="translated">No entanto, se a magnitude do <ph id="ph1">&lt;xref:System.Double&gt;</ph> é muito grande para ser representado por um <ph id="ph2">&lt;xref:System.Single&gt;</ph>, é gerada uma exceção de estouro.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Non-Decimal Numbers</source>
          <target state="translated">Números decimais não</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert&gt;</ph> classe inclui métodos estáticos que você pode chamar para converter valores integrais para representações de cadeia de caracteres não-decimal e converter cadeias de caracteres que números decimais não representam valores inteiros.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Each of these conversion methods includes a <ph id="ph1">`base`</ph> argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10).</source>
          <target state="translated">Cada um desses métodos de conversão inclui um <ph id="ph1">`base`</ph> argumento que permite que você especifique o número de sistema; binário (base 2), octal (base 8) e hexadecimal (base 16), bem como decimal (base 10).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:</source>
          <target state="translated">Há um conjunto de métodos para converter cada um dos tipos integrais primitivo compatível com CLS para uma cadeia de caracteres e outra para converter uma cadeia de caracteres para cada um dos tipos primitivos integrais:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a byte value to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph>, para converter um valor de bytes em uma cadeia de caracteres em uma base especificada.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 16-bit signed integer to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph>, para converter um inteiro assinado de 16 bits em uma cadeia de caracteres em uma base especificada.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 32-bit signed integer to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph>, para converter um inteiro assinado de 32 bits em uma cadeia de caracteres em uma base especificada.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 64-bit signed integer to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph>, para converter um inteiro assinado de 64 bits em uma cadeia de caracteres em uma base especificada.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of a byte value in a specified format to a signed byte.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph>, para converter a representação de cadeia de caracteres de um valor de byte em um formato especificado em um byte assinado.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph>, para converter a representação de cadeia de caracteres de um número inteiro em um formato especificado em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph>, para converter a representação de cadeia de caracteres de um número inteiro em um formato especificado em um inteiro de 32 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph>, para converter a representação de cadeia de caracteres de um número inteiro em um formato especificado em um inteiro não assinado de 64 bits.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The following example converts the value of <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> to a string in all supported numeric formats.</source>
          <target state="translated">O exemplo a seguir converte o valor de <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> em uma cadeia de caracteres em todos os formatos numéricos com suporte.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It then converts the string value back to a <ph id="ph1">&lt;xref:System.Int16&gt;</ph> value.</source>
          <target state="translated">Em seguida, converte o valor de cadeia de caracteres de volta para um <ph id="ph1">&lt;xref:System.Int16&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from Custom Objects to Base Types</source>
          <target state="translated">Conversões de objetos personalizados em tipos de base</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>In addition to supporting conversions between the base types, the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> method supports conversion of any custom type to any base type.</source>
          <target state="translated">Além de oferecer suporte a conversões entre os tipos de base, o <ph id="ph1">&lt;xref:System.Convert&gt;</ph> método dá suporte à conversão de qualquer tipo personalizado para qualquer tipo de base.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>To do this, the custom type must implement the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface, which defines methods for converting the implementing type to each of the base types.</source>
          <target state="translated">Para fazer isso, o tipo personalizado deve implementar o <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface, que define métodos para converter o tipo de implementação para cada um dos tipos base.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions that are not supported by a particular type should throw an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Conversões que não são suportados por um determinado tipo devem lançar um <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>When the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method is passed a custom type as its first parameter, or when the <ph id="ph2">`Convert.To`</ph><bpt id="p1">*</bpt>Type<ept id="p1">*</ept> method (such as <ph id="ph3">&lt;xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> is called and passed an instance of a custom type as its first parameter, the <ph id="ph5">&lt;xref:System.Convert&gt;</ph> method, in turn, calls the custom type's <ph id="ph6">&lt;xref:System.IConvertible&gt;</ph> implementation to perform the conversion.</source>
          <target state="translated">Quando o <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> método é passado um tipo personalizado como o primeiro parâmetro, ou quando o <ph id="ph2">`Convert.To`</ph> <bpt id="p1">*</bpt>tipo<ept id="p1">*</ept> método (como <ph id="ph3">&lt;xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType&gt;</ph> ou <ph id="ph4">&lt;xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> é chamado e passado a uma instância de um tipo personalizado como o primeiro parâmetro, o <ph id="ph5">&lt;xref:System.Convert&gt;</ph> método, por sua vez, chama o tipo personalizado <ph id="ph6">&lt;xref:System.IConvertible&gt;</ph> implementação para executar a conversão.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For more information, see <bpt id="p1">[</bpt>Type Conversion in the .NET Framework<ept id="p1">](~/docs/standard/base-types/type-conversion.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>conversão de tipo do .NET Framework<ept id="p1">](~/docs/standard/base-types/type-conversion.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Culture-Specific Formatting Information</source>
          <target state="translated">Informações de formatação específicas de cultura</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>All the base type conversion methods and the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method include overloads that have a parameter of type <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">Todos os métodos de conversão de tipo de base e o <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> método incluir sobrecargas que têm um parâmetro do tipo <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For example, the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType&gt;</ph> method has the following two overloads:</source>
          <target state="translated">Por exemplo, o <ph id="ph1">&lt;xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType&gt;</ph> método tem duas sobrecargas a seguir:</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter can supply culture-specific formatting information to assist the conversion process.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parâmetro pode fornecer informações de formatação específica da cultura para ajudar o processo de conversão.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, it is ignored by most of the base type conversion methods.</source>
          <target state="translated">No entanto, ele será ignorado pela maioria dos métodos de conversão de tipo base.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It is used only by the following base type conversion methods.If a <ph id="ph1">`null`</ph><ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argument is passed to these methods, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Ele é usado apenas pelos seguintes métodos de conversão de tipo base. Se um <ph id="ph1">`null`</ph> <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argumento é passado para esses métodos, o <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto que representa a cultura do thread atual é usado.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>By methods that convert a value to a numeric type.</source>
          <target state="translated">Por métodos que convertem um valor para um tipo numérico.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter is used by the overload that has parameters of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parâmetro é usado, a sobrecarga que tem parâmetros de tipo <ph id="ph2">&lt;xref:System.String&gt;</ph> e <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It is also used by the overload that has parameters of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> if the object's run-time type is a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Ele também é usado, a sobrecarga que tem parâmetros de tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph> e <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> se o objeto do tempo de execução tipo é um <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>By methods that convert a value to a date and time.</source>
          <target state="translated">Por métodos que convertem um valor em uma data e hora.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter is used by the overload that has parameters of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parâmetro é usado, a sobrecarga que tem parâmetros de tipo <ph id="ph2">&lt;xref:System.String&gt;</ph> e <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It is also used by the overload that has parameters of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> if the object's run-time type is a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Ele também é usado, a sobrecarga que tem parâmetros de tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph> e <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> se o objeto do tempo de execução tipo é um <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>By the <ph id="ph1">&lt;xref:System.Convert.ToString%2A?displayProperty=nameWithType&gt;</ph> overloads that include an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter and that convert either a numeric value to a string or a <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> value to a string.</source>
          <target state="translated">Pelo <ph id="ph1">&lt;xref:System.Convert.ToString%2A?displayProperty=nameWithType&gt;</ph> sobrecargas que incluem um <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parâmetro e se converter um valor numérico em uma cadeia de caracteres ou um <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> valor em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, any user-defined type that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> can make use of the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter.</source>
          <target state="translated">No entanto, qualquer tipo definido pelo usuário que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> podem fazer uso do <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Base64 Encoding</source>
          <target state="translated">A codificação Base64</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Base64 encoding converts binary data to a string.</source>
          <target state="translated">A codificação Base64 converte dados binários em uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters.</source>
          <target state="translated">Expressada como dígitos de base 64 de dados podem ser facilmente transmitidos em canais de dados que podem transmitir apenas caracteres de 7 bits.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <ph id="ph2">&lt;xref:System.String&gt;</ph> or to and from an array of Unicode characters consisting of base-64 digit characters.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert&gt;</ph> classe inclui os seguintes métodos para dar suporte a codificação base64: um conjunto de métodos suporte converter uma matriz de bytes para e de um <ph id="ph2">&lt;xref:System.String&gt;</ph> ou de e para uma matriz de caracteres Unicode que consiste em caracteres de dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph>, which converts a byte array to a base64-encoded string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph>, que converte uma matriz de bytes em uma cadeia de caracteres codificada em base64.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph>, which converts a byte array to a base64-encoded character array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph>, que converte uma matriz de bytes em uma matriz de caracteres codificada em base64.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph>, which converts a base64-encoded string to a byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph>, que converte uma cadeia de caracteres codificada em base64 para uma matriz de bytes.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph>, which converts a base64-encoded character array to a byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph>, que converte uma matriz de caracteres codificada em base64 para uma matriz de bytes.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Other Common Conversions</source>
          <target state="translated">Outras conversões comuns</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class.</source>
          <target state="translated">Você pode usar outras classes no .NET Framework para executar algumas conversões que não são suportados por um dos métodos estáticos de <ph id="ph1">&lt;xref:System.Convert&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>These include:</source>
          <target state="translated">Elas incluem:</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversion to byte arrays</source>
          <target state="translated">Conversão em matrizes de bytes</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class  provides methods that convert the primitive numeric types (including <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>) to byte arrays and from byte arrays back to primitive data types.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> classe fornece métodos que convertem os primitivos numéricos (incluindo <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>) de matrizes de bytes e bytes matrizes de volta para tipos de dados primitivos.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Character encoding and decoding</source>
          <target state="translated">Codificação de caracteres e de decodificação</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class and its derived classes (such as <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.UTF8Encoding&gt;</ph>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> classe e suas classes derivadas (como <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> e <ph id="ph3">&lt;xref:System.Text.UTF8Encoding&gt;</ph>) fornecem métodos para codificar uma matriz de caracteres ou uma cadeia de caracteres (ou seja, convertê-las em uma matriz de bytes em uma codificação específica) e decodificar uma matriz de bytes codificados (ou seja, converter uma matriz de bytes para caracteres Unicode codificados UTF16.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For more information, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept></source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>codificação de caracteres no .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The following example demonstrates some of the conversion methods in the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Convert.ToBoolean%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Convert.ToString%2A&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra alguns dos métodos de conversão de <ph id="ph1">&lt;xref:System.Convert&gt;</ph> classe, incluindo <ph id="ph2">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Convert.ToBoolean%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Convert.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Returns an object of a specified type whose value is equivalent to a specified object.</source>
          <target state="translated">Retorna um objeto de um tipo especificado cujo valor é equivalente a um objeto especificado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The type of object to return.</source>
          <target state="translated">O tipo de objeto a ser retornado.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>Returns an object of the specified type and whose value is equivalent to the specified object.</source>
          <target state="translated">Retorna um objeto do tipo especificado e cujo valor é equivalente ao objeto especificado.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>An object whose type is <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um objeto cujo tipo é <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> e cujo valor é equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> is not a value type.</source>
          <target state="translated">Uma referência nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> no Visual Basic), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph> e <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> não for um tipo de valor.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to <ph id="ph3">`conversionType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> é um método de conversão para fins gerais que converte o objeto especificado pelo <ph id="ph2">`value`</ph> para <ph id="ph3">`conversionType`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type, and <ph id="ph2">`conversionType`</ph> can also be a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object that represents any base or custom type.</source>
          <target state="translated">O <ph id="ph1">`value`</ph> parâmetro pode ser um objeto de qualquer tipo, e <ph id="ph2">`conversionType`</ph> também pode ser um <ph id="ph3">&lt;xref:System.Type&gt;</ph> objeto que representa qualquer tipo de base ou personalizado.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que a conversão seja bem-sucedida, <ph id="ph1">`value`</ph> deve implementar a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>, porque o método simplesmente encapsula uma chamada para um método <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> apropriado.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The method requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`conversionType`</ph> be supported.</source>
          <target state="translated">O método requer conversão de <ph id="ph1">`value`</ph> para <ph id="ph2">`conversionType`</ph> suporte.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>This method uses the current thread's culture for the conversion.</source>
          <target state="translated">Esse método usa a cultura do thread atual para a conversão.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir ilustra o uso do método <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> is a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> é um tipo de valor.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format recognized by <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato reconhecido pelo <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que está fora do intervalo de <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> method can convert an enumeration value to another type.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> método pode converter um valor de enumeração em outro tipo.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration.</source>
          <target state="translated">No entanto, ele não é possível converter o outro tipo para um valor de enumeração, mesmo se o tipo de origem é o tipo subjacente da enumeração.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">Para converter um tipo em um valor de enumeração, use um operador de conversão (em c#) ou uma função de conversão (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The following example illustrates the conversion to and from a <bpt id="p1">&lt;c&gt;</bpt>Continent<ept id="p1">&lt;/c&gt;</ept> enumeration value.</source>
          <target state="translated">O exemplo a seguir ilustra a conversão para e de um <bpt id="p1">&lt;c&gt;</bpt>continente<ept id="p1">&lt;/c&gt;</ept> valor de enumeração.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> method can convert a nullable type to another type.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> método pode converter um tipo anulável em outro tipo.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>However, it cannot convert another type to a value of a nullable type, even if <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is the underlying type of the <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>.To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">No entanto, ele não é possível converter o outro tipo para um valor de um tipo anulável, mesmo se <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> é o tipo subjacente do <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>. Para executar a conversão, você pode usar um operador de conversão (em c#) ou uma função de conversão (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The following example illustrates the conversion to and from a nullable type.</source>
          <target state="translated">O exemplo a seguir ilustra a conversão para e de um tipo anulável.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The type of object to return.</source>
          <target state="translated">O tipo de objeto a ser retornado.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>Returns an object of the specified type whose value is equivalent to the specified object.</source>
          <target state="translated">Retorna um objeto do tipo especificado, cujo valor é equivalente ao objeto especificado.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>An object whose underlying type is <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um objeto cujo tipo subjacente é <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> e cujo valor é equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> is <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph>, or <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</source>
          <target state="translated">Uma referência nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> no Visual Basic), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph> e <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> for <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph> ou <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to a predefined type specified by <ph id="ph3">`typeCode`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> é um método de conversão para fins gerais que converte o objeto especificado pelo <ph id="ph2">`value`</ph> para um tipo predefinido especificado pelo <ph id="ph3">`typeCode`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type.</source>
          <target state="translated">O <ph id="ph1">`value`</ph> parâmetro pode ser um objeto de qualquer tipo.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que a conversão seja bem-sucedida, <ph id="ph1">`value`</ph> deve implementar a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>, porque o método simplesmente encapsula uma chamada para um método <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> apropriado.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The method also requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`typeCode`</ph> be supported.</source>
          <target state="translated">O método também requer conversão de <ph id="ph1">`value`</ph> para <ph id="ph2">`typeCode`</ph> suporte.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> method does not support the conversion of <ph id="ph2">`value`</ph> to a custom type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> método não oferece suporte para a conversão de <ph id="ph2">`value`</ph> para um tipo personalizado.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>To perform such a conversion, call the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29&gt;</ph> method.</source>
          <target state="translated">Para executar tal conversão, chamar o <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The following example illustrates how to use the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> method to change an <ph id="ph2">&lt;xref:System.Object&gt;</ph> to the type specified by the <ph id="ph3">&lt;xref:System.TypeCode&gt;</ph> parameter, if possible.</source>
          <target state="translated">O exemplo a seguir ilustra como usar o <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> método para alterar um <ph id="ph2">&lt;xref:System.Object&gt;</ph> para o tipo especificado pelo <ph id="ph3">&lt;xref:System.TypeCode&gt;</ph> parâmetro, se possível.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> specifies a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> especifica um tipo de valor.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format recognized by the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato reconhecido pelo tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que está fora do intervalo do tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> é inválido.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The type of object to return.</source>
          <target state="translated">O tipo de objeto a ser retornado.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Returns an object of the specified type whose value is equivalent to the specified object.</source>
          <target state="translated">Retorna um objeto do tipo especificado, cujo valor é equivalente ao objeto especificado.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>A parameter supplies culture-specific formatting information.</source>
          <target state="translated">Um parâmetro fornece informações de formatação específicas da cultura.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>An object whose type is <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um objeto cujo tipo é <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> e cujo valor é equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> and <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> are equal.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, se o <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> de <ph id="ph3">&lt;paramref name="value" /&gt;</ph> e <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> forem iguais.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> is not a value type.</source>
          <target state="translated">Uma referência nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> no Visual Basic), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph> e <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> não for um tipo de valor.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to <ph id="ph3">`conversionType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> é um método de conversão para fins gerais que converte o objeto especificado pelo <ph id="ph2">`value`</ph> para <ph id="ph3">`conversionType`</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type, and <ph id="ph2">`conversionType`</ph> can also be a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object that represents any base or custom type.</source>
          <target state="translated">O <ph id="ph1">`value`</ph> parâmetro pode ser um objeto de qualquer tipo, e <ph id="ph2">`conversionType`</ph> também pode ser um <ph id="ph3">&lt;xref:System.Type&gt;</ph> objeto que representa qualquer tipo de base ou personalizado.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que a conversão seja bem-sucedida, <ph id="ph1">`value`</ph> deve implementar a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>, porque o método simplesmente encapsula uma chamada para um método <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> apropriado.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The method requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`conversionType`</ph> be supported.</source>
          <target state="translated">O método requer conversão de <ph id="ph1">`value`</ph> para <ph id="ph2">`conversionType`</ph> suporte.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that supplies formatting information for the conversion.</source>
          <target state="translated">O <ph id="ph1">`provider`</ph> parâmetro é um <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementação que fornece informações de formatação para a conversão.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Whether and how this parameter is used depends on the underlying <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementation.</source>
          <target state="translated">Se e como esse parâmetro é usado depende subjacente <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is a base data type, <ph id="ph2">`provider`</ph> is used only for the following conversions:</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> é um tipo de dados base, <ph id="ph2">`provider`</ph> é usado apenas para as conversões a seguir:</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Conversion from a number to a string, or from a string to a number.</source>
          <target state="translated">Conversão de um número em uma cadeia de caracteres ou de uma cadeia de caracteres para um número.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, or a custom <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementation that returns a <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> deve ser um <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto, um <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto ou um personalizado <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementação que retorna um <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>However, because the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method performs the conversion using the default "G" format specifier, the <ph id="ph2">`provider`</ph> parameter has no effect if <ph id="ph3">`value`</ph> or the target type is an unsigned integer.</source>
          <target state="translated">No entanto, como o <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método realiza a conversão usando o especificador de formato padrão "G", o <ph id="ph2">`provider`</ph> parâmetro não tem nenhum efeito se <ph id="ph3">`value`</ph> ou o tipo de destino é um inteiro não assinado.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Se <ph id="ph1">`provider`</ph> é <ph id="ph2">`null`</ph>, o <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto que representa a cultura do thread atual é usado.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Conversion from a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a string, or from a string to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value.</source>
          <target state="translated">Conversão de um <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor de uma cadeia de caracteres, ou uma cadeia de caracteres para um <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> deve ser um <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> ou <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Se <ph id="ph1">`provider`</ph> é <ph id="ph2">`null`</ph>, o <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto que representa a cultura do thread atual é usado.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is an application-defined type, its <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementation may use the <ph id="ph3">`provider`</ph> parameter.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> é um tipo definido pelo aplicativo, seu <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementação pode usar o <ph id="ph3">`provider`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">`Temperature`</ph> que implementa a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example creates an instance of the <ph id="ph1">`Temperature`</ph> class and calls the <ph id="ph2">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> method to convert it to the basic numeric types supported by the .NET Framework and to a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir cria uma instância do <ph id="ph1">`Temperature`</ph> classe e chama o <ph id="ph2">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> método para convertê-lo para os tipos numéricos básicos com suporte pelo .NET Framework e para um <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>It illustrates that the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method wraps a call to the source type's <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementation.</source>
          <target state="translated">Ele ilustra que o <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> método ajusta uma chamada para o tipo de origem <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> is a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> é um tipo de valor.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format for <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph> recognized by <ph id="ph3">&lt;paramref name="provider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato para <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph> reconhecido pelo <ph id="ph3">&lt;paramref name="provider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que está fora do intervalo de <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> method can convert an enumeration value to another type.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> método pode converter um valor de enumeração em outro tipo.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration.</source>
          <target state="translated">No entanto, ele não é possível converter o outro tipo para um valor de enumeração, mesmo se o tipo de origem é o tipo subjacente da enumeração.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">Para converter um tipo em um valor de enumeração, use um operador de conversão (em c#) ou uma função de conversão (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example illustrates the conversion to and from a <bpt id="p1">&lt;c&gt;</bpt>Continent<ept id="p1">&lt;/c&gt;</ept> enumeration value.</source>
          <target state="translated">O exemplo a seguir ilustra a conversão para e de um <bpt id="p1">&lt;c&gt;</bpt>continente<ept id="p1">&lt;/c&gt;</ept> valor de enumeração.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> method can convert a nullable type to another type.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> método pode converter um tipo anulável em outro tipo.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>However, it cannot convert another type to a value of a nullable type, even if <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is the underlying type of the <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>.</source>
          <target state="translated">No entanto, ele não é possível converter o outro tipo para um valor de um tipo anulável, mesmo se <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> é o tipo subjacente do <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">Para executar a conversão, você pode usar um operador de conversão (em c#) ou uma função de conversão (no Visual Basic).</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example illustrates the conversion to and from a nullable type.</source>
          <target state="translated">O exemplo a seguir ilustra a conversão para e de um tipo anulável.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The type of object to return.</source>
          <target state="translated">O tipo de objeto a ser retornado.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Returns an object of the specified type whose value is equivalent to the specified object.</source>
          <target state="translated">Retorna um objeto do tipo especificado, cujo valor é equivalente ao objeto especificado.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>A parameter supplies culture-specific formatting information.</source>
          <target state="translated">Um parâmetro fornece informações de formatação específicas da cultura.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>An object whose underlying type is <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um objeto cujo tipo subjacente é <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> e cujo valor é equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> is <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph>, or <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</source>
          <target state="translated">Uma referência nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> no Visual Basic), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph> e <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> for <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph> ou <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to a predefined type specified by <ph id="ph3">`typeCode`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> é um método de conversão para fins gerais que converte o objeto especificado pelo <ph id="ph2">`value`</ph> para um tipo predefinido especificado pelo <ph id="ph3">`typeCode`</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type.</source>
          <target state="translated">O <ph id="ph1">`value`</ph> parâmetro pode ser um objeto de qualquer tipo.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que a conversão seja bem-sucedida, <ph id="ph1">`value`</ph> deve implementar a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>, porque o método simplesmente encapsula uma chamada para um método <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> apropriado.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The method also requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`typeCode`</ph> be supported.</source>
          <target state="translated">O método também requer conversão de <ph id="ph1">`value`</ph> para <ph id="ph2">`typeCode`</ph> suporte.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method does not support the conversion of <ph id="ph2">`value`</ph> to a custom type.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método não oferece suporte para a conversão de <ph id="ph2">`value`</ph> para um tipo personalizado.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>To perform such a conversion, call the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">Para executar tal conversão, chamar o <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that supplies formatting information for the conversion.</source>
          <target state="translated">O <ph id="ph1">`provider`</ph> parâmetro é um <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementação que fornece informações de formatação para a conversão.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Whether and how this parameter is used depends on the underlying <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementation.</source>
          <target state="translated">Se e como esse parâmetro é usado depende subjacente <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is a base data type, <ph id="ph2">`provider`</ph> is used only for the following conversions.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> é um tipo de dados base, <ph id="ph2">`provider`</ph> é usado apenas para as conversões a seguir.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>If a <ph id="ph1">`null`</ph><ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argument is passed to these methods, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Se um <ph id="ph1">`null`</ph> <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argumento é passado para esses métodos, o <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto que representa a cultura do thread atual é usado.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Conversion from a number to a string, or from a string to a number.</source>
          <target state="translated">Conversão de um número em uma cadeia de caracteres ou de uma cadeia de caracteres para um número.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, or a custom <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementation that returns a <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> deve ser um <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto, um <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto ou um personalizado <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementação que retorna um <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>However, because the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method performs the conversion using the default "G" format specifier, the <ph id="ph2">`provider`</ph> parameter has no effect if <ph id="ph3">`value`</ph> or the target type is an unsigned integer.</source>
          <target state="translated">No entanto, como o <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método realiza a conversão usando o especificador de formato padrão "G", o <ph id="ph2">`provider`</ph> parâmetro não tem nenhum efeito se <ph id="ph3">`value`</ph> ou o tipo de destino é um inteiro não assinado.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Conversion from a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a string, or from a string to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value.</source>
          <target state="translated">Conversão de um <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor de uma cadeia de caracteres, ou uma cadeia de caracteres para um <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> deve ser um <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> ou <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is an application-defined type, its <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementation may use the <ph id="ph3">`provider`</ph> parameter.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> é um tipo definido pelo aplicativo, seu <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementação pode usar o <ph id="ph3">`provider`</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The following example defines a custom format provider named <ph id="ph1">`InterceptProvider`</ph> that indicates when its <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method is called and returns a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the fr-FR culture and a <ph id="ph4">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object for the en-US culture.</source>
          <target state="translated">O exemplo a seguir define um provedor de formato personalizado chamado <ph id="ph1">`InterceptProvider`</ph> que indica quando seu <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> é chamado de método e retorna um <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> para a cultura fr-FR e um <ph id="ph4">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto para a cultura en-US.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>This format provider is used in all calls to the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">Este provedor de formato é usado em todas as chamadas para o <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The example then creates an array with a <ph id="ph1">&lt;xref:System.Double&gt;</ph> and a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value and makes repeated calls to <ph id="ph3">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> with each value and each member of the <ph id="ph4">&lt;xref:System.TypeCode&gt;</ph> enumeration.</source>
          <target state="translated">O exemplo cria uma matriz com um <ph id="ph1">&lt;xref:System.Double&gt;</ph> e um <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valor e faz chamadas repetidas para <ph id="ph3">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> com cada valor e cada membro de <ph id="ph4">&lt;xref:System.TypeCode&gt;</ph> enumeração.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The example illustrates when the method uses the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter and also illustrates the use of the <ph id="ph2">`provider`</ph> parameter to perform culture-sensitive formatting.</source>
          <target state="translated">O exemplo ilustra quando o método usa o <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parâmetro e também ilustra o uso do <ph id="ph2">`provider`</ph> parâmetro para executar formatação sensíveis à cultura.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> specifies a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph> e <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> especifica um tipo de valor.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format for the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type recognized by <ph id="ph3">&lt;paramref name="provider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato para o tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> reconhecido pelo <ph id="ph3">&lt;paramref name="provider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que está fora do intervalo do tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> é inválido.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="F:System.Convert.DBNull">
          <source>A constant that represents a database column that is absent of data; that is, database null.</source>
          <target state="translated">Uma constante que representa uma coluna de banco de dados sem dados, ou seja, um banco de dados nulo.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Convert.DBNull">
          <source>The <ph id="ph1">&lt;xref:System.Convert.DBNull&gt;</ph> field is equivalent to <ph id="ph2">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>, as the following example shows.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.DBNull&gt;</ph> campo é equivalente à <ph id="ph2">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>A Unicode character array.</source>
          <target state="translated">Uma matriz de caracteres Unicode.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma posição na <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The number of elements in <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">O número de elementos na <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> a ser convertido.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</source>
          <target state="translated">Converte um subconjunto de uma matriz de caracteres Unicode que codifica dados binários como dígitos de base 64 em uma matriz de inteiros sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Parameters specify the subset in the input array and the number of elements to convert.</source>
          <target state="translated">Os parâmetros especificam o subconjunto na matriz de entrada e o número de elementos a serem convertidos.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>An array of 8-bit unsigned integers equivalent to <ph id="ph1">&lt;paramref name="length" /&gt;</ph> elements at position <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> in <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de inteiros sem sinal de 8 bits equivalentes aos elementos <ph id="ph1">&lt;paramref name="length" /&gt;</ph> na posição <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> em <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">`inArray`</ph> is composed of base-64 digits, white-space characters, and trailing padding characters.</source>
          <target state="translated"><ph id="ph1">`inArray`</ph> é composto de dígitos de base 64, caracteres de espaço em branco e caracteres de preenchimento à direita.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente de zero são os caracteres maiusculos "A" a "Z", caracteres em minúsculas "a" a "z", numerais "0" para "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</source>
          <target state="translated">Os caracteres de espaço em branco e os nomes de Unicode e os pontos de código hexadecimal, são guia (CARACTERE de tabulação, U + 0009), nova linha (alimentação de linha, U + 000A), retorno de carro (retorno de CARRO, U + 000d) e espaço em branco (espaço, U + 0020).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>An arbitrary number of white-space characters can appear in <ph id="ph1">`inArray`</ph> because all white-space characters are ignored.</source>
          <target state="translated">Um número arbitrário de espaço em branco pode aparecer em <ph id="ph1">`inArray`</ph> porque todos os caracteres de espaço em branco são ignorados.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">O caractere sem valor, "=", é usado no preenchimento à direita.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The end of <ph id="ph1">`inArray`</ph> can consist of zero, one, or two padding characters.</source>
          <target state="translated">O fim do <ph id="ph1">`inArray`</ph> pode consistir em zero, um ou dois caracteres de preenchimento.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph> method is designed to process a single character array that contains all the data to be decoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph> método foi projetado para processar uma matriz de caractere único que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>To decode base-64 character data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para decodificar dados de caracteres de base 64 de um fluxo, use o <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to decode UUencoded (base-64) data and save it as binary output.</source>
          <target state="translated">O exemplo a seguir demonstra o uso do <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> método para decodificar dados UUencoded (base-64) e salve-o como saída binária.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> methods.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The input is divided into groups of three bytes (24 bits) each.</source>
          <target state="translated">A entrada é dividida em grupos de três bytes (24 bits) cada.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</source>
          <target state="translated">Consequentemente, cada grupo consiste em quatro números de 6 bits em que cada número varia de 0 a 63 decimal.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>In this example, there are 85 3-byte groups with one byte remaining.</source>
          <target state="translated">Neste exemplo, existem 85 grupos de 3 bytes com um byte restante.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</source>
          <target state="translated">O primeiro grupo consiste nos valores hexadecimais 00, 01 e 02, que produzem quatro valores de 6 bits iguais a 0, 0, 4 e 2 decimais.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Those four values correspond to the base-64 digits, "A", "A", "E", and "C", at the beginning of the output.</source>
          <target state="translated">Os quatro valores correspondem aos dígitos de base 64, "A", "A", "E" e "C", no início da saída.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</source>
          <target state="translated">Caso um número integral de grupos de 3 bytes não exista, os bytes restantes são preenchidos efetivamente com zero para formar um grupo completo.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>In this example, the value of the last byte is hexadecimal FF.</source>
          <target state="translated">Neste exemplo, o valor do último byte é FF hexadecimal.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</source>
          <target state="translated">Os primeiros 6 bits são iguais ao decimal 63, que corresponde ao dígito de base 64 "/" no final da saída, e os 2 próximos bits são preenchidos com zeros para produzir o decimal 48, que corresponde ao dígito de base 64, "w".</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The last two 6-bit values are padding and correspond to the valueless padding character, "=".</source>
          <target state="translated">Os dois últimos valores de 6 bits estão sendo preenchidos e correspondem ao caractere de preenchimento sem valor, "=".</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="length" /&gt;</ph> é menor que 0.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> indicates a position not within <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="length" /&gt;</ph> indica uma posição que não está dentro do <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The length of <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>, ignoring white-space characters, is not zero or a multiple of 4.</source>
          <target state="translated">O comprimento de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>, ignorando caracteres de espaço em branco, não é zero ou um múltiplo de 4.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The format of <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is invalid.</source>
          <target state="translated">O formato de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> é inválido.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> contém um caractere que não é de base 64, mais de dois caracteres de preenchimento ou um caractere que não é um espaço em branco entre os caracteres de preenchimento.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The string to convert.</source>
          <target state="translated">A cadeia de caracteres a ser convertida.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</source>
          <target state="translated">Converte a cadeia de caracteres especificada, o que codifica dados binários, como dígitos de base 64, em uma matriz equivalente de inteiros sem sinais de 8 bits.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>An array of 8-bit unsigned integers that is equivalent to <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</source>
          <target state="translated">Uma matriz de inteiros sem sinais de 8 bits equivalente a <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source><ph id="ph1">`s`</ph> is composed of base-64 digits, white-space characters, and trailing padding characters.</source>
          <target state="translated"><ph id="ph1">`s`</ph> é composto de dígitos de base 64, caracteres de espaço em branco e caracteres de preenchimento à direita.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente de zero são os caracteres maiusculos "A" a "Z", caracteres em minúsculas "a" a "z", numerais "0" para "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</source>
          <target state="translated">Os caracteres de espaço em branco e os nomes de Unicode e os pontos de código hexadecimal, são guia (CARACTERE de tabulação, U + 0009), nova linha (alimentação de linha, U + 000A), retorno de carro (retorno de CARRO, U + 000d) e espaço em branco (espaço, U + 0020).</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>An arbitrary number of white-space characters can appear in <ph id="ph1">`s`</ph> because all white-space characters are ignored.</source>
          <target state="translated">Um número arbitrário de espaço em branco pode aparecer em <ph id="ph1">`s`</ph> porque todos os caracteres de espaço em branco são ignorados.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">O caractere sem valor, "=", é usado no preenchimento à direita.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The end of <ph id="ph1">`s`</ph> can consist of zero, one, or two padding characters.</source>
          <target state="translated">O fim do <ph id="ph1">`s`</ph> pode consistir em zero, um ou dois caracteres de preenchimento.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> method is designed to process a single string that contains all the data to be decoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> método foi projetado para processar uma única cadeia de caracteres que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>To decode base-64 character data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para decodificar dados de caracteres de base 64 de um fluxo, use o <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to convert a byte array to a UUencoded (base-64) string, and then calls the <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to restore the original byte array.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para converter uma matriz de bytes em uma cadeia de caracteres UUencoded (base-64) e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método para restaurar a matriz de bytes original.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The following is a more complex example that creates a 20-element array of 32-bit integers.</source>
          <target state="translated">Este é um exemplo mais complexo que cria uma matriz de elementos de 20 de inteiros de 32 bits.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>It then uses the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Ele usa o <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> método para converter cada elemento em uma matriz de bytes que ele armazena na posição apropriada em um buffer ao chamar o <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>This buffer is then passed to the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to create a UUencoded (base-64) string.</source>
          <target state="translated">Esse buffer é passado para o <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para criar uma cadeia de caracteres UUencoded (base-64).</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to decode the UUencoded string, and calls the <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método decodificar a cadeia de caracteres UUencoded e chama o <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> método para converter cada conjunto de quatro bytes (o tamanho de um inteiro de 32 bits) para um número inteiro.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The output from the example shows that the original array has been successfully restored.</source>
          <target state="translated">A saída do exemplo mostra que a matriz original foi restaurada com êxito.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The length of <ph id="ph1">&lt;paramref name="s" /&gt;</ph>, ignoring white-space characters, is not zero or a multiple of 4.</source>
          <target state="translated">O comprimento de <ph id="ph1">&lt;paramref name="s" /&gt;</ph>, ignorando caracteres de espaço em branco, não é zero ou um múltiplo de 4.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The format of <ph id="ph1">&lt;paramref name="s" /&gt;</ph> is invalid.</source>
          <target state="translated">O formato de <ph id="ph1">&lt;paramref name="s" /&gt;</ph> é inválido.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph> contém um caractere que não é de base 64, mais de dois caracteres de preenchimento ou um caractere que não é um espaço em branco entre os caracteres de preenchimento.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Convert.GetTypeCode(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Convert.GetTypeCode(System.Object)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> for the specified object.</source>
          <target state="translated">Retorna o <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> para o objeto especificado.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Convert.GetTypeCode(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> for <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph3">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph> if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> de <ph id="ph2">&lt;paramref name="value" /&gt;</ph> ou <ph id="ph3">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph> se <ph id="ph4">&lt;paramref name="value" /&gt;</ph> for <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>An object.</source>
          <target state="translated">Um objeto.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>Returns an indication whether the specified object is of type <ph id="ph1">&lt;see cref="T:System.DBNull" /&gt;</ph>.</source>
          <target state="translated">Retorna uma indicação de que se o objeto especificado é do tipo <ph id="ph1">&lt;see cref="T:System.DBNull" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Convert.IsDBNull(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is of type <ph id="ph3">&lt;see cref="T:System.DBNull" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for do tipo <ph id="ph3">&lt;see cref="T:System.DBNull" /&gt;</ph>; caso contrário, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> method tests whether the <ph id="ph2">`value`</ph> parameter is equal to <ph id="ph3">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> método testes se o <ph id="ph2">`value`</ph> parâmetro for igual ao <ph id="ph3">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>It is equivalent to the following code:</source>
          <target state="translated">É equivalente ao seguinte código:</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source><ph id="ph1">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph> is used to indicate a value that is missing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph> é usado para indicar um valor que está ausente.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>It is not equivalent to <ph id="ph1">`null`</ph> or to <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Não é equivalente a <ph id="ph1">`null`</ph> ou <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>Therefore, code such as <ph id="ph1">`Convert.IsDBNull(null)`</ph> in C# or <ph id="ph2">`Convert.IsDBNull(Nothing)`</ph> in Visual Basic returns<ph id="ph3">`false`</ph>.</source>
          <target state="translated">Portanto, código, como <ph id="ph1">`Convert.IsDBNull(null)`</ph> em c# ou <ph id="ph2">`Convert.IsDBNull(Nothing)`</ph> no Visual Basic retorna<ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object to retrieve survey data from a database.</source>
          <target state="translated">O exemplo a seguir usa uma <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> objeto para recuperar dados de pesquisa de um banco de dados.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>It assigns each row's field values to an array, and then passes each array element to the <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> method.</source>
          <target state="translated">Ele atribui valores de campo de cada linha em uma matriz e, em seguida, passa cada elemento da matriz de <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>If the method returns <ph id="ph1">`true`</ph>, the example assigns the string "NA" to the array element.</source>
          <target state="translated">Se o método retornar <ph id="ph1">`true`</ph>, o exemplo atribui a cadeia de caracteres "NA" para o elemento da matriz.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>The array is then added to the <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView.Rows%2A&gt;</ph> collection of a <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType&gt;</ph> control.</source>
          <target state="translated">A matriz é adicionada para o <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView.Rows%2A&gt;</ph> coleção de um <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType&gt;</ph> controle.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</source>
          <target state="translated">Converte um subconjunto de uma matriz de inteiros não assinados de 8 bits em um subconjunto equivalente de uma matriz de caracteres Unicode codificada com dígitos com base em 64.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>An input array of 8-bit unsigned integers.</source>
          <target state="translated">Uma matriz de entrada com inteiros sem sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma posição na <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">O número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> a serem convertidos.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>An output array of Unicode characters.</source>
          <target state="translated">Uma matriz de saída de caracteres Unicode.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma posição na <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</source>
          <target state="translated">Converte um subconjunto de uma matriz de inteiros não assinados de 8 bits em um subconjunto equivalente de uma matriz de caracteres Unicode codificada com dígitos com base em 64.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</source>
          <target state="translated">Os parâmetros especificam os subconjuntos como deslocamentos nas matrizes de entrada e saída, e o número de elementos na matriz de entrada a serem convertidos.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A 32-bit signed integer containing the number of bytes in <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits que contém o número de bytes em <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The subset of <ph id="ph1">`length`</ph> elements of <ph id="ph2">`inArray`</ph> starting at position <ph id="ph3">`offsetIn`</ph>, are taken as a numeric value and converted to a subset of elements in <ph id="ph4">`outArray`</ph> starting at position <ph id="ph5">`offsetOut`</ph>.</source>
          <target state="translated">O subconjunto de <ph id="ph1">`length`</ph> elementos de <ph id="ph2">`inArray`</ph> começando na posição <ph id="ph3">`offsetIn`</ph>, são executadas como um valor numérico e convertido em um subconjunto de elementos em <ph id="ph4">`outArray`</ph> começando na posição <ph id="ph5">`offsetOut`</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The return value indicates the number of converted elements in <ph id="ph1">`outArray`</ph>.</source>
          <target state="translated">O valor de retorno indica o número de elementos convertidos em <ph id="ph1">`outArray`</ph>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The subset of <ph id="ph1">`outArray`</ph> consists of base-64 digits.</source>
          <target state="translated">O subconjunto de <ph id="ph1">`outArray`</ph> consiste em dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente a partir de zero são os caracteres maiúsculos de "A" a "Z", os caracteres minúsculos de "a" a "z", os numerais de "0" a "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">O caractere sem valor, "=", é usado no preenchimento à direita.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">Os parâmetros <ph id="ph1">`offset`</ph> e <ph id="ph2">`length`</ph> são números assinados de 32 bits.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">`offsetIn`</ph> and <ph id="ph2">`offsetOut`</ph> parameters are zero-based array positions.</source>
          <target state="translated">O <ph id="ph1">`offsetIn`</ph> e <ph id="ph2">`offsetOut`</ph> parâmetros são as posições de matriz com base em zero.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método foi projetado para processar uma matriz de byte único que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To create a base-64 character array from a byte stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para criar uma matriz de caracteres de base 64 de um fluxo de bytes, use o <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following example demonstrates using the <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.</source>
          <target state="translated">O exemplo a seguir demonstra como usar o <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método UUencode (codificação em base 64) um fluxo binário, em seguida, salve a codificação para um arquivo.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> or <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="length" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> e <ph id="ph2">&lt;paramref name="length" /&gt;</ph> é maior que o tamanho de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> plus the number of elements to return is greater than the length of <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> mais o número de elementos a serem retornados é maior que o comprimento de <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>An input array of 8-bit unsigned integers.</source>
          <target state="translated">Uma matriz de entrada com inteiros sem sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma posição na <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">O número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> a serem convertidos.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>An output array of Unicode characters.</source>
          <target state="translated">Uma matriz de saída de caracteres Unicode.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Uma posição na <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> to insert a line break every 76 characters, or <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> to not insert line breaks.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> para inserir uma quebra de linha a cada 76 caracteres, ou <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> para não inserir quebras de linha.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</source>
          <target state="translated">Converte um subconjunto de uma matriz de inteiros não assinados de 8 bits em um subconjunto equivalente de uma matriz de caracteres Unicode codificada com dígitos com base em 64.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</source>
          <target state="translated">Parâmetros especificam os subconjuntos como deslocamentos nas matrizes de entrada e saída, o número de elementos na matriz de entrada a serem convertidos e se as quebras de linha são inseridas na matriz de saída.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A 32-bit signed integer containing the number of bytes in <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits que contém o número de bytes em <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The subset of <ph id="ph1">`length`</ph> elements of the <ph id="ph2">`inArray`</ph> parameter starting at position <ph id="ph3">`offsetIn`</ph>, are taken as a numeric value and converted to a subset of elements in the <ph id="ph4">`outArray`</ph> parameter starting at position <ph id="ph5">`offsetOut`</ph>.</source>
          <target state="translated">O subconjunto de <ph id="ph1">`length`</ph> elementos do <ph id="ph2">`inArray`</ph> parâmetro começando na posição <ph id="ph3">`offsetIn`</ph>, são executadas como um valor numérico e convertido em um subconjunto de elementos no <ph id="ph4">`outArray`</ph> começando na posição de parâmetro <ph id="ph5">`offsetOut`</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The return value indicates the number of converted elements in <ph id="ph1">`outArray`</ph>.</source>
          <target state="translated">O valor de retorno indica o número de elementos convertidos em <ph id="ph1">`outArray`</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The subset of <ph id="ph1">`outArray`</ph> consists of base-64 digits.</source>
          <target state="translated">O subconjunto de <ph id="ph1">`outArray`</ph> consiste em dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente a partir de zero são os caracteres maiúsculos de "A" a "Z", os caracteres minúsculos de "a" a "z", os numerais de "0" a "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The valueless character "=" is used for trailing padding.</source>
          <target state="translated">O caractere de valor "=" é usado para à direita de preenchimento.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">Os parâmetros <ph id="ph1">`offset`</ph> e <ph id="ph2">`length`</ph> são números assinados de 32 bits.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offsetIn`</ph> and <ph id="ph2">`offsetOut`</ph> parameters are zero-based array positions.</source>
          <target state="translated">O <ph id="ph1">`offsetIn`</ph> e <ph id="ph2">`offsetOut`</ph> parâmetros são as posições de matriz com base em zero.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método foi projetado para processar uma matriz de byte único que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>To create a base-64 character array from a byte stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para criar uma matriz de caracteres de base 64 de um fluxo de bytes, use o <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is set to <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</source>
          <target state="translated">Se o <ph id="ph1">`options`</ph> parâmetro está definido como <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> e a saída da conversão é maior do que 76 caracteres, uma quebra de linha é inserida cada 76 caracteres.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</source>
          <target state="translated">Uma quebra de linha é definida como um caractere de retorno de carro (U + 000d) seguido por uma linha de feed de caractere (U + 000A).</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <bpt id="p1">[</bpt><ph id="ph1">https://www.rfc-editor.org/</ph><ept id="p1">](https://www.rfc-editor.org/)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte RFC 2045, "Multipurpose Internet Mail Extensions", em <bpt id="p1">[</bpt> <ph id="ph1">https://www.rfc-editor.org/</ph> <ept id="p1">](https://www.rfc-editor.org/)</ept>.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The input is divided into groups of three bytes (24 bits) each.</source>
          <target state="translated">A entrada é dividida em grupos de três bytes (24 bits) cada.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</source>
          <target state="translated">Consequentemente, cada grupo consiste em quatro números de 6 bits em que cada número varia de 0 a 63 decimal.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>In this example, there are 85 3-byte groups with one byte remaining.</source>
          <target state="translated">Neste exemplo, existem 85 grupos de 3 bytes com um byte restante.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</source>
          <target state="translated">O primeiro grupo consiste nos valores hexadecimais 00, 01 e 02, que produzem quatro valores de 6 bits iguais a 0, 0, 4 e 2 decimais.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</source>
          <target state="translated">Os quatro valores correspondem aos dígitos de base 64 "A", "A", "E" e "C" no início da saída.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</source>
          <target state="translated">Caso um número integral de grupos de 3 bytes não exista, os bytes restantes são preenchidos efetivamente com zero para formar um grupo completo.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>In this example, the value of the last byte is hexadecimal FF.</source>
          <target state="translated">Neste exemplo, o valor do último byte é FF hexadecimal.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</source>
          <target state="translated">Os primeiros 6 bits são iguais ao decimal 63, que corresponde ao dígito de base 64 "/" no final da saída, e os 2 próximos bits são preenchidos com zeros para produzir o decimal 48, que corresponde ao dígito de base 64, "w".</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The last two 6-bit values are padding and correspond to the valueless padding character, "=".</source>
          <target state="translated">Os dois últimos valores de 6 bits estão sendo preenchidos e correspondem ao caractere de preenchimento sem valor, "=".</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> or <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> é <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="length" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> e <ph id="ph2">&lt;paramref name="length" /&gt;</ph> é maior que o tamanho de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> plus the number of elements to return is greater than the length of <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> mais o número de elementos a serem retornados é maior que o comprimento de <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> não é um valor <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts the value of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Converte o valor de uma matriz de inteiros sem sinal de 8 bits em sua representação de cadeia de caracteres equivalente codificada com dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Uma matriz de inteiros não assinados de 8 bits.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Converte uma matriz de inteiros sem sinal de 8 bits na representação de cadeia de caracteres equivalente codificada com dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The string representation, in base 64, of the contents of <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">A representação de cadeia de caracteres, em base 64, do conteúdo de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The elements of <ph id="ph1">`inArray`</ph> are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.</source>
          <target state="translated">Os elementos de <ph id="ph1">`inArray`</ph> são criados como um valor numérico e convertido em uma representação de cadeia de caracteres codificada com dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente a partir de zero são os caracteres maiúsculos de "A" a "Z", os caracteres minúsculos de "a" a "z", os numerais de "0" a "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">O caractere sem valor, "=", é usado no preenchimento à direita.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método foi projetado para processar uma matriz de byte único que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar dados a partir de um fluxo, use a classe <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>Ordinarily, the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is not used to round-trip a  UUEncoded (base-64 encoded) string.</source>
          <target state="translated">Em geral, o <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método não é usado para a viagem um UUEncoded (codificados na base 64) cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>That is, if you decode a string by calling the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> method, then encode the returned byte array by calling the <ph id="ph2">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method, the resulting string will not necessarily be identical to the original string.</source>
          <target state="translated">Ou seja, se você decodificar uma cadeia de caracteres chamando o <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> método, codificar, em seguida, a matriz de bytes retornado ao chamar o <ph id="ph2">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método, a cadeia de caracteres resultante não serão necessariamente idêntica à cadeia de caracteres original.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The string will round-trip only if the original string is a valid base-64 encoded string.</source>
          <target state="translated">A cadeia de caracteres será viagem somente se a cadeia de caracteres original for uma cadeia codificada de base 64 válida.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to convert a byte array to a UUencoded (base-64) string, and then calls the <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to restore the original byte array.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para converter uma matriz de bytes em uma cadeia de caracteres UUencoded (base-64) e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método para restaurar a matriz de bytes original.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The following is a more complex example that creates a 20-element array of 32-bit integers.</source>
          <target state="translated">Este é um exemplo mais complexo que cria uma matriz de elementos de 20 de inteiros de 32 bits.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>It then uses the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Ele usa o <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> método para converter cada elemento em uma matriz de bytes que ele armazena na posição apropriada em um buffer ao chamar o <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>This buffer is then passed to the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to create a UUencoded (base-64) string.</source>
          <target state="translated">Esse buffer é passado para o <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para criar uma cadeia de caracteres UUencoded (base-64).</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to decode the UUencoded string, and calls the <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método decodificar a cadeia de caracteres UUencoded e chama o <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> método para converter cada conjunto de quatro bytes (o tamanho de um inteiro de 32 bits) para um número inteiro.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The output from the example shows that the original array has been successfully restored.</source>
          <target state="translated">A saída do exemplo mostra que a matriz original foi restaurada com êxito.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Uma matriz de inteiros não assinados de 8 bits.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> to insert a line break every 76 characters, or <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> to not insert line breaks.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> para inserir uma quebra de linha a cada 76 caracteres, ou <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> para não inserir quebras de linha.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Converte uma matriz de inteiros sem sinal de 8 bits na representação de cadeia de caracteres equivalente codificada com dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>A parameter specifies whether to insert line breaks in the return value.</source>
          <target state="translated">Um parâmetro especifica se deseja inserir quebras de linha no valor retornado.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The string representation in base 64 of the elements in <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">A representação de cadeia de caracteres em base 64 dos elementos em <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The elements of the <ph id="ph1">`inArray`</ph> parameter are taken as a numeric value and converted to a string representation in base 64.</source>
          <target state="translated">Os elementos do <ph id="ph1">`inArray`</ph> parâmetro são executadas como um valor numérico e convertido em uma representação de cadeia de caracteres em base 64.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente a partir de zero são os caracteres maiúsculos de "A" a "Z", os caracteres minúsculos de "a" a "z", os numerais de "0" a "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The valueless character "=" is used for trailing padding.</source>
          <target state="translated">O caractere de valor "=" é usado para à direita de preenchimento.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método foi projetado para processar uma matriz de byte único que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar dados a partir de um fluxo, use a classe <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is set to <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</source>
          <target state="translated">Se o <ph id="ph1">`options`</ph> parâmetro está definido como <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> e a saída da conversão é maior do que 76 caracteres, uma quebra de linha é inserida cada 76 caracteres.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</source>
          <target state="translated">Uma quebra de linha é definida como um caractere de retorno de carro (U + 000d) seguido por uma linha de feed de caractere (U + 000A).</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array.</source>
          <target state="translated">Como quebras de linha são consideradas caracteres de espaço em branco em uma codificação de base 64, elas serão ignoradas quando a conversão de base 64 codificados cadeia de caracteres para uma matriz de bytes.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window.</source>
          <target state="translated">As quebras de linha são simplesmente convenientes ao exibir a cadeia de caracteres codificada para um controle ou um dispositivo, como uma janela do console.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <bpt id="p1">[</bpt><ph id="ph1">https://www.rfc-editor.org/</ph><ept id="p1">](https://www.rfc-editor.org/)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte RFC 2045, "Multipurpose Internet Mail Extensions", em <bpt id="p1">[</bpt> <ph id="ph1">https://www.rfc-editor.org/</ph> <ept id="p1">](https://www.rfc-editor.org/)</ept>.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType&gt;</ph> with a <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType&gt;</ph> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType&gt;</ph> com um <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType&gt;</ph> argumento para inserir a linha de quebra na cadeia de caracteres que é produzida por uma matriz de elemento de 100 bytes de codificação.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>As the output from the example shows, the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType&gt;</ph> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.</source>
          <target state="translated">Como a saída mostra o exemplo, o <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType&gt;</ph> terá êxito na restauração de matriz de bytes original; os caracteres de quebra de linha são ignorados durante a conversão.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> não é um valor <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Uma matriz de inteiros não assinados de 8 bits.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>An offset in <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um deslocamento na <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">O número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> a serem convertidos.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Converte um subconjunto de uma matriz de inteiros sem sinal de 8 bits na representação de cadeia de caracteres equivalente codificada com dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</source>
          <target state="translated">Parâmetros especificam o subconjunto como um deslocamento na matriz de entrada e o número de elementos na matriz a converter.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The string representation in base 64 of <ph id="ph1">&lt;paramref name="length" /&gt;</ph> elements of <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, starting at position <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</source>
          <target state="translated">A representação de cadeia de caracteres em base 64 de elementos <ph id="ph1">&lt;paramref name="length" /&gt;</ph> de <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, começando na posição <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The elements of <ph id="ph1">`inArray`</ph> are taken as a numeric value and converted to a string representation in base 64.</source>
          <target state="translated">Os elementos de <ph id="ph1">`inArray`</ph> são criados como um valor numérico e convertido em uma representação de cadeia de caracteres em base 64.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente a partir de zero são os caracteres maiúsculos de "A" a "Z", os caracteres minúsculos de "a" a "z", os numerais de "0" a "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">O caractere sem valor, "=", é usado no preenchimento à direita.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">Os parâmetros <ph id="ph1">`offset`</ph> e <ph id="ph2">`length`</ph> são números assinados de 32 bits.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter is zero-based.</source>
          <target state="translated">O <ph id="ph1">`offset`</ph> parâmetro é baseado em zero.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método foi projetado para processar uma matriz de byte único que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar dados a partir de um fluxo, use a classe <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="length" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="length" /&gt;</ph> é maior que o tamanho de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Uma matriz de inteiros não assinados de 8 bits.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>An offset in <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Um deslocamento na <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">O número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> a serem convertidos.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> to insert a line break every 76 characters, or <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> to not insert line breaks.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> para inserir uma quebra de linha a cada 76 caracteres, ou <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> para não inserir quebras de linha.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Converte um subconjunto de uma matriz de inteiros sem sinal de 8 bits na representação de cadeia de caracteres equivalente codificada com dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</source>
          <target state="translated">Parâmetros especificam o subconjunto como um deslocamento da matriz de entrada, o número de elementos na matriz para converter e se deve ou não inserir quebras de linha no valor retornado.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The string representation in base 64 of <ph id="ph1">&lt;paramref name="length" /&gt;</ph> elements of <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, starting at position <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</source>
          <target state="translated">A representação de cadeia de caracteres em base 64 de elementos <ph id="ph1">&lt;paramref name="length" /&gt;</ph> de <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, começando na posição <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The elements of the <ph id="ph1">`inArray`</ph> parameter are taken as a numeric value and converted to a string representation in base 64.</source>
          <target state="translated">Os elementos do <ph id="ph1">`inArray`</ph> parâmetro são executadas como um valor numérico e convertido em uma representação de cadeia de caracteres em base 64.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Os dígitos de base 64 em ordem crescente a partir de zero são os caracteres maiúsculos de "A" a "Z", os caracteres minúsculos de "a" a "z", os numerais de "0" a "9" e os símbolos "+" e "/".</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The valueless character "=" is used for trailing padding.</source>
          <target state="translated">O caractere de valor "=" é usado para à direita de preenchimento.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">Os parâmetros <ph id="ph1">`offset`</ph> e <ph id="ph2">`length`</ph> são números assinados de 32 bits.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offset`</ph> parameter is zero-based.</source>
          <target state="translated">O <ph id="ph1">`offset`</ph> parâmetro é baseado em zero.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método foi projetado para processar uma matriz de byte único que contém todos os dados a ser decodificado.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar dados a partir de um fluxo, use a classe <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is set to <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</source>
          <target state="translated">Se o <ph id="ph1">`options`</ph> parâmetro está definido como <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> e a saída da conversão é maior do que 76 caracteres, uma quebra de linha é inserida cada 76 caracteres.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</source>
          <target state="translated">Uma quebra de linha é definida como um caractere de retorno de carro (U + 000d) seguido por uma linha de feed de caractere (U + 000A).</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <bpt id="p1">[</bpt><ph id="ph1">https://www.rfc-editor.org/</ph><ept id="p1">](https://www.rfc-editor.org/)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte RFC 2045, "Multipurpose Internet Mail Extensions", em <bpt id="p1">[</bpt> <ph id="ph1">https://www.rfc-editor.org/</ph> <ept id="p1">](https://www.rfc-editor.org/)</ept>.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir demonstra o <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The input is divided into groups of three bytes (24 bits) each.</source>
          <target state="translated">A entrada é dividida em grupos de três bytes (24 bits) cada.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</source>
          <target state="translated">Consequentemente, cada grupo consiste em quatro números de 6 bits em que cada número varia de 0 a 63 decimal.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>In this example, there are 85 3-byte groups with one byte remaining.</source>
          <target state="translated">Neste exemplo, existem 85 grupos de 3 bytes com um byte restante.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</source>
          <target state="translated">O primeiro grupo consiste nos valores hexadecimais 00, 01 e 02, que produzem quatro valores de 6 bits iguais a 0, 0, 4 e 2 decimais.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</source>
          <target state="translated">Os quatro valores correspondem aos dígitos de base 64 "A", "A", "E" e "C" no início da saída.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</source>
          <target state="translated">Caso um número integral de grupos de 3 bytes não exista, os bytes restantes são preenchidos efetivamente com zero para formar um grupo completo.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>In this example, the value of the last byte is hexadecimal FF.</source>
          <target state="translated">Neste exemplo, o valor do último byte é FF hexadecimal.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</source>
          <target state="translated">Os primeiros 6 bits são iguais ao decimal 63, que corresponde ao dígito de base 64 "/" no final da saída, e os 2 próximos bits são preenchidos com zeros para produzir o decimal 48, que corresponde ao dígito de base 64, "w".</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The last two 6-bit values are padding and correspond to the valueless padding character, "=".</source>
          <target state="translated">Os dois últimos valores de 6 bits estão sendo preenchidos e correspondem ao caractere de preenchimento sem valor, "=".</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="length" /&gt;</ph> é negativo.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">A soma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> e <ph id="ph2">&lt;paramref name="length" /&gt;</ph> é maior que o tamanho de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> não é um valor <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to an equivalent Boolean value.</source>
          <target state="translated">Converte um valor especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Boolean)">
          <source>The Boolean value to return.</source>
          <target state="translated">O valor booliano a ser retornado.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Boolean)">
          <source>Returns the specified Boolean value; no actual conversion is performed.</source>
          <target state="translated">Retorna o valor booliano especificado. Nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>The following example demonstrates that an attempt to convert a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a Boolean type throws <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir demonstra que uma tentativa de converter um <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor para um tipo Boolean gera <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source>The number to convert.</source>
          <target state="translated">O número a ser convertido.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do número decimal especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Double)">
          <source>The following example converts a Boolean to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> and a <ph id="ph2">&lt;xref:System.Double&gt;</ph> to a Boolean value.</source>
          <target state="translated">O exemplo a seguir converte um valor booleano para um <ph id="ph1">&lt;xref:System.Double&gt;</ph> e um <ph id="ph2">&lt;xref:System.Double&gt;</ph> para um valor booliano.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Int16&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado para um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>Converts the value of a specified object to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor de um objeto especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> or <ph id="ph2">&lt;see langword="false" /&gt;</ph>, which reflects the value returned by invoking the <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> method for the underlying type of <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> ou <ph id="ph2">&lt;see langword="false" /&gt;</ph>, que reflete o valor retornado ao invocar o método <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> para o tipo subjacente de <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;paramref name="value" /&gt;</ph> for <ph id="ph2">&lt;see langword="null" /&gt;</ph>, o método retornará <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>The following example converts an array of object values to <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de valores de objeto para <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a string that does not equal <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é uma cadeia de caracteres que não é igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ou <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> is not supported.</source>
          <target state="translated">Não há suporte para a conversão de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> em um <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Single)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Single)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source>A string that contains the value of either <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated">Uma cadeia de caracteres que contém o valor de <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source>Converts the specified string representation of a logical value to its Boolean equivalent.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um valor lógico para seu equivalente booliano.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, or <ph id="ph4">&lt;see langword="false" /&gt;</ph> if <ph id="ph5">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> or <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for igual a <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, ou <ph id="ph4">&lt;see langword="false" /&gt;</ph> se <ph id="ph5">&lt;paramref name="value" /&gt;</ph> for igual a <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> ou <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>For a successful conversion to occur, the <ph id="ph1">`value`</ph> parameter must equal either <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph>, a constant whose value is <ph id="ph3">`True`</ph>, <ph id="ph4">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, a constant whose value is <ph id="ph5">`False`</ph>, or it must be <ph id="ph6">`null`</ph>.</source>
          <target state="translated">Para uma conversão bem-sucedida ocorra, o <ph id="ph1">`value`</ph> parâmetro deve ser igual a <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph>, uma constante cujo valor é <ph id="ph3">`True`</ph>, <ph id="ph4">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, uma constante cujo valor é <ph id="ph5">`False`</ph>, ou deve ser <ph id="ph6">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>In comparing <ph id="ph1">`value`</ph> with <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, the method ignores case as well as leading and trailing white space.</source>
          <target state="translated">Comparando <ph id="ph1">`value`</ph> com <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> e <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, o método ignora maiusculas espaço em branco, bem como à esquerda e à direita.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType&gt;</ph> method to convert various strings to Boolean values.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType&gt;</ph> método para converter cadeias de caracteres de vários valores booleanos.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not equal to <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ou <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um valor booliano equivalente.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> não seja zero; do contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um valor booliano equivalente, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> or <ph id="ph2">&lt;see langword="false" /&gt;</ph>, which reflects the value returned by invoking the <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> method for the underlying type of <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> ou <ph id="ph2">&lt;see langword="false" /&gt;</ph>, que reflete o valor retornado ao invocar o método <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> para o tipo subjacente de <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;paramref name="value" /&gt;</ph> for <ph id="ph2">&lt;see langword="null" /&gt;</ph>, o método retornará <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The base types ignore the <ph id="ph1">`provider`</ph> parameter; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos base ignorar o <ph id="ph1">`provider`</ph> parâmetro; no entanto, o parâmetro pode ser usado se <ph id="ph2">`value`</ph> é um tipo definido pelo usuário que implementa o <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir define uma classe que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> e uma classe que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Os objetos da classe que implementa a propriedade <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> têm uma matriz de valores <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">Um objeto de cada classe é passado para o <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>This method returns <ph id="ph1">`true`</ph> if any of the non-discarded array values are non-zero.</source>
          <target state="translated">Este método retorna <ph id="ph1">`true`</ph> se qualquer um dos valores de matriz não descartado for diferente de zero.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object determines how elements are discarded for this calculation.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objeto determina como os elementos são descartados para este cálculo.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a string that does not equal <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é uma cadeia de caracteres que não é igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ou <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> is not supported.</source>
          <target state="translated">Não há suporte para a conversão de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> em um <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>A string that contains the value of either <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated">Uma cadeia de caracteres que contém o valor de <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parâmetro é ignorado.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um valor lógico para seu equivalente booliano, usando as informações de formatação específicas da cultura especificada.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, or <ph id="ph4">&lt;see langword="false" /&gt;</ph> if <ph id="ph5">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> or <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for igual a <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, ou <ph id="ph4">&lt;see langword="false" /&gt;</ph> se <ph id="ph5">&lt;paramref name="value" /&gt;</ph> for igual a <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> ou <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not equal to <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ou <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to an 8-bit unsigned integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro sem sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor booliano especificado no inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>The following example illustrates the conversion of <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir ilustra a conversão de <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> para <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Byte)">
          <source>The 8-bit unsigned integer to return.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser retornado.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Byte)">
          <source>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro sem sinal de 8 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>This method returns an unsigned byte value that represents the numeric code of the <ph id="ph1">&lt;xref:System.Char&gt;</ph> object passed to it.</source>
          <target state="translated">Este método retorna um valor de byte sem sinal que representa o código numérico do <ph id="ph1">&lt;xref:System.Char&gt;</ph> objeto passado para ele.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>In the .NET Framework, a <ph id="ph1">&lt;xref:System.Char&gt;</ph> object is a 16-bit value.</source>
          <target state="translated">No .NET Framework, um <ph id="ph1">&lt;xref:System.Char&gt;</ph> objeto é um valor de 16 bits.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.</source>
          <target state="translated">Isso significa que o método é adequado para retornar os códigos numéricos dos caracteres no intervalo de caracteres ASCII ou nos intervalos Unicode C0 controles e Latim básico e controles de C1 e complementam Latin-1, U + 0000 a U + 00FF.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número maior que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>The number to convert.</source>
          <target state="translated">O número a ser convertido.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> and a <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> value to a <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> e um <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> valor para um <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Double)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> and a <ph id="ph3">&lt;xref:System.Double&gt;</ph> value to a <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> e um <ph id="ph3">&lt;xref:System.Double&gt;</ph> valor para um <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Int16)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Int16&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Int32)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Int64)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>Converts the value of the specified object to an 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do objeto especificado para um inteiro sem sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não é <ph id="ph2">`null`</ph>, este método envolve uma chamada para o <ph id="ph3">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> implementação do tipo subjacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%29&gt;</ph> method to convert an array of objects to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%29&gt;</ph> método para converter uma matriz de objetos para <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in the property format for a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> value.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está no formato de propriedade para um valor <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>Conversion from <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to the <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> type is not supported.</source>
          <target state="translated">Não há suporte à conversão do <ph id="ph1">&lt;paramref name="value" /&gt;</ph> para o tipo <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source>The 8-bit signed integer to be converted.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número inteiro com sinal de 8 bits especificado em um número inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.SByte)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source>A single-precision floating-point number.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Single)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>The following example defines a string array and attempts to convert each string to a <ph id="ph1">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir define uma matriz de cadeia de caracteres e tenta converter cada cadeia de caracteres para um <ph id="ph1">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>Note that while a <ph id="ph1">`null`</ph> string parses to zero, <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> throws a <ph id="ph3">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">Observe que, embora uma <ph id="ph1">`null`</ph> cadeia de caracteres analisa a zero, <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> lança um <ph id="ph3">&lt;xref:System.FormatException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.</source>
          <target state="translated">Além disso, observe que enquanto espaços à direita e analisam com êxito, formatação de símbolos, como símbolos de moeda, separadores de grupo ou separadores decimais, não.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>The following example converts an array of unsigned 16-bit integers to <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros de 16 bits sem sinal para <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>The following example converts an array of unsigned integers to <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros sem sinal para <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>The following example converts an array of unsigned long integers to <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros longos não assinados para <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro sem sinal de 8 bits, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`ByteString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">`ByteString`</ph> que implementa a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.</source>
          <target state="translated">A classe armazena a representação de cadeia de caracteres de um valor de byte junto com um campo de entrada, para que ele possa representar os dois valores de byte assinados e não assinados.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The following example instantiates several <ph id="ph1">`ByteString`</ph> objects and calls the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method to convert them to byte values.</source>
          <target state="translated">O exemplo a seguir cria várias <ph id="ph1">`ByteString`</ph> objetos e chama o <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método convertê-las em valores de byte.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>It illustrates that the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method wraps a call to the <ph id="ph2">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> method of the object to be converted.</source>
          <target state="translated">Ele ilustra que o <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método ajusta uma chamada para o <ph id="ph2">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> método do objeto a ser convertido.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in the property format for a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> value.</source>
          <target state="translated">O <ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está no formato de propriedade para um valor <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>Conversion from <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to the <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> type is not supported.</source>
          <target state="translated">Não há suporte à conversão do <ph id="ph1">&lt;paramref name="value" /&gt;</ph> para o tipo <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 8 bits equivalente, usando as informações de formatação específicas da cultura especificada.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, o objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>The following example creates a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that defines the positive sign as "pos" and the negative sign as "neg", which it uses in calls to the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir cria um personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que define o sinal positivo como "pos" e o sinal negativo como "neg", ele usa em chamadas para o <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method repeatedly to convert each element in a string array to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> value.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> método repetidamente para converter cada elemento em uma matriz de cadeia de caracteres para um <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada em um inteiro sem sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>An 8-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 8 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Byte&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.Byte&gt;</ph> tipo de dados oferece suporte a valores não assinados, o <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que <ph id="ph3">`value`</ph> é expressado usando a representação binária não assinada.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>In other words, all eight bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">Em outras palavras, todos os oito bits são usados para representar o valor numérico, e um pouco de entrada está ausente.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed byte value that is out of the range of the <ph id="ph1">&lt;xref:System.Byte&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um byte assinado valor que está fora do intervalo de <ph id="ph1">&lt;xref:System.Byte&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.SByte.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir converte <ph id="ph1">&lt;xref:System.SByte.MinValue&gt;</ph> representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x80 converts to 128."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0x80 converte a 128".</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método ou operador está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir ilustra uma técnica para garantir que o método não usar inadequadamente representação binária não assinado quando ele converte uma representação de cadeia de caracteres hexadecimal para uma <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">O exemplo determina se um valor representa um inteiro assinado ou não assinado enquanto converte esse valor na representação da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>When the example converts the value back to a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Quando o exemplo converte o valor de volta para um <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor, ele verifica se o valor original era um inteiro com sinal.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.</source>
          <target state="translated">Se o modo e se o bit de ordem alta é definido (que indica que o valor é negativo e que ele usa dois é o complemento, em vez de representação binária sem sinal), o método gera uma exceção.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.</source>
          <target state="translated">Como alternativa, o exemplo a seguir tenta interpretar uma matriz de cadeias de caracteres como a representação de valores binários, octais, decimais e hexadecimais.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número não assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número sem sinal de base 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a Unicode character.</source>
          <target state="translated">Converte um valor especificado em um caractere Unicode.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado em seu caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Byte)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Byte)">
          <source>The following example converts an array of unsigned bytes to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de bytes sem sinal para <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Char)">
          <source>The Unicode character to return.</source>
          <target state="translated">O caractere Unicode a ser retornado.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Char)">
          <source>Returns the specified Unicode character value; no actual conversion is performed.</source>
          <target state="translated">Retorna o valor do caractere Unicode especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>The following example attempts to convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to <ph id="ph2">&lt;xref:System.Char&gt;</ph>, and throws <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> on failure.</source>
          <target state="translated">O exemplo a seguir tenta converter um <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> para <ph id="ph2">&lt;xref:System.Char&gt;</ph>e gera <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> em caso de falha.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em seu caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Int16)">
          <source>The following example converts an array of signed 16-bit integers to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros de 16 bits com sinal para <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em seu caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Int32)">
          <source>The following example converts an array of signed integers to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros com sinal para <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em seu caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Int64)">
          <source>The following example attempts to convert a long integer to a <ph id="ph1">&lt;xref:System.Char&gt;</ph>, and throws a <ph id="ph2">&lt;xref:System.OverflowException&gt;</ph> on failure.</source>
          <target state="translated">O exemplo a seguir tenta converter um inteiro longo para um <ph id="ph1">&lt;xref:System.Char&gt;</ph>e gera um <ph id="ph2">&lt;xref:System.OverflowException&gt;</ph> em caso de falha.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>Converts the value of the specified object to a Unicode character.</source>
          <target state="translated">Converte o valor do objeto especificado em um caractere Unicode.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>A Unicode character that is equivalent to value, or <ph id="ph1">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente ao valor ou <ph id="ph1">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não é <ph id="ph2">`null`</ph>, este método envolve uma chamada para o <ph id="ph3">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> implementação do tipo subjacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object)">
          <source>The following example attempts to convert each element in an object array to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objeto para um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a null string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é uma cadeia de caracteres nula.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> is not supported.</source>
          <target state="translated">Não há suporte para a conversão de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> em um <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado no caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.SByte)">
          <source>The following example converts an array of signed bytes to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de bytes assinados para <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>A string of length 1.</source>
          <target state="translated">Uma cadeia de caracteres de tamanho 1.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>Converts the first character of a specified string to a Unicode character.</source>
          <target state="translated">Converte o primeiro caractere de uma cadeia de caracteres especificada em um caractere Unicode.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>A Unicode character that is equivalent to the first and only character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode que é equivalente ao primeiro e único caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source><ph id="ph1">`value`</ph> must be a string that contains a single character.</source>
          <target state="translated"><ph id="ph1">`value`</ph> deve ser uma cadeia de caracteres que contém um único caractere.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source>The following example converts each element in a string array to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de cadeia de caracteres para um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>The length of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not 1.</source>
          <target state="translated">O tamanho de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é 1.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integers to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits sem sinal para um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado no caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>The following example converts each element in an array of unsigned integers to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros sem sinal a uma <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em seu caractere Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>The following example converts each element in an array of unsigned long integers to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros sem sinal de tempo para um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado para o caractere Unicode equivalente usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>, se <ph id="ph3">&lt;paramref name="value" /&gt;</ph> for <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir define uma classe que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> e uma classe que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Os objetos da classe que implementa a propriedade <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> têm uma matriz de valores <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToChar`</ph> method.</source>
          <target state="translated">Um objeto de cada classe é passado para o <ph id="ph1">`ToChar`</ph> método.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>This method returns a character whose Unicode value is the average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método retorna um caractere cujo Unicode valor é a média da matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores, usando o objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar como calcular a média.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a null string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é uma cadeia de caracteres nula.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> is not supported.</source>
          <target state="translated">Não há suporte para a conversão de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> em um <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>A string of length 1 or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Uma cadeia de caracteres de tamanho 1 ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parâmetro é ignorado.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</source>
          <target state="translated">Converte o primeiro caractere da cadeia de caracteres especificada em um caractere Unicode, usando informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>A Unicode character that is equivalent to the first and only character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um caractere Unicode que é equivalente ao primeiro e único caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`value`</ph> must be a string that contains a single character.</source>
          <target state="translated"><ph id="ph1">`value`</ph> deve ser uma cadeia de caracteres que contém um único caractere.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>The following example converts a string representation of a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value with the <ph id="ph2">`ToChar`</ph> method, using an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object that displays the type of the format provider for which it is called.</source>
          <target state="translated">O exemplo a seguir converte uma representação de cadeia de caracteres de um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor com o <ph id="ph2">`ToChar`</ph> método, usando um <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> objeto que exibe o tipo do provedor de formato para o qual ele é chamado.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>The example shows that the format provider is not referenced.</source>
          <target state="translated">O exemplo mostra que o provedor de formato não é referenciado.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>The length of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not 1.</source>
          <target state="translated">O tamanho de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é 1.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> value.</source>
          <target state="translated">Converte um valor especificado em um valor <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.DateTime)">
          <source>A date and time value.</source>
          <target state="translated">Um valor de data e hora.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.DateTime)">
          <source>Returns the specified <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> object; no actual conversion is performed.</source>
          <target state="translated">Retorna o objeto <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.DateTime)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>The number to convert.</source>
          <target state="translated">O número a ser convertido.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>The double-precision floating-point value to convert.</source>
          <target state="translated">O valor do ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>Converts the value of the specified object to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> object.</source>
          <target state="translated">Converte o valor do objeto especificado em um objeto <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or a date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A data e hora equivalentes do valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou a data e hora equivalentes de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> se <ph id="ph3">&lt;paramref name="value" /&gt;</ph> for <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>For the conversion to succeed, the runtime type of the <ph id="ph1">`value`</ph> parameter must be either a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> or a <ph id="ph3">&lt;xref:System.String&gt;</ph>, or <ph id="ph4">`value`</ph> must be <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Para a conversão seja bem-sucedida, o tipo de tempo de execução do <ph id="ph1">`value`</ph> parâmetro deve ser um <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> ou um <ph id="ph3">&lt;xref:System.String&gt;</ph>, ou <ph id="ph4">`value`</ph> devem ser <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>Otherwise, the method throws an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Caso contrário, o método gera uma <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>In addition, if <ph id="ph1">`value`</ph> is a string, it must contain a valid representation of a date and time value in the current culture or a <ph id="ph2">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
          <target state="translated">Além disso, se <ph id="ph1">`value`</ph> é uma cadeia de caracteres, ele deve conter uma representação válida de um valor de data e hora da cultura atual ou um <ph id="ph2">&lt;xref:System.FormatException&gt;</ph> é gerada.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Convert.ToDateTime%28System.Object%29&gt;</ph> method with a variety of <ph id="ph2">&lt;xref:System.Object&gt;</ph> variables.</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">&lt;xref:System.Convert.ToDateTime%28System.Object%29&gt;</ph> método com uma variedade de <ph id="ph2">&lt;xref:System.Object&gt;</ph> variáveis.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a valid date and time value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um valor de data e hora válido.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>The single-precision floating-point value to convert.</source>
          <target state="translated">O valor do ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The string representation of a date and time.</source>
          <target state="translated">A representação de cadeia de caracteres de uma data e hora.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source>Converts the specified string representation of a date and time to an equivalent date and time value.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de uma data e hora em um valor de data e hora equivalente.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or the date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A data e hora equivalentes do valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou a data e hora equivalentes de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> se <ph id="ph3">&lt;paramref name="value" /&gt;</ph> for <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, the return value is the result of invoking the <ph id="ph3">&lt;xref:System.DateTime.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph4">`value`</ph> using the formatting information in a <ph id="ph5">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that is initialized for the current culture.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não é <ph id="ph2">`null`</ph>, o valor de retorno é o resultado de chamar o <ph id="ph3">&lt;xref:System.DateTime.Parse%2A?displayProperty=nameWithType&gt;</ph> método no <ph id="ph4">`value`</ph> usando as informações de formatação em um <ph id="ph5">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto que é inicializado para a cultura atual.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The <ph id="ph1">`value`</ph> argument must contain the representation of a date and time in one of the formats described in the <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> topic.</source>
          <target state="translated">O <ph id="ph1">`value`</ph> argumento deve conter a representação de uma data e hora em um dos formatos descritos no <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> tópico.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.DateTime.MinValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> for <ph id="ph2">`null`</ph>, o método retornará <ph id="ph3">&lt;xref:System.DateTime.MinValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>This method tries to parse <ph id="ph1">`value`</ph> completely and avoid throwing a <ph id="ph2">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">Esse método tenta analisar <ph id="ph1">`value`</ph> completamente e evitar que seja um <ph id="ph2">&lt;xref:System.FormatException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>It completes missing month, day, and year information with the current date.</source>
          <target state="translated">Ele conclui ausente mês, dia e informações do ano com a data atual.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If <ph id="ph1">`value`</ph> contains only a date and no time, this method assumes a time of midnight.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> contém apenas uma data e nenhuma hora, esse método assume um tempo de meia-noite.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>Any leading, inner, or trailing white-space characters in <ph id="ph1">`value`</ph> are ignored.</source>
          <target state="translated">Qualquer interna, à esquerda ou caracteres de espaço em branco nos <ph id="ph1">`value`</ph> são ignorados.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToDateTime%2A&gt;</ph> method to convert various string representations of dates and times to <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir usa o <ph id="ph1">&lt;xref:System.Convert.ToDateTime%2A&gt;</ph> método para converter diversas representações de cadeia de caracteres de data e hora para <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a properly formatted date and time string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é uma cadeia de caracteres de data e hora formatada corretamente.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> object, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um objeto <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or the date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A data e hora equivalentes do valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou a data e hora equivalentes de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> se <ph id="ph3">&lt;paramref name="value" /&gt;</ph> for <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a date, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that date.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> é um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa uma data, <ph id="ph3">`provider`</ph> pode fornecer informações específicas de cultura sobre a notação usada para representar essa data.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is involved in the conversion of <ph id="ph2">`value`</ph> if the runtime type of <ph id="ph3">`value`</ph> is a <ph id="ph4">&lt;xref:System.String&gt;</ph>, or if <ph id="ph5">`value`</ph> is a user-defined type whose <ph id="ph6">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> implementation makes use of <ph id="ph7">`provider`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> está envolvido na conversão de <ph id="ph2">`value`</ph> se o tipo de tempo de execução de <ph id="ph3">`value`</ph> é um <ph id="ph4">&lt;xref:System.String&gt;</ph>, ou se <ph id="ph5">`value`</ph> é um usuário definido pelo tipo cujo <ph id="ph6">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> implementação faz uso de <ph id="ph7">`provider`</ph>.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>If the runtime type of <ph id="ph1">`value`</ph> is <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">`provider`</ph> is <ph id="ph4">`null`</ph>, the <ph id="ph5">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Se o tipo de tempo de execução de <ph id="ph1">`value`</ph> é <ph id="ph2">&lt;xref:System.String&gt;</ph> e <ph id="ph3">`provider`</ph> é <ph id="ph4">`null`</ph>, o <ph id="ph5">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto que representa a cultura do thread atual é usado.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The following example defines a custom format provider, <ph id="ph1">`CustomProvider`</ph>, whose <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method outputs a message to the console that it has been invoked, and then returns the <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object of the culture whose name was passed as a parameter to its class constructor.</source>
          <target state="translated">O exemplo a seguir define um provedor de formato personalizado, <ph id="ph1">`CustomProvider`</ph>, cujo <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> método gera uma mensagem para o console que ele foi chamado e, em seguida, retorna o <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto de cultura cujo nome foi passado como um parâmetro à sua classe construtor.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>Each of these <ph id="ph1">`CustomProvider`</ph> objects is used to convert the elements in an object array to date and time values.</source>
          <target state="translated">Cada uma dessas <ph id="ph1">`CustomProvider`</ph> objetos é usado para converter os elementos em uma matriz de objetos para valores de data e hora.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The output indicates that the <ph id="ph1">`CustomProvider`</ph> object is used in the conversion only when the type of the <ph id="ph2">`value`</ph> parameter is a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">A saída indica que o <ph id="ph1">`CustomProvider`</ph> objeto é usado na conversão apenas quando o tipo do <ph id="ph2">`value`</ph> parâmetro é um <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a valid date and time value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um valor de data e hora válido.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>A string that contains a date and time to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém uma data e hora a ser convertida.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em uma data e hora equivalentes, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or the date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A data e hora equivalentes do valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou a data e hora equivalentes de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> se <ph id="ph3">&lt;paramref name="value" /&gt;</ph> for <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of date values with the <ph id="ph1">`ToDateTime`</ph> method, using an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">O exemplo a seguir converte representações de cadeia de caracteres de valores de data com o <ph id="ph1">`ToDateTime`</ph> método, usando um <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a properly formatted date and time string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é uma cadeia de caracteres de data e hora formatada corretamente.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a decimal number.</source>
          <target state="translated">Converte um valor especificado em um número decimal.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent decimal number.</source>
          <target state="translated">Converte o valor booliano especificado para o número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>The following example illustrates the conversion of <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> to <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir ilustra a conversão de <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> para <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>The decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>The following example attempts to convert a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value to <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>, and throws <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> upon failure.</source>
          <target state="translated">O exemplo a seguir tenta converter um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>e gera <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> em caso de falha.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Decimal)">
          <source>A decimal number.</source>
          <target state="translated">Um número decimal.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Decimal)">
          <source>Returns the specified decimal number; no actual conversion is performed.</source>
          <target state="translated">Retorna o número decimal especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de dupla precisão para um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value returned by this method contains a maximum of 15 significant digits.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor retornado por este método conterá um máximo de 15 dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>If the <ph id="ph1">`value`</ph> parameter contains more than 15 significant digits, it is rounded using rounding to nearest.</source>
          <target state="translated">Se o <ph id="ph1">`value`</ph> parâmetro contém mais de 15 dígitos significativos, ele será arredondado usando arredondamento mais próximo.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The following example illustrates how the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType&gt;</ph> method uses rounding to nearest to return a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value with 15 significant digits.</source>
          <target state="translated">O exemplo a seguir ilustra como o <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType&gt;</ph> método usa arredondamento mais próximos de retorno de uma <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor com 15 dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>The following example converts an array of 16-bit signed integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros com sinal de 16 bits para <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>The following example converts an array of signed integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros com sinal para <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>The following example converts an <ph id="ph1">&lt;xref:System.Int64&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>Converts the value of the specified object to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do objeto especificado em um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero) se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>The following example tries to convert each element in an object array to a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objeto para um <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato apropriado para um tipo <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado no número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>The following example converts each element in an array of signed bytes to a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes assinados para uma <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples para um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value returned by this method contains a maximum of seven significant digits.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor retornado por este método conterá um máximo de sete dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>If the <ph id="ph1">`value`</ph> parameter contains more than seven significant digits, it is rounded using rounding to nearest.</source>
          <target state="translated">Se o <ph id="ph1">`value`</ph> parâmetro contém mais de sete dígitos, ele será arredondado usando arredondamento mais próximo.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The following example illustrates how the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Single%29&gt;</ph> method uses rounding to nearest to return a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value with seven significant digits.</source>
          <target state="translated">O exemplo a seguir ilustra como o <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Single%29&gt;</ph> método usa arredondamento mais próximos de retorno de uma <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor com sete dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The following example tries to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores para um <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém um número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source>Converts the specified string representation of a number to an equivalent decimal number.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número para um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source>A decimal number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>The following example illustrates the use of <ph id="ph1">`ToDecimal`</ph>.</source>
          <target state="translated">O exemplo a seguir ilustra o uso de <ph id="ph1">`ToDecimal`</ph>.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>It attempts to convert a <ph id="ph1">&lt;xref:System.String&gt;</ph> to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>, and throws the possible exceptions that may arise during the conversion.</source>
          <target state="translated">Tenta converter um <ph id="ph1">&lt;xref:System.String&gt;</ph> para um <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>e gera as exceções possíveis que podem surgir durante a conversão.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um número em um formato válido.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado em um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>The decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>The following example converts an array of 16-bit unsigned integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros de 16 bits sem sinal para <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>The following example converts an array of unsigned integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros sem sinal para <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>The following example converts an array of unsigned long integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte uma matriz de inteiros longos não assinados para <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um número decimal equivalente, usando as informações de formatação específicas da cultura especificada.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero) se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">`Temperature`</ph> que implementa a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The following example shows that when a <ph id="ph1">`Temperature`</ph> object is passed as a parameter to the <ph id="ph2">&lt;xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method, the <ph id="ph3">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`Temperature`</ph> class is called to perform the conversion.</source>
          <target state="translated">O exemplo a seguir mostra que quando um <ph id="ph1">`Temperature`</ph> objeto é passado como um parâmetro para o <ph id="ph2">&lt;xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método, o <ph id="ph3">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> implementação o <ph id="ph4">`Temperature`</ph> classe é chamada para executar a conversão.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato apropriado para um tipo <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém um número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um número decimal equivalente, usando as informações de formatação específicas da cultura especificada.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>A decimal number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número decimal equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Decimal.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.Decimal.Parse%2A?displayProperty=nameWithType&gt;</ph> método <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>The following example attempts to convert an array of strings to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values by using <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objects that represent two different cultures.</source>
          <target state="translated">O exemplo a seguir tenta converter uma matriz de cadeias de caracteres para <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores usando <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objetos que representam duas culturas diferentes.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um número em um formato válido.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a double-precision floating-point number.</source>
          <target state="translated">Converte um valor especificado em um número de ponto flutuante de precisão dupla.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor booliano especificado no número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado para um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>The double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do número decimal especificado em um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Double)">
          <source>The double-precision floating-point number to return.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser retornado.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Double)">
          <source>Returns the specified double-precision floating-point number; no actual conversion is performed.</source>
          <target state="translated">Retorna o número de ponto flutuante de precisão dupla especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>A double-precision floating-point number equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>The following example converts each element in an array of 16-bit signed integers to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros com sinal de 16 bits para uma <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal especificado de 32 bits em um número de ponto flutuante de precisão dupla.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>The following example converts an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>The following example converts each element in an array of signed long integers to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros longos assinados para uma <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>Converts the value of the specified object to a double-precision floating-point number.</source>
          <target state="translated">Converte o valor do objeto especificado em um número de ponto flutuante de precisão dupla.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não é <ph id="ph2">`null`</ph>, este método envolve uma chamada para o <ph id="ph3">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> implementação do tipo subjacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object)">
          <source>The following example attempts to convert each value in an object array to a <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir tenta converter cada valor em uma matriz de objeto para um <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato apropriado para um tipo <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado no número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>The 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O inteiro com sinal de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Single)">
          <source>The single-precision floating-point number.</source>
          <target state="translated">O número de ponto flutuante de precisão simples.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Single)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Single)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source>A double-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla que é equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToDouble%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToDouble%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>The following example attempts to convert each element in an array of numeric strings to a <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de cadeias de caracteres numéricas para um <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>The example's output is from a system whose current culture is en-US.</source>
          <target state="translated">Saída de exemplo é de um sistema cuja cultura atual é en-US.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um número em um formato válido.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado para um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valores para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> valores para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um número de ponto flutuante de precisão dupla equivalente.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valores para um <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um número de ponto flutuante de precisão dupla, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir define uma classe que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> e uma classe que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Os objetos da classe que implementa a propriedade <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> têm uma matriz de valores <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToDouble`</ph> method.</source>
          <target state="translated">Um objeto de cada classe é passado para o <ph id="ph1">`ToDouble`</ph> método.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método retorna uma média da matriz de valores <ph id="ph1">&lt;xref:System.Double&gt;</ph>, usando o objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar como calcular a média.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato apropriado para um tipo <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação da cadeia de caracteres especificada de um número em um número de ponto flutuante de precisão dupla equivalente, usando as informações de formatação específicas da cultura.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>A double-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão dupla que é equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> método <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values with the <ph id="ph2">`ToDouble`</ph> method, using an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">O exemplo a seguir converte representações de cadeia de caracteres de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores com o <ph id="ph2">`ToDouble`</ph> método, usando um <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um número em um formato válido.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 16-bit signed integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro com sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor booliano especificado no inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to <ph id="ph3">&lt;xref:System.Int16&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte os valores booleanos <ph id="ph1">`true`</ph> e <ph id="ph2">`false`</ph> para <ph id="ph3">&lt;xref:System.Int16&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores para um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Char)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores para um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores para um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>The example illustrates that any fractional part of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value is rounded when performing the conversion.</source>
          <target state="translated">O exemplo ilustra que qualquer parte fracionária de um <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor será arredondado ao executar a conversão.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Double)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores para um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Double)">
          <source>The example illustrates that any fractional part of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value is rounded before performing the conversion.</source>
          <target state="translated">O exemplo ilustra que qualquer parte fracionária de um <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor é arredondado antes de executar a conversão.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int16)">
          <source>The 16-bit signed integer to return.</source>
          <target state="translated">O inteiro com sinal de 16 bits a ser retornado.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int16)">
          <source>Returns the specified 16-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro com sinal de 16 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>The 16-bit signed integer equivalent of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O inteiro com sinal de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>The following example attempts to convert each element in an array of integers to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros em um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos em um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>Converts the value of the specified object to a 16-bit signed integer.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro com sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não é <ph id="ph2">`null`</ph>, este método envolve uma chamada para o <ph id="ph3">&lt;xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType&gt;</ph> implementação do tipo subjacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object)">
          <source>The following example attempts to convert each element in an object array to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objeto para um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for an <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato apropriado para um tipo <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>A 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>The following example converts each element in an array of signed bytes to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes assinados para um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores para um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source>A 16-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 16 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>The following example converts string representations of 16-bit integers with the <ph id="ph1">`ToInt16`</ph> method, using default formatting.</source>
          <target state="translated">O exemplo a seguir converte representações de cadeia de caracteres de inteiros de 16 bits com o <ph id="ph1">`ToInt16`</ph> método, usando a formatação padrão.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros de 16 bits sem sinal em um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros sem sinal em um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos sem sinal em um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro com sinal de 16 bits, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir define uma classe que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> e uma classe que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Os objetos da classe que implementa a propriedade <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> têm uma matriz de valores <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToInt16`</ph> method.</source>
          <target state="translated">Um objeto de cada classe é passado para o <ph id="ph1">`ToInt16`</ph> método.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método retorna uma média da matriz de valores <ph id="ph1">&lt;xref:System.Double&gt;</ph>, usando o objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar como calcular a média.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for an <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato apropriado para um tipo <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 16 bits equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>A 16-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 16 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of 16-bit integers with the <ph id="ph1">`ToInt16`</ph> method, using an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">O exemplo a seguir converte representações de cadeia de caracteres de inteiros de 16 bits com o <ph id="ph1">`ToInt16`</ph> método, usando um <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada para um inteiro com sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>A 16-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 16 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Porque não é compatível com o sinal negativo não base 10 representações de numéricas, o <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que os números negativos usam representação de complemento de dois.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit.</source>
          <target state="translated">Em outras palavras, o método sempre interpreta o bit de ordem mais alta binário de um inteiro (15 bits) como o bit de sinal.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.Int16&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.Int16&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um 10 de base não número que está fora do intervalo de <ph id="ph1">&lt;xref:System.Int16&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.Int16&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The following example increments <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> by one, converts the resulting number to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">A seguir incrementa exemplo <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> por um, converte o número resultante em sua representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x8000 converts to -32768."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0x8000 converte -32768."</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</source>
          <target state="translated">Como mostra o exemplo a seguir, você pode garantir que os identificadores de método estoura adequadamente primeiro recuperando o sinal do valor numérico antes de convertê-la em sua representação de cadeia de caracteres hexadecimal.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</source>
          <target state="translated">Lançar uma exceção se o valor original era positivo, mas a conversão de volta para um número inteiro produz um valor negativo.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.</source>
          <target state="translated">O exemplo a seguir tenta interpretar a cada elemento em uma matriz de cadeia de caracteres como uma cadeia de caracteres hexadecimal e para convertê-los em um inteiro assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 32-bit signed integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor booliano especificado para o inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>The following example converts the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values <ph id="ph2">`true`</ph> and <ph id="ph3">`false`</ph> to integers.</source>
          <target state="translated">O exemplo a seguir converte a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valores <ph id="ph2">`true`</ph> e <ph id="ph3">`false`</ph> para números inteiros.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>The following example converts each element in an array of bytes to an integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes em um inteiro.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Char)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Char%29&gt;</ph> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the <ph id="ph2">`value`</ph> argument.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Char%29&gt;</ph> método retorna um inteiro assinado de 32 bits que representa a unidade de código codificado em UTF-16 do <ph id="ph2">`value`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Char)">
          <source>If <ph id="ph1">`value`</ph> is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não é um substituto baixo ou um substituto alto, esse valor de retorno também representa o ponto de código Unicode do valor.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Char)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to an integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores para um número inteiro.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores para um número inteiro.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to aninteger.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores aninteger.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um valor com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>The following example converts each element in an array of 16-bit signed integers to an integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros com sinal de 16 bits em um inteiro.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int32)">
          <source>The 32-bit signed integer to return.</source>
          <target state="translated">O inteiro com sinal de 32 bits a ser retornado.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int32)">
          <source>Returns the specified 32-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro com sinal de 32 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to an integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos em um número inteiro.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>Converts the value of the specified object to a 32-bit signed integer.</source>
          <target state="translated">Converte o valor do objeto especificado para um inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>A 32-bit signed integer equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou zero, se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object)">
          <source>If<ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se<ph id="ph1">`value`</ph> não é <ph id="ph2">`null`</ph>, este método envolve uma chamada para o <ph id="ph3">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> implementação do tipo subjacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object)">
          <source>The following example attempts to convert each element in an object array to an integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objeto para um número inteiro.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the  <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>A 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>The following example converts each element in an array of signed bytes to an integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes assinados para um número inteiro.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um número inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to an integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores para um número inteiro.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source>A 32-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.<ph id="ph4">`value`</ph></source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.<ph id="ph4">`value`</ph></target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated">são interpretados usando as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>The following example attempts to convert each element in a numeric string array to an integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de cadeia de caracteres numéricos em um número inteiro.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>The following example converts each element in an array of 16-bit unsigned integers to an integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits sem sinal em um inteiro.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>The following example attempts to convert each element in an array of unsigned integers to a signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros sem sinal em um inteiro com sinal.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to a signed integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos sem sinal em um inteiro com sinal.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro com sinal de 32 bits, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir define uma classe que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> e uma classe que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Os objetos da classe que implementa a propriedade <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> têm uma matriz de valores <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToInt32`</ph> method.</source>
          <target state="translated">Um objeto de cada classe é passado para o <ph id="ph1">`ToInt32`</ph> método.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método retorna uma média da matriz de valores <ph id="ph1">&lt;xref:System.Double&gt;</ph>, usando o objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar como calcular a média.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 32 bits equivalente, usando as informações de formatação específicas da cultura especificada.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>A 32-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Int32.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.Int32.Parse%2A?displayProperty=nameWithType&gt;</ph> método <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">O exemplo a seguir define um objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado que reconhece a cadeia de caracteres "pos" como o sinal positivo e a cadeia de caracteres "neg" como o sinal negativo.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">Em seguida, ele tenta converter cada elemento de uma matriz de cadeia de caracteres numérica em um inteiro usando esse provedor e o provedor <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> para a cultura invariável.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada para um inteiro com sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>A 32-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 32 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Porque não é compatível com o sinal negativo não base 10 representações de numéricas, o <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que os números negativos usam representação de complemento de dois.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit.</source>
          <target state="translated">Em outras palavras, o método sempre interpreta o bit de ordem mais alta binário de um inteiro (31 bits) como o bit de sinal.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.Int32&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um 10 de base não número que está fora do intervalo de <ph id="ph1">&lt;xref:System.Int32&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.Int32&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>The following example increments <ph id="ph1">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> by one, converts the resulting number to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">A seguir incrementa exemplo <ph id="ph1">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> por um, converte o número resultante em sua representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x80000000 converts to -2147483648."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0x80000000 converte -2147483648."</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</source>
          <target state="translated">Como mostra o exemplo a seguir, você pode garantir que os identificadores de método estoura adequadamente primeiro recuperando o sinal do valor numérico antes de convertê-la em sua representação de cadeia de caracteres hexadecimal.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</source>
          <target state="translated">Lançar uma exceção se o valor original era positivo, mas a conversão de volta para um número inteiro produz um valor negativo.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 64-bit signed integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor booliano especificado no inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>The following example converts the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values <ph id="ph2">`true`</ph> and <ph id="ph3">`false`</ph> to long integers.</source>
          <target state="translated">O exemplo a seguir converte a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valores <ph id="ph2">`true`</ph> e <ph id="ph3">`false`</ph> para inteiros longos.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>The following example converts each element in an array of bytes to a long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Char)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Char)">
          <source>The following example converts each element in a <ph id="ph1">&lt;xref:System.Char&gt;</ph> array to a long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em um <ph id="ph1">&lt;xref:System.Char&gt;</ph> matriz para um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores como um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores como um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>The following example converts each element in an array of 16-bit integers to a long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int32)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int64)">
          <source>A 64-bit signed integer.</source>
          <target state="translated">Um inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int64)">
          <source>Returns the specified 64-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro com sinal de 64 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Int64)">
          <source>The following example converts each element in an array of integers to a long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>Converts the value of the specified object to a 64-bit signed integer.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou zero se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não é <ph id="ph2">`null`</ph>, este método envolve uma chamada para o <ph id="ph3">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> implementação do tipo subjacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object)">
          <source>The following example attempts to convert each element in an object array to a long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objetos em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>The following example converts each element in a signed byte array to a long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de byte assinado para um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um número inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores como um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém um número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 64 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero) caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>The following example attempts to convert each element in an array of numeric strings to a long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de cadeias de caracteres numéricas em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>The following example converts each element in an array of 16-bit unsigned integers to a long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits sem sinal em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>The following example converts each element in an array of unsigned integers to a long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros sem sinal em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to a long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos sem sinal em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro com sinal de 64 bits, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou zero se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir define uma classe que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> e uma classe que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Os objetos da classe que implementa a propriedade <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> têm uma matriz de valores <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToInt64`</ph> method.</source>
          <target state="translated">Um objeto de cada classe é passado para o <ph id="ph1">`ToInt64`</ph> método.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método retorna uma média da matriz de valores <ph id="ph1">&lt;xref:System.Double&gt;</ph>, usando o objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar como calcular a média.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 64 bits equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 64 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero) caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Int64.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.Int64.Parse%2A?displayProperty=nameWithType&gt;</ph> método <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">`IFormatProvider`</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">`IFormatProvider`</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`NumberFormatInfo`</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">`NumberFormatInfo`</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">`NumberFormatInfo`</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">`NumberFormatInfo`</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">O exemplo a seguir define um objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado que reconhece a cadeia de caracteres "pos" como o sinal positivo e a cadeia de caracteres "neg" como o sinal negativo.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">Em seguida, ele tenta converter cada elemento de uma matriz de cadeia de caracteres numérica em um inteiro usando esse provedor e o provedor <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> para a cultura invariável.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada para um inteiro com sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 64 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero) caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Porque não é compatível com o sinal negativo não base 10 representações de numéricas, o <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que os números negativos usam representação de complemento de dois.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit.</source>
          <target state="translated">Em outras palavras, o método sempre interpreta o bit de ordem mais alta binário de um inteiro longo (bit 63) como o bit de sinal.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.Int64&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um 10 de base não número que está fora do intervalo de <ph id="ph1">&lt;xref:System.Int64&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.Int64&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.UInt64.MaxValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir converte <ph id="ph1">&lt;xref:System.UInt64.MaxValue&gt;</ph> representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0xFFFFFFFFFFFFFFFF converts to -1."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0xFFFFFFFFFFFFFFFF converte como -1".</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</source>
          <target state="translated">Como mostra o exemplo a seguir, você pode garantir que os identificadores de método estoura adequadamente primeiro determinando se um valor representa um não assinados ou um tipo assinado ao convertê-lo em sua representação de cadeia de caracteres hexadecimal.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.</source>
          <target state="translated">Lançar uma exceção se o valor original era um tipo não assinado, mas a conversão de volta para um número inteiro gera um valor de bit cujo logon está em.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.</source>
          <target state="translated">O exemplo a seguir tenta interpretar a cada elemento em uma matriz de cadeia de caracteres como uma cadeia de caracteres hexadecimal e convertê-lo em um inteiro longo.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to an 8-bit signed integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro com sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor booliano especificado para o inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to signed byte values.</source>
          <target state="translated">O exemplo a seguir converte os valores booleanos <ph id="ph1">`true`</ph> e <ph id="ph2">`false`</ph> para assinado valores de byte.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>The following example attempts to convert each element in a byte array to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de bytes em um byte assinado.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Char)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores para um byte assinado.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores para um byte assinado.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores para um byte assinado.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros com sinal de 16 bits em um byte assinado.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>The following example attempts to convert each element in an array of signed integers to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros com sinal de um byte assinado.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos em um byte assinado.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>Converts the value of the specified object to an 8-bit signed integer.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro com sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero, se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object)">
          <source>The following example attempts to convert each element in an object array to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objeto para um byte assinado.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.SByte)">
          <source>The 8-bit signed integer to return.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser retornado.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.SByte)">
          <source>Returns the specified 8-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro com sinal de 8 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro com sinal de 8 bits.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores para um byte assinado.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source>An 8-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 8 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se o valor for <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>The following example converts string representations of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values with the <ph id="ph2">`ToSByte`</ph> method, using default formatting.</source>
          <target state="translated">O exemplo a seguir converte representações de cadeia de caracteres de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores com o <ph id="ph2">`ToSByte`</ph> método, usando a formatação padrão.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros de 16 bits sem sinal em um byte assinado.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>The following example attempts to convert each element in an integer array to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros em um byte assinado.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>The following example attempts to convert each element in an array of long integers to a signed byte.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos em um byte assinado.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> ou menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro com sinal de 8 bits, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero, se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`ByteString`</ph> class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte.</source>
          <target state="translated">O exemplo a seguir define um <ph id="ph1">`ByteString`</ph> classe que armazena ambos assinados e bytes como cadeias de caracteres hexadecimais junto com um campo que indica o sinal do byte.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`ByteString`</ph> class implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">A classe <ph id="ph1">`ByteString`</ph> implementa a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method to perform the conversion.</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> chamadas de método de <ph id="ph2">&lt;xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> método para executar a conversão.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>If it fails, it throws an <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</source>
          <target state="translated">Se ele falhar, ele gerará um <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The following example shows how the <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph2">`ByteString`</ph> class is called by the <ph id="ph3">&lt;xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">A exemplo a seguir mostra como o <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> implementação o <ph id="ph2">`ByteString`</ph> classe é chamada pelo <ph id="ph3">&lt;xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro com sinal de 8 bits equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values with the <ph id="ph2">`ToSByte`</ph> method, using an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">O exemplo a seguir converte representações de cadeia de caracteres de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores com o <ph id="ph2">`ToSByte`</ph> método, usando um <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada para um inteiro com sinal de 8 bits equivalente.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>An 8-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 8 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Porque não é compatível com o sinal negativo não base 10 representações de numéricas, o <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que os números negativos usam representação de complemento de dois.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit.</source>
          <target state="translated">Em outras palavras, o método sempre interpreta o bit de ordem superior de um byte (7 bits) como o bit de sinal.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.SByte&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.SByte&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um 10 de base não número que está fora do intervalo de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.SByte&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Byte.MaxValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir converte <ph id="ph1">&lt;xref:System.Byte.MaxValue&gt;</ph> representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0xff converts to -1."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0xff converte como -1".</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</source>
          <target state="translated">Como mostra o exemplo a seguir, você pode garantir que os identificadores de método estoura adequadamente primeiro determinando se um valor representa um não assinados ou um tipo assinado ao convertê-lo em sua representação de cadeia de caracteres hexadecimal.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.</source>
          <target state="translated">Lançar uma exceção se o valor original era um tipo não assinado, mas a conversão de volta para um byte assinado gera um valor de bit cujo logon está em.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.</source>
          <target state="translated">O exemplo a seguir tenta interpretar os elementos em uma matriz de cadeia de caracteres como binary, octal e a representação hexadecimal de valores numéricos para convertê-los em bytes sem sinal.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a single-precision floating-point number.</source>
          <target state="translated">Converte um valor especificado em um número de ponto flutuante de precisão simples.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor booliano especificado no número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to <ph id="ph3">&lt;xref:System.Single&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir converte os valores booleanos <ph id="ph1">`true`</ph> e <ph id="ph2">`false`</ph> para <ph id="ph3">&lt;xref:System.Single&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>The following example converts each element in an array of byte values to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de valores de byte para um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do número decimal especificado para um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is rounded using rounding to nearest.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é arredondado usando o arredondamento mais próximo.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</source>
          <target state="translated">Por exemplo, quando arredondado para duas casas decimais, o valor 2.345 torna-se 2.34 e 2.355 torna-se o valor 2.36.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores para um <ph id="ph2">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is rounded using rounding to nearest.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é arredondado usando o arredondamento mais próximo.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</source>
          <target state="translated">Por exemplo, quando arredondado para duas casas decimais, o valor 2.345 torna-se 2.34 e 2.355 torna-se o valor 2.36.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Double)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores para um <ph id="ph2">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>The following example converts each element in an array of 16-bit integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits a uma <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>The following example converts each element in an integer array to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros para uma <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>The following example converts each element in an array of long integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros longos para um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>Converts the value of the specified object to a single-precision floating-point number.</source>
          <target state="translated">Converte o valor do objeto especificado em um número de ponto flutuante de precisão simples.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples que é equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object)">
          <source>The following example attempts to convert each element in an object array to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objeto para um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado no número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 8 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>The following example converts each element in a signed byte array to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de byte assinado para uma <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Single)">
          <source>The single-precision floating-point number to return.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser retornado.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Single)">
          <source>Returns the specified single-precision floating-point number; no actual conversion is performed.</source>
          <target state="translated">Retorna o número de ponto flutuante de precisão simples especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source>A single-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples que é equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero) se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>The following example attempts to convert each element in an array of numeric strings to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de cadeias de caracteres numéricas para um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um número em um formato válido.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits sem sinal para um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>The following example converts each element in an array of unsigned integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros sem sinal a uma <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um número de ponto flutuante de precisão simples equivalente.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>The following example converts each element in an array of unsigned long integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros sem sinal de tempo para um <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um número de ponto flutuante de precisão simples, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples que é equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">`Temperature`</ph> que implementa a interface <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>Its implementation of the <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> method returns the internal value of a private <ph id="ph2">&lt;xref:System.Single&gt;</ph> variable that represents the temperature.</source>
          <target state="translated">Sua implementação do <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> método retorna o valor interno de uma particular <ph id="ph2">&lt;xref:System.Single&gt;</ph> variável que representa a temperatura.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The following example illustrates how a call to the <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method, in turn, calls the <ph id="ph2">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph3">`Temperature`</ph> class.</source>
          <target state="translated">O exemplo a seguir ilustra como uma chamada para o <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método, por sua vez, chama o <ph id="ph2">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> implementação o <ph id="ph3">`Temperature`</ph> classe.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número especificada em um número de ponto flutuante de precisão simples equivalente, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>A single-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um número de ponto flutuante de precisão simples que é equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero) se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Single.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.Single.Parse%2A?displayProperty=nameWithType&gt;</ph> método <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>The following example uses <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <ph id="ph2">&lt;xref:System.Single&gt;</ph> values.</source>
          <target state="translated">O exemplo a seguir usa <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objetos que representam as culturas en-US e fr-FR ao converter os elementos em uma matriz de cadeias de caracteres numéricas para <ph id="ph2">&lt;xref:System.Single&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não é um número em um formato válido.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts the specified value to its equivalent string representation.</source>
          <target state="translated">Converte o valor especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean)">
          <source>Converts the specified Boolean value to its equivalent string representation.</source>
          <target state="translated">Converte o valor booliano especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>It returns <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`true`</ph> values and <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> for <ph id="ph4">`false`</ph> values.</source>
          <target state="translated">Ele retorna <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`true`</ph> valores e <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> para <ph id="ph4">`false`</ph> valores.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>The following example illustrates the conversion of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>, using <ph id="ph3">`ToString`</ph>.</source>
          <target state="translated">O exemplo a seguir ilustra a conversão de um <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> para um <ph id="ph2">&lt;xref:System.String&gt;</ph>usando <ph id="ph3">`ToString`</ph>.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>It also illustrates that the string returned by the conversion equals either <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Ele também ilustra a cadeia de caracteres retornada pela conversão é igual a <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Byte.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Byte.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte)">
          <source>The following example converts each value in a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array to a string.</source>
          <target state="translated">O exemplo a seguir converte cada valor em uma <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matriz como uma cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char)">
          <source>Converts the value of the specified Unicode character to its equivalent string representation.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Char.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Char.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Char&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Char&gt;</ph> para um <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime)">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> to its equivalent string representation.</source>
          <target state="translated">Converte o valor do <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.DateTime.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.DateTime.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime)">
          <source>It uses the formatting conventions of the current culture and the "G" format specifier to convert a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to its string representation.</source>
          <target state="translated">Ele usa as convenções de formatação da cultura atual e o especificador de formato "G" para converter um <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor em sua representação de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime)">
          <source>The following example converts each element in an array of a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a <ph id="ph2">&lt;xref:System.String&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de um <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.String&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal)">
          <source>Converts the value of the specified decimal number to its equivalent string representation.</source>
          <target state="translated">Converte o valor do número decimal especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Decimal.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Decimal.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> para um <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Double.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Double.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Double&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Double&gt;</ph> para um <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int16.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Int16.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16)">
          <source>The following example converts each element in an array of 16-bit integers to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int32.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Int32.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>It formats <ph id="ph1">`value`</ph> by using the formatting conventions of the current thread culture.</source>
          <target state="translated">Formata <ph id="ph1">`value`</ph> usando as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>The following example compares the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir compara o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%29&gt;</ph> método com o <ph id="ph2">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>It defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that uses the sting "minus" to represent the negative sign.</source>
          <target state="translated">Define um personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que usa a sequência "menos" para representar o sinal negativo.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.</source>
          <target state="translated">Ele converte cada elemento em uma matriz de inteiros em sua representação de cadeia de caracteres equivalente usando (as convenções de formatação da cultura atual) a formatação padrão e o provedor de formato personalizado.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int64.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Int64.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64)">
          <source>The following example converts each element in a long integer array to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros longos em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object)">
          <source>An object that supplies the value to convert, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que fornece o valor a ser convertido ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object)">
          <source>Converts the value of the specified object to its equivalent string representation.</source>
          <target state="translated">Converte o valor do objeto especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A representação de cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> se <ph id="ph3">&lt;paramref name="value" /&gt;</ph> for <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>To convert <ph id="ph1">`value`</ph> to its string representation, the method tries to call the <ph id="ph2">&lt;xref:System.IConvertible.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation of <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Para converter <ph id="ph1">`value`</ph> em sua representação de cadeia de caracteres, o método tentará chamar o <ph id="ph2">&lt;xref:System.IConvertible.ToString%2A?displayProperty=nameWithType&gt;</ph> implementação de <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>If <ph id="ph1">`value`</ph> does not implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, the method tries to call the <ph id="ph3">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> não implementa o <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> o método de interface, tentará chamar o <ph id="ph3">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementação de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>If value does not implement the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, the method calls the <ph id="ph2">`ToString`</ph> method of the underlying type of <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Se o valor não implementa o <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, as chamadas de método de <ph id="ph2">`ToString`</ph> método do tipo subjacente de <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>The following example converts each element in an object array to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de objeto em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.SByte.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.SByte.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte)">
          <source>The following example converts each element in a signed byte array to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de byte assinado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Single.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Single.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String)">
          <source>The string to return.</source>
          <target state="translated">A cadeia de caracteres a ser retornada.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String)">
          <source>Returns the specified string instance; no actual conversion is performed.</source>
          <target state="translated">Retorna a instância de cadeia de caracteres especificada; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String)">
          <source>The following example passes a string to the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.String%29&gt;</ph> method and calls the <ph id="ph2">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> method to confirm that the method returns the original string.</source>
          <target state="translated">O exemplo a seguir passa uma cadeia de caracteres para o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.String%29&gt;</ph> método e chama o <ph id="ph2">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> método para confirmar que o método retorna a cadeia de caracteres original.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String)">
          <source>The example also calls the <ph id="ph1">&lt;xref:System.String.IsInterned%2A?displayProperty=nameWithType&gt;</ph> method to ensure that the two strings are not identical because the original string is interned.</source>
          <target state="translated">O exemplo também chama o <ph id="ph1">&lt;xref:System.String.IsInterned%2A?displayProperty=nameWithType&gt;</ph> método para garantir que as duas cadeias de caracteres não são idênticas, porque a cadeia de caracteres original é definidos como internos.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado em uma representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt16.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.UInt16.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de valores inteiros de 16 bits sem sinal em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt32.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.UInt32.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32)">
          <source>The following example converts each element in an unsigned integer array to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros sem sinal em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt64.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.UInt64.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64)">
          <source>The following example converts each element in an unsigned long integer array to its equivalent string representation.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiro longo não assinado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>An instance of an object.</source>
          <target state="translated">Uma instância de um objeto.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parâmetro é ignorado.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>Converts the specified Boolean value to its equivalent string representation.</source>
          <target state="translated">Converte o valor booliano especificado na representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>It returns <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`true`</ph> values and <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> for <ph id="ph4">`false`</ph> values.</source>
          <target state="translated">Ele retorna <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`true`</ph> valores e <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> para <ph id="ph4">`false`</ph> valores.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to a <ph id="ph2">&lt;xref:System.String&gt;</ph> with the <ph id="ph3">`ToString`</ph> method, using an <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> object that displays the type of the format provider for which it is called.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.String&gt;</ph> com o <ph id="ph3">`ToString`</ph> método, usando um <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> objeto que exibe o tipo do provedor de formato para o qual ele é chamado.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The example shows that the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object is not referenced.</source>
          <target state="translated">O exemplo mostra que o <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objeto não é referenciado.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado em sua representação de cadeia de caracteres equivalente, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Byte.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Byte.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes não assinado em sua representação de cadeia de caracteres equivalente usando as convenções de formatação das culturas en-US e fr-FR.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>Because the "G" specifier by default outputs only decimal digits in a byte value's string representation, the <ph id="ph1">`provider`</ph> parameter does not affect the formatting of the returned string.</source>
          <target state="translated">Porque o especificador "G" por padrão gera somente dígitos decimais na representação de cadeia de caracteres do valor de um byte, o <ph id="ph1">`provider`</ph> parâmetro não afeta a formatação da cadeia de caracteres retornada.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do valor de retorno, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Converte o valor de um inteiro sem sinal de 8 bits em sua representação de cadeia de caracteres equivalente de uma base especificada.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> na base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>If <ph id="ph1">`toBase`</ph> does not equal 10, the string that is returned by the <ph id="ph2">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method represents <ph id="ph3">`value`</ph> by its magnitude only.</source>
          <target state="translated">Se <ph id="ph1">`toBase`</ph> não é igual a 10, a cadeia de caracteres que é retornado pelo <ph id="ph2">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> método representa <ph id="ph3">`value`</ph> por sua magnitude somente.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion.</source>
          <target state="translated">Se o método é chamado para criar uma cadeia de caracteres que posteriormente será convertida para um número, um método correspondente que assume uma representação numérica somente magnitude deve ser chamado para executar a conversão.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esses métodos incluem <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes em suas representações de cadeia de caracteres binária, hexadecimal, decimal e hexadecimal equivalente.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parâmetro é ignorado.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado em sua representação de cadeia de caracteres equivalente, usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Char.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Char.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is ignored.</source>
          <target state="translated">O <ph id="ph1">`provider`</ph> parâmetro é ignorado.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value to a <ph id="ph2">&lt;xref:System.String&gt;</ph> with the <ph id="ph3">`ToString`</ph> method, using an <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> object that displays the type of the format provider for which it is called.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor para um <ph id="ph2">&lt;xref:System.String&gt;</ph> com o <ph id="ph3">`ToString`</ph> método, usando um <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> objeto que exibe o tipo do provedor de formato para o qual ele é chamado.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The example shows that the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object is not referenced.</source>
          <target state="translated">O exemplo mostra que o <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objeto não é referenciado.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> especificado na representação de cadeia de caracteres equivalente usando as informações de formatação específicas da cultura determinadas.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to its equivalent string representation in eight different cultures.</source>
          <target state="translated">O exemplo a seguir converte um <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor em sua representação de cadeia de caracteres equivalente em oito culturas diferentes.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do número decimal especificado na representação de cadeia de caracteres equivalente usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to its equivalent string representation in four different cultures.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores em sua representação de cadeia de caracteres equivalente em quatro culturas diferentes.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to its equivalent string representation in four different cultures.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores em sua representação de cadeia de caracteres equivalente em quatro culturas diferentes.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado em sua representação de cadeia de caracteres equivalente usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizada que define o sinal de subtração como a cadeia de caracteres "~" e o sinal de adição como a cadeia de caracteres "!".</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29&gt;</ph> method to convert each element in an array of 16-bit integers to its equivalent string representation.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29&gt;</ph> método para converter cada elemento em uma matriz de inteiros de 16 bits em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">A conversão usa a cultura invariável, bem como o objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do valor de retorno, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Converte o valor de um inteiro com sinal de 16 bits em sua representação de cadeia de caracteres equivalente em uma base especificada.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> na base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is positive and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> for positivo e <ph id="ph2">`toBase`</ph> é 2, 8 ou 16, a cadeia de caracteres retornada usa representação de entrada e magnitude.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is negative and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses two's complement representation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> é negativo e <ph id="ph2">`toBase`</ph> é 2, 8 ou 16, a cadeia de caracteres retornada usa representação de complemento de dois.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit.</source>
          <target state="translated">Isso significa que o bit de ordem alta do byte de ordem superior (15 bits) é interpretado como o bit de sinal.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> método é chamado para criar uma cadeia de caracteres que posteriormente será convertida para um número, um método correspondente que assume uma representação numérica semelhante deve ser chamado para executar a conversão.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esses métodos incluem <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros com sinal de 16 bits em suas representações de cadeia de caracteres binária, octal, decimal e hexadecimal equivalente.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em sua representação de cadeia de caracteres equivalente usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizada que define o sinal de subtração como a cadeia de caracteres "~" e o sinal de adição como a cadeia de caracteres "!".</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29&gt;</ph> method to convert each element in an array of integers to its equivalent string representation.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29&gt;</ph> método para converter cada elemento em uma matriz de inteiros em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">A conversão usa a cultura invariável, bem como o objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do valor de retorno, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Converte o valor de um inteiro com sinal de 32 bits na representação de cadeia de caracteres equivalente a ele em uma base especificada.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> na base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is positive and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> for positivo e <ph id="ph2">`toBase`</ph> é 2, 8 ou 16, a cadeia de caracteres retornada usa representação de entrada e magnitude.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is negative and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses two's complement representation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> é negativo e <ph id="ph2">`toBase`</ph> é 2, 8 ou 16, a cadeia de caracteres retornada usa representação de complemento de dois.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit.</source>
          <target state="translated">Isso significa que o bit de ordem alta do byte de ordem mais alta (31 bits) é interpretado como o bit de sinal.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> método é chamado para criar uma cadeia de caracteres que posteriormente será convertida para um número, um método correspondente que assume uma representação numérica semelhante deve ser chamado para executar a conversão.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esses métodos incluem <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros em suas representações de cadeia de caracteres binária, hexadecimal, decimal e hexadecimal equivalente.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado na representação de cadeia de caracteres equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizada que define o sinal de subtração como a cadeia de caracteres "~" e o sinal de adição como a cadeia de caracteres "!".</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29&gt;</ph> method to convert each element in a long integer array to its equivalent string representation.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29&gt;</ph> método para converter cada elemento em uma matriz de inteiros longos em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">A conversão usa a cultura invariável, bem como o objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do valor de retorno, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Converte o valor de um inteiro com sinal de 64 bits na representação de cadeia de caracteres equivalente a ele em uma base especificada.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> na base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is positive and <ph id="ph2">`toBase`</ph> is not 10, the returned string uses sign-and-magnitude representation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> for positivo e <ph id="ph2">`toBase`</ph> não for 10, a cadeia de caracteres retornada usa representação de entrada e magnitude.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is negative and <ph id="ph2">`toBase`</ph> is not 10, the returned string uses two's complement representation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> é negativo e <ph id="ph2">`toBase`</ph> não for 10, a cadeia de caracteres retornada usa representação de complemento de dois.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit.</source>
          <target state="translated">Isso significa que o bit de ordem alta do byte de ordem mais alta (bit 63) é interpretado como o bit de sinal.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> método é chamado para criar uma cadeia de caracteres que posteriormente será convertida para um número, um método correspondente que assume uma representação numérica semelhante deve ser chamado para executar a conversão.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esses métodos incluem <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros longos em suas representações de cadeia de caracteres binária, hexadecimal, decimal e hexadecimal equivalente.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>An object that supplies the value to convert, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que fornece o valor a ser convertido ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado na representação de cadeia de caracteres equivalente usando as informações de formatação específicas da cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is an object whose value is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A representação de cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> se <ph id="ph3">&lt;paramref name="value" /&gt;</ph> for um objeto cujo valor é <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;paramref name="value" /&gt;</ph> for <ph id="ph2">&lt;see langword="null" /&gt;</ph>, o método retornará <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>If the <ph id="ph1">`value`</ph> parameter implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, the method calls the <ph id="ph3">&lt;xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementation of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Se o <ph id="ph1">`value`</ph> parâmetro implementa o <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, as chamadas de método de <ph id="ph3">&lt;xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementação de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>Otherwise, if the <ph id="ph1">`value`</ph> parameter implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface, the method calls its <ph id="ph3">&lt;xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Caso contrário, se o <ph id="ph1">`value`</ph> parâmetro implementa o <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface, as chamadas de método seu <ph id="ph3">&lt;xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementação.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> implements neither interface, the method calls the <ph id="ph2">`value`</ph> parameter's <ph id="ph3">`ToString()`</ph> method, and the <ph id="ph4">`provider`</ph> parameter is ignored.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> implementa nenhuma interface, as chamadas de método de <ph id="ph2">`value`</ph> do parâmetro <ph id="ph3">`ToString()`</ph> método e o <ph id="ph4">`provider`</ph> parâmetro é ignorado.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is used if the <ph id="ph2">`value`</ph> parameter implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> or <ph id="ph4">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
          <target state="translated">O <ph id="ph1">`provider`</ph> parâmetro é usado se o <ph id="ph2">`value`</ph> parâmetro implementa o <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> ou <ph id="ph4">&lt;xref:System.IFormattable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The most common use of the <ph id="ph1">`provider`</ph> parameter is to specify culture-specific information used in the conversion of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O uso mais comum dos <ph id="ph1">`provider`</ph> parâmetro é para especificar informações específicas de cultura usadas na conversão de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>For example, if the <ph id="ph1">`value`</ph> parameter is a negative decimal number, the <ph id="ph2">`provider`</ph> parameter can supply culture-specific information about the notation used for the negative sign and decimal separator.</source>
          <target state="translated">Por exemplo, se o <ph id="ph1">`value`</ph> parâmetro é um número decimal negativo, o <ph id="ph2">`provider`</ph> parâmetro pode fornecer informações específicas de cultura sobre a notação usada para o separador decimal e o sinal negativo.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.</source>
          <target state="translated">O segundo exemplo na próxima seção ilustra um provedor de formato que não fornece informações de formatação sensíveis à cultura.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that overrides the <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method but does not implement the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`Temperature`</ph> classe que substitui o <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> método mas não implementa o <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The example illustrates how calls to the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method, in turn, call the <ph id="ph2">`Temperature.ToString`</ph> method.</source>
          <target state="translated">O exemplo ilustra como chamadas para o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método, por sua vez, chamar o <ph id="ph2">`Temperature.ToString`</ph> método.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface but does not implement the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`Temperature`</ph> classe que implementa o <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface mas não implementa o <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation represents the <ph id="ph2">`Temperature`</ph> value in Celsius, Fahrenheit, or Kelvin, depending on the format  string.</source>
          <target state="translated">Seu <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementação representa o <ph id="ph2">`Temperature`</ph> valor em Celsius, Fahrenheit ou Kelvin, dependendo da cadeia de formato.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The example also defines a <ph id="ph1">`TemperatureProvider`</ph> class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> and provides a randomly generated format string that is used by the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> implementation of the <ph id="ph4">`Temperature`</ph> class.</source>
          <target state="translated">O exemplo também define um <ph id="ph1">`TemperatureProvider`</ph> classe que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> e fornece uma cadeia de caracteres de formato gerado aleatoriamente que é usada pelo <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> implementação o <ph id="ph4">`Temperature`</ph> classe.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado em sua representação de cadeia de caracteres equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizada que define o sinal de subtração como a cadeia de caracteres "~" e o sinal de adição como a cadeia de caracteres "!".</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method to convert each element in signed byte array to its equivalent string representation.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método para converter cada elemento na matriz de byte assinado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">A conversão usa a cultura invariável, bem como o objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples em sua representação de cadeia de caracteres equivalente, usando as informações de formatação específicas da cultura.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to its equivalent string representation in four different cultures.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores em sua representação de cadeia de caracteres equivalente em quatro culturas diferentes.</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>The string to return.</source>
          <target state="translated">A cadeia de caracteres a ser retornada.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parâmetro é ignorado.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>Returns the specified string instance; no actual conversion is performed.</source>
          <target state="translated">Retorna a instância de cadeia de caracteres especificada; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>The following example calls the <ph id="ph1">`ToString`</ph> method with a <ph id="ph2">&lt;xref:System.String&gt;</ph> parameter.</source>
          <target state="translated">A exemplo a seguir chama o <ph id="ph1">`ToString`</ph> método com um <ph id="ph2">&lt;xref:System.String&gt;</ph> parâmetro.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>The method returns the unmodified <ph id="ph1">&lt;xref:System.String&gt;</ph> without referencing the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">O método retorna o inalterado <ph id="ph1">&lt;xref:System.String&gt;</ph> sem fazer referência a <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado na representação de cadeia de caracteres equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizada que define o sinal de subtração como a cadeia de caracteres "~" e o sinal de adição como a cadeia de caracteres "!".</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> method to convert a 16-bit unsigned integer value to its equivalent string representation.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> método para converter um valor inteiro não assinado de 16 bits em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The conversion uses both the invariant culture and the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">A conversão usa a cultura invariável e personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</source>
          <target state="translated">A saída indica que essas informações de formatação não são usadas, porque, por padrão o especificador de formato "G" não tem um sinal positivo com valores positivos.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado na representação de cadeia de caracteres equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizada que define o sinal de subtração como a cadeia de caracteres "~" e o sinal de adição como a cadeia de caracteres "!".</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29&gt;</ph> method to convert an unsigned integer value to its equivalent string representation.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29&gt;</ph> método para converter um valor inteiro não assinado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The conversion uses both the invariant culture and the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">A conversão usa a cultura invariável e personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</source>
          <target state="translated">A saída indica que essas informações de formatação não são usadas, porque, por padrão o especificador de formato "G" não tem um sinal positivo com valores positivos.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado na representação de cadeia de caracteres equivalente, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">A representação da cadeia de caracteres de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Essa implementação é idêntica ao <ph id="ph1">&lt;xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">O exemplo a seguir define uma classe <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizada que define o sinal de subtração como a cadeia de caracteres "~" e o sinal de adição como a cadeia de caracteres "!".</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29&gt;</ph> method to convert an unsigned long integer value to its equivalent string representation.</source>
          <target state="translated">Depois, ele chama o <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29&gt;</ph> método para converter um valor inteiro longo não assinado em sua representação de cadeia de caracteres equivalente.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The conversion uses both the invariant culture and the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">A conversão usa a cultura invariável e personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</source>
          <target state="translated">A saída indica que essas informações de formatação não são usadas, porque, por padrão o especificador de formato "G" não tem um sinal positivo com valores positivos.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 16-bit unsigned integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro sem sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor booliano especificado no inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to unsigned 16-bit integers.</source>
          <target state="translated">O exemplo a seguir converte os valores booleanos <ph id="ph1">`true`</ph> e <ph id="ph2">`false`</ph> para inteiros de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>The following example converts each element in a byte array to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>The 16-bit unsigned integer equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">O inteiro sem sinal de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>The following example converts each element in a character array to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de caracteres em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores para um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores para um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado no inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros de 16 bits em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>The following example converts each element in an integer array to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>The following example converts each element in a long integer array to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros longos em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>Converts the value of the specified object to a 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro sem sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>The following example attempts to convert each element in an object array to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objetos em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the  <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado no inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>The following example converts each element in a signed byte array to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de byte assinado para um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 16 bits.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.String&gt;</ph> values to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.String&gt;</ph> valores para um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source>A 16-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 16 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de cadeia de caracteres numéricos em um inteiro não assinado de 16 bits.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt16)">
          <source>The 16-bit unsigned integer to return.</source>
          <target state="translated">O inteiro sem sinal de 16 bits a ser retornado.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt16)">
          <source>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro sem sinal de 16 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros sem sinal em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro não assinado de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos sem sinal em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro sem sinal de 16 bits, usando as informações de formatação específicas da cultura especificada.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 16 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`HexString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`HexString`</ph> classe que implementa o <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface e que é criado para conter a representação de cadeia de caracteres de ambos os 16 bits assinados e 16 bits valores sem sinal.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The class includes a <ph id="ph1">`Sign`</ph> property that indicates the sign of its hexadecimal value.</source>
          <target state="translated">A classe inclui um <ph id="ph1">`Sign`</ph> propriedade que indica o sinal do valor hexadecimal.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The following example shows that a call to the <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method that passes a <ph id="ph2">`HexString`</ph> object as a parameter, in turn, calls the <ph id="ph3">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`HexString`</ph> class.</source>
          <target state="translated">O exemplo a seguir mostra que uma chamada para o <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método passa um <ph id="ph2">`HexString`</ph> objeto como um parâmetro, por sua vez, chama o <ph id="ph3">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> implementação o <ph id="ph4">`HexString`</ph> classe.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the  <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 16 bits equivalente, usando as informações específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>A 16-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 16 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking <ph id="ph1">&lt;xref:System.UInt16.Parse%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado da invocação <ph id="ph1">&lt;xref:System.UInt16.Parse%2A?displayProperty=nameWithType&gt;</ph> em <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">O exemplo a seguir define um objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado que reconhece a cadeia de caracteres "pos" como o sinal positivo e a cadeia de caracteres "neg" como o sinal negativo.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">Em seguida, ele tenta converter cada elemento de uma matriz de cadeia de caracteres numérica em um inteiro usando esse provedor e o provedor <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> para a cultura invariável.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada em um inteiro sem sinal de 16 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>A 16-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 16 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> tipo de dados oferece suporte a valores não assinados, o <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que <ph id="ph3">`value`</ph> é expressado usando a representação binária não assinada.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">Em outras palavras, todos os 16 bits são usados para representar o valor numérico, e um pouco de entrada está ausente.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed integer value that is out of the range of the <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um inteiro assinado de valor que está fora do intervalo de <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Int16.MinValue?displayProperty=nameWithType&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir converte <ph id="ph1">&lt;xref:System.Int16.MinValue?displayProperty=nameWithType&gt;</ph> representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x8000 converts to 32768."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0x8000 converte 32768."</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método ou operador está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir ilustra uma técnica para garantir que o método não inadequadamente usa representação binária para interpretar um valor que usa a representação de complemento de dois ao converter uma cadeia de caracteres hexadecimal para uma <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">O exemplo determina se um valor representa um inteiro assinado ou não assinado enquanto converte esse valor na representação da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>When the example converts the value to a <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Quando o exemplo converte o valor em uma <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valor, ele verifica se o valor original era um inteiro com sinal.</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</source>
          <target state="translated">Nesse caso, e se o bit de ordem alta é definido (que indica que o valor original era negativo), o método gera uma exceção.</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.</source>
          <target state="translated">O exemplo a seguir tenta interpretar a cada elemento em uma matriz de cadeias de caracteres numéricas como um valor hexadecimal e para convertê-lo em um inteiro de 16 bits sem sinal.</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número não assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número não assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 32-bit unsigned integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro sem sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor booliano especificado no inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to unsigned integers.</source>
          <target state="translated">O exemplo a seguir converte os valores booleanos <ph id="ph1">`true`</ph> e <ph id="ph2">`false`</ph> para números inteiros sem sinal.</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>The following example converts each element in a byte array to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes em um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>The following example converts each element in a character array to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de caracteres em um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores para um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores para um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado no inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros de 16 bits em um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>The following example attempts to convert each element in an integer array to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros em um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>The following example attempts to convert each element in a long integer array to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos em um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>Converts the value of the specified object to a 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro sem sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>The following example attempts to convert each element in an object array to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objetos em um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado no inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>The following example attempts to convert each element in a signed byte array to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de byte assinado para um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 32 bits.</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores para um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source>A 32-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.</source>
          <target state="translated">O exemplo a seguir interpreta os elementos em uma matriz de cadeia de caracteres como cadeias de caracteres numéricas e tenta convertê-los em inteiros sem sinal.</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiro de 16 bits sem sinal em um valor inteiro não assinado.</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt32)">
          <source>The 32-bit unsigned integer to return.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser retornado.</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt32)">
          <source>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro sem sinal de 32 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 64 bits especificado em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiro longo não assinado com um valor inteiro não assinado.</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é maior que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro sem sinal de 32 bits, usando as informações de formatação específicas da cultura especificada.</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`HexString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`HexString`</ph> classe que implementa o <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface e que é criado para conter a representação de cadeia de caracteres de ambos os 32 bits assinados e 32 bits valores sem sinal.</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The class includes a <ph id="ph1">`Sign`</ph> property that indicates the sign of its hexadecimal value.</source>
          <target state="translated">A classe inclui um <ph id="ph1">`Sign`</ph> propriedade que indica o sinal do valor hexadecimal.</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The following example shows that a call to the <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method that passes a <ph id="ph2">`HexString`</ph> object as a parameter, in turn, calls the <ph id="ph3">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`HexString`</ph> class.</source>
          <target state="translated">O exemplo a seguir mostra que uma chamada para o <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método passa um <ph id="ph2">`HexString`</ph> objeto como um parâmetro, por sua vez, chama o <ph id="ph3">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> implementação o <ph id="ph4">`HexString`</ph> classe.</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 32 bits equivalente, usando as informações específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>A 32-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking <ph id="ph1">&lt;xref:System.UInt32.Parse%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado da invocação <ph id="ph1">&lt;xref:System.UInt32.Parse%2A?displayProperty=nameWithType&gt;</ph> em <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é uma instância de <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> que obtém um objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">O exemplo a seguir define um objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado que reconhece a cadeia de caracteres "pos" como o sinal positivo e a cadeia de caracteres "neg" como o sinal negativo.</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">Em seguida, ele tenta converter cada elemento de uma matriz de cadeia de caracteres numérica em um inteiro usando esse provedor e o provedor <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> para a cultura invariável.</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada em um inteiro sem sinal de 32 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>A 32-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 32 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> tipo de dados oferece suporte a valores não assinados, o <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que <ph id="ph3">`value`</ph> é expressado usando a representação binária não assinada.</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">Em outras palavras, todos os 32 bits são usados para representar o valor numérico, e um pouco de entrada está ausente.</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed integer value that is out of the range of the <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um inteiro assinado de valor que está fora do intervalo de <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Int32.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir converte <ph id="ph1">&lt;xref:System.Int32.MinValue&gt;</ph> representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x80000000 converts to 2147483648."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0x80000000 converte a 2147483648".</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método ou operador está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir ilustra uma técnica para garantir que o método não inadequadamente usa representação binária para interpretar um valor que usa a representação de complemento de dois ao converter uma cadeia de caracteres hexadecimal para uma <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">O exemplo determina se um valor representa um inteiro assinado ou não assinado enquanto converte esse valor na representação da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>When the example converts the value to a <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Quando o exemplo converte o valor em uma <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> valor, ele verifica se o valor original era um inteiro com sinal.</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</source>
          <target state="translated">Nesse caso, e se o bit de ordem alta é definido (que indica que o valor original era negativo), o método gera uma exceção.</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.</source>
          <target state="translated">O exemplo a seguir tenta interpretar a cada elemento em uma matriz de cadeias de caracteres numéricas como um valor hexadecimal e para convertê-lo em um inteiro sem sinal.</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número não assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número não assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 64-bit unsigned integer.</source>
          <target state="translated">Converte um valor especificado em um inteiro sem sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">O valor booliano a ser convertido.</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor booliano especificado no inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">O número 1 caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph2">&lt;see langword="true" /&gt;</ph>; do contrário, 0.</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>The following example converts Boolean <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> values to unsigned long integers.</source>
          <target state="translated">O exemplo a seguir converte booliano <ph id="ph1">`true`</ph> e <ph id="ph2">`false`</ph> valores inteiros sem sinal de tempo.</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 8 bits especificado no inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro com sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>The following example converts each element in a byte array to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de bytes em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">O caractere Unicode a ser convertido.</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do caractere Unicode especificado no inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>The following example converts each element in a character array to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de caracteres em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">O valor de data e tempo a ser convertido.</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">A chamada desse método sempre lança <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">Nenhum valor é retornado.</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">Esta conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">O número decimal a ser convertido.</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número decimal especificado em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores como um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão dupla a ser convertido.</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão dupla especificado em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores como um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">O inteiro assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 16 bits especificado no inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros de 16 bits em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 32 bits a converter.</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 32 bits especificado em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>The following example attempts to convert each element in an array of integers to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros como um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 64 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 64 bits especificado em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de inteiros longos em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um objeto que implementa a interface <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>Converts the value of the specified object to a 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro sem sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero, se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>The following example attempts to convert each element in an object array to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de objetos em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">O inteiro com sinal de 8 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro com sinal de 8 bits especificado no inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>The following example attempts to convert each element in a signed byte array to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de byte assinado para um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero.</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">O número de ponto flutuante de precisão simples a ser convertido.</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do número de ponto flutuante de precisão simples especificado em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, arredondado para o próximo inteiro sem sinal de 64 bits.</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Caso <ph id="ph1">&lt;paramref name="value" /&gt;</ph> esteja entre dois números inteiros, o número par é retornado; ou seja, 4,5 é convertido em 4 e 5,5 é convertido em 6.</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta converter cada elemento em uma matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores como um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>The output shows that fractional values are rounded before the conversion is performed.</source>
          <target state="translated">A saída mostra que os valores fracionários são arredondados para a conversão é executada.</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é menor que zero ou maior que <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro assinado de 64 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ou 0 (zero) caso <ph id="ph2">&lt;paramref name="value" /&gt;</ph> seja <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Usando o <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> método é equivalente à passagem <ph id="ph2">`value`</ph> para o <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> é interpretado usando-se as convenções de formatação da cultura do thread atual.</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.</source>
          <target state="translated">O exemplo a seguir interpreta os elementos de uma matriz de cadeia de caracteres como cadeias de caracteres numéricas e tenta convertê-los em inteiros longo não assinados.</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro não assinado de 16 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 16 bits especificado no inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros de 16 bits sem sinal em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">O inteiro sem sinal de 32 bits a ser convertido.</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte o valor do inteiro sem sinal de 32 bits especificado em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>The following example converts each element in an unsigned integer array to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir converte cada elemento em uma matriz de inteiros sem sinal em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt64)">
          <source>The 64-bit unsigned integer to return.</source>
          <target state="translated">O inteiro sem sinal de 64 bits a ser retornado.</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt64)">
          <source>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Retorna o inteiro sem sinal de 64 bits especificado; nenhuma conversão real é executada.</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é retornado inalterado.</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Um objeto que implementa a interface do <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte o valor do objeto especificado em um inteiro sem sinal de 64 bits, usando as informações de formatação específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou zero, se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado de chamar o <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> método do tipo subjacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite que o usuário especifique informações de conversão específicas de cultura sobre o conteúdo de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por exemplo, se <ph id="ph1">`value`</ph> fosse um <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa um número, <ph id="ph3">`provider`</ph> poderia fornecer informações específicas de cultura sobre a notação usada para representar esse número.</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Os tipos de base ignoram <ph id="ph1">`provider`</ph>; no entanto, o parâmetro pode ser usado caso <ph id="ph2">`value`</ph> seja um tipo definido pelo usuário que implementa a interface <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`HexString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values.</source>
          <target state="translated">O exemplo a seguir define uma <ph id="ph1">`HexString`</ph> classe que implementa o <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface e que é criado para conter a representação de cadeia de caracteres de ambos os 64 bits assinados e 64 bits valores sem sinal.</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The class includes a <ph id="ph1">`Sign`</ph> property that indicates the sign of its hexadecimal value.</source>
          <target state="translated">A classe inclui um <ph id="ph1">`Sign`</ph> propriedade que indica o sinal do valor hexadecimal.</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The following example shows that a call to the <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method that passes a <ph id="ph2">`HexString`</ph> object as a parameter, in turn, calls the <ph id="ph3">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`HexString`</ph> class.</source>
          <target state="translated">O exemplo a seguir mostra que uma chamada para o <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método passa um <ph id="ph2">`HexString`</ph> objeto como um parâmetro, por sua vez, chama o <ph id="ph3">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> implementação o <ph id="ph4">`HexString`</ph> classe.</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não está em um formato adequado.</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não implementa a interface <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">A conversão não é suportada.</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Um objeto que fornece informações de formatação específicas de cultura.</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Converte a representação de cadeia de caracteres especificada de um número em um inteiro sem sinal de 64 bits equivalente, usando as informações específicas à cultura especificadas.</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>A 64-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking <ph id="ph1">&lt;xref:System.UInt64.Parse%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O valor de retorno é o resultado da invocação <ph id="ph1">&lt;xref:System.UInt64.Parse%2A?displayProperty=nameWithType&gt;</ph> em <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> é um <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementação que obtém um <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">O objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> fornece informações específicas da cultura sobre o formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.</source>
          <target state="translated">Caso <ph id="ph1">`provider`</ph> seja <ph id="ph2">`null`</ph>, o objeto <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> da cultura atual é usado.</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Se você preferir não tratar uma exceção se a conversão falhar, você pode chamar o <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método em vez disso.</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Ele retorna um valor <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> que indica se a conversão foi bem-sucedida ou falhou.</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">O exemplo a seguir define um objeto <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> personalizado que reconhece a cadeia de caracteres "pos" como o sinal positivo e a cadeia de caracteres "neg" como o sinal negativo.</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an unsigned long integer.</source>
          <target state="translated">Em seguida, ele tentará converter cada elemento de uma matriz de cadeia de caracteres numéricos em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The conversion uses both the custom provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">A conversão usa um provedor personalizado e o <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provedor para a cultura invariável.</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> não consiste em um sinal opcional seguido de uma sequência de dígitos (de 0 a 9).</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Uma cadeia de caracteres que contém o número a ser convertido.</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">A base do número em <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que deve ser 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Converte a representação de cadeia de caracteres de um número em uma base especificada em um inteiro sem sinal de 64 bits equivalente.</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>A 64-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Um inteiro sem sinal de 64 bits equivalente ao número em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> ou 0 (zero), se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> for <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Caso <ph id="ph1">`fromBase`</ph> seja 16, é possível prefixar o número especificado pelo parâmetro <ph id="ph2">`value`</ph> com "0x" ou "0X".</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Porque o <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> tipo de dados oferece suporte a valores não assinados, o <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> método pressupõe que <ph id="ph3">`value`</ph> é expressado usando a representação binária não assinada.</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">Em outras palavras, todos de 64 bits são usados para representar o valor numérico, e um pouco de entrada está ausente.</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed long integer value that is out of the range of the <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, é possível gravar o código no qual um inteiro longo valor que está fora do intervalo de <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> tipo de dados é convertido em um <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> valor sem o método lançar uma exceção.</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Int64.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">O exemplo a seguir converte <ph id="ph1">&lt;xref:System.Int64.MinValue&gt;</ph> representação de cadeia de caracteres hexadecimal e, em seguida, chama o <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x8000000000000000 converts to 9223372036854775808."</source>
          <target state="translated">Em vez de gerar uma exceção, o método exibe a mensagem "0x8000000000000000 converte para 9223372036854775808".</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Durante a realização de operações binárias ou conversões numéricas, sempre é responsabilidade do desenvolvedor verificar se um método ou operador está usando a representação numérica apropriada para interpretar um valor específico.</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> value.</source>
          <target state="translated">O exemplo a seguir ilustra uma técnica para garantir que o método não inadequadamente usa representação binária para interpretar um valor que usa a representação de complemento de dois ao converter uma cadeia de caracteres hexadecimal para uma <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">O exemplo determina se um valor representa um inteiro assinado ou não assinado enquanto converte esse valor na representação da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>When the example converts the value to a <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Quando o exemplo converte o valor em uma <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valor, ele verifica se o valor original era um inteiro com sinal.</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</source>
          <target state="translated">Nesse caso, e se o bit de ordem alta é definido (que indica que o valor original era negativo), o método gera uma exceção.</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.</source>
          <target state="translated">O exemplo a seguir tenta interpretar a cada elemento em uma matriz de cadeias de caracteres numéricas como um valor hexadecimal e para convertê-lo em um inteiro longo não assinado.</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> não é 2, 8, 10 ou 16.</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número não assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> é <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contém um caractere que não é um dígito válido na base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">A mensagem de exceção indica que não há dígitos a serem convertidos caso o primeiro caractere em <ph id="ph1">&lt;paramref name="value" /&gt;</ph> seja inválido; do contrário, a mensagem indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contém caracteres à direita inválidos.</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa um número não assinado de base não 10, é prefixado com um sinal negativo.</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa um número que é menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> ou maior que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>