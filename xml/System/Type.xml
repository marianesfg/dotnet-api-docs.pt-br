<Type Name="Type" FullName="System.Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4c442b0e3855ad0206a02ff13f35e3b09a89b66f" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48621101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <TypeSignature Language="F#" Value="type Type = class&#xA;    inherit MemberInfo&#xA;    interface _Type&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2c3b9-101">Representa as declarações de tipo: tipos de classe, tipos de interface, tipos de matriz, tipos de valor, tipos de enumeração, parâmetros de tipo, definições de tipo genérico e tipos genéricos construídos abertos ou fechados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c3b9-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-102">`Type` é a raiz do <xref:System.Reflection> funcionalidade e é a principal maneira de acessar os metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="2c3b9-103">Usar os membros de <xref:System.Type> para obter informações sobre uma declaração de tipo, sobre os membros de um tipo (como os construtores, métodos, campos, propriedades e eventos de uma classe), bem como o módulo e o assembly no qual a classe seja implantada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="2c3b9-104">Nenhuma permissão é necessária para o código usar a reflexão para obter informações sobre tipos e seus membros, independentemente de seus níveis de acesso.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="2c3b9-105">Nenhuma permissão é necessária para o código usar a reflexão para acessar os membros públicos ou outros membros cujos níveis de acesso devem torná-las visíveis durante a compilação normal.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="2c3b9-106">No entanto, para que seu código para usar a reflexão para acessar os membros que normalmente seriam inacessíveis, tais como métodos privados ou internos ou protegidos por campos de um tipo não herda sua classe, seu código deve ter <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="2c3b9-107">Ver [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="2c3b9-108">`Type` é uma classe base abstrata que permite várias implementações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="2c3b9-109">O sistema sempre fornecerá a classe derivada `RuntimeType`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="2c3b9-110">Reflexão, começando com a palavra tempo de execução de todas as classes são criadas apenas uma vez por objeto nas operações de comparação de sistema e suporte.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-111">Em cenários de multithreading não bloqueiam <xref:System.Type> objetos para sincronizar o acesso ao `static` dados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="2c3b9-112">Outro código, em que você não tem controle, também pode bloquear seu tipo de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="2c3b9-113">Isso pode resultar em um deadlock.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-113">This might result in a deadlock.</span></span> <span data-ttu-id="2c3b9-114">Em vez disso, sincronizar o acesso a dados estáticos, bloqueando uma privada `static` objeto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-115">Uma classe derivada pode acessar membros protegidos de classes de base do código de chamada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="2c3b9-116">Além disso, o acesso é permitido para membros do assembly do assembly do código de chamada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="2c3b9-117">Como regra, se a permissão de acesso no código de associação inicial, em seguida, você também podem acessar no código de associação tardia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-118">Interfaces que estendem as outras interfaces não herdam os métodos definidos nas interfaces estendidas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="2c3b9-119">Nesta seção:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-119">In this section:</span></span>  
  
 <span data-ttu-id="2c3b9-120">[Quais tipos representa um objeto do tipo?](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="2c3b9-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="2c3b9-121">[Recuperando um objeto de tipo](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="2c3b9-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="2c3b9-122">Comparando objetos de tipo de igualdade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="2c3b9-123">Quais tipos representa um objeto do tipo?</span><span class="sxs-lookup"><span data-stu-id="2c3b9-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="2c3b9-124">Essa classe é thread-safe; vários threads simultaneamente podem ler de uma instância desse tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="2c3b9-125">Uma instância da <xref:System.Type> classe pode representar qualquer um dos seguintes tipos:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="2c3b9-126">Classes</span><span class="sxs-lookup"><span data-stu-id="2c3b9-126">Classes</span></span>  
  
-   <span data-ttu-id="2c3b9-127">Tipos de valor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-127">Value types</span></span>  
  
-   <span data-ttu-id="2c3b9-128">Matrizes</span><span class="sxs-lookup"><span data-stu-id="2c3b9-128">Arrays</span></span>  
  
-   <span data-ttu-id="2c3b9-129">Interfaces</span><span class="sxs-lookup"><span data-stu-id="2c3b9-129">Interfaces</span></span>  
  
-   <span data-ttu-id="2c3b9-130">Enumerações</span><span class="sxs-lookup"><span data-stu-id="2c3b9-130">Enumerations</span></span>  
  
-   <span data-ttu-id="2c3b9-131">Delegados</span><span class="sxs-lookup"><span data-stu-id="2c3b9-131">Delegates</span></span>  
  
-   <span data-ttu-id="2c3b9-132">Tipos genéricos construídos e definições de tipo genérico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="2c3b9-133">Argumentos de tipo e parâmetros de tipo de tipos genéricos construídos, definições de tipo genérico e definições de método genérico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="2c3b9-134">Recuperando um objeto de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="2c3b9-135">O <xref:System.Type> associado com um tipo específico de objeto pode ser obtido das seguintes maneiras:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="2c3b9-136">A instância <xref:System.Object.GetType%2A?displayProperty=nameWithType> método retorna um <xref:System.Type> objeto que representa o tipo de uma instância.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="2c3b9-137">Como todos os tipos gerenciados derivam <xref:System.Object>, o <xref:System.Object.GetType%2A> método pode ser chamado em uma instância de qualquer tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="2c3b9-138">A exemplo a seguir chama o <xref:System.Object.GetType%2A?displayProperty=nameWithType> método para determinar o tipo de tempo de execução de cada objeto em uma matriz de objetos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="2c3b9-139">Estático <xref:System.Type.GetType%2A?displayProperty=nameWithType> métodos retornam um <xref:System.Type> objeto que representa um tipo especificado pelo seu nome totalmente qualificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="2c3b9-140">O <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, e <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> métodos retornam `Type` objetos que representam os tipos definidos em um módulo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="2c3b9-141">O primeiro método pode ser usado para obter uma matriz de <xref:System.Type> objetos para todos os tipos de públicos e privados definidos em um módulo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="2c3b9-142">(Você pode obter uma instância do `Module` por meio de <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> método, ou por meio o <xref:System.Type.Module%2A?displayProperty=nameWithType> propriedade.)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="2c3b9-143">O <xref:System.Reflection.Assembly?displayProperty=nameWithType> objeto contém uma série de métodos para recuperar as classes definidas em um assembly, incluindo <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, e <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="2c3b9-144">O <xref:System.Type.FindInterfaces%2A> método retorna uma lista filtrada de tipos de interface com suporte por um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="2c3b9-145">O <xref:System.Type.GetElementType%2A> método retorna um `Type` objeto que representa o elemento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="2c3b9-146">O <xref:System.Type.GetInterfaces%2A> e <xref:System.Type.GetInterface%2A> métodos retornam <xref:System.Type> objetos que representam os tipos de interface com suporte por um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="2c3b9-147">O <xref:System.Type.GetTypeArray%2A> método retorna uma matriz de <xref:System.Type> objetos que representam os tipos especificados por um conjunto arbitrário de objetos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="2c3b9-148">Os objetos são especificados com uma matriz do tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="2c3b9-149">O <xref:System.Type.GetTypeFromProgID%2A> e <xref:System.Type.GetTypeFromCLSID%2A> métodos são fornecidos para a interoperabilidade COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="2c3b9-150">Elas retornam um <xref:System.Type> objeto que representa o tipo especificado por um `ProgID` ou `CLSID`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="2c3b9-151">O <xref:System.Type.GetTypeFromHandle%2A> método é fornecido para fins de interoperabilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="2c3b9-152">Ele retorna um `Type` objeto que representa o tipo especificado por um identificador de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="2c3b9-153">O c# `typeof` operador, o C++ `typeid` operador e o Visual Basic `GetType` operador obter a `Type` objeto para um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="2c3b9-154">O <xref:System.Type.MakeGenericType%2A> método retorna um <xref:System.Type> objeto que representa um tipo genérico construído, o que é um tipo construído aberto se seus <xref:System.Type.ContainsGenericParameters%2A> propriedade retorna `true`, e um tipo construído caso contrário.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="2c3b9-155">Um tipo genérico pode ser instanciado somente se ele estiver fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="2c3b9-156">O <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, e <xref:System.Type.MakeByRefType%2A> métodos retornam <xref:System.Type> objetos que representam, respectivamente, uma matriz de um tipo especificado, um ponteiro para um tipo especificado e o tipo de um parâmetro de referência (`ref` no c#, `ByRef`no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="2c3b9-157">Comparando objetos de tipo de igualdade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="2c3b9-158">Um <xref:System.Type> objeto que representa um tipo é exclusivo; ou seja, duas <xref:System.Type> referências de objeto se referem ao mesmo objeto se e somente se eles representarem o mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="2c3b9-159">Isso permite a comparação de <xref:System.Type> objetos usando a igualdade de referência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="2c3b9-160">O exemplo a seguir compara o <xref:System.Type> objetos que representam um número de valores inteiros para determinar se eles são do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-161">O exemplo a seguir mostra alguns recursos representativos de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="2c3b9-162">O c# `typeof` operador (`GetType` operador no Visual Basic `typeid` operador no Visual C++) é usado para obter uma <xref:System.Type> objeto representando <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="2c3b9-163">Neste <xref:System.Type> objeto, o <xref:System.Type.GetMethod%2A> método é usado para obter uma <xref:System.Reflection.MethodInfo> que representa o <xref:System.String.Substring%2A> sobrecarga que utiliza um local inicial e um comprimento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="2c3b9-164">Para identificar a assinatura de sobrecarga, o exemplo de código cria uma matriz temporária que contém duas <xref:System.Type> objetos que representam `int` (`Integer` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-165">Para ser preciso, a matriz contém duas referências à instância do <xref:System.Type> que representa `int` no domínio do aplicativo atual.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="2c3b9-166">Para qualquer tipo, há apenas uma instância de <xref:System.Type> por domínio de aplicativo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="2c3b9-167">O exemplo de código usa o <xref:System.Reflection.MethodInfo> para invocar o <xref:System.String.Substring%2A> método na cadeia de caracteres "Olá, mundo!" e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="2c3b9-168">Este tipo é thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c3b9-168">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="2c3b9-169">Ao herdar da <see langword="Type" />, você deve substituir os seguintes membros:</span>
        <span class="sxs-lookup">
          <span data-stu-id="2c3b9-169">When you inherit from <see langword="Type" />, you must override the following members:</span>
        </span> 
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" /><span data-ttu-id="2c3b9-170">
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span><span class="sxs-lookup"><span data-stu-id="2c3b9-170">
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span></span> 
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para>
    </block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/viewing-type-information.md">
      <span data-ttu-id="2c3b9-171">Exibindo informações de tipo</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c3b9-171">Viewing Type Information</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-172">Inicializa uma nova instância da classe <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-172">Initializes a new instance of the <see cref="T:System.Type" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-173">Este construtor é chamado por classes derivadas durante a construção de objetos do tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-173">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Type.Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-174">Obtém o <see cref="T:System.Reflection.Assembly" /> no qual o tipo é declarado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-174">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span>
          </span>
          <span data-ttu-id="2c3b9-175">Para tipos genéricos, obtém o <see cref="T:System.Reflection.Assembly" /> no qual o tipo genérico é definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-175">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-176">Uma instância de <see cref="T:System.Reflection.Assembly" /> que descreve o assembly que contém o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-176">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
          <span data-ttu-id="2c3b9-177">Para tipos genéricos, a instância descreve o assembly que contém a definição de tipo genérico, não o assembly que cria e usa um tipo construído específico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-177">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-178">Se o atual <xref:System.Type> objeto representa um tipo genérico construído, essa propriedade retorna o assembly que contém a definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-178">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="2c3b9-179">Por exemplo, suponha que você cria um assembly denominado MyGenerics.dll que contém a definição de tipo genérico `MyGenericStack<T>` (`MyGenericStack(Of T)` no Visual Basic, `generic<T> ref class MyGenericStack` em C++).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-179">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="2c3b9-180">Se você criar uma instância do `MyGenericStack<int>` (`MyGenericStack(Of Integer)` no Visual Basic) em outro assembly, o <xref:System.Type.Assembly%2A> propriedade para o tipo construído retorna um <xref:System.Reflection.Assembly> objeto que representa o MyGenerics.dll.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-180">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="2c3b9-181">Da mesma forma, se o atual <xref:System.Type> objeto representa um parâmetro genérico não atribuído `T`, essa propriedade retorna o assembly que contém o tipo genérico que define `T`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-181">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="2c3b9-182">Se o <xref:System.Type.Assembly%2A?displayProperty=nameWithType> propriedade não está disponível em uma implementação específica do .NET, como .NET Core ou a plataforma Universal do Windows, use o <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> propriedade em vez disso.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-182">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="2c3b9-183">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-183">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-184">O exemplo a seguir exibe o nome do assembly associado à classe e o nome totalmente qualificado do tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-184">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-185">Obtém o nome do tipo qualificado pelo assembly, que inclui o nome do assembly do qual este objeto <see cref="T:System.Type" /> foi carregado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-185">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-186">O nome qualificado pelo assembly do <see cref="T:System.Type" />, que inclui o nome do assembly do qual o <see cref="T:System.Type" /> foi carregado, ou <see langword="null" /> se a instância atual representa um parâmetro de tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-186">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-187">O nome qualificado pelo assembly de um tipo consiste do nome do tipo, incluindo o namespace, seguido por uma vírgula, seguida pelo nome de exibição do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-187">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="2c3b9-188">O nome de exibição de um assembly é obtido usando o <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-188">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-189">No .NET Framework versão 2.0, a arquitetura do processador é adicionada à identidade do assembly e pode ser especificada como parte das cadeias de caracteres de nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-189">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="2c3b9-190">Por exemplo, "ProcessorArchitecture=msil".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-190">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="2c3b9-191">No entanto, ele não está incluído na cadeia de caracteres retornada pela propriedade <xref:System.Type.AssemblyQualifiedName%2A>, por motivos de compatibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-191">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="2c3b9-192">Consulte <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-192">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2c3b9-193">O nome simples de uma classe aninhada da emissão de todos os compiladores que dão suporte a common language runtime e reflexão constrói um nome danificado quando consultado, de acordo com as convenções a seguir.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-193">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="2c3b9-194">Delimitador</span><span class="sxs-lookup"><span data-stu-id="2c3b9-194">Delimiter</span></span>|<span data-ttu-id="2c3b9-195">Significado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-195">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="2c3b9-196">Barra invertida (\\)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-196">Backslash (\\)</span></span>|<span data-ttu-id="2c3b9-197">Caractere de escape.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-197">Escape character.</span></span>|  
|<span data-ttu-id="2c3b9-198">Vírgula (,)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-198">Comma (,)</span></span>|<span data-ttu-id="2c3b9-199">Precede o nome Assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-199">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="2c3b9-200">Sinal de adição (+)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-200">Plus sign (+)</span></span>|<span data-ttu-id="2c3b9-201">Precede uma classe aninhada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-201">Precedes a nested class.</span></span>|  
|<span data-ttu-id="2c3b9-202">Ponto final (.)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-202">Period (.)</span></span>|<span data-ttu-id="2c3b9-203">Denota identificadores de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-203">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="2c3b9-204">Colchetes ([])</span><span class="sxs-lookup"><span data-stu-id="2c3b9-204">Brackets ([])</span></span>|<span data-ttu-id="2c3b9-205">Depois de um nome de tipo, indica uma matriz desse tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-205">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="2c3b9-206">- ou -</span><span class="sxs-lookup"><span data-stu-id="2c3b9-206">-or-</span></span><br /><br /> <span data-ttu-id="2c3b9-207">Para um tipo genérico, inclui a lista de argumentos de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-207">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="2c3b9-208">- ou -</span><span class="sxs-lookup"><span data-stu-id="2c3b9-208">-or-</span></span><br /><br /> <span data-ttu-id="2c3b9-209">Dentro de uma lista de argumentos de tipo, inclui um tipo qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-209">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="2c3b9-210">Por exemplo, o nome qualificado do assembly para uma classe pode ser assim:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-210">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="2c3b9-211">Se o namespace contivesse um sinal de adição, por exemplo, TopNamespace.Sub+Namespace, então, no sinal de adição (+) deve ser precedido por um caractere de escape (\\) para impedir que ela seja interpretado como um separador de aninhamento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-211">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="2c3b9-212">Seria a emissão de reflexão essa cadeia de caracteres da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-212">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="2c3b9-213">Um "+ +" torna-se "\\+\\+" e um "\\"torna-se"\\\\".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-213">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="2c3b9-214">Este nome qualificado pode ser mantido e posteriormente usado para carregar o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-214">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="2c3b9-215">Para procurar e carregar <xref:System.Type>, use <xref:System.Type.GetType%2A> apenas com o nome do tipo ou com o nome do tipo qualificado do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-215">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="2c3b9-216"><xref:System.Type.GetType%2A> com o nome de tipo só irá procurar o <xref:System.Type> no assembly do chamador e, em seguida, no assembly System.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-216"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="2c3b9-217"><xref:System.Type.GetType%2A> com o nome de tipo qualificado de assembly irá procurar o <xref:System.Type> em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-217"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="2c3b9-218">Nomes de tipo podem incluir caracteres à direita que denotam informações adicionais sobre o tipo, como se o tipo é um tipo de referência, ponteiro ou matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-218">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="2c3b9-219">Para recuperar o nome do tipo sem esses caracteres à direita, use `t.GetElementType().ToString()`, em que `t` é o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-219">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="2c3b9-220">Espaços são relevantes em todos os componentes de nome do tipo, exceto o nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-220">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="2c3b9-221">No nome do assembly, espaços antes do separador ',' são relevantes, mas espaços depois do separador ',' são ignorados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-221">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="2c3b9-222">Argumentos genéricos de tipos genéricos são as próprias qualificado pelo nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-222">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="2c3b9-223">Por exemplo, no nome de tipo qualificado pelo assembly `MyGenericClass<int>` (`MyGenericClass(Of Integer)` no Visual Basic), `int` é expandido para o nome de tipo qualificado pelo assembly <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-223">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="2c3b9-224">Se o atual <xref:System.Type> objeto representa um parâmetro genérico, essa propriedade retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-224">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-225">O exemplo a seguir exibe o nome do assembly associado à classe e o nome totalmente qualificado do tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-225">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="2c3b9-226">O exemplo a seguir compara as cadeias de caracteres retornadas pela <xref:System.Type.ToString%2A> método e o `Name`, <xref:System.Type.FullName%2A>, e <xref:System.Type.AssemblyQualifiedName%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-226">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-227">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-227">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Type.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-228">Obtém os atributos associados ao <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-228">Gets the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-229">Um objeto <see cref="T:System.Reflection.TypeAttributes" /> que representa o conjunto de atributos do <see cref="T:System.Type" />, a menos que <see cref="T:System.Type" /> represente um parâmetro de tipo genérico; nesse caso, o valor não é especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-229">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-230">Alguns membros o <xref:System.Reflection.TypeAttributes> enumeração são máscaras que representam um grupo de valores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-230">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="2c3b9-231">Cada grupo inclui um membro cujo valor subjacente for zero.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-231">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="2c3b9-232">Por exemplo, o valor subjacente do <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> membro na <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> grupo for zero, como é o <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> membro no <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> grupo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-232">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="2c3b9-233">Por isso, você deve usar a máscara antes de testar para obter esses valores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-233">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="2c3b9-234">O exemplo fornece uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-234">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="2c3b9-235">Para a maioria das finalidades, as propriedades como <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, e <xref:System.Type.IsSpecialName%2A> são mais fáceis de usar do que os atributos de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-235">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="2c3b9-236">Se o atual <xref:System.Type> representa um tipo genérico construído, essa propriedade retorna os atributos da definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-236">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="2c3b9-237">Por exemplo, os atributos retornados para `MyGenericClass<int>` (`MyGenericClass(Of Integer)` no Visual Basic) são os atributos do `MyGenericClass<T>` (`MyGenericClass(Of T)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-237">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="2c3b9-238">Se atual <xref:System.Type> representa um parâmetro de tipo genérico — ou seja, se o <xref:System.Type.IsGenericParameter%2A> propriedade retorna `true` — o <xref:System.Reflection.TypeAttributes> valor retornado por essa propriedade não for especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-238">If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-239">A seguir usa de exemplo os <xref:System.Type.Attributes%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-239">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Type.BaseType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-240">Obtém o tipo do qual o <see cref="T:System.Type" /> atual é herdado diretamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-240">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-241">O <see cref="T:System.Type" /> do qual o <see cref="T:System.Type" /> atual é herdado diretamente ou <see langword="null" /> se o <see langword="Type" /> atual representar a classe <see cref="T:System.Object" /> ou uma interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-241">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-242">O tipo base é o tipo do qual o tipo atual herda diretamente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-242">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="2c3b9-243"><xref:System.Object> é o único tipo que não tem um tipo base, portanto `null` é retornado como o tipo base do <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-243"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="2c3b9-244">Interfaces de herdam de interfaces de base zero ou mais; Portanto, essa propriedade retornará `null` se o `Type` objeto representa uma interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-244">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="2c3b9-245">As interfaces base podem ser determinadas com <xref:System.Type.GetInterfaces%2A> ou <xref:System.Type.FindInterfaces%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-245">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="2c3b9-246">Se o atual <xref:System.Type> representa um tipo genérico construído, o tipo base reflete os argumentos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-246">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="2c3b9-247">Por exemplo, considere as declarações a seguir:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-247">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="2c3b9-248">Para o tipo construído `C<int>` (`C(Of Integer)` no Visual Basic), o <xref:System.Type.BaseType%2A> propriedade retorna `B<int>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-248">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="2c3b9-249">Se o atual <xref:System.Type> representa um parâmetro de tipo de uma definição de tipo genérico, <xref:System.Type.BaseType%2A> retorna a restrição de classe, ou seja, a classe que o parâmetro de tipo deve herdar.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-249">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="2c3b9-250">Se não houver nenhuma restrição de classe <xref:System.Type.BaseType%2A> retorna <xref:System.Object?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-250">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2c3b9-251">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-251">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-252">O exemplo a seguir demonstra como usar o <xref:System.Type.BaseType%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-252">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="2c3b9-253">O exemplo a seguir usa a recursão para listar a hierarquia completa de herança de cada classe encontrado em um assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-253">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="2c3b9-254">O exemplo define uma classe chamada `C` que deriva de uma classe chamada `B`, que, por sua vez, deriva uma classe chamada `A`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-254">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-255">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-255">Reflection and Generic Types</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Type.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-256">Obtém um valor que indica se o objeto <see cref="T:System.Type" /> atual tem parâmetros de tipo que não foram substituídos por tipos específicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-256">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-257">
            <see langword="true" /> se o <see cref="T:System.Type" /> objeto é um parâmetro de tipo genérico ou tem parâmetros de tipo para os quais tipos específicos não foram fornecidos; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-257">
              <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-258">Para criar uma instância de um tipo, não deve haver definições de tipo genérico ou tipos construídos abertos nos argumentos de tipo do tipo em si, em quaisquer tipos genéricos ou em todos os elementos do tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-258">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="2c3b9-259">Outra maneira de dizer isso é que, quando examinada recursivamente, o tipo não deve conter nenhum parâmetro de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-259">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="2c3b9-260">Como tipos podem ser arbitrariamente complexos, é difícil tomar essa decisão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-260">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="2c3b9-261">Para conveniência e para reduzir a chance de erro, o <xref:System.Type.ContainsGenericParameters%2A> propriedade fornece uma maneira padrão para distinguir entre tipos construídos fechados, que podem ser instanciados e aberta construído tipos, que não é possível.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-261">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="2c3b9-262">Se o <xref:System.Type.ContainsGenericParameters%2A> propriedade retorna `true`, o tipo não pode ser instanciado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-262">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="2c3b9-263">O <xref:System.Type.ContainsGenericParameters%2A> propriedade pesquisa recursivamente para parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-263">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="2c3b9-264">Por exemplo, ele retorna `true` para uma matriz cujos elementos são o tipo `A<T>` (`A(Of T)` no Visual Basic), mesmo que a matriz não é em si genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-264">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="2c3b9-265">Compare isso com o comportamento do <xref:System.Type.IsGenericType%2A> propriedade, que retorna `false` para matrizes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-265">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="2c3b9-266">Para um conjunto de classes de exemplo e uma tabela que mostra os valores de <xref:System.Type.ContainsGenericParameters%2A> propriedade, consulte <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-266">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-267">O exemplo a seguir define uma classe genérica com dois parâmetros de tipo e, em seguida, define uma segunda classe genérica que deriva de primeira classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-267">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="2c3b9-268">Classe base a classe derivada da tem dois argumentos de tipo: o primeiro é <xref:System.Int32> e o segundo é um parâmetro de tipo do tipo derivado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-268">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="2c3b9-269">O exemplo exibe informações sobre essas classes genéricas, incluindo as posições relatados pelo <xref:System.Type.GenericParameterPosition%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-269">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-270">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-270">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-271">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-271">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Type.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-272">Obtém um <see cref="T:System.Reflection.MethodBase" /> que representa o método declarativo, se o <see cref="T:System.Type" /> atual representa um parâmetro de tipo de um método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-272">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-273">Se o <see cref="T:System.Type" /> atual representa um parâmetro de tipo de um método genérico, um <see cref="T:System.Reflection.MethodBase" /> que representa o método declarativo; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-273">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-274">O método declarativo é uma definição de método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-274">The declaring method is a generic method definition.</span></span> <span data-ttu-id="2c3b9-275">Ou seja, se <xref:System.Type.DeclaringMethod%2A> não retorna `null`, em seguida, `DeclaringMethod.IsGenericMethodDefinition` retorna `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-275">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="2c3b9-276">O <xref:System.Type.DeclaringType%2A> e <xref:System.Type.DeclaringMethod%2A> propriedades identificam a definição de tipo genérico ou definição de método genérico no qual o parâmetro de tipo genérico foi originalmente definido:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-276">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="2c3b9-277">Se o <xref:System.Type.DeclaringMethod%2A> propriedade retorna um <xref:System.Reflection.MethodInfo>, que <xref:System.Reflection.MethodInfo> representa uma definição de método genérico e atual <xref:System.Type> objeto representa um parâmetro de tipo dessa definição de método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-277">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="2c3b9-278">Se o <xref:System.Type.DeclaringMethod%2A> propriedade retorna `null`, em seguida, a <xref:System.Type.DeclaringType%2A> propriedade sempre retorna um <xref:System.Type> que representa uma definição de tipo genérico e atual do objeto <xref:System.Type> objeto representa um parâmetro de tipo desse tipo genérico definição.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-278">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="2c3b9-279">Introdução a <xref:System.Type.DeclaringMethod%2A> propriedade em um tipo cujo <xref:System.Type.IsGenericParameter%2A> é de propriedade `false` lança um <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-279">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="2c3b9-280">O <xref:System.Reflection.MethodBase> que é retornado pela <xref:System.Type.DeclaringMethod%2A> propriedade é um <xref:System.Reflection.MethodInfo> no caso de um método genérico, ou um <xref:System.Reflection.ConstructorInfo> no caso de um construtor genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-280">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-281">No .NET Framework versão 2.0, não há suporte para construtores genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-281">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="2c3b9-282">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-282">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-283">O exemplo de código a seguir define uma classe que tem um método genérico, atribui um argumento de tipo para o método e invoca o método genérico construído resultante.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-283">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="2c3b9-284">Ele também exibe informações sobre a definição de método genérico e o método construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-284">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="2c3b9-285">Ao exibir informações sobre os parâmetros de tipo da definição de método genérico, na `DisplayGenericMethodInfo` método, o código de exemplo mostra o valor da <xref:System.Type.DeclaringMethod%2A> propriedade para o parâmetro de tipo genérico do método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-285">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-286">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-286">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-287">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-287">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-288">Obtém o tipo que declara o tipo aninhado atual ou o parâmetro de tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-288">Gets the type that declares the current nested type or generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-289">Um objeto <see cref="T:System.Type" /> que representará o tipo de delimitador se o tipo atual for um tipo aninhado, a definição de tipo genérico se o tipo atual for um parâmetro de tipo de um tipo genérico ou o tipo que declara o método genérico se o tipo atual for um parâmetro de tipo de um método genérico. Caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-289">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-290">Se o atual <xref:System.Type> objeto representa um parâmetro de tipo de um tipo genérico, essa propriedade retorna a definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-290">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="2c3b9-291">Se o atual <xref:System.Type> objeto representa um parâmetro de tipo de um método genérico, essa propriedade retorna o tipo que contém a definição de método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-291">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="2c3b9-292">Se o tipo for genérico, definição de tipo genérico é retornada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-292">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="2c3b9-293">Ou seja, o código a seguir retorna a definição de tipo genérico de <xref:System.Collections.Generic.List%601> classe genérica, que contém o <xref:System.Collections.Generic.List%601.ConvertAll%2A> método genérico:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-293">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="2c3b9-294">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, o <xref:System.Type.DeclaringType%2A> e <xref:System.Type.DeclaringMethod%2A> propriedades identificam a definição de tipo genérico ou definição de método genérico em que o parâmetro de tipo genérico foi originalmente definido:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-294">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="2c3b9-295">Se o <xref:System.Type.DeclaringMethod%2A> propriedade retorna um <xref:System.Reflection.MethodInfo>, que <xref:System.Reflection.MethodInfo> representa uma definição de método genérico e atual <xref:System.Type> objeto representa um parâmetro de tipo dessa definição de método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-295">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="2c3b9-296">Se o <xref:System.Type.DeclaringMethod%2A> propriedade retorna `null`, em seguida, a <xref:System.Type.DeclaringType%2A> propriedade sempre retorna um <xref:System.Type> que representa uma definição de tipo genérico e atual do objeto <xref:System.Type> objeto representa um parâmetro de tipo desse tipo genérico definição.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-296">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="2c3b9-297">Introdução a <xref:System.Type.DeclaringType%2A> propriedade em um tipo cujo <xref:System.Type.IsGenericParameter%2A> é de propriedade `false` lança um <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-297">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-298">Este exemplo exibe o tipo de declaração de um método em uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-298">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBinder : System.Reflection.Binder" Usage="System.Type.DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-299">Obtém uma referência ao associador padrão, que implementa regras internas para selecionar os membros adequados a serem chamados por <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-299">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-300">Uma referência ao associador padrão usado pelo sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-300">A reference to the default binder used by the system.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-301">O associador padrão fornecido com o common language runtime é aplicável em todas, exceto as circunstâncias mais especializadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-301">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="2c3b9-302">Se você precisar de um associador que segue as regras que diferem do associador padrão fornecido, definem um tipo derivado do <xref:System.Reflection.Binder> de classe e passar uma instância desse tipo usando o `binder` parâmetro de um do <xref:System.Type.InvokeMember%2A> sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-302">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="2c3b9-303">Reflexão modela as regras de acessibilidade do common type system.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-303">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="2c3b9-304">Por exemplo, se o chamador estiver no mesmo assembly, o chamador não precisar permissões especiais para membros internos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-304">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="2c3b9-305">Caso contrário, o chamador precisa <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-305">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="2c3b9-306">Isso é consistente com a pesquisa de membros que são protegidas, privadas e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-306">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-307">O princípio geral é que <xref:System.Reflection.Binder.ChangeType%2A> deve executar somente conversões, que nunca perdem dados de ampliação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-307">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="2c3b9-308">Um exemplo de uma conversão de ampliação está convertendo um valor que é um inteiro com sinal de 32 bits para um valor que é um inteiro com sinal de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-308">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="2c3b9-309">Isso é diferenciado de uma conversão de estreitamento, que poderá perder dados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-309">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="2c3b9-310">Um exemplo de uma conversão redutora é converter um inteiro com sinal de 64 bits em um inteiro com sinal de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-310">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="2c3b9-311">A tabela a seguir lista as conversões com suporte pelo associador de padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-311">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="2c3b9-312">Tipo de fonte</span><span class="sxs-lookup"><span data-stu-id="2c3b9-312">Source Type</span></span>|<span data-ttu-id="2c3b9-313">Tipo de destino</span><span class="sxs-lookup"><span data-stu-id="2c3b9-313">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="2c3b9-314">Qualquer tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-314">Any type</span></span>|<span data-ttu-id="2c3b9-315">Seu tipo base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-315">Its base type.</span></span>|  
|<span data-ttu-id="2c3b9-316">Qualquer tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-316">Any type</span></span>|<span data-ttu-id="2c3b9-317">A interface que ele implementa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-317">The interface it implements.</span></span>|  
|<span data-ttu-id="2c3b9-318">Char</span><span class="sxs-lookup"><span data-stu-id="2c3b9-318">Char</span></span>|<span data-ttu-id="2c3b9-319">Unt16, UInt32, Int32, UInt64, Int64, Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-319">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-320">Byte</span><span class="sxs-lookup"><span data-stu-id="2c3b9-320">Byte</span></span>|<span data-ttu-id="2c3b9-321">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-321">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-322">SByte</span><span class="sxs-lookup"><span data-stu-id="2c3b9-322">SByte</span></span>|<span data-ttu-id="2c3b9-323">Int16, Int32, Int64, Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-323">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-324">UInt16</span><span class="sxs-lookup"><span data-stu-id="2c3b9-324">UInt16</span></span>|<span data-ttu-id="2c3b9-325">UInt32, Int32, UInt64, Int64, Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-325">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-326">Int16</span><span class="sxs-lookup"><span data-stu-id="2c3b9-326">Int16</span></span>|<span data-ttu-id="2c3b9-327">Int32, Int64, Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-327">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-328">UInt32</span><span class="sxs-lookup"><span data-stu-id="2c3b9-328">UInt32</span></span>|<span data-ttu-id="2c3b9-329">UInt64, Int64, Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-329">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-330">Int32</span><span class="sxs-lookup"><span data-stu-id="2c3b9-330">Int32</span></span>|<span data-ttu-id="2c3b9-331">Int64, Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-331">Int64, Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-332">UInt64</span><span class="sxs-lookup"><span data-stu-id="2c3b9-332">UInt64</span></span>|<span data-ttu-id="2c3b9-333">Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-333">Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-334">Int64</span><span class="sxs-lookup"><span data-stu-id="2c3b9-334">Int64</span></span>|<span data-ttu-id="2c3b9-335">Single e Double</span><span class="sxs-lookup"><span data-stu-id="2c3b9-335">Single, Double</span></span>|  
|<span data-ttu-id="2c3b9-336">Simples</span><span class="sxs-lookup"><span data-stu-id="2c3b9-336">Single</span></span>|<span data-ttu-id="2c3b9-337">Duplo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-337">Double</span></span>|  
|<span data-ttu-id="2c3b9-338">Não referência</span><span class="sxs-lookup"><span data-stu-id="2c3b9-338">Non-reference</span></span>|<span data-ttu-id="2c3b9-339">Por referência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-339">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-340">O exemplo a seguir obtém o associador padrão a `DefaultBinder` propriedade e invoca um membro de MyClass, passando a `DefaultBinder` valor como um parâmetro para <xref:System.Type.InvokeMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-340">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Delimiter : char" Usage="System.Type.Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-341">Separa nomes no namespace de <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-341">Separates names in the namespace of the <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-342">Este campo é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-342">This field is read-only.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberSignature Language="F#" Value=" staticval mutable EmptyTypes : Type[]" Usage="System.Type.EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-343">Representa uma matriz vazia do tipo <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-343">Represents an empty array of type <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-344">Este campo é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-344">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2c3b9-345">O seguinte exemplo de código mostra a `EmptyTypes` campo usado em uma da `GetConstructor` métodos para obter um construtor sem parâmetros.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-345">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-346">Determina se o tipo de sistema subjacente do <see cref="T:System.Type" /> atual é o mesmo que o tipo de sistema subjacente do <see cref="T:System.Object" /> ou <see cref="T:System.Type" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-346">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="2c3b9-347">O objeto cujo tipo subjacente do sistema a ser comparado com o tipo de sistema subjacente do atual <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-347">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-348">Para que a comparação seja bem-sucedida, <c>o</c> deve ser capaz de ser convertido em um objeto do tipo <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-348">For the comparison to succeed, <c>o</c> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-349">Determina se o tipo de sistema subjacente do objeto <see cref="T:System.Type" /> atual é o mesmo que o tipo de sistema subjacente do <see cref="T:System.Object" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-349">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-350">
            <see langword="true" /> se o tipo de sistema subjacente do <paramref name="o" /> for o mesmo que o tipo de sistema subjacente do <see cref="T:System.Type" /> atual; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-350">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2c3b9-351">Esse método sempre retorna <see langword="false" /> se: .</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-351">This method also returns <see langword="false" /> if: .</span>
          </span>
          <span data-ttu-id="2c3b9-352">
-   <paramref name="o" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-352">
-   <paramref name="o" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-353">
-   <paramref name="o" /> não pode ser convertido em um objeto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-353">
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-354">Este método substitui <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-354">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2c3b9-355">Ele projeta `o` a um objeto do tipo <xref:System.Type> e chama o <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-355">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-356">O exemplo a seguir usa <xref:System.Type.Equals%28System.Object%29> para comparar vários <xref:System.Type> objeto instâncias com vários <xref:System.Object> instâncias.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-356">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="2c3b9-357">Duas coisas são particularmente vale a pena observar sobre o exemplo:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-357">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="2c3b9-358">A comparação de um <xref:System.Type> objeto que representa um inteiro com um <xref:System.Reflection.TypeInfo> objeto que representa um inteiro de retorno `true` porque <xref:System.Reflection.TypeInfo> é derivado de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-358">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="2c3b9-359">A comparação de um <xref:System.Type> objeto que representa uma <xref:System.Collections.Generic.IList%601> objeto (um tipo genérico aberto) com um `List(Of String)` retorna o objeto (um tipo genérico fechado) `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-359">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : Type -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="2c3b9-360">O objeto cujo tipo subjacente do sistema a ser comparado com o tipo de sistema subjacente do atual <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-360">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-361">Determina se o tipo de sistema subjacente do <see cref="T:System.Type" /> atual é o mesmo que o tipo de sistema subjacente do <see cref="T:System.Type" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-361">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-362">
            <see langword="true" /> se o tipo de sistema subjacente do <paramref name="o" /> for o mesmo que o tipo de sistema subjacente do <see cref="T:System.Type" /> atual; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-362">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2c3b9-363">O exemplo a seguir usa `Equals` para comparar dois tipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-363">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterAttribute : System.Reflection.MemberFilter" Usage="System.Type.FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-364">Representa o filtro de membro usado em atributos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-364">Represents the member filter used on attributes.</span>
          </span>
          <span data-ttu-id="2c3b9-365">Este campo é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-365">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-366">Este campo contém uma referência ao delegado usado pelo <xref:System.Type.FindMembers%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-366">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="2c3b9-367">O método encapsulado por esse delegado utiliza dois parâmetros: a primeira é uma <xref:System.Reflection.MemberInfo> objeto e o segundo é um `Object`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-367">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="2c3b9-368">O método determina se o `MemberInfo` objeto corresponde aos critérios especificados pelo `Object`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-368">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="2c3b9-369">O `Object` pode ser atribuído o valor de qualquer um dos campos nas classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, ou <xref:System.Reflection.MethodImplAttributes>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-369">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="2c3b9-370">Por exemplo, o `Object` pode ser atribuído o valor de um campo de `FieldAttributes` como público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-370">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="2c3b9-371">Nesse caso, quando o `FilterAttribute` delegado é invocado, ele retornará `true` somente se o método representado pelo `MemberInfo` objeto é decorado com o atributo de campo público nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-371">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-372">O exemplo a seguir obtém a `FilterAttribute` representante, passa-o como um parâmetro para o <xref:System.Type.FindMembers%2A> método e exibe os membros especificados e seus atributos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-372">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterName : System.Reflection.MemberFilter" Usage="System.Type.FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-373">Representa o filtro de membro, que diferencia maiúsculas de minúsculas, usado nos nomes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-373">Represents the case-sensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="2c3b9-374">Este campo é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-374">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-375">Este campo contém uma referência ao delegado usado pelo <xref:System.Type.FindMembers%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-375">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="2c3b9-376">O método encapsulado por esse delegado utiliza dois parâmetros: a primeira é uma <xref:System.Reflection.MemberInfo> objeto e o segundo é um `Object`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-376">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="2c3b9-377">O método determina se o `MemberInfo` objeto corresponde aos critérios especificados pelo `Object`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-377">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="2c3b9-378">O `Object` é atribuído um valor de cadeia de caracteres, que pode incluir à direita "\*" caractere curinga.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-378">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="2c3b9-379">Correspondência de cadeia de caracteres de final de curinga só tem suporte.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-379">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="2c3b9-380">Por exemplo, o `Object` pode ser atribuído o valor de "Byte \*".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-380">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="2c3b9-381">Nesse caso, quando o `FilterName` delegado é invocado, ele retornará `true` somente se o método representado pelo `MemberInfo` objeto tem um nome que começa com "Byte".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-381">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-382">O exemplo de código a seguir obtém os métodos associados definido pelo usuário `Application` tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-382">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterNameIgnoreCase : System.Reflection.MemberFilter" Usage="System.Type.FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-383">Representa o filtro de membro, que não diferencia maiúsculas de minúsculas, usado nos nomes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-383">Represents the case-insensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="2c3b9-384">Este campo é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-384">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-385">Este campo contém uma referência ao delegado usado pelo <xref:System.Type.FindMembers%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-385">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="2c3b9-386">O método encapsulado por esse delegado utiliza dois parâmetros: a primeira é uma <xref:System.Reflection.MemberInfo> objeto e o segundo é um `Object`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-386">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="2c3b9-387">O método determina se o `MemberInfo` objeto corresponde aos critérios especificados pelo `Object`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-387">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="2c3b9-388">O `Object` é atribuído um valor de cadeia de caracteres, que pode incluir à direita "\*" caractere curinga.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-388">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="2c3b9-389">Correspondência de cadeia de caracteres de final de curinga só tem suporte.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-389">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="2c3b9-390">Por exemplo, o `Object` pode ser atribuído o valor de "ByTe \*".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-390">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="2c3b9-391">Nesse caso, quando o `FilterName` delegado é invocado, ele retornará true somente se o método representado pelo `MemberInfo` objeto tem um nome que começa com "byte", ignorando maiusculas e minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-391">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-392">O exemplo a seguir obtém a `MemberFilter` representante, passa-o como um parâmetro para o <xref:System.Type.FindMembers%2A> método e exibe os métodos e seus atributos do `String` classe que começam com a letra "c", desconsiderando o caso.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-392">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]&#xA;override this.FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="2c3b9-393">O delegado que compara as interfaces com <c>filterCriteria</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-393">The delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="2c3b9-394">Os critérios de pesquisa que determinam se uma interface deve ser incluída na matriz retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-394">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-395">Retorna uma matriz de objetos <see cref="T:System.Type" /> que representa uma lista filtrada das interfaces implementadas ou herdadas pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-395">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-396">Uma matriz de objetos <see cref="T:System.Type" /> que representam uma lista filtrada das interfaces implementadas ou herdadas pelo <see cref="T:System.Type" /> atual ou uma matriz vazia do tipo <see cref="T:System.Type" /> se nenhuma interface correspondente ao filtro estiver implementada ou for herdada pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-396">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-397">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-397">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="2c3b9-398">O <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> e <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegados fornecidos pelo <xref:System.Reflection.Module?displayProperty=nameWithType> classe também pode ser usada, substitui o <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegar.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-398">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="2c3b9-399">Todas as interfaces implementadas por esta classe são consideradas durante a pesquisa se declaradas por essa classe em si ou uma classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-399">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="2c3b9-400">Esse método pesquisará a hierarquia de classe base, retornando cada uma das interfaces correspondentes que cada classe implemente, bem como todas as correspondentes interfaces de cada uma implementa essas interfaces (ou seja, o fechamento transitivo de interfaces de correspondência é retornado).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-400">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="2c3b9-401">Interfaces não duplicado será retornado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-401">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="2c3b9-402">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, <xref:System.Type.FindInterfaces%2A> pesquisas de todas as interfaces declaradas dentro das restrições no parâmetro de tipo, e todas as interfaces herdadas por meio de interfaces declarado dentro das restrições.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-402">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="2c3b9-403">Se o atual <xref:System.Type> representa um argumento de tipo de um tipo genérico, <xref:System.Type.FindInterfaces%2A> pesquisará todas as interfaces implementadas pelo tipo, se eles corresponderem às restrições.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-403">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-404"><xref:System.Type.FindInterfaces%2A> pode retornar as interfaces genéricas, mesmo em tipos não genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-404"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="2c3b9-405">Por exemplo, um tipo não genérico pode implementar `IEnumerable<int>` (`IEnumerable(Of Integer)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-405">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-406">O exemplo a seguir localiza a interface especificada implementada ou herdada pelo tipo especificado e, em seguida, exibe os nomes de interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-406">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-407">
            <paramref name="filter" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-407">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-408">Um inicializador estático é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-408">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]&#xA;override this.FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="2c3b9-409">Um objeto que indica o tipo de membro a ser pesquisado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-409">An object that indicates the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-410">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-410">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-411">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-411">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-412">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-412">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="2c3b9-413">O delegado que faz as comparações, retornando <see langword="true" /> se o membro inspecionado no momento corresponder ao <c>filterCriteria</c>; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-413">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="2c3b9-414">Use os delegados <see langword="FilterAttribute" />, <see langword="FilterName" /> e <see langword="FilterNameIgnoreCase" /> fornecidos por essa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-414">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="2c3b9-415">O primeiro usa os campos <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> como critérios de pesquisa e os outros dois delegados usam objetos <see langword="String" /> como critérios de pesquisa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-415">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="2c3b9-416">Os critérios de pesquisa que determinam se um membro é retornado na matriz de objetos <see langword="MemberInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-416">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="2c3b9-417">Os campos de <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> podem ser usados em conjunto com o delegado <see langword="FilterAttribute" /> fornecido por essa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-417">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-418">Retorna uma matriz filtrada de objetos <see cref="T:System.Reflection.MemberInfo" /> do tipo do membro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-418">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-419">Uma matriz filtrada de objetos <see cref="T:System.Reflection.MemberInfo" /> do tipo de membro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-419">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="2c3b9-420">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-420">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-421">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se o <see cref="T:System.Type" /> atual não tiver membros do tipo <paramref name="memberType" /> que correspondem aos critérios de filtro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-421">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-422">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-422">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="2c3b9-423">Entre os membros estão propriedades, campos, métodos, eventos etc.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-423">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-424">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais membros devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-424">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-425">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-425">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-426">Especifique `BindingFlags.Instance` para incluir membros de instância na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-426">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-427">Especifique `BindingFlags.Static` para incluir membros estáticos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-427">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-428">Especifique `BindingFlags.Public` para incluir membros públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-428">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-429">Especifique `BindingFlags.NonPublic` para incluir membros não públicos (ou seja, membros particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-429">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="2c3b9-430">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-430">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-431">`BindingFlags.DeclaredOnly` para procurar apenas os membros declarados no <xref:System.Type>, e não os membros que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-431">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-432">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-432">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-433">Os valores válidos para <xref:System.Type.MemberType%2A> são definidos em <xref:System.Reflection.MemberInfo>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-433">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="2c3b9-434">Se nenhum desses membros forem encontrados, uma matriz vazia será retornada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-434">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="2c3b9-435">Para obter o inicializador de classe (. cctor) usando esse método, você deve especificar <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-435">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-436">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-436">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-437">Se o atual <xref:System.Type> representa um parâmetro de tipo de um tipo genérico ou método genérico, <xref:System.Type.FindMembers%2A> processa todos os membros declarados pela restrição de classe e as restrições de interface do parâmetro de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-437">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-438">O exemplo a seguir localiza todos os membros em uma classe que correspondem aos critérios de pesquisa especificados e, em seguida, exibe os membros correspondentes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-438">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-439">
            <paramref name="filter" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-439">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Type.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-440">Obtém o nome totalmente qualificado do tipo, incluindo o namespace, mas não o assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-440">Gets the fully qualified name of the type, including its namespace but not its assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-441">O nome totalmente qualificado do tipo, incluindo o namespace, mas não o assembly; ou <see langword="null" />, se a instância atual representar um parâmetro de tipo genérico, um tipo de matriz, um tipo de ponteiro ou um tipo <see langword="byref" /> baseado em um parâmetro de tipo, ou um tipo genérico que não é uma definição de tipo genérica, mas que contém parâmetros de tipo não resolvidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-441">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-442">Por exemplo, o nome totalmente qualificado do <xref:System.String> é do tipo `System.String`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-442">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="2c3b9-443">Compare isso com o nome qualificado pelo assembly retornado pelo <xref:System.Type.AssemblyQualifiedName%2A> propriedade, que consiste o nome completo e o nome completo do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-443">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="2c3b9-444">Se o tipo atual representa um tipo genérico fechado, os argumentos de tipo na cadeia de caracteres retornada pelo <xref:System.Type.FullName%2A> propriedade são qualificados por seu nome completo do assembly, mesmo que a representação de cadeia de caracteres do tipo genérico em si não está qualificada pelo seu completo nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-444">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="2c3b9-445">O exemplo a seguir ilustra a diferença na propriedade FullName para um tipo que representa a definição de tipo genérico e um que representa um tipo genérico fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-445">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="2c3b9-446">Essa propriedade retorna `null` se:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-446">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="2c3b9-447">Atual <xref:System.Type> objeto representa um parâmetro de tipo de um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-447">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="2c3b9-448">O exemplo a seguir recupera o parâmetro de tipo de <xref:System.Nullable%601> tipo e tenta exibir seu <xref:System.Type.FullName%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-448">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="2c3b9-449">O atual <xref:System.Type> objeto representa um tipo de matriz, um tipo de ponteiro ou um `byref` tipo com base em um parâmetro de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-449">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="2c3b9-450">O exemplo a seguir define um tipo genérico, `Generictype1<T>`, com três métodos: `Display(T[])`, que é passado a uma matriz do tipo T; `HandleT(T)`, que é passado um objeto T; e `ChangeValue(ref T)`, que é passado um objeto T por referência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-450">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="2c3b9-451">Como c# e Visual Basic não permitem definir T como um ponteiro na `HandleT` método, precisamos chamar o <xref:System.Type.MakePointerType%2A> método no <xref:System.Type> objeto que representa o tipo de parâmetro do método para criar um ponteiro para um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-451">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="2c3b9-452">A saída do exemplo mostra que em todos os três casos, o <xref:System.Type.FullName%2A> é de propriedade `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-452">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="2c3b9-453">O tipo atual contém parâmetros de tipo genérico que não foram substituídos por tipos específicos (ou seja, o <xref:System.Type.ContainsGenericParameters%2A> propriedade retorna `true`), mas o tipo não é uma definição de tipo genérico (ou seja, o <xref:System.Type.IsGenericTypeDefinition%2A> retorna de propriedade `false`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-453">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="2c3b9-454">No exemplo a seguir `Derived<T>` herda de `Base<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-454">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="2c3b9-455">O <xref:System.Type.BaseType%2A> propriedade obtém o <xref:System.Type> objeto que representa o tipo base `Derived<T>`e sua <xref:System.Type.FullName%2A> propriedade retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-455">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="2c3b9-456">Para obter um <xref:System.Type.FullName%2A> que não é `null`, você pode usar o <xref:System.Type.GetGenericTypeDefinition%2A> método para obter a definição de tipo genérico, como mostra o exemplo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-456">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="2c3b9-457">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-457">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-458">O exemplo a seguir exibe o nome completo do tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-458">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="2c3b9-459">O exemplo a seguir compara as cadeias de caracteres retornadas pela <xref:System.Type.ToString%2A> método e o `Name`, <xref:System.Type.FullName%2A>, e <xref:System.Type.AssemblyQualifiedName%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-459">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-460">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-460">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Type.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-461">Obtém uma combinação de <see cref="T:System.Reflection.GenericParameterAttributes" /> sinalizadores que descrevem a covariância e restrições especiais do parâmetro de tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-461">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-462">Uma combinação bit a bit de valores <see cref="T:System.Reflection.GenericParameterAttributes" /> que descrevem a covariância e restrições especiais do parâmetro de tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-462">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-463">O valor dessa propriedade contém sinalizadores que descrevem se o parâmetro de tipo genérico atual é covariante e sinalizadores que descrevem a quaisquer restrições especiais.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-463">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="2c3b9-464">Use o <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> valor para selecionar os sinalizadores de covariância e, em seguida, use o <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> valor para selecionar os sinalizadores de restrição.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-464">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="2c3b9-465">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-465">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-466">O exemplo de código a seguir define um tipo genérico `Test` com dois parâmetros de tipo que têm diferentes restrições.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-466">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="2c3b9-467">Quando o programa é executado, as restrições são examinadas por meio de <xref:System.Type.GenericParameterAttributes%2A> propriedade e o <xref:System.Type.GetGenericParameterConstraints%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-467">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-468">O objeto <see cref="T:System.Type" /> atual não é um parâmetro de tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-468">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="2c3b9-469">Ou seja, a propriedade <see cref="P:System.Type.IsGenericParameter" /> do método retorna <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-469">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-470">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-470">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-471">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-471">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-472">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-472">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Type.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-473">Obtém a posição do parâmetro de tipo, na lista de parâmetros de tipo, do tipo genérico ou do método que declarou o parâmetro, quando o objeto <see cref="T:System.Type" /> representa um parâmetro de tipo de um tipo genérico ou método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-473">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-474">A posição de um parâmetro de tipo na lista de parâmetros de tipo do tipo genérico ou método que define o parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-474">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span>
          </span>
          <span data-ttu-id="2c3b9-475">Números de posição começam em 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-475">Position numbers begin at 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-476">O <xref:System.Type.GenericParameterPosition%2A> propriedade retorna a posição de um parâmetro de tipo na lista de parâmetros da definição de tipo genérico ou definição de método genérico, em que o parâmetro de tipo foi originalmente definido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-476">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="2c3b9-477">O <xref:System.Type.DeclaringType%2A> e <xref:System.Type.DeclaringMethod%2A> propriedades identificam a definição de tipo ou método genérica:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-477">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="2c3b9-478">Se o <xref:System.Type.DeclaringMethod%2A> propriedade retorna um <xref:System.Reflection.MethodInfo>, que <xref:System.Reflection.MethodInfo> representa uma definição de método genérico e atual <xref:System.Type> objeto representa um parâmetro de tipo dessa definição de método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-478">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="2c3b9-479">Se o <xref:System.Type.DeclaringMethod%2A> propriedade retorna `null`, em seguida, a <xref:System.Type.DeclaringType%2A> propriedade sempre retorna um <xref:System.Type> que representa uma definição de tipo genérico e atual do objeto <xref:System.Type> objeto representa um parâmetro de tipo desse tipo genérico definição.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-479">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="2c3b9-480">Para fornecer o contexto correto para o valor da <xref:System.Type.GenericParameterPosition%2A> propriedade, é necessário identificar o tipo ou método genérico pertence um parâmetro de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-480">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="2c3b9-481">Por exemplo, considere o valor de retorno do método genérico `GetSomething` no código a seguir:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-481">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="2c3b9-482">O tipo retornado por `GetSomething` depende dos argumentos de tipo fornecidos a classe `A` e, ao `GetSomething` em si.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-482">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="2c3b9-483">Você pode obter um <xref:System.Reflection.MethodInfo> para `GetSomething`, e que você pode obter o tipo de retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-483">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="2c3b9-484">Quando você examina os parâmetros de tipo do tipo de retorno, <xref:System.Type.GenericParameterPosition%2A> retorna 0 para ambos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-484">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="2c3b9-485">A posição do `V` é 0 porque `V` é o primeiro parâmetro de tipo na lista de parâmetros de tipo para a classe `A`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-485">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="2c3b9-486">A posição do `X` é 0 porque `X` é o primeiro parâmetro de tipo na lista de parâmetros de tipo para `GetSomething`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-486">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-487">Chamar o <xref:System.Type.GenericParameterPosition%2A> propriedade faz com que uma exceção se o atual <xref:System.Type> não representa um parâmetro de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-487">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="2c3b9-488">Quando você examinar os argumentos de tipo de um tipo construído aberto, use o <xref:System.Type.IsGenericParameter%2A> propriedade dizer que são parâmetros de tipo e que são tipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-488">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="2c3b9-489">O <xref:System.Type.IsGenericParameter%2A> propriedade retorna `true` para um parâmetro de tipo; em seguida, você pode usar o <xref:System.Type.GenericParameterPosition%2A> método obter sua posição e usar os <xref:System.Type.DeclaringMethod%2A> e <xref:System.Type.DeclaringType%2A> propriedades para determinar o método genérico ou definição que o define de tipo .</span><span class="sxs-lookup"><span data-stu-id="2c3b9-489">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-490">O exemplo a seguir define uma classe genérica com dois parâmetros de tipo e define uma segunda classe genérica que deriva de primeira classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-490">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="2c3b9-491">Classe base a classe derivada da tem dois argumentos de tipo: o primeiro é <xref:System.Int32>, e o segundo é um parâmetro de tipo do tipo derivado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-491">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="2c3b9-492">O exemplo exibe informações sobre essas classes genéricas, incluindo as posições relatados pelo <xref:System.Type.GenericParameterPosition%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-492">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-493">O tipo atual não representa um parâmetro de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-493">The current type does not represent a type parameter.</span>
          </span>
          <span data-ttu-id="2c3b9-494">Ou seja, <see cref="P:System.Type.IsGenericParameter" /> retorna <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-494">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-495">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-495">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-496">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-496">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Type.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-497">Obtém uma matriz dos argumentos de tipo genérico para esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-497">Gets an array of the generic type arguments for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-498">Uma matriz dos argumentos de tipo genérico para esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-498">An array of the generic type arguments for this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-499">Essa propriedade obtém apenas os argumentos de tipo genérico; ou seja, os tipos que foram especificados para os parâmetros de tipo genérico do tipo atual.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-499">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="2c3b9-500">Se o tipo atual é uma definição de tipo genérico, essa propriedade retorna uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-500">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-501">Se um tipo genérico for usado em um método genérico ou em outro tipo genérico, alguns dos seus argumentos de tipo genérico podem ser parâmetros de tipo genérico do método ou tipo delimitador.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-501">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="2c3b9-502">Para obter os parâmetros de tipo genérico de um tipo que representa uma definição de tipo genérico, use o <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-502">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2c3b9-503">Para obter um <xref:System.Reflection.TypeInfo> objeto atual <xref:System.Type> do objeto, use o <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> método de extensão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-503">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int&#xA;override this.GetArrayRank : unit -&gt; int" Usage="type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-504">Obtém o número de dimensões em uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-504">Gets the number of dimensions in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-505">Um inteiro que contém o número de dimensões no tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-505">An integer that contains the number of dimensions in the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2c3b9-506">O exemplo a seguir exibe o número de dimensões em uma matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-506">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-507">Não há suporte para a funcionalidade desse método na classe base. Em vez disso, ela deve ser implementada em uma classe derivada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-507">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-508">O tipo atual não é uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-508">The current type is not an array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="type.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-509">Quando substituído em uma classe derivada, implementa a propriedade <see cref="P:System.Type.Attributes" /> e obtém um bitmask que indica os atributos associados com o <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-509">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-510">Um objeto <see cref="T:System.Reflection.TypeAttributes" /> que representa o conjunto de atributos do <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-510">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-511">Obtém um construtor específico do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-511">Gets a specific constructor of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="2c3b9-512">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o construtor desejado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-512">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="2c3b9-513">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-513">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-514">Uma matriz vazia de objetos <see cref="T:System.Type" />, para obter um construtor que não aceita parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-514">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="2c3b9-515">Tal matriz vazia é fornecida pelo campo <see langword="static" /> de <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-515">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-516">Pesquisa um construtor de instância pública cujos parâmetros correspondem aos tipos na matriz especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-516">Searches for a public instance constructor whose parameters match the types in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-517">Um objeto que representa o construtor de instância pública cujos parâmetros correspondem aos tipos na matriz de tipos de parâmetro, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-517">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-518">Essa sobrecarga de método procura por construtores de instância pública e não pode ser usada para obter um inicializador de classe (. cctor).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-518">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="2c3b9-519">Para obter um inicializador de classe, use uma sobrecarga que utiliza <xref:System.Reflection.BindingFlags>e especifique <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-519">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-520">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-520">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-521">Se o construtor solicitado é não público, esse método retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-521">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-522">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-522">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-523">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-523">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-524">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.ConstructorInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-524">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="2c3b9-525">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método sempre retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-525">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-526">O exemplo a seguir obtém o tipo de `MyClass`, obtém o <xref:System.Reflection.ConstructorInfo> de objeto e exibe a assinatura do construtor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-526">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-527">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-527">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-528">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-528">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-529">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-529">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-530">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-530">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-531">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-531">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-532">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-532">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-533">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-533">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-534">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-534">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-535">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-535">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-536">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-536">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-537">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o construtor obter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-537">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="2c3b9-538">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-538">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-539">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um construtor sem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-539">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="2c3b9-540">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-540">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-541">
            <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-541">
              <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-542">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz de tipo de parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-542">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="2c3b9-543">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-543">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-544">Pesquisa o construtor cujos parâmetros correspondem aos tipos de argumento e modificadores especificados, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-544">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-545">Um objeto <see cref="T:System.Reflection.ConstructorInfo" /> que representa o construtor que corresponde aos requisitos especificados, se encontrados, caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-545">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-546">Se uma correspondência exata não existir, o `binder` tentará forçar os tipos de parâmetro especificados na matriz `types` para selecionar uma correspondência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-546">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="2c3b9-547">Se o `binder` não for capaz de selecionar uma correspondência, `null` será retornado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-547">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="2c3b9-548">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais construtores devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-548">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-549">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-549">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-550">Especifique `BindingFlags.Public` para incluir construtores públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-550">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-551">Especifique `BindingFlags.NonPublic` para incluir construtores não públicos (ou seja, construtores particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-551">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="2c3b9-552">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-552">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-553">Para obter o inicializador de classe (. cctor) usando essa sobrecarga de método, você deve especificar <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-553">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-554">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-554">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-555">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-555">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-556">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-556">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-557">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.ConstructorInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-557">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="2c3b9-558">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método sempre retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-558">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-559">O programa a seguir obtém o tipo de `MyClass1` classe, obtém o <xref:System.Reflection.ConstructorInfo> os sinalizadores de associação especificadas de correspondência de objeto e exibe a assinatura do construtor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-559">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-560">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-560">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-561">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-561">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-562">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-562">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-563">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-563">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-564">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-564">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-565">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-565">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-566">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-566">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-567">
            <paramref name="types" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-567">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-568">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-568">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-569">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-569">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-570">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-570">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-571">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-571">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-572">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-572">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-573">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-573">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="2c3b9-574">O objeto que especifica o conjunto de regras a ser usado em relação à ordem e ao layout dos argumentos, a maneira como o valor retornado é passado, a quais registros são usados para argumentos e à forma que a pilha é limpa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-574">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-575">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o construtor obter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-575">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="2c3b9-576">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-576">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-577">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um construtor sem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-577">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-578">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-578">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-579">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-579">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-580">Pesquisa por um construtor cujos parâmetros correspondem aos tipos de argumento e modificadores especificados, usando as restrições de associação especificadas e a convenção de chamada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-580">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-581">Um objeto que representa o construtor que corresponde aos requisitos especificados, se encontrado, caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-581">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-582">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-582">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-583">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-583">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-584">Se uma correspondência exata não existir, o `binder` tentará forçar os tipos de parâmetro especificados na matriz `types` para selecionar uma correspondência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-584">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="2c3b9-585">Se o `binder` não for capaz de selecionar uma correspondência, `null` será retornado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-585">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="2c3b9-586">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais construtores devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-586">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-587">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-587">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-588">Especifique `BindingFlags.Public` para incluir construtores públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-588">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-589">Especifique `BindingFlags.NonPublic` para incluir construtores não públicos (ou seja, construtores particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-589">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="2c3b9-590">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-590">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-591">Para obter o inicializador de classe (. cctor) usando esse método, você deve especificar <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-591">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-592">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-592">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-593">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-593">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-594">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-594">Member Type</span></span>|<span data-ttu-id="2c3b9-595">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-595">Static</span></span>|<span data-ttu-id="2c3b9-596">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-596">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-597">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-597">Constructor</span></span>|<span data-ttu-id="2c3b9-598">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-598">No</span></span>|<span data-ttu-id="2c3b9-599">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-599">No</span></span>|  
|<span data-ttu-id="2c3b9-600">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-600">Field</span></span>|<span data-ttu-id="2c3b9-601">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-601">No</span></span>|<span data-ttu-id="2c3b9-602">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-602">Yes.</span></span> <span data-ttu-id="2c3b9-603">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-603">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-604">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-604">Event</span></span>|<span data-ttu-id="2c3b9-605">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-605">Not applicable</span></span>|<span data-ttu-id="2c3b9-606">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-606">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-607">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-607">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-608">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-608">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-609">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-609">Method</span></span>|<span data-ttu-id="2c3b9-610">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-610">No</span></span>|<span data-ttu-id="2c3b9-611">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-611">Yes.</span></span> <span data-ttu-id="2c3b9-612">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-612">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-613">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-613">Nested Type</span></span>|<span data-ttu-id="2c3b9-614">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-614">No</span></span>|<span data-ttu-id="2c3b9-615">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-615">No</span></span>|  
|<span data-ttu-id="2c3b9-616">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-616">Property</span></span>|<span data-ttu-id="2c3b9-617">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-617">Not applicable</span></span>|<span data-ttu-id="2c3b9-618">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-618">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-619">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-619">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-620">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-620">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-621">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-621">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-622">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-622">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-623">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-623">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-624">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-624">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-625">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-625">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-626">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-626">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-627">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-627">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-628">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.ConstructorInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-628">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="2c3b9-629">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método sempre retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-629">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-630">O exemplo a seguir obtém o tipo de `MyClass1`, obtém o <xref:System.Reflection.ConstructorInfo> objeto que coincide com os sinalizadores de associação especificadas e exibe a assinatura do construtor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-630">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-631">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-631">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-632">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-632">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-633">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-633">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-634">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-634">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-635">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-635">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-636">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-636">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-637">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-637">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-638">
            <paramref name="types" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-638">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-639">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-639">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-640">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-640">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-641">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-641">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-642">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-642">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-643">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-643">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-644">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-644">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="2c3b9-645">O objeto que especifica o conjunto de regras a ser usado em relação à ordem e ao layout dos argumentos, a maneira como o valor retornado é passado, a quais registros são usados para argumentos e à forma que a pilha é limpa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-645">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-646">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o construtor obter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-646">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="2c3b9-647">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-647">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-648">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um construtor sem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-648">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-649">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-649">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-650">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-650">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-651">Quando substituído em uma classe derivada, pesquisa por um construtor cujos parâmetros correspondem aos tipos de argumento e modificadores especificados, usando as restrições de associação especificadas e a convenção de chamada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-651">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-652">Um objeto <see cref="T:System.Reflection.ConstructorInfo" /> que representa o construtor que corresponde aos requisitos especificados, se encontrados, caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-652">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-653">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-653">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-654">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-654">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-655">Se uma correspondência exata não existir, o `binder` tentará forçar os tipos de parâmetro especificados na matriz `types` para selecionar uma correspondência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-655">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="2c3b9-656">Se o `binder` não for capaz de selecionar uma correspondência, `null` será retornado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-656">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="2c3b9-657">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais construtores devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-657">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-658">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-658">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-659">Especifique `BindingFlags.Public` para incluir construtores públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-659">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-660">Especifique `BindingFlags.NonPublic` para incluir construtores não públicos (ou seja, construtores particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-660">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="2c3b9-661">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-661">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-662">Esse método implementa <xref:System.Type.GetConstructor%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-662">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-663">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-663">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-664">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-664">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-665">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-665">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-666">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-666">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-667">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-667">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-668">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-668">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-669">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-669">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-670">
            <paramref name="types" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-670">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-671">O tipo atual é um <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-671">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-672">Obtém os construtores do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-672">Gets the constructors of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]&#xA;override this.GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-673">Retorna todos os construtores públicos definidos para o <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-673">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-674">Uma matriz de objetos <see cref="T:System.Reflection.ConstructorInfo" /> que representa todos os construtores de instância pública definidos para o <see cref="T:System.Type" /> atual, mas não incluindo o inicializador de tipo (construtor estático).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-674">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="2c3b9-675">Se nenhum construtor de instância pública for definido para o <see cref="T:System.Type" /> atual ou se o <see cref="T:System.Type" /> atual representar um parâmetro de tipo na definição de um tipo ou método genérico, uma matriz vazia do tipo <see cref="T:System.Reflection.ConstructorInfo" /> será retornada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-675">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-676">O <xref:System.Type.GetConstructors%2A> método não retorna construtores em uma ordem específica, como ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-676">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="2c3b9-677">Seu código não deve depender a ordem em que os construtores são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-677">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-678">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-678">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-679">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-679">Member Type</span></span>|<span data-ttu-id="2c3b9-680">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-680">Static</span></span>|<span data-ttu-id="2c3b9-681">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-681">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-682">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-682">Constructor</span></span>|<span data-ttu-id="2c3b9-683">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-683">No</span></span>|<span data-ttu-id="2c3b9-684">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-684">No</span></span>|  
|<span data-ttu-id="2c3b9-685">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-685">Field</span></span>|<span data-ttu-id="2c3b9-686">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-686">No</span></span>|<span data-ttu-id="2c3b9-687">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-687">Yes.</span></span> <span data-ttu-id="2c3b9-688">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-688">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-689">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-689">Event</span></span>|<span data-ttu-id="2c3b9-690">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-690">Not applicable</span></span>|<span data-ttu-id="2c3b9-691">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-691">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-692">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-692">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-693">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-693">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-694">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-694">Method</span></span>|<span data-ttu-id="2c3b9-695">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-695">No</span></span>|<span data-ttu-id="2c3b9-696">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-696">Yes.</span></span> <span data-ttu-id="2c3b9-697">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-697">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-698">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-698">Nested Type</span></span>|<span data-ttu-id="2c3b9-699">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-699">No</span></span>|<span data-ttu-id="2c3b9-700">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-700">No</span></span>|  
|<span data-ttu-id="2c3b9-701">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-701">Property</span></span>|<span data-ttu-id="2c3b9-702">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-702">Not applicable</span></span>|<span data-ttu-id="2c3b9-703">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-703">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-704">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-704">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-705">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-705">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-706">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-706">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-707">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-707">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-708">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-708">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-709">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-709">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-710">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-710">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-711">Essa sobrecarga de método chama o <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> sobrecarga de método, com <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-711">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-712">Ele não localizará os inicializadores de classe (. cctor).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-712">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="2c3b9-713">Para localizar os inicializadores de classe, use uma sobrecarga que utiliza <xref:System.Reflection.BindingFlags>e especifique <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-713">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-714">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-714">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-715">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.ConstructorInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-715">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="2c3b9-716">Por exemplo, se classe `C<T>` tem um construtor `C(T t1)` (`Sub New(ByVal t1 As T)` no Visual Basic), chamar <xref:System.Type.GetConstructors%2A> na `C<int>` retorna um <xref:System.Reflection.ConstructorInfo> que representa `C(int t1)` em c# (`Sub New(ByVal t1 As Integer)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-716">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="2c3b9-717">Se o atual <xref:System.Type> representa um parâmetro de tipo genérico, o <xref:System.Type.GetConstructors%2A> método retorna uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-717">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-718">Este exemplo mostra a saída do <xref:System.Type.GetConstructors%2A> de sobrecarga de uma classe que tem dois construtores de instância e um construtor estático.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-718">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="2c3b9-719">A saída desse código é:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-719">The output of this code is:</span></span>  
  
 <span data-ttu-id="2c3b9-720">2</span><span class="sxs-lookup"><span data-stu-id="2c3b9-720">2</span></span>  
  
 <span data-ttu-id="2c3b9-721">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-721">False</span></span>  
  
 <span data-ttu-id="2c3b9-722">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-722">False</span></span>  
  
 <span data-ttu-id="2c3b9-723">Porque o <xref:System.Type.GetConstructors> sobrecarga usa apenas <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> e <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, o construtor estático não é contado pela `for` expressão nem avaliadas pelo `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-723">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="2c3b9-724">Para localizar os construtores estáticos, use o <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> sobrecarregar e passar a combinação (lógicas `OR`) de <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, conforme mostrado no exemplo de código a seguir:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-724">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="2c3b9-725">Agora, a saída é:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-725">Now the output is:</span></span>  
  
 <span data-ttu-id="2c3b9-726">3</span><span class="sxs-lookup"><span data-stu-id="2c3b9-726">3</span></span>  
  
 <span data-ttu-id="2c3b9-727">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-727">False</span></span>  
  
 <span data-ttu-id="2c3b9-728">verdadeiro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-728">True</span></span>  
  
 <span data-ttu-id="2c3b9-729">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-729">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-730">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-730">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-731">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-731">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-732">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-732">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-733">Quando substituído em uma classe derivada, pesquisa os construtores definidos para o <see cref="T:System.Type" /> atual usando os <see langword="BindingFlags" /> especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-733">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-734">Uma matriz de objetos <see cref="T:System.Reflection.ConstructorInfo" /> representando todos os construtores definidos para o <see cref="T:System.Type" /> atual que corresponde às restrições de associação especificadas, incluindo o inicializador de tipo, se ele estiver definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-734">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="2c3b9-735">Retorna uma matriz vazia do tipo <see cref="T:System.Reflection.ConstructorInfo" /> se nenhum construtor estiver definido para o <see cref="T:System.Type" /> atual, se nenhum dos construtores definidos corresponderem às restrições de associação ou se o <see cref="T:System.Type" /> atual representar um parâmetro de tipo na definição de um tipo genérico ou método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-735">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-736">O <xref:System.Type.GetConstructors%2A> método não retorna construtores em uma ordem específica, como ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-736">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="2c3b9-737">Seu código não deve depender a ordem em que os construtores são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-737">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-738">`bindingAttr` pode ser usado para especificar se deseja retornar apenas os construtores públicos ou construtores público e não públicos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-738">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="2c3b9-739">Se uma correspondência exata não existir, o `binder` tentará forçar os tipos de parâmetro especificados na matriz `types` para selecionar uma correspondência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-739">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="2c3b9-740">Se o `binder` não for capaz de selecionar uma correspondência, `null` será retornado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-740">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="2c3b9-741">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais construtores devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-741">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-742">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-742">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-743">Especifique `BindingFlags.Public` para incluir construtores públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-743">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-744">Especifique `BindingFlags.NonPublic` para incluir construtores não públicos (ou seja, construtores particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-744">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="2c3b9-745">Construtores de classes base não são retornados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-745">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="2c3b9-746">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-746">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-747">Para obter o inicializador de classe (. cctor) usando essa sobrecarga de método, você deve especificar <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-747">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-748">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-748">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-749">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.ConstructorInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-749">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="2c3b9-750">Por exemplo, se classe `C<T>` tem um construtor `C(T t1)` (`Sub New(ByVal t1 As T)` no Visual Basic), chamar <xref:System.Type.GetConstructors%2A> na `C<int>` retorna um <xref:System.Reflection.ConstructorInfo> que representa `C(int t1)` em c# (`Sub New(ByVal t1 As Integer)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-750">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="2c3b9-751">Se o atual <xref:System.Type> representa um parâmetro de tipo genérico, o <xref:System.Type.GetConstructors%2A> método retorna uma matriz vazia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-751">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-752">Este exemplo mostra a saída do <xref:System.Type.GetConstructors> de sobrecarga de uma classe que tem dois construtores de instância e um construtor estático.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-752">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="2c3b9-753">A saída desse código é:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-753">The output of this code is:</span></span>  
  
 <span data-ttu-id="2c3b9-754">2</span><span class="sxs-lookup"><span data-stu-id="2c3b9-754">2</span></span>  
  
 <span data-ttu-id="2c3b9-755">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-755">False</span></span>  
  
 <span data-ttu-id="2c3b9-756">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-756">False</span></span>  
  
 <span data-ttu-id="2c3b9-757">Porque o <xref:System.Type.GetConstructors%2A> sobrecarga usa apenas <xref:System.Reflection.BindingFlags.Public> e <xref:System.Reflection.BindingFlags.Instance>, o construtor estático não é contado pela `for` expressão nem avaliadas pelo `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-757">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="2c3b9-758">Para localizar os construtores estáticos, use o <xref:System.Type.GetConstructors%2A> sobrecarregar e passá-lo a combinação (OR lógico) de <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, conforme mostrado no exemplo de código a seguir:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-758">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="2c3b9-759">Agora, a saída é:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-759">Now the output is:</span></span>  
  
 <span data-ttu-id="2c3b9-760">3</span><span class="sxs-lookup"><span data-stu-id="2c3b9-760">3</span></span>  
  
 <span data-ttu-id="2c3b9-761">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-761">False</span></span>  
  
 <span data-ttu-id="2c3b9-762">verdadeiro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-762">True</span></span>  
  
 <span data-ttu-id="2c3b9-763">False</span><span class="sxs-lookup"><span data-stu-id="2c3b9-763">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-764">Procura os membros definidos para o <see cref="T:System.Type" /> atual, cujo <see cref="T:System.Reflection.DefaultMemberAttribute" /> está definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-764">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-765">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa todos os membros padrão do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-765">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-766">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-766">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-767">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se o <see cref="T:System.Type" /> atual não tiver membros padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-767">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-768">O <xref:System.Type.GetDefaultMembers%2A> método não retorna os membros em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-768">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-769">O código não deve depender de ordem na qual os membros são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-769">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-770">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-770">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="2c3b9-771">Entre os membros estão propriedades, campos, métodos, eventos etc.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-771">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-772">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-772">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-773">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-773">Member Type</span></span>|<span data-ttu-id="2c3b9-774">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-774">Static</span></span>|<span data-ttu-id="2c3b9-775">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-775">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-776">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-776">Constructor</span></span>|<span data-ttu-id="2c3b9-777">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-777">No</span></span>|<span data-ttu-id="2c3b9-778">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-778">No</span></span>|  
|<span data-ttu-id="2c3b9-779">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-779">Field</span></span>|<span data-ttu-id="2c3b9-780">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-780">No</span></span>|<span data-ttu-id="2c3b9-781">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-781">Yes.</span></span> <span data-ttu-id="2c3b9-782">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-782">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-783">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-783">Event</span></span>|<span data-ttu-id="2c3b9-784">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-784">Not applicable</span></span>|<span data-ttu-id="2c3b9-785">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-785">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-786">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-786">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-787">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-787">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-788">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-788">Method</span></span>|<span data-ttu-id="2c3b9-789">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-789">No</span></span>|<span data-ttu-id="2c3b9-790">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-790">Yes.</span></span> <span data-ttu-id="2c3b9-791">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-791">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-792">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-792">Nested Type</span></span>|<span data-ttu-id="2c3b9-793">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-793">No</span></span>|<span data-ttu-id="2c3b9-794">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-794">No</span></span>|  
|<span data-ttu-id="2c3b9-795">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-795">Property</span></span>|<span data-ttu-id="2c3b9-796">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-796">Not applicable</span></span>|<span data-ttu-id="2c3b9-797">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-797">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-798">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-798">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-799">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-799">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-800">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-800">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-801">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-801">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-802">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-802">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-803">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-803">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-804">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-804">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-805">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.MemberInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-805">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="2c3b9-806">Por exemplo, se classe `C<T>` tem uma propriedade `P` que retorna `T`, chamar <xref:System.Type.GetDefaultMembers%2A> na `C<int>` retorna `int P` em c# (`Property P As Integer` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-806">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="2c3b9-807">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método procura membros da restrição de classe ou os membros de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-807">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-808">O exemplo a seguir obtém as informações do membro padrão de `MyClass` e exibe os membros padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-808">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="type.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-809">Quando substituído em uma classe derivada, retorna o <see cref="T:System.Type" /> do objeto englobado ou referenciado pelo tipo de matriz, ponteiro ou tipo de referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-809">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-810">O <see cref="T:System.Type" /> do objeto englobado ou referenciado pelo tipo de referência, ponteiro ou matriz atual ou <see langword="null" /> se <see cref="T:System.Type" /> atual não é uma matriz ou um ponteiro ou não é passado por referência ou representa um tipo genérico ou um parâmetro de tipo na definição de um tipo genérico ou método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-810">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-811">Esse método retornará `null` para o <xref:System.Array> classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-811">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-812">O exemplo a seguir demonstra como usar o `GetElementType` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-812">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetEnumName : obj -&gt; string&#xA;override this.GetEnumName : obj -&gt; string" Usage="type.GetEnumName value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2c3b9-813">O valor cujo nome deverá ser recuperado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-813">The value whose name is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-814">Retorna o nome da constante que tem o valor especificado para o tipo de enumeração atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-814">Returns the name of the constant that has the specified value, for the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-815">O nome do membro do tipo de enumeração atual que tem o valor especificado ou <see langword="null" />, se tal constante não for encontrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-815">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-816">O tipo atual não é uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-816">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="2c3b9-817">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-817">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-818">
            <paramref name="value" /> não é do tipo atual, nem tem o mesmo tipo subjacente que o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-818">
              <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-819">
            <paramref name="value" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-819">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumNames : unit -&gt; string[]&#xA;override this.GetEnumNames : unit -&gt; string[]" Usage="type.GetEnumNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-820">Retorna os nomes dos membros do tipo de enumeração atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-820">Returns the names of the members of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-821">Uma matriz que contém os nomes dos membros da enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-821">An array that contains the names of the members of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-822">Os elementos da matriz de valores de retorno são classificados pelos valores binários (ou seja, os valores sem sinal) das constantes enumeradas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-822">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="2c3b9-823">Se a matriz contém constantes enumeradas com o mesmo valor, a ordem de seus nomes correspondentes é especificada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-823">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-824">O tipo atual não é uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-824">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumUnderlyingType : unit -&gt; Type&#xA;override this.GetEnumUnderlyingType : unit -&gt; Type" Usage="type.GetEnumUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-825">Retorna o tipo subjacente do tipo de enumeração atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-825">Returns the underlying type of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-826">O tipo subjacente da enumeração atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-826">The underlying type of the current enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-827">Por padrão, o tipo subjacente de uma enumeração no c# e Visual Basic é <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-827">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="2c3b9-828">Outros tipos de inteiro podem ser especificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-828">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-829">O tipo atual não é uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-829">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="2c3b9-830">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-830">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-831">O tipo de enumeração não é válido, pois contém mais de um campo de instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-831">The enumeration type is not valid, because it contains more than one instance field.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumValues : unit -&gt; Array&#xA;override this.GetEnumValues : unit -&gt; Array" Usage="type.GetEnumValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-832">Retorna uma matriz de valores das constantes no tipo de enumeração especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-832">Returns an array of the values of the constants in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-833">Uma matriz que contém os valores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-833">An array that contains the values.</span>
          </span>
          <span data-ttu-id="2c3b9-834">Os elementos da matriz são classificados pelos valores binários (ou seja, os valores sem sinal) das constantes de enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-834">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-835">O tipo atual não é uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-835">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-836">Obtém um evento específico declarado ou herdado pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-836">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo&#xA;override this.GetEvent : string -&gt; System.Reflection.EventInfo" Usage="type.GetEvent name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-837">A cadeia de caracteres que contém o nome de um evento que é declarado ou herdado pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-837">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-838">Retorna o objeto <see cref="T:System.Reflection.EventInfo" /> que representa o evento público especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-838">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-839">O objeto que representa o evento público especificado, o qual é declarado ou herdado pelo <see cref="T:System.Type" /> atual, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-839">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-840">Um evento é considerado público para reflexão caso tenha pelo menos um método ou um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-840">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="2c3b9-841">Caso contrário, o evento é considerado particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-841">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-842">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-842">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-843">A pesquisa inclui eventos de instância pública de static e public.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-843">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="2c3b9-844">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-844">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-845">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-845">Member Type</span></span>|<span data-ttu-id="2c3b9-846">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-846">Static</span></span>|<span data-ttu-id="2c3b9-847">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-847">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-848">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-848">Constructor</span></span>|<span data-ttu-id="2c3b9-849">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-849">No</span></span>|<span data-ttu-id="2c3b9-850">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-850">No</span></span>|  
|<span data-ttu-id="2c3b9-851">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-851">Field</span></span>|<span data-ttu-id="2c3b9-852">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-852">No</span></span>|<span data-ttu-id="2c3b9-853">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-853">Yes.</span></span> <span data-ttu-id="2c3b9-854">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-854">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-855">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-855">Event</span></span>|<span data-ttu-id="2c3b9-856">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-856">Not applicable</span></span>|<span data-ttu-id="2c3b9-857">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-857">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-858">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-858">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-859">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-859">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-860">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-860">Method</span></span>|<span data-ttu-id="2c3b9-861">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-861">No</span></span>|<span data-ttu-id="2c3b9-862">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-862">Yes.</span></span> <span data-ttu-id="2c3b9-863">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-863">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-864">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-864">Nested Type</span></span>|<span data-ttu-id="2c3b9-865">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-865">No</span></span>|<span data-ttu-id="2c3b9-866">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-866">No</span></span>|  
|<span data-ttu-id="2c3b9-867">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-867">Property</span></span>|<span data-ttu-id="2c3b9-868">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-868">Not applicable</span></span>|<span data-ttu-id="2c3b9-869">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-869">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-870">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-870">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-871">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-871">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-872">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-872">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-873">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-873">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-874">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-874">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-875">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-875">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-876">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-876">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-877">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.EventInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-877">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-878">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os eventos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-878">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-879">O exemplo a seguir cria um <xref:System.Reflection.EventInfo> de objeto e obtém o evento para uma classe de botão para o evento especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-879">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-880">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-880">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-881">A cadeia de caracteres que contém o nome de um evento declarado ou herdado pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-881">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-882">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-882">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-883">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-883">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-884">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-884">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-885">Quando substituído em uma classe derivada, retorna o objeto <see cref="T:System.Reflection.EventInfo" /> que representa o evento especificado, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-885">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-886">O objeto que representa o evento especificado, o qual é declarado ou herdado pelo <see cref="T:System.Type" /> atual, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-886">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-887">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de filtro podem ser usados para definir quais eventos serão incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-887">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-888">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-888">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-889">Especifique `BindingFlags.Public` para incluir eventos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-889">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-890">Especifique `BindingFlags.NonPublic` para incluir eventos de não-públicos (ou seja, eventos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-890">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-891">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-891">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-892">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-892">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-893">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-893">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-894">`BindingFlags.DeclaredOnly` Pesquisar apenas os eventos declarados no <xref:System.Type>, não os eventos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-894">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-895">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-895">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-896">Um evento é considerado público para reflexão caso tenha pelo menos um método ou um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-896">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="2c3b9-897">Caso contrário, o evento é considerado particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-897">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-898">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.EventInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-898">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-899">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os eventos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-899">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-900">O seguinte exemplo de código usa o <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> método para pesquisar um tipo para um público ou não público evento chamado "Click" que não seja `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-900">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-901">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-901">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-902">Obtém os eventos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-902">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]&#xA;override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-903">Retorna todos os eventos públicos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-903">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-904">Uma matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representam todos os eventos públicos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-904">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-905">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-905">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-906">Uma matriz vazia do tipo <see cref="T:System.Reflection.EventInfo" />, se o <see cref="T:System.Type" /> atual não tiver eventos públicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-906">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-907">Um evento é considerado público para reflexão caso tenha pelo menos um método ou um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-907">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="2c3b9-908">Caso contrário, o evento é considerado particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-908">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-909">O <xref:System.Type.GetEvents%2A> método não retorna eventos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-909">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-910">Seu código não deve depender a ordem na qual os eventos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-910">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-911">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-911">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="2c3b9-912">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-912">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-913">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-913">Member Type</span></span>|<span data-ttu-id="2c3b9-914">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-914">Static</span></span>|<span data-ttu-id="2c3b9-915">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-915">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-916">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-916">Constructor</span></span>|<span data-ttu-id="2c3b9-917">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-917">No</span></span>|<span data-ttu-id="2c3b9-918">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-918">No</span></span>|  
|<span data-ttu-id="2c3b9-919">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-919">Field</span></span>|<span data-ttu-id="2c3b9-920">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-920">No</span></span>|<span data-ttu-id="2c3b9-921">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-921">Yes.</span></span> <span data-ttu-id="2c3b9-922">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-922">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-923">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-923">Event</span></span>|<span data-ttu-id="2c3b9-924">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-924">Not applicable</span></span>|<span data-ttu-id="2c3b9-925">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-925">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-926">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-926">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-927">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-927">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-928">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-928">Method</span></span>|<span data-ttu-id="2c3b9-929">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-929">No</span></span>|<span data-ttu-id="2c3b9-930">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-930">Yes.</span></span> <span data-ttu-id="2c3b9-931">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-931">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-932">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-932">Nested Type</span></span>|<span data-ttu-id="2c3b9-933">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-933">No</span></span>|<span data-ttu-id="2c3b9-934">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-934">No</span></span>|  
|<span data-ttu-id="2c3b9-935">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-935">Property</span></span>|<span data-ttu-id="2c3b9-936">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-936">Not applicable</span></span>|<span data-ttu-id="2c3b9-937">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-937">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-938">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-938">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-939">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-939">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-940">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-940">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-941">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-941">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-942">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-942">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-943">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-943">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-944">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-944">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-945">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.EventInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-945">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-946">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os eventos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-946">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-947">O exemplo a seguir obtém uma matriz de <xref:System.Reflection.EventInfo> objetos, obtém todos os eventos para um `Button` de classe e exibe os nomes de evento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-947">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="2c3b9-948">Para compilar o exemplo do Visual Basic, use a seguinte linha de comando:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-948">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-949">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-949">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-950">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-950">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-951">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-951">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-952">Quando substituído em uma classe derivada, procura por eventos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-952">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-953">Uma matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representam todos os eventos que são declarados ou herdados pelo <see cref="T:System.Type" /> atual, que corresponde às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-953">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2c3b9-954">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-954">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-955">Uma matriz vazia do tipo <see cref="T:System.Reflection.EventInfo" />, se o <see cref="T:System.Type" /> atual não tiver eventos ou se nenhum dos eventos corresponderem às restrições de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-955">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-956">O <xref:System.Type.GetEvents%2A> método não retorna eventos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-956">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-957">Seu código não deve depender a ordem na qual os eventos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-957">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-958">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de filtro podem ser usados para definir quais eventos serão incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-958">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-959">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-959">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-960">Especifique `BindingFlags.Public` para incluir eventos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-960">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-961">Especifique `BindingFlags.NonPublic` para incluir eventos de não-públicos (ou seja, eventos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-961">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="2c3b9-962">Somente protegido e eventos internos em classes base são retornados; eventos privados em classes base não são retornados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-962">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="2c3b9-963">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-963">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-964">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-964">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-965">`BindingFlags.DeclaredOnly` Pesquisar apenas os eventos declarados no <xref:System.Type>, não os eventos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-965">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-966">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-966">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-967">Um evento é considerado público para reflexão caso tenha pelo menos um método ou um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-967">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="2c3b9-968">Caso contrário, o evento é considerado particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-968">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-969">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.EventInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-969">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-970">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os eventos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-970">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-971">O exemplo a seguir obtém uma matriz de <xref:System.Reflection.EventInfo> objetos que correspondem aos sinalizadores de associação especificadas, obtém todos os eventos para um `Button` de classe e exibe os nomes de evento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-971">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="2c3b9-972">Para compilar o exemplo do Visual Basic, use a seguinte linha de comando:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-972">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-973">Obtém um campo específico do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-973">Gets a specific field of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string -&gt; System.Reflection.FieldInfo" Usage="type.GetField name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-974">A cadeia de caracteres que contém o nome do campo de dados a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-974">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-975">Pesquisa o campo público com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-975">Searches for the public field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-976">Um objeto que representa o campo público com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-976">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-977">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-977">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-978">A pesquisa inclui os campos de instância pública de static e public.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-978">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="2c3b9-979">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.FieldInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-979">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-980">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa os campos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-980">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-981">O exemplo a seguir obtém a `Type` de objeto para a classe especificada, obtém o <xref:System.Reflection.FieldInfo> objeto para o campo e exibe o valor do campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-981">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-982">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-982">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-983">Este objeto <see cref="T:System.Type" /> é um <see cref="T:System.Reflection.Emit.TypeBuilder" /> cujo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> método ainda não foi chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-983">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-984">A cadeia de caracteres que contém o nome do campo de dados a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-984">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-985">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-985">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-986">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-986">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-987">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-987">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-988">Pesquisa o campo especificado usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-988">Searches for the specified field, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-989">Um objeto que representa o campo que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-989">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-990">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-990">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-991">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-991">Member Type</span></span>|<span data-ttu-id="2c3b9-992">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-992">Static</span></span>|<span data-ttu-id="2c3b9-993">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-993">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-994">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-994">Constructor</span></span>|<span data-ttu-id="2c3b9-995">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-995">No</span></span>|<span data-ttu-id="2c3b9-996">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-996">No</span></span>|  
|<span data-ttu-id="2c3b9-997">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-997">Field</span></span>|<span data-ttu-id="2c3b9-998">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-998">No</span></span>|<span data-ttu-id="2c3b9-999">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-999">Yes.</span></span> <span data-ttu-id="2c3b9-1000">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1000">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1001">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1001">Event</span></span>|<span data-ttu-id="2c3b9-1002">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1002">Not applicable</span></span>|<span data-ttu-id="2c3b9-1003">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1003">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1004">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1004">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1005">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1005">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1006">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1006">Method</span></span>|<span data-ttu-id="2c3b9-1007">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1007">No</span></span>|<span data-ttu-id="2c3b9-1008">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1008">Yes.</span></span> <span data-ttu-id="2c3b9-1009">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1009">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1010">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1010">Nested Type</span></span>|<span data-ttu-id="2c3b9-1011">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1011">No</span></span>|<span data-ttu-id="2c3b9-1012">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1012">No</span></span>|  
|<span data-ttu-id="2c3b9-1013">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1013">Property</span></span>|<span data-ttu-id="2c3b9-1014">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1014">Not applicable</span></span>|<span data-ttu-id="2c3b9-1015">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1015">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1016">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1016">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1017">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1017">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1018">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1018">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1019">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1019">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1020">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1020">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1021">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1021">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1022">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1022">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1023">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de filtro podem ser usados para definir quais campos serão incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1023">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1024">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1024">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1025">Especifique `BindingFlags.Public` para incluir campos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1025">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1026">Especifique `BindingFlags.NonPublic` para incluir campos não públicos (ou seja, campos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1026">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1027">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1027">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1028">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1028">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1029">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1029">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1030">`BindingFlags.DeclaredOnly` para pesquisar apenas os campos declarados no <xref:System.Type>, não de campos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1030">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1031">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1031">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1032">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.FieldInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1032">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1033">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa os campos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1033">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1034">O exemplo a seguir obtém a `Type` de objeto para a classe especificada, obtém o <xref:System.Reflection.FieldInfo> objeto para o campo que coincide com os sinalizadores de associação especificadas e exibe o valor do campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1034">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1035">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1035">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1036">Obtém os campos do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1036">Gets the fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1037">Retorna todos os campos públicos do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1037">Returns all the public fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1038">Uma matriz de objetos <see cref="T:System.Reflection.FieldInfo" /> que representa todos os campos públicos definidos para o <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1038">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1039">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1039">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1040">Uma matriz vazia do tipo <see cref="T:System.Reflection.FieldInfo" /> se nenhum campo público for definido para o <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1040">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1041">O <xref:System.Type.GetFields%2A> método não retorna campos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1041">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1042">Seu código não deve depender a ordem na qual os campos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1042">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1043">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1043">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1044">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1044">Member Type</span></span>|<span data-ttu-id="2c3b9-1045">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1045">Static</span></span>|<span data-ttu-id="2c3b9-1046">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1046">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1047">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1047">Constructor</span></span>|<span data-ttu-id="2c3b9-1048">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1048">No</span></span>|<span data-ttu-id="2c3b9-1049">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1049">No</span></span>|  
|<span data-ttu-id="2c3b9-1050">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1050">Field</span></span>|<span data-ttu-id="2c3b9-1051">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1051">No</span></span>|<span data-ttu-id="2c3b9-1052">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1052">Yes.</span></span> <span data-ttu-id="2c3b9-1053">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1053">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1054">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1054">Event</span></span>|<span data-ttu-id="2c3b9-1055">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1055">Not applicable</span></span>|<span data-ttu-id="2c3b9-1056">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1056">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1057">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1057">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1058">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1058">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1059">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1059">Method</span></span>|<span data-ttu-id="2c3b9-1060">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1060">No</span></span>|<span data-ttu-id="2c3b9-1061">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1061">Yes.</span></span> <span data-ttu-id="2c3b9-1062">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1062">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1063">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1063">Nested Type</span></span>|<span data-ttu-id="2c3b9-1064">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1064">No</span></span>|<span data-ttu-id="2c3b9-1065">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1065">No</span></span>|  
|<span data-ttu-id="2c3b9-1066">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1066">Property</span></span>|<span data-ttu-id="2c3b9-1067">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1067">Not applicable</span></span>|<span data-ttu-id="2c3b9-1068">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1068">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1069">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1069">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1070">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1070">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1071">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1071">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1072">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1072">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1073">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1073">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1074">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1074">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1075">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1075">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1076">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.FieldInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1076">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1077">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa os campos públicos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1077">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1078">O exemplo a seguir mostra um uso do `GetFields()` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1078">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1079">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1079">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1080">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1080">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1081">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1081">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1082">Quando é substituído em uma classe derivada, pesquisa os campos definidos para o <see cref="T:System.Type" /> atual usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1082">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1083">Uma matriz de objetos <see cref="T:System.Reflection.FieldInfo" /> que representa todos os campos definidos para o <see cref="T:System.Type" /> atual que corresponde às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1083">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2c3b9-1084">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1084">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1085">Uma matriz vazia do tipo <see cref="T:System.Reflection.FieldInfo" /> se nenhum campo estiver definido para o <see cref="T:System.Type" /> atual ou se nenhum dos campos definidos corresponderem às restrições de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1085">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1086">O <xref:System.Type.GetFields%2A> método não retorna campos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1086">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1087">Seu código não deve depender a ordem na qual os campos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1087">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1088">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de filtro podem ser usados para definir quais campos serão incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1088">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1089">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1089">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1090">Especifique `BindingFlags.Public` para incluir campos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1090">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1091">Especifique `BindingFlags.NonPublic` para incluir campos não públicos (ou seja, campos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1091">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="2c3b9-1092">Somente protegido e campos internos em classes base são retornados; campos privados em classes base não são retornados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1092">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="2c3b9-1093">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1093">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1094">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1094">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1095">`BindingFlags.DeclaredOnly` para pesquisar apenas os campos declarados no <xref:System.Type>, não de campos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1095">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1096">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1096">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1097">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.FieldInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1097">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1098">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa os campos públicos da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1098">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1099">O exemplo a seguir mostra um uso do `GetFields(BindingFlags)` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1099">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="type.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1100">Retorna uma matriz de objetos <see cref="T:System.Type" /> que representam os argumentos de tipo de um tipo genérico fechado ou os parâmetros de tipo de uma definição de tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1100">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1101">Uma matriz de objetos <see cref="T:System.Type" /> que representam os argumentos de tipo de um tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1101">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span>
          </span>
          <span data-ttu-id="2c3b9-1102">Retorna uma matriz vazia se o tipo atual não é um tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1102">Returns an empty array if the current type is not a generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1103">Os elementos da matriz são retornados na ordem em que aparecem na lista de argumentos de tipo para o tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1103">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="2c3b9-1104">Se o tipo atual for um tipo construído fechado (ou seja, o <xref:System.Type.ContainsGenericParameters%2A> propriedade retorna `false`), a matriz retornada pelo <xref:System.Type.GetGenericArguments%2A> método contém os tipos que foram atribuídos aos parâmetros de tipo genérico de definição de tipo genérico .</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1104">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="2c3b9-1105">Se o tipo atual é uma definição de tipo genérico, a matriz contém os parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1105">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="2c3b9-1106">Se o tipo atual for um tipo construído aberto (ou seja, o <xref:System.Type.ContainsGenericParameters%2A> propriedade retorna `true`) em que tipos específicos não tem sido atribuídos a todos os parâmetros de tipo e parâmetros de tipo de circunscrição tipos ou métodos genéricos, a matriz contém tipos e parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1106">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="2c3b9-1107">Use o <xref:System.Type.IsGenericParameter%2A> propriedade distingui-los.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1107">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="2c3b9-1108">Para ver uma demonstração desse cenário, consulte o exemplo de código para o <xref:System.Type.ContainsGenericParameters%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1108">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-1109">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1109">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1110">O seguinte exemplo de código usa o <xref:System.Type.GetGenericArguments%2A> método para exibir os argumentos de tipo de um tipo construído e os parâmetros de tipo de sua definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1110">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="2c3b9-1111">Este exemplo de código é parte de um exemplo maior fornecido para o <xref:System.Type.IsGenericTypeDefinition%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1111">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="2c3b9-1112">Consulte o exemplo maior para a saída de exemplo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1112">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-1113">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1113">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="2c3b9-1114">As classes derivadas devem fornecer uma implementação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1114">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-1115">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1115">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-1116">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1116">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericParameterConstraints : unit -&gt; Type[]&#xA;override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="type.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1117">Retorna uma matriz de objetos <see cref="T:System.Type" /> que representam as restrições no parâmetro de tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1117">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1118">Uma matriz de objetos <see cref="T:System.Type" /> que representam as restrições no parâmetro de tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1118">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1119">Cada restrição em um parâmetro de tipo genérico é expressa como um <xref:System.Type> objeto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1119">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="2c3b9-1120">Use o <xref:System.Type.IsClass%2A> propriedade para determinar se uma restrição é a restrição de classe base; se a propriedade retornará `false`, a restrição é uma restrição de interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1120">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="2c3b9-1121">Se um parâmetro de tipo tem nenhuma restrição de classe e sem restrições de interface, uma matriz vazia será retornada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1121">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="2c3b9-1122">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1122">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1123">O exemplo de código a seguir define um tipo genérico `Test` com dois parâmetros de tipo que têm diferentes restrições.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1123">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="2c3b9-1124">Quando o programa é executado, as restrições são examinadas por meio de <xref:System.Type.GenericParameterAttributes%2A> propriedade e o <xref:System.Type.GetGenericParameterConstraints%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1124">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-1125">O objeto <see cref="T:System.Type" /> atual não é um parâmetro de tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1125">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="2c3b9-1126">Ou seja, a propriedade <see cref="P:System.Type.IsGenericParameter" /> do método retorna <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1126">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-1127">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1127">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericTypeDefinition : unit -&gt; Type&#xA;override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="type.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1128">Retorna um objeto <see cref="T:System.Type" /> que representa uma definição de tipo genérico do qual o tipo genérico atual pode ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1128">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1129">Um objeto <see cref="T:System.Type" /> que representa um tipo genérico do qual o tipo atual pode ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1129">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1130">Uma definição de tipo genérico é um modelo do qual outros tipos podem ser construídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1130">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="2c3b9-1131">Por exemplo, de definição de tipo genérico `G<T>` (expressa na sintaxe c#; `G(Of T)` no Visual Basic ou `generic <typename T> ref class G` em C++) você pode construir e criar uma instância do tipo `G<int>` (`G(Of Integer)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1131">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1132">Considerando um <xref:System.Type> construída de objeto que representa esse tipo, o <xref:System.Type.GetGenericTypeDefinition%2A> método retorna a definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1132">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="2c3b9-1133">Se dois tipos construídos são criados da mesma definição de tipo genérico, usando os mesmos argumentos de tipo, o <xref:System.Type.GetGenericTypeDefinition%2A> método retorna o mesmo <xref:System.Type> objeto para ambos os tipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1133">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="2c3b9-1134">Se você chamar o <xref:System.Type.GetGenericTypeDefinition%2A> método em um <xref:System.Type> objeto que já representa uma definição de tipo genérico, ele retorna atual <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1134">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c3b9-1135">Uma matriz de tipos genéricos não é em si genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1135">An array of generic types is not itself generic.</span></span> <span data-ttu-id="2c3b9-1136">No código c# `A<int>[] v;` ou o código do Visual Basic `Dim v() As A(Of Integer)`, o tipo de variável `v` não é genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1136">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="2c3b9-1137">Use <xref:System.Type.IsGenericType%2A> para determinar se um tipo é genérico antes de chamar <xref:System.Type.GetGenericTypeDefinition%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1137">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="2c3b9-1138">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1138">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1139">O exemplo de código a seguir cria uma instância de um tipo construído usando a criação de comum de instância e, em seguida, usa o <xref:System.Type.GetType%2A> e <xref:System.Type.GetGenericTypeDefinition%2A> métodos para recuperar o tipo construído e definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1139">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="2c3b9-1140">Este exemplo usa o genérico <xref:System.Collections.Generic.Dictionary%602> tipo; representa o tipo construído uma <xref:System.Collections.Generic.Dictionary%602> de `Test` objetos com chaves de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1140">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-1141">O tipo atual não é um tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1141">The current type is not a generic type.</span>
          </span>
          <span data-ttu-id="2c3b9-1142">Ou seja, <see cref="P:System.Type.IsGenericType" /> retorna <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1142">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-1143">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1143">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="2c3b9-1144">As classes derivadas devem fornecer uma implementação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1144">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-1145">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1145">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-1146">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1146">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="type.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1147">Retorna o código hash para essa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1147">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1148">O código hash para essa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1148">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1149">Este método substitui <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1149">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1150">O exemplo a seguir exibe o código hash do `System.Windows.Forms.Button` classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1150">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1151">Obtém uma interface específica implementada ou herdada pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1151">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type&#xA;override this.GetInterface : string -&gt; Type" Usage="type.GetInterface name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1152">A cadeia de caracteres que contém o nome da interface a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1152">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="2c3b9-1153">Para interfaces genéricas, este é o nome danificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1153">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1154">Pesquisa a interface com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1154">Searches for the interface with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1155">Um objeto que representa a interface com o nome especificado, implementado ou herdado pelo <see cref="T:System.Type" /> atual, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1155">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1156">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1156">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="2c3b9-1157">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Type> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1157">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1158">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as restrições de interface e de quaisquer interfaces herdadas de restrições de classe ou interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1158">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1159">Para interfaces genéricas, o `name` parâmetro é o nome danificado, terminando com um acento grave (\`) e o número de parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1159">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="2c3b9-1160">Isso é verdadeiro para as definições de interface genérica e construídos interfaces genéricas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1160">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="2c3b9-1161">Por exemplo, para encontrar `IExample<T>` (`IExample(Of T)` no Visual Basic) ou `IExample<string>` (`IExample(Of String)` no Visual Basic), pesquise ``"IExample`1"``.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1161">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1162">O seguinte exemplo de código usa o <xref:System.Type.GetInterface%28System.String%29> método para pesquisar o <xref:System.Collections.Hashtable> de classe para o <xref:System.Runtime.Serialization.IDeserializationCallback> interface e lista os métodos da interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1162">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="2c3b9-1163">O exemplo de código também demonstra a <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> sobrecarga de método e o <xref:System.Type.GetInterfaceMap%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1163">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1164">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1164">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1165">O <see cref="T:System.Type" /> atual representa um tipo que implementa a mesma interface genérica com argumentos de tipo diferente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1165">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1166">A cadeia de caracteres que contém o nome da interface a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1166">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="2c3b9-1167">Para interfaces genéricas, este é o nome danificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1167">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="2c3b9-1168">
            <see langword="true" /> para ignorar a diferença entre maiúsculas e minúsculas dessa parte do <c>nome</c> que especifica o nome da interface simples (a parte que especifica que o namespace deve diferenciar maiúsculas e minúsculas corretamente).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1168">
              <see langword="true" /> to ignore the case of that part of <c>name</c> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span>
          </span>
          <span data-ttu-id="2c3b9-1169">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1169">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1170">
            <see langword="false" /> para realizar uma pesquisa que diferencia maiúsculas de minúsculas para todas as partes do <c>nome</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1170">
              <see langword="false" /> to perform a case-sensitive search for all parts of <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1171">Quando substituído em uma classe derivada, procura pela interface especificada, indicando se deseja fazer uma pesquisa que não diferencia maiúsculas de minúsculas pelo nome da interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1171">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1172">Um objeto que representa a interface com o nome especificado, implementado ou herdado pelo <see cref="T:System.Type" /> atual, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1172">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1173">O `ignoreCase` parâmetro aplica-se somente para o nome da interface simples, não para o namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1173">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="2c3b9-1174">A parte de `name` que especifica o namespace deve ter a capitalização correta ou a interface não será encontrada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1174">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="2c3b9-1175">Por exemplo, a cadeia de caracteres "System. IComparable" localiza o <xref:System.IComparable> interface, mas a cadeia de caracteres "System. IComparable" não.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1175">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="2c3b9-1176">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Type> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1176">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1177">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as restrições de interface e de quaisquer interfaces herdadas de restrições de classe ou interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1177">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1178">Para interfaces genéricas, o `name` parâmetro é o nome danificado, terminando com um acento grave (\`) e o número de parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1178">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="2c3b9-1179">Isso é verdadeiro para as definições de interface genérica e construídos interfaces genéricas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1179">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="2c3b9-1180">Por exemplo, para encontrar `IExample<T>` (`IExample(Of T)` no Visual Basic) ou `IExample<string>` (`IExample(Of String)` no Visual Basic), pesquise `"IExample`1"'.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1180">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1181">O seguinte exemplo de código usa o <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> método para realizar uma pesquisa não diferencia maiusculas da <xref:System.Collections.Hashtable> de classe para o <xref:System.Collections.IEnumerable> interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1181">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="2c3b9-1182">O exemplo de código também demonstra a <xref:System.Type.GetInterface%28System.String%29> sobrecarga de método e o <xref:System.Type.GetInterfaceMap%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1182">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1183">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1183">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1184">O <see cref="T:System.Type" /> atual representa um tipo que implementa a mesma interface genérica com argumentos de tipo diferente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1184">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping&#xA;override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="2c3b9-1185">O tipo de interface para o qual um mapeamento será recuperado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1185">The interface type to retrieve a mapping for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1186">Retorna um mapeamento de interface para o tipo de interface especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1186">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1187">Um objeto que representa o mapeamento de interface para <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1187">An object that represents the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1188">O mapa da interface indica como uma interface é mapeada para os membros reais em uma classe que implementa a interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1188">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="2c3b9-1189">Se o atual <xref:System.Type> representa um tipo genérico construído, o tipo de parâmetros são substituídos pelos argumentos nos elementos do tipo apropriado a <xref:System.Reflection.InterfaceMapping> retornado por esse método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1189">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1190">A exemplo a seguir chama o <xref:System.Type.GetInterfaceMap%2A> método para determinar como o <xref:System.IFormatProvider> interface mapeia para <xref:System.Globalization.CultureInfo> métodos e como a <xref:System.IAppDomainSetup> interface é mapeado para <xref:System.AppDomainSetup> propriedades.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1190">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="2c3b9-1191">Observe que, como o <xref:System.IAppDomainSetup> interface define um conjunto de propriedades, retornados <xref:System.Reflection.InterfaceMapping> objeto inclui separado <xref:System.Reflection.MethodInfo> objetos para uma propriedade acessadores get e set.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1191">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-1192">
            <paramref name="interfaceType" /> não é implementado pelo tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1192">
              <paramref name="interfaceType" /> is not implemented by the current type.</span>
          </span>
          <span data-ttu-id="2c3b9-1193">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1193">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1194">O parâmetro <paramref name="interfaceType" /> não faz referência a uma interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1194">The <paramref name="interfaceType" /> parameter does not refer to an interface.</span>
          </span>
          <span data-ttu-id="2c3b9-1195">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1195">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1196">
            <paramref name="interfaceType" /> é uma interface genérica e o tipo atual é um tipo de matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1196">
              <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1197">
            <paramref name="interfaceType" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1197">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-1198">O <see cref="T:System.Type" /> atual representa um parâmetro de tipo genérico, ou seja, <see cref="P:System.Type.IsGenericParameter" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1198">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-1199">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1199">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="2c3b9-1200">As classes derivadas devem fornecer uma implementação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1200">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1201">Quando substituído em uma classe derivada, obtém todas as interfaces implementadas ou herdadas pelo <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1201">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1202">Uma matriz de objetos <see cref="T:System.Type" /> que representa todas as interfaces implementadas ou herdadas pela <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1202">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1203">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1203">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1204">Uma matriz vazia do tipo <see cref="T:System.Type" />, se nenhuma interface está implementada ou herdada pela <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1204">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1205">O <xref:System.Type.GetInterfaces%2A> método não retorna interfaces em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1205">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1206">Seu código não deve depender a ordem na qual as interfaces são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1206">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1207">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Type> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1207">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1208">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as restrições de interface e de quaisquer interfaces herdadas de restrições de classe ou interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1208">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1209">O exemplo a seguir obtém o tipo da classe especificada e exibe todas as interfaces que o tipo implementa ou herda.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1209">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="2c3b9-1210">Para compilar o exemplo do Visual Basic, use os seguintes comandos do compilador:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1210">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-1211">Um inicializador estático é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1211">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1212">Obtém os membros especificados do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1212">Gets the specified members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1213">A cadeia de caracteres que contém o nome dos membros públicos a serem obtidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1213">The string containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1214">Pesquisa a propriedade pública com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1214">Searches for the public members with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1215">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa os membros públicos com o nome especificado, se encontrado; caso contrário, uma matriz vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1215">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1216">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1216">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-1217">A pesquisa inclui os membros de instância pública de static e public.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1217">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="2c3b9-1218">Entre os membros estão propriedades, campos, métodos, eventos etc.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1218">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-1219">O <xref:System.Type.GetMember%2A> método não retorna os membros em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1219">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1220">O código não deve depender de ordem na qual os membros são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1220">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1221">Essa sobrecarga de método não localizará os inicializadores de classe (. cctor).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1221">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="2c3b9-1222">Para localizar os inicializadores de classe, use uma sobrecarga que utiliza <xref:System.Reflection.BindingFlags>e especifique <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1222">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1223">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1223">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-1224">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1224">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1225">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1225">Member Type</span></span>|<span data-ttu-id="2c3b9-1226">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1226">Static</span></span>|<span data-ttu-id="2c3b9-1227">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1227">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1228">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1228">Constructor</span></span>|<span data-ttu-id="2c3b9-1229">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1229">No</span></span>|<span data-ttu-id="2c3b9-1230">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1230">No</span></span>|  
|<span data-ttu-id="2c3b9-1231">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1231">Field</span></span>|<span data-ttu-id="2c3b9-1232">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1232">No</span></span>|<span data-ttu-id="2c3b9-1233">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1233">Yes.</span></span> <span data-ttu-id="2c3b9-1234">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1234">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1235">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1235">Event</span></span>|<span data-ttu-id="2c3b9-1236">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1236">Not applicable</span></span>|<span data-ttu-id="2c3b9-1237">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1237">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1238">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1238">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1239">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1239">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1240">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1240">Method</span></span>|<span data-ttu-id="2c3b9-1241">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1241">No</span></span>|<span data-ttu-id="2c3b9-1242">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1242">Yes.</span></span> <span data-ttu-id="2c3b9-1243">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1243">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1244">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1244">Nested Type</span></span>|<span data-ttu-id="2c3b9-1245">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1245">No</span></span>|<span data-ttu-id="2c3b9-1246">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1246">No</span></span>|  
|<span data-ttu-id="2c3b9-1247">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1247">Property</span></span>|<span data-ttu-id="2c3b9-1248">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1248">Not applicable</span></span>|<span data-ttu-id="2c3b9-1249">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1249">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1250">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1250">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1251">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1251">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1252">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1252">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1253">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1253">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1254">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1254">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1255">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1255">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1256">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1256">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1257">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MemberInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1257">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1258">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método procura membros da restrição de classe ou os membros de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1258">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1259">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1259">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1260">Por exemplo, o código do C# `GetMember("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1260">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1261">O exemplo a seguir exibe todos os membros de `String` classe que começam com a letra C.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1261">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1262">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1262">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1263">A cadeia de caracteres que contém o nome dos membros a serem obtidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1263">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1264">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1264">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1265">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1265">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1266">Zero, para retornar uma matriz vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1266">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1267">Pesquisa os membros especificados usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1267">Searches for the specified members, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1268">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa os membros públicos com o nome especificado, se encontrado; caso contrário, uma matriz vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1268">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1269">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1269">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="2c3b9-1270">Entre os membros estão propriedades, campos, métodos, eventos etc.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1270">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-1271">O <xref:System.Type.GetMember%2A> método não retorna os membros em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1271">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1272">O código não deve depender de ordem na qual os membros são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1272">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1273">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais membros devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1273">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1274">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1274">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1275">Especifique `BindingFlags.Public` para incluir membros públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1275">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1276">Especifique `BindingFlags.NonPublic` para incluir membros não públicos (ou seja, membros particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1276">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1277">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1277">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1278">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1278">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1279">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1279">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1280">`BindingFlags.DeclaredOnly` para procurar apenas os membros declarados no <xref:System.Type>, e não os membros que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1280">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1281">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1281">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1282">Para obter o inicializador de classe (. cctor) usando essa sobrecarga de método, você deve especificar ". cctor" para `name`, e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic) para `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1282">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="2c3b9-1283">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1283">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-1284">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MemberInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1284">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1285">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método procura membros da restrição de classe ou os membros de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1285">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1286">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1286">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1287">Por exemplo, o código do C# `GetMember("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1287">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1288">O exemplo a seguir exibe todos os membros estáticos públicos do `myString` classe que começam com a letra C.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1288">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1289">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1289">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1290">A cadeia de caracteres que contém o nome dos membros a serem obtidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1290">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="2c3b9-1291">O valor a ser procurado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1291">The value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1292">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1292">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1293">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1293">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1294">Zero, para retornar uma matriz vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1294">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1295">Pesquisa os membros especificados do tipo de membro especificado, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1295">Searches for the specified members of the specified member type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1296">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa os membros públicos com o nome especificado, se encontrado; caso contrário, uma matriz vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1296">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1297">Entre os membros estão propriedades, campos, métodos, eventos etc.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1297">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-1298">O <xref:System.Type.GetMember%2A> método não retorna os membros em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1298">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1299">O código não deve depender de ordem na qual os membros são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1299">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1300">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais membros devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1300">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1301">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1301">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1302">Especifique `BindingFlags.Public` para incluir membros públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1302">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1303">Especifique `BindingFlags.NonPublic` para incluir membros não públicos (ou seja, membros particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1303">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1304">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1304">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1305">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1305">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1306">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1306">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1307">`BindingFlags.DeclaredOnly` para procurar apenas os membros declarados no <xref:System.Type>, e não os membros que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1307">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1308">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1308">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1309">Para obter o inicializador de classe (. cctor) usando essa sobrecarga de método, você deve especificar ". cctor" para `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> para `type`, e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> em Visual Basic) para `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1309">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="2c3b9-1310">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1310">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-1311">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MemberInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1311">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1312">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método procura membros da restrição de classe ou os membros de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1312">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1313">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1313">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1314">Por exemplo, o código do C# `GetMember("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1314">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1315">O exemplo a seguir exibe todos os métodos do `myString` classe que começam com a letra C.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1315">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1316">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1316">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-1317">Uma classe derivada deve fornecer uma implementação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1317">A derived class must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1318">Obtém os membros (propriedades, métodos, campos, eventos e assim por diante) do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1318">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1319">Retorna todos os membros públicos do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1319">Returns all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1320">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> que representa todos os membros públicos do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1320">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1321">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1321">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1322">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se o <see cref="T:System.Type" /> atual não tiver membros públicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1322">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1323">Entre os membros estão propriedades, campos, métodos, eventos etc.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1323">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-1324">O <xref:System.Type.GetMembers%2A> método não retorna os membros em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1324">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1325">O código não deve depender de ordem na qual os membros são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1325">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1326">Essa sobrecarga de método chama o <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> sobrecarga de método, com <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1326">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1327">Ele não localizará os inicializadores de classe (. cctor).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1327">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="2c3b9-1328">Para localizar os inicializadores de classe, use uma sobrecarga que utiliza <xref:System.Reflection.BindingFlags>e especifique <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1328">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1329">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1329">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-1330">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1330">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1331">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1331">Member Type</span></span>|<span data-ttu-id="2c3b9-1332">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1332">Static</span></span>|<span data-ttu-id="2c3b9-1333">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1333">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1334">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1334">Constructor</span></span>|<span data-ttu-id="2c3b9-1335">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1335">No</span></span>|<span data-ttu-id="2c3b9-1336">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1336">No</span></span>|  
|<span data-ttu-id="2c3b9-1337">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1337">Field</span></span>|<span data-ttu-id="2c3b9-1338">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1338">No</span></span>|<span data-ttu-id="2c3b9-1339">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1339">Yes.</span></span> <span data-ttu-id="2c3b9-1340">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1340">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1341">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1341">Event</span></span>|<span data-ttu-id="2c3b9-1342">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1342">Not applicable</span></span>|<span data-ttu-id="2c3b9-1343">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1343">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1344">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1344">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1345">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1345">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1346">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1346">Method</span></span>|<span data-ttu-id="2c3b9-1347">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1347">No</span></span>|<span data-ttu-id="2c3b9-1348">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1348">Yes.</span></span> <span data-ttu-id="2c3b9-1349">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1349">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1350">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1350">Nested Type</span></span>|<span data-ttu-id="2c3b9-1351">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1351">No</span></span>|<span data-ttu-id="2c3b9-1352">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1352">No</span></span>|  
|<span data-ttu-id="2c3b9-1353">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1353">Property</span></span>|<span data-ttu-id="2c3b9-1354">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1354">Not applicable</span></span>|<span data-ttu-id="2c3b9-1355">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1355">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1356">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1356">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1357">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1357">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1358">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1358">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1359">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1359">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1360">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1360">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1361">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1361">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1362">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1362">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1363">Se o atual <xref:System.Type> representa um tipo genérico construído, este método retorna o <xref:System.Reflection.MemberInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1363">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1364">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método procura membros da restrição de classe ou os membros de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1364">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1365">O exemplo de código a seguir demonstra como usar o <xref:System.Type.GetMembers> sobrecarga de método para coletar informações sobre todos os membros públicos de uma classe especificada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1365">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1366">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1366">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1367">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1367">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1368">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), para retornar uma matriz vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1368">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1369">Quando é substituído em uma classe derivada, pesquisa os membros definidos para o <see cref="T:System.Type" /> atual usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1369">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1370">Uma matriz de objetos <see cref="T:System.Reflection.MemberInfo" /> representando todos os membros definidos para o <see cref="T:System.Type" /> atual que correspondem às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1370">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2c3b9-1371">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1371">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1372">Uma matriz vazia do tipo <see cref="T:System.Reflection.MemberInfo" />, se nenhum membro estiver definido para o atual <see cref="T:System.Type" /> ou se nenhum dos membros definidos corresponder às restrições de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1372">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1373">Entre os membros estão propriedades, campos, métodos, eventos etc.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1373">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-1374">O <xref:System.Type.GetMembers%2A> método não retorna os membros em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1374">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1375">O código não deve depender de ordem na qual os membros são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1375">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1376">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais membros devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1376">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1377">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1377">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1378">Especifique `BindingFlags.Public` para incluir membros públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1378">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1379">Especifique `BindingFlags.NonPublic` para incluir membros não públicos (ou seja, membros particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1379">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="2c3b9-1380">Somente protegido e membros internos em classes base são retornados; membros privados em classes base não são retornados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1380">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="2c3b9-1381">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1381">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1382">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1382">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1383">`BindingFlags.DeclaredOnly` para procurar apenas os membros declarados no <xref:System.Type>, e não os membros que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1383">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1384">Chamar esse método apenas com o `Public` sinalizador ou apenas o `NonPublic` sinalizador retornará os membros especificados e não requer quaisquer outros sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1384">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="2c3b9-1385">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1385">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1386">Para obter o inicializador de classe (. cctor) usando essa sobrecarga de método, você deve especificar <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1386">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1387">Também é possível obter o inicializador da classe usando-se a propriedade <xref:System.Type.TypeInitializer%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1387">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-1388">Se o T:System.Type atual representa um tipo genérico construído, este método retorna o <xref:System.Reflection.MemberInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1388">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1389">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método procura membros da restrição de classe ou os membros de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1389">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1390">O exemplo de código a seguir demonstra como usar o <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> sobrecarga de método para coletar informações sobre todos os membros de instância pública de uma classe especificada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1390">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1391">Obtém um método específico do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1391">Gets a specific method of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1392">A cadeia de caracteres que contém o nome do método público a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1392">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1393">Pesquisa o método público com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1393">Searches for the public method with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1394">Um objeto que representa o método público com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1394">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1395">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1395">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-1396">A pesquisa inclui os métodos de instância pública de static e public.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1396">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="2c3b9-1397">Se um método está sobrecarregado e tem mais de um método público, o <xref:System.Type.GetMethod%28System.String%29> método lança um <xref:System.Reflection.AmbiguousMatchException> exceção.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1397">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="2c3b9-1398">No exemplo a seguir, uma exceção é gerada porque não há mais de uma sobrecarga pública do <xref:System.Int32.ToString%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1398">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="2c3b9-1399">Por outro lado, pois o `Person.ToString` substituições de método <xref:System.Object.ToString%2A?displayProperty=nameWithType> e, portanto, não está sobrecarregado, o <xref:System.Type.GetMethod%28System.String%29> método é capaz de recuperar o <xref:System.Reflection.MethodInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1399">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="2c3b9-1400">Você pode fazer o seguinte para recuperar um método específico:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1400">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="2c3b9-1401">Chame o <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> método e especifique um `bindingAttr` argumento que identifica exclusivamente o método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1401">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="2c3b9-1402">Por exemplo, se a exceção é lançada como um tipo tem um estático e uma sobrecarga de instância, você pode especificar uma `bindingAttr` argumento de <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1402">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="2c3b9-1403">Chamar uma sobrecarga da <xref:System.Type.GetMethod%2A> método inclui um `types` parâmetro que define os tipos de parâmetros do método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1403">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="2c3b9-1404">Chamar o <xref:System.Type.GetMethods> método para recuperar uma matriz que contém todos os métodos públicos que pertencem a um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1404">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="2c3b9-1405">Você pode iterá-lo para identificar os métodos duplicados denominados `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1405">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="2c3b9-1406">Caso o T: System.Type atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1406">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1407">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1407">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1408">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1408">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1409">Por exemplo, o código do C# `GetMember("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1409">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1410">O exemplo a seguir obtém um método chamado `MethodA`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1410">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1411">Foi encontrado mais de um método com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1411">More than one method is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1412">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1412">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1413">A cadeia de caracteres que contém o nome do método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1413">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1414">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1414">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1415">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1415">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1416">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1416">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1417">Pesquisa o método especificado, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1417">Searches for the specified method, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1418">Um objeto que representa o método que corresponde aos requisitos especificados, se encontrado; do contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1418">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1419">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais métodos devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1419">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1420">Você deve especificar <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> ou <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1420">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1421">Especifique <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> para incluir métodos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1421">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1422">Especifique <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> para incluir métodos não públicos (ou seja, métodos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1422">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1423">Especifique <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1423">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1424">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1424">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1425"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1425"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1426"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> para procurar apenas os métodos declarados no <xref:System.Type>, e não os métodos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1426"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1427">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1427">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1428">Se um método está sobrecarregado e mais de uma sobrecarga cumpre as restrições especificadas pelo `bindingAttr` argumento, o método lança um <xref:System.Reflection.AmbiguousMatchException> exceção.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1428">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="2c3b9-1429">O exemplo a seguir, uma exceção é gerada porque:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1429">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="2c3b9-1430">O `TestClass` tipo tem duas sobrecargas de instância pública do `DisplayValue` método `DisplayValue(String)` e `DisplayValue(String, Object[])`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1430">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1431">O `TestClass` tipo tem duas sobrecargas de instância pública do `Equals` método, um deles é herdado do <xref:System.Object>: `Equals(TestClass)` e `Equals(Object)`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1431">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="2c3b9-1432">Você pode fazer o seguinte para recuperar um método específico:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1432">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="2c3b9-1433">Altere as restrições de associação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1433">Change the binding constraints.</span></span> <span data-ttu-id="2c3b9-1434">No exemplo anterior, a tentativa de recuperar uma instância pública `Equals` recupera do método que é declarado pelo tipo e não herdado com êxito `Equals(TestClass)`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1434">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1435">Chamar uma sobrecarga da <xref:System.Type.GetMethod%2A> método inclui um `types` parâmetro que define os tipos de parâmetros do método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1435">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="2c3b9-1436">Chamar o <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> método para recuperar uma matriz que contém todos os métodos que pertencem a um tipo que têm os atributos de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1436">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="2c3b9-1437">Você pode iterá-lo para identificar os métodos duplicados denominados `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1437">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="2c3b9-1438">Essa abordagem é ilustrada no manipulador do exemplo anterior para o <xref:System.Reflection.AmbiguousMatchException> exceção.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1438">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="2c3b9-1439">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1439">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1440">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1440">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1441">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1441">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1442">Por exemplo, o código do C# `GetMember("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1442">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1443">O exemplo a seguir obtém o método que corresponde a sinalizadores de associação especificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1443">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1444">Mais de um método é encontrado com o nome especificado e correspondendo às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1444">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1445">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1445">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1446">A cadeia de caracteres que contém o nome do método público a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1446">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-1447">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1447">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2c3b9-1448">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1448">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1449">Uma matriz vazia de objetos <see cref="T:System.Type" /> (conforme fornecido pelo campo <see cref="F:System.Type.EmptyTypes" /> ) para obter um método que não usa parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1449">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1450">Pesquisa o método público especificado cujos parâmetros correspondem aos tipos de argumento especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1450">Searches for the specified public method whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1451">Um objeto que representa o método público cujos parâmetros correspondem aos tipos de argumento especificados, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1451">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1452">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1452">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-1453">A pesquisa inclui os métodos de instância pública de static e public.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1453">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1454">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1454">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-1455">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1455">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-1456">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1456">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1457">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1457">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1458">O `name` parâmetro não pode incluir os argumentos de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1458">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="2c3b9-1459">Por exemplo, o código c# `GetMethod("MyGenericMethod<int>")` procura um método com o nome de texto "`MyGenericMethod<int>`", em vez de para um método chamado `MyGenericMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1459">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="2c3b9-1460">Em vez disso, use `GetMethod("MyGenericMethod")` com o parâmetro apropriado no `types` matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1460">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1461">O exemplo a seguir localiza sobrecargas específicas do `MethodA`, especificar uma variedade de tipos de argumento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1461">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1462">O [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] exemplo requer o `/unsafe` opção de compilador.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1462">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="2c3b9-1463">O exemplo a seguir recupera <xref:System.Reflection.MethodInfo> objetos que representam os `Add` métodos de um tipo não genérico (a <xref:System.Collections.ArrayList> classe), um tipo genérico aberto (o <xref:System.Collections.Generic.List%601> classe) e um tipo genérico fechado (o `List(Of String)` tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1463">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="2c3b9-1464">O exemplo define uma `GetAddMethod` método que recupera apropriado <xref:System.Reflection.MethodInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1464">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="2c3b9-1465">Para fornecer a `types` argumento para um tipo genérico aberto, ele chama o <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1465">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="2c3b9-1466">Para fornecer a `types` argumento para um tipo genérico fechado, ele recupera o valor da <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1466">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1467">Foi encontrado mais de um método com o nome especificado e com os parâmetros especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1467">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1468">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1468">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1469">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1469">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1470">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1470">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1471">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1471">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1472">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1472">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-1473">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1473">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1474">A cadeia de caracteres que contém o nome do método público a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1474">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-1475">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1475">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2c3b9-1476">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1476">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1477">Uma matriz vazia de objetos <see cref="T:System.Type" /> (conforme fornecido pelo campo <see cref="F:System.Type.EmptyTypes" /> ) para obter um método que não usa parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1477">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-1478">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1478">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-1479">Deve ser usado apenas durante a chamada por meio da interoperabilidade COM e apenas os parâmetros passados por referência são manipulados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1479">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="2c3b9-1480">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1480">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1481">Pesquisa o método público especificado cujos parâmetros correspondem aos modificadores e tipos de argumento especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1481">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1482">Um objeto que representa o método público que corresponde aos requisitos especificados, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1482">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1483">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1483">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-1484">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1484">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-1485">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1485">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-1486">A pesquisa inclui os métodos de instância pública de static e public.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1486">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1487">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1487">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-1488">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1488">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-1489">Caso o T: System.Type atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1489">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1490">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1490">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1491">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1491">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1492">Por exemplo, o código do C# `GetMethod("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1492">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="2c3b9-1493">Em vez disso, use `GetMethod("MyMethod")` com o parâmetro apropriado no `types` matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1493">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1494">Foi encontrado mais de um método com o nome especificado e com os parâmetros especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1494">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1495">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1495">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1496">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1496">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1497">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1497">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1498">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1498">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1499">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1499">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-1500">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1500">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-1501">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1501">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1502">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1502">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1503">A cadeia de caracteres que contém o nome do método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1503">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1504">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1504">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1505">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1505">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1506">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1506">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-1507">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1507">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-1508">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1508">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1509">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1509">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-1510">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1510">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2c3b9-1511">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1511">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1512">Uma matriz vazia de objetos <see cref="T:System.Type" /> (conforme fornecido pelo campo <see cref="F:System.Type.EmptyTypes" /> ) para obter um método que não usa parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1512">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-1513">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1513">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-1514">Deve ser usado apenas durante a chamada por meio da interoperabilidade COM e apenas os parâmetros passados por referência são manipulados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1514">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="2c3b9-1515">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1515">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1516">Pesquisa o método especificado cujos parâmetros correspondem aos tipos de argumento e modificadores especificados, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1516">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1517">Um objeto que representa o método que corresponde aos requisitos especificados, se encontrado; do contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1517">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1518">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1518">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-1519">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1519">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-1520">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais métodos devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1520">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1521">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1521">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1522">Especifique `BindingFlags.Public` para incluir métodos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1522">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1523">Especifique `BindingFlags.NonPublic` para incluir métodos não públicos (ou seja, métodos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1523">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1524">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1524">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1525">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1525">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1526">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1526">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1527">`BindingFlags.DeclaredOnly` para procurar apenas os métodos declarados no <xref:System.Type>, e não os métodos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1527">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1528">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1528">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1529">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1529">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-1530">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1530">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-1531">Caso o T: System.Type atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1531">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1532">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1532">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1533">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1533">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1534">Por exemplo, o código do C# `GetMember("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1534">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1535">O exemplo a seguir localiza sobrecargas específicas do `MethodA`, especificar restrições de associação e uma variedade de tipos de argumento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1535">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1536">O [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] exemplo requer o `/unsafe` opção de compilador.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1536">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1537">Mais de um método é encontrado com o nome especificado e correspondendo às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1537">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1538">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1538">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1539">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1539">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1540">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1540">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1541">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1541">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1542">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1542">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-1543">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1543">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-1544">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1544">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1545">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1545">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1546">A cadeia de caracteres que contém o nome do método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1546">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1547">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1547">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1548">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1548">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1549">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1549">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-1550">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1550">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-1551">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1551">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1552">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1552">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="2c3b9-1553">O objeto que especifica o conjunto de regras a ser usado em relação à ordem e ao layout dos argumentos, a como o valor retornado é passado, quais registros são usados para argumentos e como a pilha é limpa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1553">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-1554">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1554">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2c3b9-1555">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1555">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1556">Uma matriz vazia de objetos <see cref="T:System.Type" /> (conforme fornecido pelo campo <see cref="F:System.Type.EmptyTypes" /> ) para obter um método que não usa parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1556">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-1557">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1557">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-1558">Deve ser usado apenas durante a chamada por meio da interoperabilidade COM e apenas os parâmetros passados por referência são manipulados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1558">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="2c3b9-1559">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1559">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1560">Pesquisa o método especificado cujos parâmetros correspondem aos tipos de argumento e modificadores especificados, usando as restrições de associação especificadas e a convenção de chamada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1560">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1561">Um objeto que representa o método que corresponde aos requisitos especificados, se encontrado; do contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1561">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1562">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1562">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-1563">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1563">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-1564">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `GetXXX` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1564">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1565">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1565">Member Type</span></span>|<span data-ttu-id="2c3b9-1566">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1566">Static</span></span>|<span data-ttu-id="2c3b9-1567">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1567">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1568">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1568">Constructor</span></span>|<span data-ttu-id="2c3b9-1569">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1569">No</span></span>|<span data-ttu-id="2c3b9-1570">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1570">No</span></span>|  
|<span data-ttu-id="2c3b9-1571">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1571">Field</span></span>|<span data-ttu-id="2c3b9-1572">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1572">No</span></span>|<span data-ttu-id="2c3b9-1573">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1573">Yes.</span></span> <span data-ttu-id="2c3b9-1574">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1574">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1575">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1575">Event</span></span>|<span data-ttu-id="2c3b9-1576">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1576">Not applicable</span></span>|<span data-ttu-id="2c3b9-1577">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1577">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1578">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1578">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1579">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1579">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1580">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1580">Method</span></span>|<span data-ttu-id="2c3b9-1581">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1581">No</span></span>|<span data-ttu-id="2c3b9-1582">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1582">Yes.</span></span> <span data-ttu-id="2c3b9-1583">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1583">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1584">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1584">Nested Type</span></span>|<span data-ttu-id="2c3b9-1585">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1585">No</span></span>|<span data-ttu-id="2c3b9-1586">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1586">No</span></span>|  
|<span data-ttu-id="2c3b9-1587">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1587">Property</span></span>|<span data-ttu-id="2c3b9-1588">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1588">Not applicable</span></span>|<span data-ttu-id="2c3b9-1589">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1589">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1590">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1590">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1591">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1591">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1592">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1592">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1593">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1593">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1594">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1594">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1595">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1595">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1596">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1596">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1597">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais métodos devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1597">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1598">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1598">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1599">Especifique `BindingFlags.Public` para incluir métodos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1599">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1600">Especifique `BindingFlags.NonPublic` para incluir métodos não públicos (ou seja, métodos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1600">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1601">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1601">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1602">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1602">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1603">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1603">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1604">`BindingFlags.DeclaredOnly` para procurar apenas os métodos declarados no <xref:System.Type>, e não os métodos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1604">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1605">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1605">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1606">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1606">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-1607">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1607">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-1608">Caso o T: System.Type atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1608">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1609">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1609">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1610">Para métodos genéricos, não inclua os argumentos de tipo em `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1610">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="2c3b9-1611">Por exemplo, o código do C# `GetMember("MyMethod<int>")` procura um membro com o nome de texto "`MyMethod<int>`", e não um método chamado `MyMethod` que tem um argumento genérico do tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1611">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1612">O exemplo a seguir localiza sobrecargas específicas do `MethodA`, especificar restrições de associação, convenções de chamada e uma variedade de tipos de argumento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1612">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1613">O [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] exemplo requer o `/unsafe` opção de compilador.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1613">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1614">Mais de um método é encontrado com o nome especificado e correspondendo às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1614">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1615">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1615">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1616">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1616">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1617">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1617">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1618">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1618">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1619">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1619">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-1620">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1620">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-1621">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1621">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1622">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1622">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1623">A cadeia de caracteres que contém o nome do método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1623">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1624">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1624">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1625">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1625">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1626">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1626">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-1627">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1627">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-1628">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1628">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1629">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1629">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="2c3b9-1630">O objeto que especifica o conjunto de regras a ser usado em relação à ordem e ao layout dos argumentos, a como o valor retornado é passado, quais registros são usados para argumentos e qual processo limpa a pilha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1630">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-1631">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para o método a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1631">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2c3b9-1632">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1632">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1633">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, Type[] types = new Type[0]) para obter um método que não aceita parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1633">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
          <span data-ttu-id="2c3b9-1634">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1634">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1635">
            <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1635">
              <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1636">Se <c>types</c> for <see langword="null" />, os argumentos não serão correspondidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1636">If <c>types</c> is <see langword="null" />, arguments are not matched.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-1637">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1637">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-1638">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1638">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1639">Quando substituído em uma classe derivada, pesquisa o método especificado, cujos parâmetros correspondem aos tipos de argumento e modificadores especificados, usando as restrições de associação especificadas e a convenção de chamada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1639">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1640">Um objeto que representa o método que corresponde aos requisitos especificados, se encontrado; do contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1640">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1641">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1641">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-1642">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1642">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-1643">Se `types` é `null`, argumentos não serão correspondidos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1643">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="2c3b9-1644">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais métodos devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1644">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1645">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1645">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1646">Especifique `BindingFlags.Public` para incluir métodos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1646">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1647">Especifique `BindingFlags.NonPublic` para incluir métodos não públicos (ou seja, métodos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1647">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1648">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1648">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1649">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1649">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1650">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1650">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1651">`BindingFlags.DeclaredOnly` para procurar apenas os métodos declarados no <xref:System.Type>, e não os métodos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1651">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1652">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1652">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1653">Mais de um método é encontrado com o nome especificado e correspondendo às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1653">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1654">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1654">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-1655">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1655">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-1656">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1656">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1657">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1657">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-1658">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1658">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1659">
            <paramref name="types" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1659">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-1660">O tipo atual é um <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1660">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1661">Obtém os métodos do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1661">Gets the methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1662">Retorna todos os métodos públicos do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1662">Returns all the public methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1663">Uma matriz de objetos <see cref="T:System.Reflection.MethodInfo" /> que representam todos os métodos públicos definidos para o <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1663">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1664">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1664">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1665">Uma matriz vazia do tipo <see cref="T:System.Reflection.MethodInfo" />, se nenhum método público for definido para o <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1665">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1666">O <xref:System.Type.GetMethods%2A> método não retorna métodos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1666">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1667">Seu código não deve depender a ordem na qual os métodos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1667">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1668">Construtores não são incluídos na matriz de métodos retornados por essa chamada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1668">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="2c3b9-1669">Fazer uma chamada separada para `GetConstructors()` para obter os métodos de construtor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1669">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="2c3b9-1670">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1670">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1671">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1671">Member Type</span></span>|<span data-ttu-id="2c3b9-1672">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1672">Static</span></span>|<span data-ttu-id="2c3b9-1673">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1673">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1674">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1674">Constructor</span></span>|<span data-ttu-id="2c3b9-1675">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1675">No</span></span>|<span data-ttu-id="2c3b9-1676">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1676">No</span></span>|  
|<span data-ttu-id="2c3b9-1677">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1677">Field</span></span>|<span data-ttu-id="2c3b9-1678">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1678">No</span></span>|<span data-ttu-id="2c3b9-1679">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1679">Yes.</span></span> <span data-ttu-id="2c3b9-1680">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1680">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1681">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1681">Event</span></span>|<span data-ttu-id="2c3b9-1682">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1682">Not applicable</span></span>|<span data-ttu-id="2c3b9-1683">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1683">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1684">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1684">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1685">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1685">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1686">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1686">Method</span></span>|<span data-ttu-id="2c3b9-1687">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1687">No</span></span>|<span data-ttu-id="2c3b9-1688">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1688">Yes.</span></span> <span data-ttu-id="2c3b9-1689">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1689">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1690">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1690">Nested Type</span></span>|<span data-ttu-id="2c3b9-1691">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1691">No</span></span>|<span data-ttu-id="2c3b9-1692">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1692">No</span></span>|  
|<span data-ttu-id="2c3b9-1693">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1693">Property</span></span>|<span data-ttu-id="2c3b9-1694">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1694">Not applicable</span></span>|<span data-ttu-id="2c3b9-1695">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1695">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1696">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1696">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1697">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1697">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1698">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1698">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1699">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1699">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1700">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1700">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1701">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1701">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1702">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1702">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1703">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1703">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-1704">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1704">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-1705">Se o T:System.Type atual representa um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1705">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1706">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1706">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1707">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1707">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1708">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1708">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1709">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1709">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1710">Quando é substituído em uma classe derivada, pesquisa os métodos definidos para o <see cref="T:System.Type" /> atual usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1710">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1711">Uma matriz de objetos <see cref="T:System.Reflection.MethodInfo" /> representando todos os métodos definidos para o <see cref="T:System.Type" /> atual que correspondem às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1711">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2c3b9-1712">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1712">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1713">Uma matriz vazia do tipo <see cref="T:System.Reflection.MethodInfo" />, se nenhum método estiver definido para o atual <see cref="T:System.Type" />, ou se nenhum dos métodos definidos corresponder às restrições de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1713">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1714">O <xref:System.Type.GetMethods%2A> método não retorna métodos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1714">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1715">Seu código não deve depender a ordem na qual os métodos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1715">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1716">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais métodos devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1716">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1717">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1717">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1718">Especifique `BindingFlags.Public` para incluir métodos públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1718">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1719">Especifique `BindingFlags.NonPublic` para incluir métodos não públicos (ou seja, métodos particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1719">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="2c3b9-1720">Somente protegido e métodos internos em classes base são retornados; métodos privados em classes base não são retornados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1720">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="2c3b9-1721">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1721">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1722">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1722">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1723">`BindingFlags.DeclaredOnly` para procurar apenas os métodos declarados no <xref:System.Type>, e não os métodos que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1723">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1724">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1724">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1725">Não é possível omitir parâmetros durante a pesquisa de construtores e métodos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1725">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="2c3b9-1726">Só é possível omitir parâmetros durante a invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1726">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="2c3b9-1727">Se o T:System.Type atual representa um tipo genérico construído, este método retorna o <xref:System.Reflection.MethodInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1727">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1728">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os métodos de restrição da classe ou os métodos de <xref:System.Object> caso não haja restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1728">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1729">O exemplo a seguir cria uma classe com dois métodos públicos e um método protegido, cria uma `Type` objeto correspondente `MyTypeClass`, obtém todos os métodos públicos e não públicos e exibe seus nomes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1729">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1730">Obtém um tipo específico aninhado no <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1730">Gets a specific type nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type&#xA;override this.GetNestedType : string -&gt; Type" Usage="type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1731">A cadeia de caracteres que contém o nome do tipo aninhado a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1731">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1732">Pesquisa o tipo aninhado público com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1732">Searches for the public nested type with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1733">Um objeto que representa o tipo aninhado público com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1733">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1734">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1734">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="2c3b9-1735">Use o nome simple da classe aninhada para `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1735">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="2c3b9-1736">Não qualifique-o com o nome da classe externa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1736">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="2c3b9-1737">Para uma classe aninhada genérica, use o nome danificado — ou seja, acrescente um acento grave e o número de argumentos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1737">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="2c3b9-1738">Por exemplo, use a cadeia de caracteres "interna\`1" obter o genérico de classes aninhadas `Inner<T>` (`Inner(Of T)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1738">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1739">Não inclua a sintaxe específica da linguagem para parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1739">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="2c3b9-1740">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1740">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1741">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1741">Member Type</span></span>|<span data-ttu-id="2c3b9-1742">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1742">Static</span></span>|<span data-ttu-id="2c3b9-1743">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1743">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1744">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1744">Constructor</span></span>|<span data-ttu-id="2c3b9-1745">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1745">No</span></span>|<span data-ttu-id="2c3b9-1746">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1746">No</span></span>|  
|<span data-ttu-id="2c3b9-1747">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1747">Field</span></span>|<span data-ttu-id="2c3b9-1748">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1748">No</span></span>|<span data-ttu-id="2c3b9-1749">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1749">Yes.</span></span> <span data-ttu-id="2c3b9-1750">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1750">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1751">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1751">Event</span></span>|<span data-ttu-id="2c3b9-1752">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1752">Not applicable</span></span>|<span data-ttu-id="2c3b9-1753">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1753">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1754">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1754">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1755">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1755">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1756">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1756">Method</span></span>|<span data-ttu-id="2c3b9-1757">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1757">No</span></span>|<span data-ttu-id="2c3b9-1758">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1758">Yes.</span></span> <span data-ttu-id="2c3b9-1759">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1759">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1760">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1760">Nested Type</span></span>|<span data-ttu-id="2c3b9-1761">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1761">No</span></span>|<span data-ttu-id="2c3b9-1762">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1762">No</span></span>|  
|<span data-ttu-id="2c3b9-1763">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1763">Property</span></span>|<span data-ttu-id="2c3b9-1764">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1764">Not applicable</span></span>|<span data-ttu-id="2c3b9-1765">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1765">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1766">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1766">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1767">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1767">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1768">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1768">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1769">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1769">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1770">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1770">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1771">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1771">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1772">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1772">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1773">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os tipos aninhados da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1773">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="2c3b9-1774">Se um tipo aninhado for genérico, este método retornará sua definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1774">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="2c3b9-1775">Isso será verdadeiro mesmo se o tipo genérico delimitador for um tipo construído fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1775">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1776">Caso o <xref:System.Type> atual represente um tipo genérico definido no C#, no Visual Basic ou no C++, seus tipos aninhados são todos genéricos mesmo que não tenham parâmetros genéricos próprios.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1776">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="2c3b9-1777">Isso não é necessariamente verdadeiro de tipos aninhados definidos em assemblies dinâmicos ou compilados com o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1777">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="2c3b9-1778">Para obter informações sobre tipos genéricos aninhados e sobre como construir tipos genéricos aninhados das definições de tipo genérico, consulte <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1778">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1779">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1779">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1780">A cadeia de caracteres que contém o nome do tipo aninhado a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1780">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1781">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1781">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1782">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1782">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1783">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1783">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1784">Quando substituído em uma classe derivada, pesquisa as propriedades do tipo aninhado especificado, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1784">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1785">Um objeto que representa o tipo aninhado que corresponde aos requisitos especificados, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1785">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1786">Use o nome simple da classe aninhada para `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1786">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="2c3b9-1787">Não qualifique-o com o nome da classe externa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1787">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="2c3b9-1788">Para uma classe aninhada genérica, use o nome danificado — ou seja, acrescente um acento grave e o número de parâmetros genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1788">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="2c3b9-1789">Por exemplo, use a cadeia de caracteres "interna\`1" obter o genérico de classes aninhadas `Inner<T>` (`Inner(Of T)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1789">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1790">Não inclua a sintaxe específica da linguagem para parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1790">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="2c3b9-1791">O seguinte <xref:System.Reflection.BindingFlags> tipos de filtro flags pode ser usado para definir qual aninhados para incluir na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1791">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1792">Você deve especificar <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> ou <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1792">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1793">Especifique <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> para incluir tipos aninhados públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1793">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1794">Especifique <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> para incluir tipos aninhados de não-públicos (ou seja, particulares, internos e protegidos tipos aninhados) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1794">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="2c3b9-1795">Esse método retorna apenas os tipos aninhados do tipo atual.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1795">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="2c3b9-1796">Ele pesquisa as classes base do tipo atual.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1796">It does not search the base classes of the current type.</span></span> <span data-ttu-id="2c3b9-1797">Para localizar os tipos que estão aninhados em classes base, você deve movimentar a hierarquia de herança, chamar <xref:System.Type.GetNestedType%2A> em cada nível.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1797">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="2c3b9-1798"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> são ignorados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1798"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="2c3b9-1799">Chamar esse método apenas com o <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> sinalizador ou apenas o <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> sinalizador retornará especificado aninhados de tipos e não requer quaisquer outros sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1799">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="2c3b9-1800">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1800">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1801">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os tipos aninhados da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1801">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="2c3b9-1802">Se um tipo aninhado for genérico, este método retornará sua definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1802">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="2c3b9-1803">Isso será verdadeiro mesmo se o tipo genérico delimitador for um tipo construído fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1803">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1804">Caso o <xref:System.Type> atual represente um tipo genérico definido no C#, no Visual Basic ou no C++, seus tipos aninhados são todos genéricos mesmo que não tenham parâmetros genéricos próprios.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1804">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="2c3b9-1805">Isso não é necessariamente verdadeiro de tipos aninhados definidos em assemblies dinâmicos ou compilados com o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1805">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="2c3b9-1806">Para obter informações sobre tipos genéricos aninhados e sobre como construir tipos genéricos aninhados das definições de tipo genérico, consulte <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1806">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1807">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1807">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1808">Obtém os tipos aninhados no <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1808">Gets the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]&#xA;override this.GetNestedTypes : unit -&gt; Type[]" Usage="type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1809">Retorna os tipos públicos aninhados no <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1809">Returns the public types nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1810">Uma matriz de <see cref="T:System.Type" /> objetos que representam os tipos públicos aninhados no <see cref="T:System.Type" /> atual (a pesquisa não é recursiva) ou uma matriz vazia do tipo <see cref="T:System.Type" /> se não há tipos públicos são aninhados no <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1810">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1811">O <xref:System.Type.GetNestedTypes%2A> método não retorna tipos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1811">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1812">Seu código não deve depender a ordem na qual os tipos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1812">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1813">Somente os tipos públicos aninhados imediatamente no tipo atual são retornados; a pesquisa não é recursiva.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1813">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="2c3b9-1814">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1814">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1815">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1815">Member Type</span></span>|<span data-ttu-id="2c3b9-1816">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1816">Static</span></span>|<span data-ttu-id="2c3b9-1817">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1817">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1818">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1818">Constructor</span></span>|<span data-ttu-id="2c3b9-1819">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1819">No</span></span>|<span data-ttu-id="2c3b9-1820">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1820">No</span></span>|  
|<span data-ttu-id="2c3b9-1821">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1821">Field</span></span>|<span data-ttu-id="2c3b9-1822">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1822">No</span></span>|<span data-ttu-id="2c3b9-1823">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1823">Yes.</span></span> <span data-ttu-id="2c3b9-1824">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1824">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1825">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1825">Event</span></span>|<span data-ttu-id="2c3b9-1826">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1826">Not applicable</span></span>|<span data-ttu-id="2c3b9-1827">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1827">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1828">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1828">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1829">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1829">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1830">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1830">Method</span></span>|<span data-ttu-id="2c3b9-1831">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1831">No</span></span>|<span data-ttu-id="2c3b9-1832">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1832">Yes.</span></span> <span data-ttu-id="2c3b9-1833">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1833">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1834">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1834">Nested Type</span></span>|<span data-ttu-id="2c3b9-1835">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1835">No</span></span>|<span data-ttu-id="2c3b9-1836">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1836">No</span></span>|  
|<span data-ttu-id="2c3b9-1837">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1837">Property</span></span>|<span data-ttu-id="2c3b9-1838">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1838">Not applicable</span></span>|<span data-ttu-id="2c3b9-1839">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1839">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1840">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1840">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1841">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1841">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1842">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1842">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1843">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1843">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1844">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1844">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1845">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1845">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1846">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1846">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1847">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os tipos aninhados da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1847">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="2c3b9-1848">Se um tipo aninhado for genérico, este método retornará sua definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1848">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="2c3b9-1849">Isso será verdadeiro mesmo se o tipo genérico delimitador for um tipo construído fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1849">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1850">Caso o <xref:System.Type> atual represente um tipo genérico definido no C#, no Visual Basic ou no C++, seus tipos aninhados são todos genéricos mesmo que não tenham parâmetros genéricos próprios.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1850">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="2c3b9-1851">Isso não é necessariamente verdadeiro de tipos aninhados definidos em assemblies dinâmicos ou compilados com o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1851">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="2c3b9-1852">Para obter informações sobre tipos genéricos aninhados e sobre como construir tipos genéricos aninhados das definições de tipo genérico, consulte <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1852">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1853">O exemplo a seguir define uma classe aninhada e um `struct` na `MyClass`e, em seguida, obtém os objetos dos tipos aninhados usando o tipo do `MyClass`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1853">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1854">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1854">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1855">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1855">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1856">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1856">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1857">Quando é substituído em uma classe derivada, pesquisa as propriedades do <see cref="T:System.Type" /> atual, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1857">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1858">Uma matriz de objetos <see cref="T:System.Type" /> que representam todos os tipos aninhados no <see cref="T:System.Type" /> atual que coincidem com as restrições de associação especificadas (a pesquisa não é recursiva) ou uma matriz vazia do tipo <see cref="T:System.Type" />, se nenhum dos tipos aninhados são encontrados que correspondem às restrições de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1858">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1859">A pesquisa por tipos aninhados não é recursiva.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1859">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="2c3b9-1860">O <xref:System.Type.GetNestedTypes%2A> método não retorna tipos em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1860">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1861">Seu código não deve depender a ordem na qual os tipos são retornados, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1861">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1862">O seguinte <xref:System.Reflection.BindingFlags> tipos de filtro flags pode ser usado para definir qual aninhados para incluir na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1862">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1863">Você deve especificar <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> ou <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1863">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1864">Especifique <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> para incluir tipos aninhados públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1864">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1865">Especifique <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> para incluir tipos aninhados de não-públicos (ou seja, particulares, internos e protegidos tipos aninhados) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1865">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="2c3b9-1866">Esse método retorna apenas os tipos aninhados do tipo atual.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1866">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="2c3b9-1867">Ele pesquisa as classes base do tipo atual.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1867">It does not search the base classes of the current type.</span></span> <span data-ttu-id="2c3b9-1868">Para localizar os tipos que estão aninhados em classes base, você deve movimentar a hierarquia de herança, chamar <xref:System.Type.GetNestedTypes%2A> em cada nível.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1868">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="2c3b9-1869"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> são ignorados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1869"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="2c3b9-1870">Chamar esse método apenas com o <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> sinalizador ou apenas o <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> sinalizador retornará especificado aninhados de tipos e não requer quaisquer outros sinalizadores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1870">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="2c3b9-1871">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1871">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1872">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, este método pesquisa os tipos aninhados da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1872">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="2c3b9-1873">Se um tipo aninhado for genérico, este método retornará sua definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1873">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="2c3b9-1874">Isso será verdadeiro mesmo se o tipo genérico delimitador for um tipo construído fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1874">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-1875">Caso o <xref:System.Type> atual represente um tipo genérico definido no C#, no Visual Basic ou no C++, seus tipos aninhados são todos genéricos mesmo que não tenham parâmetros genéricos próprios.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1875">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="2c3b9-1876">Isso não é necessariamente verdadeiro de tipos aninhados definidos em assemblies dinâmicos ou compilados com o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1876">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="2c3b9-1877">Para obter informações sobre tipos genéricos aninhados e sobre como construir tipos genéricos aninhados das definições de tipo genérico, consulte <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1877">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1878">O exemplo a seguir cria duas classes públicas aninhadas e duas classes aninhadas de protegido e exibe informações para as classes que correspondem às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1878">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1879">Obtém as propriedades do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1879">Gets the properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1880">Retorna todas as propriedades públicas do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1880">Returns all the public properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1881">Uma matriz de objetos <see cref="T:System.Reflection.PropertyInfo" /> que representa todas as propriedades públicas do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1881">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2c3b9-1882">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1882">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1883">Uma matriz vazia do tipo <see cref="T:System.Reflection.PropertyInfo" />, se o <see cref="T:System.Type" /> atual não tiver propriedades públicas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1883">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1884">Chamar essa sobrecarga é equivalente a chamar o <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> sobrecarga com um `bindingAttr` argumento igual a `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` em c# e `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1884">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="2c3b9-1885">Ele retorna todas as instância pública e propriedades estáticas, tanto aqueles definidos pelo tipo representado por atual <xref:System.Type> objeto, bem como aqueles herdados de seus tipos base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1885">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="2c3b9-1886">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1886">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-1887">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1887">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-1888">O <xref:System.Type.GetProperties%2A> método não retorna as propriedades em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1888">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1889">Seu código não deve depender a ordem na qual as propriedades são retornadas, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1889">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1890">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1890">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-1891">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1891">Member Type</span></span>|<span data-ttu-id="2c3b9-1892">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1892">Static</span></span>|<span data-ttu-id="2c3b9-1893">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1893">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-1894">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1894">Constructor</span></span>|<span data-ttu-id="2c3b9-1895">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1895">No</span></span>|<span data-ttu-id="2c3b9-1896">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1896">No</span></span>|  
|<span data-ttu-id="2c3b9-1897">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1897">Field</span></span>|<span data-ttu-id="2c3b9-1898">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1898">No</span></span>|<span data-ttu-id="2c3b9-1899">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1899">Yes.</span></span> <span data-ttu-id="2c3b9-1900">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1900">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1901">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1901">Event</span></span>|<span data-ttu-id="2c3b9-1902">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1902">Not applicable</span></span>|<span data-ttu-id="2c3b9-1903">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1903">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1904">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1904">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1905">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1905">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-1906">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1906">Method</span></span>|<span data-ttu-id="2c3b9-1907">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1907">No</span></span>|<span data-ttu-id="2c3b9-1908">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1908">Yes.</span></span> <span data-ttu-id="2c3b9-1909">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1909">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-1910">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1910">Nested Type</span></span>|<span data-ttu-id="2c3b9-1911">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1911">No</span></span>|<span data-ttu-id="2c3b9-1912">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1912">No</span></span>|  
|<span data-ttu-id="2c3b9-1913">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1913">Property</span></span>|<span data-ttu-id="2c3b9-1914">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1914">Not applicable</span></span>|<span data-ttu-id="2c3b9-1915">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1915">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-1916">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1916">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1917">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1917">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-1918">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1918">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-1919">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1919">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-1920">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1920">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-1921">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1921">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-1922">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1922">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-1923">Se o T:System.Type atual representa um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1923">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1924">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1924">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1925">O exemplo a seguir demonstra o uso do método `GetProperties`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1925">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1926">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1926">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1927">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1927">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1928">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1928">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1929">Quando é substituído em uma classe derivada, pesquisa as propriedades do atual <see cref="T:System.Type" />, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1929">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1930">Uma matriz de objetos <see cref="T:System.Reflection.PropertyInfo" /> que representa todas as propriedades do <see cref="T:System.Type" /> atual que correspondem às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1930">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2c3b9-1931">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1931">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1932">Uma matriz vazia do tipo <see cref="T:System.Reflection.PropertyInfo" />, se o <see cref="T:System.Type" /> atual não tiver propriedades, ou se nenhuma das propriedades corresponderem às restrições de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1932">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1933">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1933">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-1934">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1934">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-1935">O <xref:System.Type.GetProperties%2A> método não retorna as propriedades em uma ordem específica, como em ordem alfabética ou ordem de declaração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1935">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="2c3b9-1936">Seu código não deve depender a ordem na qual as propriedades são retornadas, porque essa ordem varia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1936">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="2c3b9-1937">O seguinte <xref:System.Reflection.BindingFlags> tipos de filtro flags pode ser usado para definir qual aninhados para incluir na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1937">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1938">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1938">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1939">Especifique `BindingFlags.Public` para incluir propriedades públicas na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1939">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1940">Especifique `BindingFlags.NonPublic` para incluir propriedades não públicas (ou seja, propriedades particulares, internas e protegidas) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1940">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="2c3b9-1941">Somente protegido e propriedades internas em classes base são retornadas; as propriedades privadas em classes base não são retornadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1941">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="2c3b9-1942">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1942">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1943">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1943">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1944">`BindingFlags.DeclaredOnly` para procurar apenas as propriedades declaradas no <xref:System.Type>, e não as propriedades que foram simplesmente herdadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1944">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1945">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1945">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-1946">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1946">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-1947">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1947">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-1948">Se o T:System.Type atual representa um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> objetos com os parâmetros de tipo substituídos pelos argumentos de tipo apropriado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1948">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1949">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1949">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1950">O exemplo a seguir define uma classe chamada `PropertyClass` que inclui seis propriedades: dois são públicos, um é privado, uma é protegida, um é interno (`Friend` no Visual Basic), e um está protegido interno (`Protected Friend` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1950">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1951">Ele então exibe algumas informações básicas de propriedade (o nome da propriedade e o tipo, se ele é leitura/gravação e a visibilidade de seu `get` e `set` acessadores) para as propriedades que correspondem às restrições de associação especificadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1951">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-1952">Obtém uma propriedade específica do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1952">Gets a specific property of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1953">A cadeia de caracteres que contém o nome da propriedade pública a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1953">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1954">Pesquisa a propriedade pública com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1954">Searches for the public property with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1955">Um objeto que representa a propriedade pública com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1955">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1956">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1956">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-1957">A pesquisa inclui propriedades de instância estática pública e pública.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1957">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="2c3b9-1958">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1958">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-1959">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1959">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-1960">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1960">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-1961">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1961">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="2c3b9-1962">Situações nas quais <xref:System.Reflection.AmbiguousMatchException> ocorre incluem o seguinte:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1962">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="2c3b9-1963">Um tipo contém duas propriedades indexadas que têm o mesmo nome, mas diferentes números de parâmetros.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1963">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="2c3b9-1964">Para resolver a ambiguidade, use uma sobrecarga da <xref:System.Type.GetProperty%2A> método que especifica os tipos de parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1964">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="2c3b9-1965">Um tipo derivado declara uma propriedade que oculta uma propriedade herdada com o mesmo nome, usando o `new` modificador (`Shadows` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1965">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-1966">Para resolver a ambiguidade, use o <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> sobrecarga de método e adicione o <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> sinalizador para restringir a pesquisa a membros que não são herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1966">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="2c3b9-1967">Indexadores e propriedades padrão</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1967">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="2c3b9-1968">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] simplificaram a sintaxe para acessar propriedades indexadas e permitem que uma propriedade indexada seja um padrão para o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1968">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="2c3b9-1969">Por exemplo, se a variável `myList` refere-se a uma <xref:System.Collections.ArrayList>, a sintaxe `myList[3]` (`myList(3)` no Visual Basic) recupera o elemento com o índice 3.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1969">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="2c3b9-1970">É possível sobrecarregar a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1970">You can overload the property.</span></span>  
  
 <span data-ttu-id="2c3b9-1971">No C#, este recurso é chamado de indexador e não pode ser referenciado por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1971">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="2c3b9-1972">Por padrão, um indexador c# é exibido nos metadados como uma propriedade indexada chamada "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1972">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="2c3b9-1973">No entanto, um desenvolvedor de biblioteca de classes pode usar o atributo <xref:System.Runtime.CompilerServices.IndexerNameAttribute> para alterar o nome do indexador nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1973">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="2c3b9-1974">Por exemplo, a classe <xref:System.String> tem um indexador chamado <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1974">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="2c3b9-1975">As propriedades indexadas criadas usando-se linguagens diferentes do C# também podem ter nomes diferentes do item.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1975">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="2c3b9-1976">Para determinar se um tipo tem uma propriedade padrão, use o método <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> para testar o atributo <xref:System.Reflection.DefaultMemberAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1976">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="2c3b9-1977">Caso o tipo tenha <xref:System.Reflection.DefaultMemberAttribute>, a propriedade <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> retorna o nome da propriedade padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1977">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-1978">O exemplo a seguir recupera o `Type` objeto de uma classe definida pelo usuário, recupera uma propriedade de classe e exibe o nome da propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1978">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="2c3b9-1979">Internamente, essa propriedade é chamada nos metadados com o nome "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1979">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="2c3b9-1980">Qualquer tentativa de obter `PropertyInfo` usando a reflexão deve especificar esse nome interno para retornar corretamente o `PropertyInfo` propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1980">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-1981">Foi encontrada mais de uma propriedade com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1981">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-1982">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1982">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-1983">A cadeia de caracteres que contém o nome da propriedade a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1983">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-1984">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1984">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-1985">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1985">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-1986">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1986">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-1987">Pesquisa a propriedade especificada usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1987">Searches for the specified property, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-1988">Um objeto que representa a propriedade que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-1988">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-1989">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1989">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-1990">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1990">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-1991">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de filtro podem ser usados para definir quais propriedades a serem incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1991">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-1992">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1992">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-1993">Especifique `BindingFlags.Public` para incluir propriedades públicas na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1993">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1994">Especifique `BindingFlags.NonPublic` para incluir propriedades não públicas (ou seja, propriedades particulares, internas e protegidas) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1994">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-1995">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1995">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-1996">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1996">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-1997">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1997">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-1998">`BindingFlags.DeclaredOnly` para procurar apenas as propriedades declaradas no <xref:System.Type>, e não as propriedades que foram simplesmente herdadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1998">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-1999">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-1999">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-2000">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2000">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-2001">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2001">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="2c3b9-2002">Situações nas quais <xref:System.Reflection.AmbiguousMatchException> ocorre incluem o seguinte:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2002">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="2c3b9-2003">Um tipo contém duas propriedades indexadas que têm o mesmo nome, mas diferentes números de parâmetros.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2003">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="2c3b9-2004">Para resolver a ambiguidade, use uma sobrecarga da <xref:System.Type.GetProperty%2A> método que especifica os tipos de parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2004">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="2c3b9-2005">Um tipo derivado declara uma propriedade que oculta uma propriedade herdada com o mesmo nome, usando o `new` modificador (`Shadows` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2005">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-2006">Para resolver a ambiguidade, inclua <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> para restringir a pesquisa a membros que não são herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2006">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="2c3b9-2007">Indexadores e propriedades padrão</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2007">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="2c3b9-2008">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] simplificaram a sintaxe para acessar propriedades indexadas e permitem que uma propriedade indexada seja um padrão para o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2008">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="2c3b9-2009">Por exemplo, se a variável `myList` refere-se a uma <xref:System.Collections.ArrayList>, a sintaxe `myList[3]` (`myList(3)` no Visual Basic) recupera o elemento com o índice 3.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2009">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="2c3b9-2010">É possível sobrecarregar a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2010">You can overload the property.</span></span>  
  
 <span data-ttu-id="2c3b9-2011">No C#, este recurso é chamado de indexador e não pode ser referenciado por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2011">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="2c3b9-2012">Por padrão, um indexador c# é exibido nos metadados como uma propriedade indexada chamada "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2012">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="2c3b9-2013">No entanto, um desenvolvedor de biblioteca de classes pode usar o atributo <xref:System.Runtime.CompilerServices.IndexerNameAttribute> para alterar o nome do indexador nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2013">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="2c3b9-2014">Por exemplo, a classe <xref:System.String> tem um indexador chamado <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2014">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="2c3b9-2015">As propriedades indexadas criadas usando-se linguagens diferentes do C# também podem ter nomes diferentes do item.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2015">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="2c3b9-2016">Para determinar se um tipo tem uma propriedade padrão, use o método <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> para testar o atributo <xref:System.Reflection.DefaultMemberAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2016">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="2c3b9-2017">Caso o tipo tenha <xref:System.Reflection.DefaultMemberAttribute>, a propriedade <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> retorna o nome da propriedade padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2017">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-2018">O exemplo a seguir recupera o tipo de uma classe definida pelo usuário, recupera uma propriedade de classe e exibe o nome da propriedade de acordo com as restrições de associação especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2018">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-2019">É encontrada mais de uma propriedade com o nome especificado e que corresponde às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2019">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2020">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2020">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-2021">A cadeia de caracteres que contém o nome da propriedade pública a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2021">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2c3b9-2022">O tipo de retorno da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2022">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2023">Pesquisa a propriedade pública com o nome e tipo retornado especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2023">Searches for the public property with the specified name and return type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2024">Um objeto que representa a propriedade pública com o nome especificado, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2024">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2025">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2025">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-2026">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2026">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-2027">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2027">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-2028">A pesquisa inclui propriedades de instância estática pública e pública.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2028">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="2c3b9-2029">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2029">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-2030">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2030">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="2c3b9-2031">Indexadores e propriedades padrão</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2031">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="2c3b9-2032">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] simplificaram a sintaxe para acessar propriedades indexadas e permitem que uma propriedade indexada seja um padrão para o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2032">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="2c3b9-2033">Por exemplo, se a variável `myList` refere-se a uma <xref:System.Collections.ArrayList>, a sintaxe `myList[3]` (`myList(3)` no Visual Basic) recupera o elemento com o índice 3.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2033">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="2c3b9-2034">É possível sobrecarregar a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2034">You can overload the property.</span></span>  
  
 <span data-ttu-id="2c3b9-2035">No C#, este recurso é chamado de indexador e não pode ser referenciado por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2035">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="2c3b9-2036">Por padrão, um indexador c# é exibido nos metadados como uma propriedade indexada chamada "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2036">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="2c3b9-2037">No entanto, um desenvolvedor de biblioteca de classes pode usar o atributo <xref:System.Runtime.CompilerServices.IndexerNameAttribute> para alterar o nome do indexador nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2037">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="2c3b9-2038">Por exemplo, a classe <xref:System.String> tem um indexador chamado <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2038">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="2c3b9-2039">As propriedades indexadas criadas usando-se linguagens diferentes do C# também podem ter nomes diferentes do item.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2039">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="2c3b9-2040">Para determinar se um tipo tem uma propriedade padrão, use o método <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> para testar o atributo <xref:System.Reflection.DefaultMemberAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2040">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="2c3b9-2041">Caso o tipo tenha <xref:System.Reflection.DefaultMemberAttribute>, a propriedade <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> retorna o nome da propriedade padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2041">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-2042">O exemplo a seguir define uma classe com uma propriedade e recupera o nome e o tipo da propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2042">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-2043">Foi encontrada mais de uma propriedade com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2043">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2044">O <paramref name="name" /> é <see langword="null" /> ou o <paramref name="returnType" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2044">
              <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-2045">A cadeia de caracteres que contém o nome da propriedade pública a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2045">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-2046">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2046">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2047">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2047">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2048">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2048">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2049">Pesquisa a propriedade pública especificada cujos parâmetros correspondem aos tipos de argumento especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2049">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2050">Um objeto que representa a propriedade pública cujos parâmetros correspondem aos tipos de argumento especificados, se encontrado, caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2050">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2051">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2051">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-2052">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2052">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-2053">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2053">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-2054">A pesquisa inclui propriedades de instância estática pública e pública.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2054">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="2c3b9-2055">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2055">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-2056">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2056">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="2c3b9-2057">Indexadores e propriedades padrão</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2057">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="2c3b9-2058">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] simplificaram a sintaxe para acessar propriedades indexadas e permitem que uma propriedade indexada seja um padrão para o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2058">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="2c3b9-2059">Por exemplo, se a variável `myList` refere-se a uma <xref:System.Collections.ArrayList>, a sintaxe `myList[3]` (`myList(3)` no Visual Basic) recupera o elemento com o índice 3.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2059">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="2c3b9-2060">É possível sobrecarregar a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2060">You can overload the property.</span></span>  
  
 <span data-ttu-id="2c3b9-2061">No C#, este recurso é chamado de indexador e não pode ser referenciado por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2061">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="2c3b9-2062">Por padrão, um indexador c# é exibido nos metadados como uma propriedade indexada chamada "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2062">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="2c3b9-2063">No entanto, um desenvolvedor de biblioteca de classes pode usar o atributo <xref:System.Runtime.CompilerServices.IndexerNameAttribute> para alterar o nome do indexador nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2063">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="2c3b9-2064">Por exemplo, a classe <xref:System.String> tem um indexador chamado <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2064">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="2c3b9-2065">As propriedades indexadas criadas usando-se linguagens diferentes do C# também podem ter nomes diferentes do item.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2065">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="2c3b9-2066">Para determinar se um tipo tem uma propriedade padrão, use o método <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> para testar o atributo <xref:System.Reflection.DefaultMemberAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2066">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="2c3b9-2067">Caso o tipo tenha <xref:System.Reflection.DefaultMemberAttribute>, a propriedade <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> retorna o nome da propriedade padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2067">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-2068">O exemplo a seguir recupera o `Type` objeto de uma classe definida pelo usuário, recupera a propriedade dessa classe e exibe o nome da propriedade e o tipo da propriedade conforme especificado pelos argumentos passados para `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2068">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-2069">Foi encontrada mais de uma propriedade com o nome especificado e que corresponde aos tipos de argumento especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2069">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2070">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2070">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2071">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2071">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2072">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2072">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2073">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2073">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="2c3b9-2074">Um elemento de <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2074">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-2075">A cadeia de caracteres que contém o nome da propriedade pública a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2075">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2c3b9-2076">O tipo de retorno da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2076">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-2077">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2077">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2078">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2078">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2079">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2079">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2080">Pesquisa a propriedade pública especificada cujos parâmetros correspondem aos tipos de argumento especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2080">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2081">Um objeto que representa a propriedade pública cujos parâmetros correspondem aos tipos de argumento especificados, se encontrado, caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2081">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2082">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2082">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-2083">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2083">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-2084">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2084">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-2085">A pesquisa inclui propriedades de instância estática pública e pública.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2085">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="2c3b9-2086">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2086">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-2087">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2087">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="2c3b9-2088">Indexadores e propriedades padrão</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2088">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="2c3b9-2089">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] simplificaram a sintaxe para acessar propriedades indexadas e permitem que uma propriedade indexada seja um padrão para o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2089">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="2c3b9-2090">Por exemplo, se a variável `myList` refere-se a uma <xref:System.Collections.ArrayList>, a sintaxe `myList[3]` (`myList(3)` no Visual Basic) recupera o elemento com o índice 3.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2090">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="2c3b9-2091">É possível sobrecarregar a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2091">You can overload the property.</span></span>  
  
 <span data-ttu-id="2c3b9-2092">No C#, este recurso é chamado de indexador e não pode ser referenciado por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2092">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="2c3b9-2093">Por padrão, um indexador c# é exibido nos metadados como uma propriedade indexada chamada "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2093">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="2c3b9-2094">No entanto, um desenvolvedor de biblioteca de classes pode usar o atributo <xref:System.Runtime.CompilerServices.IndexerNameAttribute> para alterar o nome do indexador nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2094">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="2c3b9-2095">Por exemplo, a classe <xref:System.String> tem um indexador chamado <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2095">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="2c3b9-2096">As propriedades indexadas criadas usando-se linguagens diferentes do C# também podem ter nomes diferentes do item.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2096">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="2c3b9-2097">Para determinar se um tipo tem uma propriedade padrão, use o método <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> para testar o atributo <xref:System.Reflection.DefaultMemberAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2097">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="2c3b9-2098">Caso o tipo tenha <xref:System.Reflection.DefaultMemberAttribute>, a propriedade <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> retorna o nome da propriedade padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2098">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-2099">Foi encontrada mais de uma propriedade com o nome especificado e que corresponde aos tipos de argumento especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2099">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2100">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2100">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2101">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2101">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2102">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2102">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2103">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2103">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="2c3b9-2104">Um elemento de <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2104">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-2105">A cadeia de caracteres que contém o nome da propriedade pública a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2105">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2c3b9-2106">O tipo de retorno da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2106">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-2107">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2107">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2108">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2108">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2109">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2109">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-2110">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2110">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-2111">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2111">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2112">Pesquisa a propriedade pública especificada cujos parâmetros correspondem aos tipos de argumento e modificadores especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2112">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2113">Um objeto que representa a propriedade pública que corresponde aos requisitos especificados, se encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2113">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2114">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2114">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-2115">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2115">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-2116">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2116">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-2117">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2117">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-2118">A pesquisa de `name` diferencia maiúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2118">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="2c3b9-2119">A pesquisa inclui propriedades de instância estática pública e pública.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2119">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="2c3b9-2120">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2120">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-2121">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2121">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="2c3b9-2122">Indexadores e propriedades padrão</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2122">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="2c3b9-2123">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] simplificaram a sintaxe para acessar propriedades indexadas e permitem que uma propriedade indexada seja um padrão para o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2123">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="2c3b9-2124">Por exemplo, se a variável `myList` refere-se a uma <xref:System.Collections.ArrayList>, a sintaxe `myList[3]` (`myList(3)` no Visual Basic) recupera o elemento com o índice 3.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2124">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="2c3b9-2125">É possível sobrecarregar a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2125">You can overload the property.</span></span>  
  
 <span data-ttu-id="2c3b9-2126">No C#, este recurso é chamado de indexador e não pode ser referenciado por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2126">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="2c3b9-2127">Por padrão, um indexador c# é exibido nos metadados como uma propriedade indexada chamada "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2127">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="2c3b9-2128">No entanto, um desenvolvedor de biblioteca de classes pode usar o atributo <xref:System.Runtime.CompilerServices.IndexerNameAttribute> para alterar o nome do indexador nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2128">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="2c3b9-2129">Por exemplo, a classe <xref:System.String> tem um indexador chamado <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2129">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="2c3b9-2130">As propriedades indexadas criadas usando-se linguagens diferentes do C# também podem ter nomes diferentes do item.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2130">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="2c3b9-2131">Para determinar se um tipo tem uma propriedade padrão, use o método <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> para testar o atributo <xref:System.Reflection.DefaultMemberAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2131">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="2c3b9-2132">Caso o tipo tenha <xref:System.Reflection.DefaultMemberAttribute>, a propriedade <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> retorna o nome da propriedade padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2132">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-2133">O exemplo a seguir obtém uma `Type` objeto correspondente `MyPropertyClass`, e a propriedade indexada dessa classe é recuperada usando os argumentos passados para o `GetProperty` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2133">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-2134">Foi encontrada mais de uma propriedade com o nome especificado e que corresponde aos tipos de argumento e modificadores especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2134">More than one property is found with the specified name and matching the specified argument types and modifiers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2135">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2135">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2136">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2136">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2137">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2137">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2138">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2138">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-2139">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2139">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2140">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2140">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-2141">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2141">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2142">
            <paramref name="types" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2142">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="2c3b9-2143">Um elemento de <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2143">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-2144">A cadeia de caracteres que contém o nome da propriedade a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2144">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-2145">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2145">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-2146">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2146">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2147">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2147">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-2148">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2148">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-2149">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2149">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2150">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2150">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2c3b9-2151">O tipo de retorno da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2151">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-2152">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2152">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2153">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2153">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2154">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2154">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-2155">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2155">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-2156">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2156">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2157">Pesquisa a propriedade especificada cujos parâmetros correspondem aos modificadores e tipos de argumento especificados, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2157">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2158">Um objeto que representa a propriedade que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2158">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2159">Uma propriedade é considerada pública para reflexão caso tenha pelo menos um acessador público.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2159">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="2c3b9-2160">Caso contrário, a propriedade é considerada particular e você deve usar <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (no Visual Basic, combina os valores usando `Or`) para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2160">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="2c3b9-2161">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2161">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-2162">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2162">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-2163">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2163">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-2164">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2164">Member Type</span></span>|<span data-ttu-id="2c3b9-2165">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2165">Static</span></span>|<span data-ttu-id="2c3b9-2166">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2166">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-2167">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2167">Constructor</span></span>|<span data-ttu-id="2c3b9-2168">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2168">No</span></span>|<span data-ttu-id="2c3b9-2169">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2169">No</span></span>|  
|<span data-ttu-id="2c3b9-2170">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2170">Field</span></span>|<span data-ttu-id="2c3b9-2171">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2171">No</span></span>|<span data-ttu-id="2c3b9-2172">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2172">Yes.</span></span> <span data-ttu-id="2c3b9-2173">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2173">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2174">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2174">Event</span></span>|<span data-ttu-id="2c3b9-2175">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2175">Not applicable</span></span>|<span data-ttu-id="2c3b9-2176">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2176">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2177">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2177">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2178">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2178">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-2179">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2179">Method</span></span>|<span data-ttu-id="2c3b9-2180">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2180">No</span></span>|<span data-ttu-id="2c3b9-2181">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2181">Yes.</span></span> <span data-ttu-id="2c3b9-2182">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2182">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2183">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2183">Nested Type</span></span>|<span data-ttu-id="2c3b9-2184">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2184">No</span></span>|<span data-ttu-id="2c3b9-2185">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2185">No</span></span>|  
|<span data-ttu-id="2c3b9-2186">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2186">Property</span></span>|<span data-ttu-id="2c3b9-2187">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2187">Not applicable</span></span>|<span data-ttu-id="2c3b9-2188">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2188">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2189">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2189">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2190">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2190">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-2191">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2191">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-2192">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2192">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-2193">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2193">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2194">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2194">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-2195">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2195">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-2196">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de filtro podem ser usados para definir quais propriedades a serem incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2196">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-2197">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2197">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-2198">Especifique `BindingFlags.Public` para incluir propriedades públicas na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2198">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-2199">Especifique `BindingFlags.NonPublic` para incluir propriedades não públicas (ou seja, propriedades particulares, internas e protegidas) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2199">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-2200">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2200">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-2201">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2201">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-2202">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2202">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-2203">`BindingFlags.DeclaredOnly` para procurar apenas as propriedades declaradas no <xref:System.Type>, e não as propriedades que foram simplesmente herdadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2203">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-2204">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2204">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-2205">Caso o <xref:System.Type> atual represente um tipo genérico construído, este método retorna o <xref:System.Reflection.PropertyInfo> com os parâmetros de tipo substituídos pelos argumentos de tipo apropriados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2205">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-2206">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método pesquisa as propriedades da restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2206">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="2c3b9-2207">Indexadores e propriedades padrão</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2207">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="2c3b9-2208">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] simplificaram a sintaxe para acessar propriedades indexadas e permitem que uma propriedade indexada seja um padrão para o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2208">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="2c3b9-2209">Por exemplo, se a variável `myList` refere-se a uma <xref:System.Collections.ArrayList>, a sintaxe `myList[3]` (`myList(3)` no Visual Basic) recupera o elemento com o índice 3.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2209">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="2c3b9-2210">É possível sobrecarregar a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2210">You can overload the property.</span></span>  
  
 <span data-ttu-id="2c3b9-2211">No C#, este recurso é chamado de indexador e não pode ser referenciado por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2211">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="2c3b9-2212">Por padrão, um indexador c# é exibido nos metadados como uma propriedade indexada chamada "Item".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2212">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="2c3b9-2213">No entanto, um desenvolvedor de biblioteca de classes pode usar o atributo <xref:System.Runtime.CompilerServices.IndexerNameAttribute> para alterar o nome do indexador nos metadados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2213">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="2c3b9-2214">Por exemplo, a classe <xref:System.String> tem um indexador chamado <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2214">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="2c3b9-2215">As propriedades indexadas criadas usando-se linguagens diferentes do C# também podem ter nomes diferentes do item.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2215">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="2c3b9-2216">Para determinar se um tipo tem uma propriedade padrão, use o método <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> para testar o atributo <xref:System.Reflection.DefaultMemberAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2216">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="2c3b9-2217">Caso o tipo tenha <xref:System.Reflection.DefaultMemberAttribute>, a propriedade <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> retorna o nome da propriedade padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2217">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-2218">É encontrada mais de uma propriedade com o nome especificado e que corresponde às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2218">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2219">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2219">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2220">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2220">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2221">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2221">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2222">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2222">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-2223">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2223">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2224">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2224">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-2225">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2225">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2226">
            <paramref name="types" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2226">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="2c3b9-2227">Um elemento de <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2227">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-2228">A cadeia de caracteres que contém o nome da propriedade a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2228">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2c3b9-2229">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2229">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-2230">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2230">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2231">Zero, para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2231">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-2232">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um membro sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2232">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-2233">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2233">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2234">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2234">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2c3b9-2235">O tipo de retorno da propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2235">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2c3b9-2236">Uma matriz de objetos <see cref="T:System.Type" /> que representam o número, a ordem e o tipo de parâmetros para a propriedade indexada a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2236">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2237">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2237">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2238">Uma matriz vazia do tipo <see cref="T:System.Type" /> (ou seja, tipos Type[] = novo Type[0]) para obter uma propriedade que não seja indexada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2238">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-2239">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representam os atributos associados ao elemento correspondente na matriz <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2239">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-2240">O associador padrão não processa este parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2240">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2241">Quando substituído em uma classe derivada, pesquisa a propriedade especificada cujos parâmetros correspondem aos modificadores e tipos de argumento especificados, usando as restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2241">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2242">Um objeto que representa a propriedade que corresponde aos requisitos especificados, se for encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2242">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2243">Embora o associador padrão não processe <xref:System.Reflection.ParameterModifier> (o parâmetro `modifiers` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2243">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="2c3b9-2244">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2244">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-2245">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de filtro podem ser usados para definir quais propriedades a serem incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2245">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-2246">Você deve especificar `BindingFlags.Instance` ou `BindingFlags.Static` para obter um retorno.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2246">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="2c3b9-2247">Especifique `BindingFlags.Public` para incluir propriedades públicas na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2247">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-2248">Especifique `BindingFlags.NonPublic` para incluir propriedades não públicas (ou seja, propriedades particulares, internas e protegidas) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2248">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-2249">Especifique `BindingFlags.FlattenHierarchy` para incluir os membros estáticos `public` e `protected` acima na hierarquia; os membros estáticos `private` em classes herdadas não são incluídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2249">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="2c3b9-2250">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2250">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-2251">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2251">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-2252">`BindingFlags.DeclaredOnly` para procurar apenas as propriedades declaradas no <xref:System.Type>, e não as propriedades que foram simplesmente herdadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2252">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-2253">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2253">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-2254">É encontrada mais de uma propriedade com o nome especificado e que corresponde às restrições de associação especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2254">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2255">
            <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2255">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2256">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2256">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2257">
            <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2257">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2258">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2258">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2259">Um dos elementos em <paramref name="types" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2259">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2260">
            <paramref name="types" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2260">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-2261">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2261">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2262">
            <paramref name="modifiers" /> é multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2262">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2c3b9-2263">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2263">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2264">
            <paramref name="types" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2264">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-2265">O tipo atual é um <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" /> ou <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2265">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-2266">Obtém um objeto <see cref="T:System.Type" /> que representa o tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2266">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="type.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-2267">Obtém o <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2267">Gets the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2268">O <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2268">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-2269">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2269">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.TypeLoadException" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-2270">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2270">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member GetType : string -&gt; Type" Usage="System.Type.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="2c3b9-2271">O nome qualificado pelo assembly do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2271">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2272">Consulte <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2272">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2273">Se o tipo estiver no assembly em execução no momento ou em Mscorlib.dll, ele será suficiente para fornecer o nome de tipo qualificado pelo namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2273">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2274">Obtém o <see cref="T:System.Type" /> com o nome especificado, com a execução de uma pesquisa que diferencia maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2274">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2275">O tipo com o nome especificado, se for encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2275">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2276">Você pode usar o <xref:System.Type.GetType%2A> método para obter uma <xref:System.Type> do objeto para um tipo em outro assembly, se você souber que seu nome qualificado pelo assembly que pode ser obtido no <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2276">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="2c3b9-2277"><xref:System.Type.GetType%2A> faz com que o carregamento do assembly especificado em `typeName`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2277"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="2c3b9-2278">Você também pode carregar um assembly usando o <xref:System.Reflection.Assembly.Load%2A> método e, em seguida, use o <xref:System.Type.GetType%2A> ou <xref:System.Reflection.Assembly.GetTypes%2A> métodos dos <xref:System.Reflection.Assembly> classe para obter <xref:System.Type> objetos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2278">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="2c3b9-2279">Se for um tipo em um assembly conhecido para o seu programa em tempo de compilação, é mais eficiente usar no c#, <xref:System.Type.GetType%2A> no Visual Basic ou C++.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2279">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2280">Se `typeName` não for encontrado, a chamada para o <xref:System.Type.GetType%28System.String%29> retorno do método `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2280">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="2c3b9-2281">Ele não gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2281">It does not throw an exception.</span></span> <span data-ttu-id="2c3b9-2282">Para controlar se uma exceção é lançada, chame uma sobrecarga da <xref:System.Type.GetType%2A> método que tem um `throwOnError` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2282">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="2c3b9-2283"><xref:System.Type.GetType%2A> funciona somente em assemblies carregados do disco.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2283"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="2c3b9-2284">Se você chamar <xref:System.Type.GetType%2A> para pesquisar um tipo definido em um assembly dinâmico definido usando o <xref:System.Reflection.Emit> serviços, você poderá obter um comportamento inconsistente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2284">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="2c3b9-2285">O comportamento depende se o assembly dinâmico é persistente, ou seja, criado usando o `RunAndSave` ou `Save` acessar modos do <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2285">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="2c3b9-2286">Se o assembly dinâmico é persistente e foi gravado no disco antes de `GetType` é chamado, o carregador de localizar o assembly salvo em disco, esse assembly é carregado e recupera o tipo desse assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2286">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="2c3b9-2287">Se o assembly não tiver sido salvo para disco quando `GetType` é chamado, o método retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2287">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="2c3b9-2288">`GetType` não entende os assemblies dinâmicos transitórios; Portanto, chamar `GetType` para recuperar um tipo de transitório retornará o assembly dinâmico `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2288">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="2c3b9-2289">Para usar `GetType` em um módulo dinâmico, assinar o <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> eventos e chamadas `GetType` antes de salvar.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2289">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="2c3b9-2290">Caso contrário, você obterá duas cópias do assembly na memória.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2290">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="2c3b9-2291">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2291">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-2292">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2292">Member Type</span></span>|<span data-ttu-id="2c3b9-2293">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2293">Static</span></span>|<span data-ttu-id="2c3b9-2294">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2294">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-2295">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2295">Constructor</span></span>|<span data-ttu-id="2c3b9-2296">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2296">No</span></span>|<span data-ttu-id="2c3b9-2297">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2297">No</span></span>|  
|<span data-ttu-id="2c3b9-2298">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2298">Field</span></span>|<span data-ttu-id="2c3b9-2299">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2299">No</span></span>|<span data-ttu-id="2c3b9-2300">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2300">Yes.</span></span> <span data-ttu-id="2c3b9-2301">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2301">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2302">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2302">Event</span></span>|<span data-ttu-id="2c3b9-2303">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2303">Not applicable</span></span>|<span data-ttu-id="2c3b9-2304">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2304">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2305">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2305">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2306">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2306">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-2307">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2307">Method</span></span>|<span data-ttu-id="2c3b9-2308">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2308">No</span></span>|<span data-ttu-id="2c3b9-2309">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2309">Yes.</span></span> <span data-ttu-id="2c3b9-2310">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2310">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2311">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2311">Nested Type</span></span>|<span data-ttu-id="2c3b9-2312">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2312">No</span></span>|<span data-ttu-id="2c3b9-2313">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2313">No</span></span>|  
|<span data-ttu-id="2c3b9-2314">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2314">Property</span></span>|<span data-ttu-id="2c3b9-2315">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2315">Not applicable</span></span>|<span data-ttu-id="2c3b9-2316">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2316">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2317">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2317">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2318">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2318">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-2319">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2319">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-2320">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2320">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-2321">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2321">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2322">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2322">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-2323">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2323">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-2324">Tipos COM ou matrizes não são pesquisados, a menos que já foram carregadas na tabela de classes disponíveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2324">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="2c3b9-2325">`typeName` pode ser o nome do tipo qualificado por seu namespace ou um nome qualificado pelo assembly que inclui uma especificação de nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2325">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="2c3b9-2326">Consulte <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2326">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="2c3b9-2327">Se `typeName` inclui o namespace, mas não o nome do assembly, este método pesquisa apenas o assembly do objeto de chamada e o mscorlib. dll, nessa ordem.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2327">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="2c3b9-2328">Se o typeName é totalmente qualificado com o nome do assembly parcial ou completa, esse método pesquisará no assembly especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2328">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="2c3b9-2329">Se o assembly tiver um nome forte, um nome de assembly completo é necessário.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2329">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="2c3b9-2330">O <xref:System.Type.AssemblyQualifiedName%2A> propriedade retorna um nome de tipo totalmente qualificado, incluindo tipos aninhados, o nome do assembly e os argumentos de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2330">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="2c3b9-2331">Todos os compiladores que dão suporte ao Common Language Runtime emitirão o nome simples de uma classe aninhada, e reflexão constrói um nome danificado quando consultado, de acordo com as convenções a seguir.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2331">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2332">No .NET Framework versão 2.0, a arquitetura do processador é adicionada à identidade do assembly e pode ser especificada como parte das cadeias de caracteres de nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2332">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="2c3b9-2333">Por exemplo, "ProcessorArchitecture=msil".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2333">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="2c3b9-2334">No entanto, ele não está incluído na cadeia de caracteres retornada pela propriedade <xref:System.Type.AssemblyQualifiedName%2A>, por motivos de compatibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2334">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="2c3b9-2335">Você também pode carregar tipos com a criação de um <xref:System.Reflection.AssemblyName> objeto e passá-la para uma sobrecarga apropriada do <xref:System.Reflection.Assembly.Load%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2335">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="2c3b9-2336">Você pode usar o <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> método carregar tipos do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2336">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="2c3b9-2337">Confira também <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2337">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="2c3b9-2338">Delimitador</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2338">Delimiter</span></span>|<span data-ttu-id="2c3b9-2339">Significado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2339">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="2c3b9-2340">Barra invertida (\\)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2340">Backslash (\\)</span></span>|<span data-ttu-id="2c3b9-2341">Caractere de escape.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2341">Escape character.</span></span>|  
|<span data-ttu-id="2c3b9-2342">Acento grave (')</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2342">Backtick (\`)</span></span>|<span data-ttu-id="2c3b9-2343">Precede um ou mais dígitos que representa o número de parâmetros de tipo, localizado no final do nome de um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2343">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="2c3b9-2344">Colchetes ([])</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2344">Brackets ([])</span></span>|<span data-ttu-id="2c3b9-2345">Coloque uma lista de argumentos de tipo genérico, para um tipo genérico construído; dentro de uma lista de argumentos de tipo, coloque um tipo qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2345">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="2c3b9-2346">Vírgula (,)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2346">Comma (,)</span></span>|<span data-ttu-id="2c3b9-2347">Precede o nome Assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2347">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="2c3b9-2348">Ponto final (.)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2348">Period (.)</span></span>|<span data-ttu-id="2c3b9-2349">Denota identificadores de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2349">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="2c3b9-2350">Sinal de adição (+)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2350">Plus sign (+)</span></span>|<span data-ttu-id="2c3b9-2351">Precede uma classe aninhada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2351">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="2c3b9-2352">Por exemplo, o nome totalmente qualificado para uma classe pode ser semelhante a:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2352">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="2c3b9-2353">Se o namespace fosse TopNamespace.Sub+Namespace, em seguida, a cadeia de caracteres precisa preceder o sinal de adição (+) com um caractere de escape (\\) para impedir que ela seja interpretado como um separador de aninhamento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2353">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="2c3b9-2354">A reflexão emite essa cadeia de caracteres da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2354">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="2c3b9-2355">Um "+ +" torna-se "\\+\\+" e um "\\"torna-se"\\\\".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2355">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="2c3b9-2356">Este nome qualificado pode ser mantido e posteriormente usado para carregar o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2356">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="2c3b9-2357">Para procurar e carregar <xref:System.Type>, use <xref:System.Type.GetType%2A> apenas com o nome do tipo ou com o nome do tipo qualificado do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2357">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="2c3b9-2358"><xref:System.Type.GetType%2A> com o nome de tipo só irá procurar o <xref:System.Type> no assembly do chamador e, em seguida, no assembly System.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2358"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="2c3b9-2359"><xref:System.Type.GetType%2A> com o nome de tipo qualificado de assembly irá procurar o <xref:System.Type> em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2359"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="2c3b9-2360">Nomes de tipo podem incluir caracteres à direita que denotam informações adicionais sobre o tipo, como se o tipo é um tipo de referência, ponteiro ou matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2360">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="2c3b9-2361">Para recuperar o nome do tipo sem esses caracteres à direita, use `t.GetElementType().ToString()`, em que `t` é o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2361">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="2c3b9-2362">Espaços são relevantes em todos os componentes de nome do tipo, exceto o nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2362">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="2c3b9-2363">No nome do assembly, espaços antes do separador ',' são relevantes, mas espaços depois do separador ',' são ignorados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2363">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="2c3b9-2364">O nome de um tipo genérico termina com um acento grave (\`) seguido por dígitos que representa o número de argumentos de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2364">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="2c3b9-2365">A finalidade dessa desconfiguração de nome é permitir que os compiladores dar suporte a tipos genéricos com o mesmo nome mas com diferentes números de parâmetros de tipo, que ocorrem no mesmo escopo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2365">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="2c3b9-2366">Por exemplo, a reflexão retorna os nomes desconfigurados `Tuple`1` and `tupla`2` entre os métodos genéricos `Tuple(Of T)` e `Tuple(Of T0, T1)` no Visual Basic, ou `Tuple<T>` e a tupla`\<T0, T1>` no Visual c#.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2366">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="2c3b9-2367">Para tipos genéricos, a lista de argumentos de tipo é colocada entre colchetes e os argumentos de tipo são separados por vírgulas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2367">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="2c3b9-2368">Por exemplo, um genérico <xref:System.Collections.Generic.Dictionary%602> tem dois parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2368">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="2c3b9-2369">Um <xref:System.Collections.Generic.Dictionary%602> dos `MyType` com as chaves do tipo <xref:System.String> pode ser representada da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2369">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="2c3b9-2370">Para especificar um tipo qualificado pelo assembly dentro de uma lista de argumentos de tipo, coloque o tipo qualificado por assembly entre colchetes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2370">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="2c3b9-2371">Caso contrário, as vírgulas que separam as partes do nome qualificado pelo assembly são interpretadas como argumentos de tipo adicionais de delimitação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2371">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="2c3b9-2372">Por exemplo, uma <xref:System.Collections.Generic.Dictionary%602> dos `MyType` fromMyAssembly.dll, com chaves de tipo <xref:System.String>, pode ser especificada da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2372">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2373">Um tipo qualificado pelo assembly pode estar entre colchetes somente quando aparece dentro de uma lista de parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2373">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="2c3b9-2374">As regras para a pesquisa de assemblies para os tipos qualificados e não qualificados em listas de parâmetros de tipo são o mesmo que as regras para tipos não genéricos qualificados e não qualificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2374">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="2c3b9-2375">Tipos anuláveis são um caso especial de tipos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2375">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="2c3b9-2376">Por exemplo, um valor anulável <xref:System.Int32> é representado pela cadeia de caracteres "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2376">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2377">No c#, C++ e Visual Basic, você também pode obter usando operadores de tipo de tipos anuláveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2377">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="2c3b9-2378">Por exemplo, o que permite valor nulo <xref:System.Boolean> tipo é retornado por `typeof(Nullable<bool>)` em c#, por `Nullable<Boolean>::typeid` em C++ e pelo `GetType(Nullable(Of Boolean))` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2378">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="2c3b9-2379">A tabela a seguir mostra a sintaxe que você usa com `GetType` para vários tipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2379">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="2c3b9-2380">Para obter</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2380">To Get</span></span>|<span data-ttu-id="2c3b9-2381">Use</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2381">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="2c3b9-2382">Um valor anulável <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="2c3b9-2382">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="2c3b9-2383">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2383">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2384">Um ponteiro não gerenciado para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2384">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="2c3b9-2385">Um ponteiro não gerenciado em um ponteiro para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2385">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="2c3b9-2386">Um ponteiro ou referência gerenciado para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2386">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="2c3b9-2387">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2387">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="2c3b9-2388">Observe que, ao contrário dos ponteiros, as referências são limitadas a um nível.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2388">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="2c3b9-2389">Uma classe pai e uma classe aninhada</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2389">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="2c3b9-2390">Uma matriz unidimensional com um limite inferior de 0</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2390">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="2c3b9-2391">Uma matriz unidimensional com um limite inferior desconhecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2391">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="2c3b9-2392">Uma matriz de n-dimensional</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2392">An n-dimensional array</span></span>|<span data-ttu-id="2c3b9-2393">Uma vírgula (,) dentro dos colchetes um total de vezes em que n-1.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2393">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="2c3b9-2394">Por exemplo, `System.Object[,,]` representa um tridimensional `Object` matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2394">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="2c3b9-2395">Uma matriz de matrizes unidimensionais</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2395">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="2c3b9-2396">Uma matriz bidimensional retangular com limites inferiores desconhecidos</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2396">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="2c3b9-2397">Um tipo genérico com um argumento de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2397">A generic type with one type argument</span></span>|<span data-ttu-id="2c3b9-2398">`Type.GetType("MyGenericType`1[MYTYPE]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2398">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2399">Um tipo genérico com dois argumentos de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2399">A generic type with two type arguments</span></span>|<span data-ttu-id="2c3b9-2400">`Type.GetType("MyGenericType`2[MYTYPE,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2400">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2401">Um tipo genérico com dois argumentos de tipo qualificado pelo assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2401">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="2c3b9-2402">`Type.GetType("MyGenericType`2[[MYTYPE,myAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2402">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2403">Um tipo genérico qualificado pelo assembly com um argumento de tipo qualificado pelo assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2403">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="2c3b9-2404">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2404">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="2c3b9-2405">Um tipo genérico cujo argumento de tipo é um tipo genérico com dois argumentos de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2405">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="2c3b9-2406">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2406">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-2407">O exemplo a seguir recupera o tipo de `System.Int32` e usa esse objeto de tipo para exibir o <xref:System.Type.FullName%2A> propriedade de `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2407">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2408">
            <paramref name="typeName" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2408">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-2409">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2409">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2410">
            <paramref name="typeName" /> representa um tipo genérico que tenha um tipo de ponteiro, um tipo <see langword="ByRef" /> ou <see cref="T:System.Void" /> como um dos argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2410">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2411">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2411">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2412">
            <paramref name="typeName" /> representa um tipo genérico que tem um número incorreto de argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2412">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2413">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2413">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2414">
            <paramref name="typeName" /> representa um tipo genérico, e um dos argumentos de tipo não atende às restrições do parâmetro de tipo correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2414">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-2415">
            <paramref name="typeName" /> representa uma matriz de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2415">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="2c3b9-2416">Em vez disso, no <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET para aplicativos da Windows Store</see> ou na <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Biblioteca de Classes Portátil</see>, capture a exceção de classe base, <see cref="T:System.IO.IOException" />.</span>
              <span class="sxs-lookup">
                <span data-stu-id="2c3b9-2416">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="2c3b9-2417">O assembly ou uma de suas dependências foi encontrado, mas não foi possível carregá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2417">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="2c3b9-2418">O assembly ou uma de suas dependências não é válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2418">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="2c3b9-2419">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2419">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2420">A versão 2.0 ou posterior do Common Language Runtime está carregada no momento e o assembly foi compilado com uma versão posterior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2420">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-2421">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2421">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="2c3b9-2422">O nome qualificado pelo assembly do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2422">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2423">Consulte <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2423">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2424">Se o tipo estiver no assembly em execução no momento ou em Mscorlib.dll, ele será suficiente para fornecer o nome de tipo qualificado pelo namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2424">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-2425">
            <see langword="true" /> para gerar uma exceção se não for possível encontrar o tipo; <see langword="false" /> para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2425">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2426">A especificação de <see langword="false" /> também suprime algumas condições de exceção, mas não todas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2426">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="2c3b9-2427">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2427">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2428">Obtém o <see cref="T:System.Type" /> com o nome especificado, realizando uma pesquisa que diferencia minúsculas e maiúsculas e especificando se deve ou não lançar uma exceção se o tipo não for encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2428">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2429">O tipo com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2429">The type with the specified name.</span>
          </span>
          <span data-ttu-id="2c3b9-2430">Caso o tipo não seja encontrado, o parâmetro <paramref name="throwOnError" /> especifica se <see langword="null" /> é retornado ou uma exceção é lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2430">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="2c3b9-2431">Em alguns casos, uma exceção é lançada independentemente do valor de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2431">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2432">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2432">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2433">Você pode usar o <xref:System.Type.GetType%2A> método para obter uma <xref:System.Type> do objeto para um tipo em outro assembly, se você souber que seu nome qualificado pelo assembly que pode ser obtido no <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2433">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="2c3b9-2434"><xref:System.Type.GetType%2A> faz com que o carregamento do assembly especificado em `typeName`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2434"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="2c3b9-2435">Você também pode carregar um assembly usando o <xref:System.Reflection.Assembly.Load%2A> método e, em seguida, use o <xref:System.Type.GetType%2A> ou <xref:System.Reflection.Assembly.GetTypes%2A> métodos dos <xref:System.Reflection.Assembly> classe para obter <xref:System.Type> objetos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2435">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="2c3b9-2436">Se for um tipo em um assembly conhecido para o seu programa em tempo de compilação, é mais eficiente usar `typeof` em c#, <xref:System.Type.GetType%2A> no Visual Basic, ou `typeid` em C++.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2436">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="2c3b9-2437">`GetType` funciona somente em assemblies carregados do disco.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2437">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="2c3b9-2438">Se você chamar `GetType` para pesquisar um tipo definido em um assembly dinâmico definido usando o <xref:System.Reflection.Emit> serviços, você poderá obter um comportamento inconsistente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2438">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="2c3b9-2439">O comportamento depende se o assembly dinâmico é persistente, ou seja, criado usando o `RunAndSave` ou `Save` acessar modos do <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2439">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="2c3b9-2440">Se o assembly dinâmico é persistente e foi gravado no disco antes de `GetType` é chamado, o carregador de localizar o assembly salvo em disco, esse assembly é carregado e recupera o tipo desse assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2440">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="2c3b9-2441">Se o assembly não tiver sido salvo para disco quando `GetType` é chamado, o método retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2441">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="2c3b9-2442">`GetType` não entende os assemblies dinâmicos transitórios; Portanto, chamar `GetType` para recuperar um tipo de transitório retornará o assembly dinâmico `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2442">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="2c3b9-2443">Para usar `GetType` em um módulo dinâmico, assinar o <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> eventos e chamadas `GetType` antes de salvar.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2443">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="2c3b9-2444">Caso contrário, você obterá duas cópias do assembly na memória.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2444">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="2c3b9-2445">O `throwOnError` parâmetro especifica o que acontece quando o tipo não for encontrado e também suprime determinadas condições de exceção, conforme descrito na seção exceções.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2445">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="2c3b9-2446">Algumas exceções são geradas, independentemente do valor de `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2446">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="2c3b9-2447">Por exemplo, se o tipo é encontrado, mas não pode ser carregado, um <xref:System.TypeLoadException> é gerada, mesmo que `throwOnError` é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2447">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-2448">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2448">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-2449">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2449">Member Type</span></span>|<span data-ttu-id="2c3b9-2450">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2450">Static</span></span>|<span data-ttu-id="2c3b9-2451">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2451">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-2452">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2452">Constructor</span></span>|<span data-ttu-id="2c3b9-2453">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2453">No</span></span>|<span data-ttu-id="2c3b9-2454">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2454">No</span></span>|  
|<span data-ttu-id="2c3b9-2455">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2455">Field</span></span>|<span data-ttu-id="2c3b9-2456">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2456">No</span></span>|<span data-ttu-id="2c3b9-2457">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2457">Yes.</span></span> <span data-ttu-id="2c3b9-2458">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2458">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2459">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2459">Event</span></span>|<span data-ttu-id="2c3b9-2460">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2460">Not applicable</span></span>|<span data-ttu-id="2c3b9-2461">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2461">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2462">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2462">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2463">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2463">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-2464">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2464">Method</span></span>|<span data-ttu-id="2c3b9-2465">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2465">No</span></span>|<span data-ttu-id="2c3b9-2466">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2466">Yes.</span></span> <span data-ttu-id="2c3b9-2467">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2467">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2468">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2468">Nested Type</span></span>|<span data-ttu-id="2c3b9-2469">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2469">No</span></span>|<span data-ttu-id="2c3b9-2470">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2470">No</span></span>|  
|<span data-ttu-id="2c3b9-2471">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2471">Property</span></span>|<span data-ttu-id="2c3b9-2472">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2472">Not applicable</span></span>|<span data-ttu-id="2c3b9-2473">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2473">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2474">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2474">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2475">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2475">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-2476">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2476">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-2477">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2477">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-2478">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2478">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2479">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2479">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-2480">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2480">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-2481">Tipos COM ou matrizes não são pesquisados, a menos que já foram carregadas na tabela de classes disponíveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2481">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="2c3b9-2482">`typeName` pode ser o nome do tipo qualificado por seu namespace ou um nome qualificado pelo assembly que inclui uma especificação de nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2482">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="2c3b9-2483">Consulte <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2483">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="2c3b9-2484">Se `typeName` inclui o namespace, mas não o nome do assembly, este método pesquisa apenas o assembly do objeto de chamada e o mscorlib. dll, nessa ordem.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2484">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="2c3b9-2485">Se o typeName é totalmente qualificado com o nome do assembly parcial ou completa, esse método pesquisará no assembly especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2485">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="2c3b9-2486">Se o assembly tiver um nome forte, um nome de assembly completo é necessário.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2486">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="2c3b9-2487">O <xref:System.Type.AssemblyQualifiedName%2A> propriedade retorna um nome de tipo totalmente qualificado, incluindo tipos aninhados, o nome do assembly e os argumentos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2487">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="2c3b9-2488">Todos os compiladores que dão suporte ao Common Language Runtime emitirão o nome simples de uma classe aninhada, e reflexão constrói um nome danificado quando consultado, de acordo com as convenções a seguir.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2488">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2489">No .NET Framework versão 2.0, a arquitetura do processador é adicionada à identidade do assembly e pode ser especificada como parte das cadeias de caracteres de nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2489">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="2c3b9-2490">Por exemplo, "ProcessorArchitecture=msil".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2490">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="2c3b9-2491">No entanto, ele não está incluído na cadeia de caracteres retornada pela propriedade <xref:System.Type.AssemblyQualifiedName%2A>, por motivos de compatibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2491">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="2c3b9-2492">Você também pode carregar tipos com a criação de um <xref:System.Reflection.AssemblyName> objeto e passá-la para uma sobrecarga apropriada do <xref:System.Reflection.Assembly.Load%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2492">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="2c3b9-2493">Você pode usar o <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> método carregar tipos do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2493">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="2c3b9-2494">Confira também <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2494">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="2c3b9-2495">Delimitador</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2495">Delimiter</span></span>|<span data-ttu-id="2c3b9-2496">Significado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2496">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="2c3b9-2497">Barra invertida (\\)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2497">Backslash (\\)</span></span>|<span data-ttu-id="2c3b9-2498">Caractere de escape.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2498">Escape character.</span></span>|  
|<span data-ttu-id="2c3b9-2499">Acento grave (')</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2499">Backtick (\`)</span></span>|<span data-ttu-id="2c3b9-2500">Precede um ou mais dígitos que representa o número de parâmetros de tipo, localizado no final do nome de um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2500">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="2c3b9-2501">Colchetes ([])</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2501">Brackets ([])</span></span>|<span data-ttu-id="2c3b9-2502">Coloque uma lista de argumentos de tipo genérico, para um tipo genérico construído; dentro de uma lista de argumentos de tipo, coloque um tipo qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2502">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="2c3b9-2503">Vírgula (,)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2503">Comma (,)</span></span>|<span data-ttu-id="2c3b9-2504">Precede o nome Assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2504">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="2c3b9-2505">Ponto final (.)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2505">Period (.)</span></span>|<span data-ttu-id="2c3b9-2506">Denota identificadores de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2506">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="2c3b9-2507">Sinal de adição (+)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2507">Plus sign (+)</span></span>|<span data-ttu-id="2c3b9-2508">Precede uma classe aninhada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2508">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="2c3b9-2509">Por exemplo, o nome totalmente qualificado para uma classe pode ser semelhante a:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2509">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="2c3b9-2510">Se o namespace fosse TopNamespace.Sub+Namespace, em seguida, a cadeia de caracteres precisa preceder o sinal de adição (+) com um caractere de escape (\\) para impedir que ela seja interpretado como um separador de aninhamento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2510">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="2c3b9-2511">A reflexão emite essa cadeia de caracteres da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2511">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="2c3b9-2512">Um "+ +" torna-se "\\+\\+" e um "\\"torna-se"\\\\".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2512">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="2c3b9-2513">Este nome qualificado pode ser mantido e posteriormente usado para carregar o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2513">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="2c3b9-2514">Para procurar e carregar <xref:System.Type>, use <xref:System.Type.GetType%2A> apenas com o nome do tipo ou com o nome do tipo qualificado do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2514">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="2c3b9-2515"><xref:System.Type.GetType%2A> com o nome de tipo só irá procurar o <xref:System.Type> no assembly do chamador e, em seguida, no assembly System.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2515"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="2c3b9-2516"><xref:System.Type.GetType%2A> com o nome de tipo qualificado de assembly irá procurar o <xref:System.Type> em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2516"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="2c3b9-2517">Nomes de tipo podem incluir caracteres à direita que denotam informações adicionais sobre o tipo, como se o tipo é um tipo de referência, ponteiro ou matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2517">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="2c3b9-2518">Para recuperar o nome do tipo sem esses caracteres à direita, use `t.GetElementType().ToString()`, em que `t` é o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2518">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="2c3b9-2519">Espaços são relevantes em todos os componentes de nome do tipo, exceto o nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2519">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="2c3b9-2520">No nome do assembly, espaços antes do separador ',' são relevantes, mas espaços depois do separador ',' são ignorados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2520">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="2c3b9-2521">O nome de um tipo genérico termina com um acento grave (\`) seguido por dígitos que representa o número de argumentos de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2521">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="2c3b9-2522">A finalidade dessa desconfiguração de nome é permitir que os compiladores dar suporte a tipos genéricos com o mesmo nome mas com diferentes números de parâmetros de tipo, que ocorrem no mesmo escopo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2522">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="2c3b9-2523">Por exemplo, a reflexão retorna os nomes desconfigurados `Tuple`1` and `tupla`2` entre os métodos genéricos `Tuple(Of T)` e `Tuple(Of T0, T1)` no Visual Basic, ou `Tuple<T>` e a tupla`\<T0, T1>` no Visual c#.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2523">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="2c3b9-2524">Para tipos genéricos, a lista de argumentos de tipo é colocada entre colchetes e os argumentos de tipo são separados por vírgulas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2524">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="2c3b9-2525">Por exemplo, um genérico <xref:System.Collections.Generic.Dictionary%602> tem dois parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2525">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="2c3b9-2526">Um <xref:System.Collections.Generic.Dictionary%602> dos `MyType` com as chaves do tipo <xref:System.String> pode ser representada da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2526">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="2c3b9-2527">Para especificar um tipo qualificado pelo assembly dentro de uma lista de argumentos de tipo, coloque o tipo qualificado por assembly entre colchetes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2527">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="2c3b9-2528">Caso contrário, as vírgulas que separam as partes do nome qualificado pelo assembly são interpretadas como argumentos de tipo adicionais de delimitação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2528">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="2c3b9-2529">Por exemplo, uma <xref:System.Collections.Generic.Dictionary%602> dos `MyType` de myAssembly. dll, com chaves de tipo <xref:System.String>, pode ser especificada da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2529">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2530">Um tipo qualificado pelo assembly pode estar entre colchetes somente quando aparece dentro de uma lista de parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2530">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="2c3b9-2531">As regras para a pesquisa de assemblies para os tipos qualificados e não qualificados em listas de parâmetros de tipo são o mesmo que as regras para tipos não genéricos qualificados e não qualificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2531">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="2c3b9-2532">Tipos anuláveis são um caso especial de tipos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2532">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="2c3b9-2533">Por exemplo, um valor anulável <xref:System.Int32> é representado pela cadeia de caracteres "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2533">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2534">No c#, C++ e Visual Basic, você também pode obter usando operadores de tipo de tipos anuláveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2534">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="2c3b9-2535">Por exemplo, o que permite valor nulo <xref:System.Boolean> tipo é retornado por `typeof(Nullable<bool>)` em c#, por `Nullable<Boolean>::typeid` em C++ e pelo `GetType(Nullable(Of Boolean))` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2535">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="2c3b9-2536">A tabela a seguir mostra a sintaxe que você usa com `GetType` para vários tipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2536">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="2c3b9-2537">Para obter</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2537">To Get</span></span>|<span data-ttu-id="2c3b9-2538">Use</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2538">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="2c3b9-2539">Um valor anulável <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="2c3b9-2539">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="2c3b9-2540">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2540">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2541">Um ponteiro não gerenciado para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2541">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="2c3b9-2542">Um ponteiro não gerenciado em um ponteiro para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2542">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="2c3b9-2543">Um ponteiro ou referência gerenciado para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2543">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="2c3b9-2544">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2544">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="2c3b9-2545">Observe que, ao contrário dos ponteiros, as referências são limitadas a um nível.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2545">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="2c3b9-2546">Uma classe pai e uma classe aninhada</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2546">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="2c3b9-2547">Uma matriz unidimensional com um limite inferior de 0</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2547">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="2c3b9-2548">Uma matriz unidimensional com um limite inferior desconhecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2548">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="2c3b9-2549">Uma matriz de n-dimensional</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2549">An n-dimensional array</span></span>|<span data-ttu-id="2c3b9-2550">Uma vírgula (,) dentro dos colchetes um total de vezes em que n-1.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2550">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="2c3b9-2551">Por exemplo, `System.Object[,,]` representa um tridimensional `Object` matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2551">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="2c3b9-2552">Uma matriz bidimensional</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2552">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="2c3b9-2553">Uma matriz bidimensional retangular com limites inferiores desconhecidos</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2553">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="2c3b9-2554">Um tipo genérico com um argumento de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2554">A generic type with one type argument</span></span>|<span data-ttu-id="2c3b9-2555">`Type.GetType("MyGenericType`1[MYTYPE]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2555">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2556">Um tipo genérico com dois argumentos de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2556">A generic type with two type arguments</span></span>|<span data-ttu-id="2c3b9-2557">`Type.GetType("MyGenericType`2[MYTYPE,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2557">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2558">Um tipo genérico com dois argumentos de tipo qualificado pelo assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2558">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="2c3b9-2559">`Type.GetType("MyGenericType`2[[MYTYPE,myAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2559">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2560">Um tipo genérico qualificado pelo assembly com um argumento de tipo qualificado pelo assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2560">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="2c3b9-2561">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2561">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="2c3b9-2562">Um tipo genérico cujo argumento de tipo é um tipo genérico com dois argumentos de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2562">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="2c3b9-2563">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2563">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-2564">O exemplo a seguir recupera o tipo de `System.Int32` e usa esse objeto de tipo para exibir o <xref:System.Type.FullName%2A> propriedade de `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2564">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="2c3b9-2565">Se um objeto do tipo se refere a um assembly que não existe, este exemplo gera uma exceção.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2565">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2566">
            <paramref name="typeName" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2566">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-2567">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2567">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-2568">
            <paramref name="throwOnError" /> é <see langword="true" /> e o tipo não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2568">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="2c3b9-2569">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2569">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2570">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém caracteres inválidos como, por exemplo, uma guia inserida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2570">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="2c3b9-2571">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2571">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2572">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> é uma cadeia de caracteres vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2572">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="2c3b9-2573">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2573">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2574">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> representa um tipo de matriz com um tamanho inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2574">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="2c3b9-2575">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2575">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2576">
            <paramref name="typeName" /> representa uma matriz de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2576">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2577">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém sintaxe inválida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2577">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="2c3b9-2578">Por exemplo, "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2578">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="2c3b9-2579">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2579">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2580">
            <paramref name="typeName" /> representa um tipo genérico que tenha um tipo de ponteiro, um tipo <see langword="ByRef" /> ou <see cref="T:System.Void" /> como um dos argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2580">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2581">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2581">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2582">
            <paramref name="typeName" /> representa um tipo genérico que tem um número incorreto de argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2582">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2583">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2583">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2584">
            <paramref name="typeName" /> representa um tipo genérico, e um dos argumentos de tipo não atende às restrições do parâmetro de tipo correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2584">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2c3b9-2585">
            <paramref name="throwOnError" /> é <see langword="true" /> e o assembly ou uma de suas dependências não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2585">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="2c3b9-2586">Em vez disso, no <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET para aplicativos da Windows Store</see> ou na <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Biblioteca de Classes Portátil</see>, capture a exceção de classe base, <see cref="T:System.IO.IOException" />.</span>
              <span class="sxs-lookup">
                <span data-stu-id="2c3b9-2586">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="2c3b9-2587">O assembly ou uma de suas dependências foi encontrado, mas não foi possível carregá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2587">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="2c3b9-2588">O assembly ou uma de suas dependências não é válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2588">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="2c3b9-2589">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2589">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2590">A versão 2.0 ou posterior do Common Language Runtime está carregada no momento e o assembly foi compilado com uma versão posterior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2590">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-2591">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2591">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="2c3b9-2592">O nome qualificado pelo assembly do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2592">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2593">Consulte <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2593">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2594">Se o tipo estiver no assembly em execução no momento ou em Mscorlib.dll, ele será suficiente para fornecer o nome de tipo qualificado pelo namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2594">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-2595">
            <see langword="true" /> para lançar uma exceção se o tipo não puder ser encontrado; <see langword="false" /> para retornar <see langword="null" />. Especificar <see langword="false" /> também suprime algumas condições de exceção, mas não todas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2595">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="2c3b9-2596">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2596">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="2c3b9-2597">
            <see langword="true" /> para executar uma pesquisa por <c>typeName</c> sem diferenciar maiúsculas de minúsculas, <see langword="false" /> para realizar uma pesquisa por <c>typeName</c> diferenciando maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2597">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2598">Obtém o <see cref="T:System.Type" /> com o nome especificado, especificando se deve ou não lançar uma exceção se o tipo não for encontrado e se deseja executar uma pesquisa diferenciando maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2598">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2599">O tipo com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2599">The type with the specified name.</span>
          </span>
          <span data-ttu-id="2c3b9-2600">Caso o tipo não seja encontrado, o parâmetro <paramref name="throwOnError" /> especifica se <see langword="null" /> é retornado ou uma exceção é lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2600">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="2c3b9-2601">Em alguns casos, uma exceção é lançada independentemente do valor de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2601">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2602">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2602">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2603">Você pode usar o <xref:System.Type.GetType%2A> método para obter uma <xref:System.Type> do objeto para um tipo em outro assembly, se você souber que seu nome qualificado pelo assembly que pode ser obtido no <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2603">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="2c3b9-2604"><xref:System.Type.GetType%2A> faz com que o carregamento do assembly especificado em `typeName`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2604"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="2c3b9-2605">Você também pode carregar um assembly usando o <xref:System.Reflection.Assembly.Load%2A> método e, em seguida, use o <xref:System.Type.GetType%2A> ou <xref:System.Reflection.Assembly.GetTypes%2A> métodos dos <xref:System.Reflection.Assembly> classe para obter <xref:System.Type> objetos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2605">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="2c3b9-2606">Se for um tipo em um assembly conhecido para o seu programa em tempo de compilação, é mais eficiente usar `typeof` em c#, <xref:System.Type.GetType%2A> no Visual Basic, ou `typeid` em C++.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2606">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="2c3b9-2607">`GetType` funciona somente em assemblies carregados do disco.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2607">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="2c3b9-2608">Se você chamar `GetType` para pesquisar um tipo definido em um assembly dinâmico definido usando o <xref:System.Reflection.Emit> serviços, você poderá obter um comportamento inconsistente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2608">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="2c3b9-2609">O comportamento depende se o assembly dinâmico é persistente, ou seja, criado usando o `RunAndSave` ou `Save` acessar modos do <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2609">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="2c3b9-2610">Se o assembly dinâmico é persistente e foi gravado no disco antes de `GetType` é chamado, o carregador de localizar o assembly salvo em disco, esse assembly é carregado e recupera o tipo desse assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2610">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="2c3b9-2611">Se o assembly não tiver sido salvo para disco quando `GetType` é chamado, o método retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2611">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="2c3b9-2612">`GetType` não entende os assemblies dinâmicos transitórios; Portanto, chamar `GetType` para recuperar um tipo de transitório retornará o assembly dinâmico `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2612">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="2c3b9-2613">Para usar `GetType` em um módulo dinâmico, assinar o <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> eventos e chamadas `GetType` antes de salvar.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2613">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="2c3b9-2614">Caso contrário, você obterá duas cópias do assembly na memória.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2614">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="2c3b9-2615">O `throwOnError` parâmetro especifica o que acontece quando o tipo não for encontrado e também suprime determinadas condições de exceção, conforme descrito na seção exceções.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2615">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="2c3b9-2616">Algumas exceções são geradas, independentemente do valor de `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2616">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="2c3b9-2617">Por exemplo, se o tipo é encontrado, mas não pode ser carregado, um <xref:System.TypeLoadException> é gerada, mesmo que `throwOnError` é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2617">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-2618">A tabela a seguir mostra quais membros de uma classe base são retornados pelos métodos `Get` durante a reflexão em um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2618">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="2c3b9-2619">Tipo do membro</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2619">Member Type</span></span>|<span data-ttu-id="2c3b9-2620">Estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2620">Static</span></span>|<span data-ttu-id="2c3b9-2621">Não estático</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2621">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="2c3b9-2622">Construtor</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2622">Constructor</span></span>|<span data-ttu-id="2c3b9-2623">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2623">No</span></span>|<span data-ttu-id="2c3b9-2624">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2624">No</span></span>|  
|<span data-ttu-id="2c3b9-2625">Campo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2625">Field</span></span>|<span data-ttu-id="2c3b9-2626">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2626">No</span></span>|<span data-ttu-id="2c3b9-2627">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2627">Yes.</span></span> <span data-ttu-id="2c3b9-2628">Um campo permanece sempre oculto por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2628">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2629">evento</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2629">Event</span></span>|<span data-ttu-id="2c3b9-2630">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2630">Not applicable</span></span>|<span data-ttu-id="2c3b9-2631">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2631">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2632">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2632">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2633">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2633">See note 2 below.</span></span>|  
|<span data-ttu-id="2c3b9-2634">Método</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2634">Method</span></span>|<span data-ttu-id="2c3b9-2635">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2635">No</span></span>|<span data-ttu-id="2c3b9-2636">Sim.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2636">Yes.</span></span> <span data-ttu-id="2c3b9-2637">Um método (virtual e não virtual) pode permanecer oculto por nome ou por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2637">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="2c3b9-2638">Tipo aninhado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2638">Nested Type</span></span>|<span data-ttu-id="2c3b9-2639">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2639">No</span></span>|<span data-ttu-id="2c3b9-2640">Não</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2640">No</span></span>|  
|<span data-ttu-id="2c3b9-2641">Propriedade</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2641">Property</span></span>|<span data-ttu-id="2c3b9-2642">Não aplicável</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2642">Not applicable</span></span>|<span data-ttu-id="2c3b9-2643">A regra de sistema do tipo comum é que a herança é a mesma dos métodos que implementam a propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2643">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="2c3b9-2644">Reflexão trata propriedades como ocultas por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2644">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2645">Consulte a observação 2 abaixo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2645">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="2c3b9-2646">Oculto por nome e assinatura considera todas as partes da assinatura, inclusive modificadores personalizados, tipos de retorno, tipos de parâmetro, sentinelas e convenções de chamada não gerenciadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2646">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="2c3b9-2647">Esta é uma comparação binária.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2647">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="2c3b9-2648">Para reflexão, propriedades e eventos permanecem ocultos por nome e assinatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2648">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="2c3b9-2649">Se você tiver uma propriedade com um acessador get e set na classe base, mas a classe derivada tiver apenas um acessador get, a propriedade de classe derivada ocultará a propriedade da classe base e você não poderá acessar o setter na classe base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2649">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="2c3b9-2650">Atributos personalizados não fazem parte do sistema de tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2650">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="2c3b9-2651">Tipos COM ou matrizes não são pesquisados, a menos que já foram carregadas na tabela de classes disponíveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2651">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="2c3b9-2652">`typeName` pode ser o nome do tipo qualificado por seu namespace ou um nome qualificado pelo assembly que inclui uma especificação de nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2652">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="2c3b9-2653">Consulte <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2653">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="2c3b9-2654">Se `typeName` inclui o namespace, mas não o nome do assembly, este método pesquisa apenas o assembly do objeto de chamada e o mscorlib. dll, nessa ordem.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2654">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="2c3b9-2655">Se o typeName é totalmente qualificado com o nome do assembly parcial ou completa, esse método pesquisará no assembly especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2655">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="2c3b9-2656">Se o assembly tiver um nome forte, um nome de assembly completo é necessário.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2656">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="2c3b9-2657">O <xref:System.Type.AssemblyQualifiedName%2A> propriedade retorna um nome de tipo totalmente qualificado, incluindo tipos aninhados, o nome do assembly e os argumentos de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2657">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="2c3b9-2658">Todos os compiladores que dão suporte ao Common Language Runtime emitirão o nome simples de uma classe aninhada, e reflexão constrói um nome danificado quando consultado, de acordo com as convenções a seguir.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2658">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2659">No .NET Framework versão 2.0, a arquitetura do processador é adicionada à identidade do assembly e pode ser especificada como parte das cadeias de caracteres de nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2659">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="2c3b9-2660">Por exemplo, "ProcessorArchitecture=msil".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2660">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="2c3b9-2661">No entanto, ele não está incluído na cadeia de caracteres retornada pela propriedade <xref:System.Type.AssemblyQualifiedName%2A>, por motivos de compatibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2661">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="2c3b9-2662">Você também pode carregar tipos com a criação de um <xref:System.Reflection.AssemblyName> objeto e passá-la para uma sobrecarga apropriada do <xref:System.Reflection.Assembly.Load%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2662">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="2c3b9-2663">Você pode usar o <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> método carregar tipos do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2663">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="2c3b9-2664">Confira também <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2664">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="2c3b9-2665">Delimitador</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2665">Delimiter</span></span>|<span data-ttu-id="2c3b9-2666">Significado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2666">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="2c3b9-2667">Barra invertida (\\)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2667">Backslash (\\)</span></span>|<span data-ttu-id="2c3b9-2668">Caractere de escape.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2668">Escape character.</span></span>|  
|<span data-ttu-id="2c3b9-2669">Acento grave (')</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2669">Backtick (\`)</span></span>|<span data-ttu-id="2c3b9-2670">Precede um ou mais dígitos que representa o número de parâmetros de tipo, localizado no final do nome de um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2670">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="2c3b9-2671">Colchetes ([])</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2671">Brackets ([])</span></span>|<span data-ttu-id="2c3b9-2672">Coloque uma lista de argumentos de tipo genérico, para um tipo genérico construído; dentro de uma lista de argumentos de tipo, coloque um tipo qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2672">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="2c3b9-2673">Vírgula (,)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2673">Comma (,)</span></span>|<span data-ttu-id="2c3b9-2674">Precede o nome Assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2674">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="2c3b9-2675">Ponto final (.)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2675">Period (.)</span></span>|<span data-ttu-id="2c3b9-2676">Denota identificadores de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2676">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="2c3b9-2677">Sinal de adição (+)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2677">Plus sign (+)</span></span>|<span data-ttu-id="2c3b9-2678">Precede uma classe aninhada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2678">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="2c3b9-2679">Por exemplo, o nome totalmente qualificado para uma classe pode ser semelhante a:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2679">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="2c3b9-2680">Se o namespace fosse TopNamespace.Sub+Namespace, em seguida, a cadeia de caracteres precisa preceder o sinal de adição (+) com um caractere de escape (\\) para impedir que ela seja interpretado como um separador de aninhamento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2680">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="2c3b9-2681">A reflexão emite essa cadeia de caracteres da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2681">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="2c3b9-2682">Um "+ +" torna-se "\\+\\+" e um "\\"torna-se"\\\\".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2682">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="2c3b9-2683">Este nome qualificado pode ser mantido e posteriormente usado para carregar o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2683">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="2c3b9-2684">Para procurar e carregar <xref:System.Type>, use <xref:System.Type.GetType%2A> apenas com o nome do tipo ou com o nome do tipo qualificado do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2684">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="2c3b9-2685"><xref:System.Type.GetType%2A> com o nome de tipo só irá procurar o <xref:System.Type> no assembly do chamador e, em seguida, no assembly System.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2685"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="2c3b9-2686"><xref:System.Type.GetType%2A> com o nome de tipo qualificado de assembly irá procurar o <xref:System.Type> em qualquer assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2686"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="2c3b9-2687">Nomes de tipo podem incluir caracteres à direita que denotam informações adicionais sobre o tipo, como se o tipo é um tipo de referência, ponteiro ou matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2687">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="2c3b9-2688">Para recuperar o nome do tipo sem esses caracteres à direita, use `t.GetElementType().ToString()`, em que `t` é o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2688">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="2c3b9-2689">Espaços são relevantes em todos os componentes de nome do tipo, exceto o nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2689">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="2c3b9-2690">No nome do assembly, espaços antes do separador ',' são relevantes, mas espaços depois do separador ',' são ignorados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2690">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="2c3b9-2691">O nome de um tipo genérico termina com um acento grave (\`) seguido por dígitos que representa o número de argumentos de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2691">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="2c3b9-2692">A finalidade dessa desconfiguração de nome é permitir que os compiladores dar suporte a tipos genéricos com o mesmo nome mas com diferentes números de parâmetros de tipo, que ocorrem no mesmo escopo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2692">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="2c3b9-2693">Por exemplo, a reflexão retorna os nomes desconfigurados `Tuple`1` and `tupla`2` entre os métodos genéricos `Tuple(Of T)` e `Tuple(Of T0, T1)` no Visual Basic, ou `Tuple<T>` e a tupla`\<T0, T1>` no Visual c#.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2693">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="2c3b9-2694">Para tipos genéricos, a lista de argumentos de tipo é colocada entre colchetes e os argumentos de tipo são separados por vírgulas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2694">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="2c3b9-2695">Por exemplo, um genérico <xref:System.Collections.Generic.Dictionary%602> tem dois parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2695">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="2c3b9-2696">Um <xref:System.Collections.Generic.Dictionary%602> dos `MyType` com as chaves do tipo <xref:System.String> pode ser representada da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2696">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="2c3b9-2697">Para especificar um tipo qualificado pelo assembly dentro de uma lista de argumentos de tipo, coloque o tipo qualificado por assembly entre colchetes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2697">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="2c3b9-2698">Caso contrário, as vírgulas que separam as partes do nome qualificado pelo assembly são interpretadas como argumentos de tipo adicionais de delimitação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2698">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="2c3b9-2699">Por exemplo, uma <xref:System.Collections.Generic.Dictionary%602> dos `MyType` de myAssembly. dll, com chaves de tipo <xref:System.String>, pode ser especificada da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2699">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2700">Um tipo qualificado pelo assembly pode estar entre colchetes somente quando aparece dentro de uma lista de parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2700">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="2c3b9-2701">As regras para a pesquisa de assemblies para os tipos qualificados e não qualificados em listas de parâmetros de tipo são o mesmo que as regras para tipos não genéricos qualificados e não qualificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2701">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="2c3b9-2702">Tipos anuláveis são um caso especial de tipos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2702">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="2c3b9-2703">Por exemplo, um valor anulável <xref:System.Int32> é representado pela cadeia de caracteres "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2703">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2704">No c#, C++ e Visual Basic, você também pode obter usando operadores de tipo de tipos anuláveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2704">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="2c3b9-2705">Por exemplo, o que permite valor nulo <xref:System.Boolean> tipo é retornado por `typeof(Nullable<bool>)` em c#, por `Nullable<Boolean>::typeid` em C++ e pelo `GetType(Nullable(Of Boolean))` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2705">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="2c3b9-2706">A tabela a seguir mostra a sintaxe que você usa com `GetType` para vários tipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2706">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="2c3b9-2707">Para obter</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2707">To Get</span></span>|<span data-ttu-id="2c3b9-2708">Use</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2708">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="2c3b9-2709">Um valor anulável <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="2c3b9-2709">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="2c3b9-2710">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2710">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2711">Um ponteiro não gerenciado para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2711">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="2c3b9-2712">Um ponteiro não gerenciado em um ponteiro para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2712">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="2c3b9-2713">Um ponteiro ou referência gerenciado para `MyType`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2713">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="2c3b9-2714">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2714">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="2c3b9-2715">Observe que, ao contrário dos ponteiros, as referências são limitadas a um nível.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2715">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="2c3b9-2716">Uma classe pai e uma classe aninhada</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2716">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="2c3b9-2717">Uma matriz unidimensional com um limite inferior de 0</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2717">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="2c3b9-2718">Uma matriz unidimensional com um limite inferior desconhecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2718">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="2c3b9-2719">Uma matriz de n-dimensional</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2719">An n-dimensional array</span></span>|<span data-ttu-id="2c3b9-2720">Uma vírgula (,) dentro dos colchetes um total de vezes em que n-1.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2720">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="2c3b9-2721">Por exemplo, `System.Object[,,]` representa um tridimensional `Object` matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2721">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="2c3b9-2722">Uma matriz bidimensional</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2722">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="2c3b9-2723">Uma matriz bidimensional retangular com limites inferiores desconhecidos</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2723">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="2c3b9-2724">Um tipo genérico com um argumento de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2724">A generic type with one type argument</span></span>|<span data-ttu-id="2c3b9-2725">`Type.GetType("MyGenericType`1[MYTYPE]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2725">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2726">Um tipo genérico com dois argumentos de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2726">A generic type with two type arguments</span></span>|<span data-ttu-id="2c3b9-2727">`Type.GetType("MyGenericType`2[MYTYPE,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2727">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2728">Um tipo genérico com dois argumentos de tipo qualificado pelo assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2728">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="2c3b9-2729">`Type.GetType("MyGenericType`2[[MYTYPE,myAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2729">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="2c3b9-2730">Um tipo genérico qualificado pelo assembly com um argumento de tipo qualificado pelo assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2730">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="2c3b9-2731">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2731">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="2c3b9-2732">Um tipo genérico cujo argumento de tipo é um tipo genérico com dois argumentos de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2732">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="2c3b9-2733">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2733">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2734">
            <paramref name="typeName" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2734">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-2735">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2735">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-2736">
            <paramref name="throwOnError" /> é <see langword="true" /> e o tipo não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2736">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="2c3b9-2737">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2737">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2738">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém caracteres inválidos como, por exemplo, uma guia inserida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2738">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="2c3b9-2739">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2739">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2740">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> é uma cadeia de caracteres vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2740">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="2c3b9-2741">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2741">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2742">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> representa um tipo de matriz com um tamanho inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2742">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="2c3b9-2743">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2743">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2744">
            <paramref name="typeName" /> representa uma matriz de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2744">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2745">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém sintaxe inválida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2745">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="2c3b9-2746">Por exemplo, "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2746">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="2c3b9-2747">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2747">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2748">
            <paramref name="typeName" /> representa um tipo genérico que tenha um tipo de ponteiro, um tipo <see langword="ByRef" /> ou <see cref="T:System.Void" /> como um dos argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2748">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2749">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2749">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2750">
            <paramref name="typeName" /> representa um tipo genérico que tem um número incorreto de argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2750">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2751">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2751">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2752">
            <paramref name="typeName" /> representa um tipo genérico, e um dos argumentos de tipo não atende às restrições do parâmetro de tipo correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2752">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2c3b9-2753">
            <paramref name="throwOnError" /> é <see langword="true" /> e o assembly ou uma de suas dependências não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2753">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="2c3b9-2754">O assembly ou uma de suas dependências foi encontrado, mas não foi possível carregá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2754">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="2c3b9-2755">O assembly ou uma de suas dependências não é válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2755">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="2c3b9-2756">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2756">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2757">A versão 2.0 ou posterior do Common Language Runtime está carregada no momento e o assembly foi compilado com uma versão posterior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2757">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-2758">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2758">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="2c3b9-2759">O nome do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2759">The name of the type to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2760">Se o parâmetro <c>typeResolver</c> for fornecido, o nome do tipo poderá ser qualquer cadeia de caracteres que <c>typeResolver</c> possa resolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2760">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="2c3b9-2761">Se o parâmetro <c>assemblyResolver</c> for fornecido ou se a resolução de tipo padrão for usada, <c>typeName</c> deverá ser um nome qualificado pelo assembly (consulte <see cref="P:System.Type.AssemblyQualifiedName" />), a menos que o tipo esteja no assembly em execução no momento ou em Mscorlib.dll, quando então será suficiente fornecer o nome de tipo qualificado por seu namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2761">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="2c3b9-2762">Um método que localiza e retorna o assembly especificado em <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2762">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="2c3b9-2763">O nome do assembly é passado para <c>assemblyResolver</c> como um objeto <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2763">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="2c3b9-2764">Se <c>typeName</c> não contiver o nome de um assembly, o <c>assemblyResolver</c> não será chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2764">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="2c3b9-2765">Se o <c>assemblyResolver</c> não for fornecido, será executada a resolução de assembly padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2765">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="2c3b9-2766">Cuidado! Não passe métodos de chamadores desconhecidos ou não confiáveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2766">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="2c3b9-2767">Isso poderá resultar na elevação de privilégio de código mal-intencionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2767">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="2c3b9-2768">Use apenas métodos fornecidos por você ou com os quais esteja familiarizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2768">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="2c3b9-2769">Um método que localiza e retorna o tipo especificado por <c>typeName</c> do assembly que é retornado pelo <c>assemblyResolver</c> ou pela resolução de assembly padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2769">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="2c3b9-2770">Se nenhum assembly for indicado, o método <c>typeResolver</c> poderá fornecer um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2770">If no assembly is provided, the <c>typeResolver</c> method can provide one.</span>
          </span>
          <span data-ttu-id="2c3b9-2771">O método também utiliza um parâmetro que especifica se deve ser executada uma pesquisa que não diferencia maiúsculas de minúsculas. <see langword="false" /> é passado para esse parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2771">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="2c3b9-2772">Cuidado! Não passe métodos de chamadores desconhecidos ou não confiáveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2772">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2773">Obtém o tipo com o nome especificado, fornecendo opcionalmente métodos personalizados para resolver o assembly e o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2773">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2774">O tipo com o nome especificado ou <see langword="null" /> se o tipo não for encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2774">The type with the specified name, or <see langword="null" /> if the type is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2775">Cenários de uso para esse método e os detalhes sobre o `assemblyResolver` e `typeResolver` parâmetros podem ser encontrados no <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2775">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2776">Se `typeName` não for encontrado, a chamada para o <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> retorno do método `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2776">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="2c3b9-2777">Ele não gerará uma exceção.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2777">It does not throw an exception.</span></span> <span data-ttu-id="2c3b9-2778">Para controlar se uma exceção é lançada, chame uma sobrecarga da <xref:System.Type.GetType%2A> método que tem um `throwOnError` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2778">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="2c3b9-2779">Essa sobrecarga de método de chamada é o mesmo que chamar o <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga de método e especificando `false` para o `throwOnError` e `ignoreCase` parâmetros.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2779">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2780">
            <paramref name="typeName" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2780">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-2781">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2781">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2782">Ocorre um erro quando <paramref name="typeName" /> é analisado em um nome de tipo e um nome de assembly (por exemplo, quando o nome do tipo simples inclui um caractere especial sem escape).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2782">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="2c3b9-2783">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2783">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2784">
            <paramref name="typeName" /> representa um tipo genérico que tenha um tipo de ponteiro, um tipo <see langword="ByRef" /> ou <see cref="T:System.Void" /> como um dos argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2784">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2785">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2785">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2786">
            <paramref name="typeName" /> representa um tipo genérico que tem um número incorreto de argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2786">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2787">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2787">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2788">
            <paramref name="typeName" /> representa um tipo genérico, e um dos argumentos de tipo não atende às restrições do parâmetro de tipo correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2788">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-2789">
            <paramref name="typeName" /> representa uma matriz de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2789">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="2c3b9-2790">O assembly ou uma de suas dependências foi encontrado, mas não foi possível carregá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2790">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="2c3b9-2791">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2791">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2792">
            <paramref name="typeName" /> contém um nome de assembly inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2792">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="2c3b9-2793">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2793">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2794">
            <paramref name="typeName" /> é um nome de assembly válido sem um nome de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2794">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="2c3b9-2795">O assembly ou uma de suas dependências não é válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2795">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="2c3b9-2796">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2796">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2797">O assembly foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2797">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="2c3b9-2798">O nome do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2798">The name of the type to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2799">Se o parâmetro <c>typeResolver</c> for fornecido, o nome do tipo poderá ser qualquer cadeia de caracteres que <c>typeResolver</c> possa resolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2799">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="2c3b9-2800">Se o parâmetro <c>assemblyResolver</c> for fornecido ou se a resolução de tipo padrão for usada, <c>typeName</c> deverá ser um nome qualificado pelo assembly (consulte <see cref="P:System.Type.AssemblyQualifiedName" />), a menos que o tipo esteja no assembly em execução no momento ou em Mscorlib.dll, quando então será suficiente fornecer o nome de tipo qualificado por seu namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2800">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="2c3b9-2801">Um método que localiza e retorna o assembly especificado em <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2801">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="2c3b9-2802">O nome do assembly é passado para <c>assemblyResolver</c> como um objeto <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2802">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="2c3b9-2803">Se <c>typeName</c> não contiver o nome de um assembly, o <c>assemblyResolver</c> não será chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2803">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="2c3b9-2804">Se o <c>assemblyResolver</c> não for fornecido, será executada a resolução de assembly padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2804">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="2c3b9-2805">Cuidado! Não passe métodos de chamadores desconhecidos ou não confiáveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2805">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="2c3b9-2806">Isso poderá resultar na elevação de privilégio de código mal-intencionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2806">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="2c3b9-2807">Use apenas métodos fornecidos por você ou com os quais esteja familiarizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2807">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="2c3b9-2808">Um método que localiza e retorna o tipo especificado por <c>typeName</c> do assembly que é retornado pelo <c>assemblyResolver</c> ou pela resolução de assembly padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2808">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="2c3b9-2809">Se nenhum assembly for indicado, o método poderá fornecer um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2809">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="2c3b9-2810">O método também utiliza um parâmetro que especifica se deve ser executada uma pesquisa que não diferencia maiúsculas de minúsculas. <see langword="false" /> é passado para esse parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2810">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="2c3b9-2811">Cuidado! Não passe métodos de chamadores desconhecidos ou não confiáveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2811">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-2812">
            <see langword="true" /> para gerar uma exceção se não for possível encontrar o tipo; <see langword="false" /> para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2812">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2813">A especificação de <see langword="false" /> também suprime algumas condições de exceção, mas não todas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2813">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="2c3b9-2814">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2814">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2815">Obtém o tipo com o nome definido, especificando se deverá ser lançada uma exceção se o tipo não for encontrado e, opcionalmente, fornecendo métodos personalizados para resolver o assembly e o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2815">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2816">O tipo com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2816">The type with the specified name.</span>
          </span>
          <span data-ttu-id="2c3b9-2817">Caso o tipo não seja encontrado, o parâmetro <paramref name="throwOnError" /> especifica se <see langword="null" /> é retornado ou uma exceção é lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2817">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="2c3b9-2818">Em alguns casos, uma exceção é lançada independentemente do valor de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2818">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2819">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2819">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2820">Cenários de uso para esse método e os detalhes sobre o `assemblyResolver` e `typeResolver` parâmetros podem ser encontrados no <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2820">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="2c3b9-2821">Essa sobrecarga de método de chamada é o mesmo que chamar o <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga de método e especificando `false` para o `ignoreCase` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2821">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-2822">
            <paramref name="typeName" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2822">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-2823">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2823">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-2824">
            <paramref name="throwOnError" /> é <see langword="true" /> e o tipo não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2824">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="2c3b9-2825">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2825">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2826">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém caracteres inválidos como, por exemplo, uma guia inserida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2826">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="2c3b9-2827">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2827">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2828">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> é uma cadeia de caracteres vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2828">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="2c3b9-2829">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2829">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2830">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> representa um tipo de matriz com um tamanho inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2830">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="2c3b9-2831">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2831">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2832">
            <paramref name="typeName" /> representa uma matriz de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2832">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-2833">Ocorre um erro quando <paramref name="typeName" /> é analisado em um nome de tipo e um nome de assembly (por exemplo, quando o nome do tipo simples inclui um caractere especial sem escape).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2833">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="2c3b9-2834">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2834">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2835">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém sintaxe inválida (por exemplo, "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2835">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="2c3b9-2836">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2836">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2837">
            <paramref name="typeName" /> representa um tipo genérico que tenha um tipo de ponteiro, um tipo <see langword="ByRef" /> ou <see cref="T:System.Void" /> como um dos argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2837">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2838">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2838">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2839">
            <paramref name="typeName" /> representa um tipo genérico que tem um número incorreto de argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2839">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-2840">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2840">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2841">
            <paramref name="typeName" /> representa um tipo genérico, e um dos argumentos de tipo não atende às restrições do parâmetro de tipo correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2841">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2c3b9-2842">
            <paramref name="throwOnError" /> é <see langword="true" /> e o assembly ou uma de suas dependências não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2842">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
          <span data-ttu-id="2c3b9-2843">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2843">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2844">
            <paramref name="typeName" /> contém um nome de assembly inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2844">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="2c3b9-2845">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2845">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2846">
            <paramref name="typeName" /> é um nome de assembly válido sem um nome de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2846">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="2c3b9-2847">O assembly ou uma de suas dependências foi encontrado, mas não foi possível carregá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2847">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="2c3b9-2848">O assembly ou uma de suas dependências não é válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2848">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="2c3b9-2849">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2849">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-2850">O assembly foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2850">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="2c3b9-2851">O nome do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2851">The name of the type to get.</span>
          </span>
          <span data-ttu-id="2c3b9-2852">Se o parâmetro <c>typeResolver</c> for fornecido, o nome do tipo poderá ser qualquer cadeia de caracteres que <c>typeResolver</c> possa resolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2852">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="2c3b9-2853">Se o parâmetro <c>assemblyResolver</c> for fornecido ou se a resolução de tipo padrão for usada, <c>typeName</c> deverá ser um nome qualificado pelo assembly (consulte <see cref="P:System.Type.AssemblyQualifiedName" />), a menos que o tipo esteja no assembly em execução no momento ou em Mscorlib.dll, quando então será suficiente fornecer o nome de tipo qualificado por seu namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2853">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="2c3b9-2854">Um método que localiza e retorna o assembly especificado em <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2854">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="2c3b9-2855">O nome do assembly é passado para <c>assemblyResolver</c> como um objeto <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2855">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="2c3b9-2856">Se <c>typeName</c> não contiver o nome de um assembly, o <c>assemblyResolver</c> não será chamado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2856">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="2c3b9-2857">Se o <c>assemblyResolver</c> não for fornecido, será executada a resolução de assembly padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2857">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="2c3b9-2858">Cuidado! Não passe métodos de chamadores desconhecidos ou não confiáveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2858">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="2c3b9-2859">Isso poderá resultar na elevação de privilégio de código mal-intencionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2859">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="2c3b9-2860">Use apenas métodos fornecidos por você ou com os quais esteja familiarizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2860">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="2c3b9-2861">Um método que localiza e retorna o tipo especificado por <c>typeName</c> do assembly que é retornado pelo <c>assemblyResolver</c> ou pela resolução de assembly padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2861">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="2c3b9-2862">Se nenhum assembly for indicado, o método poderá fornecer um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2862">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="2c3b9-2863">O método também utiliza um parâmetro que especifica se deve-se executar uma pesquisa que não diferencia maiúsculas de minúsculas. O valor de <c>ignoreCase</c> é passado para esse parâmetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2863">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <c>ignoreCase</c> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="2c3b9-2864">Cuidado! Não passe métodos de chamadores desconhecidos ou não confiáveis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2864">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-2865">
            <see langword="true" /> para gerar uma exceção se não for possível encontrar o tipo; <see langword="false" /> para retornar <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2865">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2866">A especificação de <see langword="false" /> também suprime algumas condições de exceção, mas não todas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2866">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="2c3b9-2867">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2867">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="2c3b9-2868">
            <see langword="true" /> para executar uma pesquisa por <c>typeName</c> sem diferenciar maiúsculas de minúsculas, <see langword="false" /> para realizar uma pesquisa por <c>typeName</c> diferenciando maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2868">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-2869">Obtém o tipo com o nome definido, especificando se uma pesquisa que diferencia maiúsculas de minúsculas deverá ser realizada e se uma exceção deverá ser gerada se o tipo não for encontrado, com a opção de também fornecer métodos personalizados para resolver o assembly e o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2869">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-2870">O tipo com o nome especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2870">The type with the specified name.</span>
          </span>
          <span data-ttu-id="2c3b9-2871">Caso o tipo não seja encontrado, o parâmetro <paramref name="throwOnError" /> especifica se <see langword="null" /> é retornado ou uma exceção é lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2871">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="2c3b9-2872">Em alguns casos, uma exceção é lançada independentemente do valor de <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2872">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="2c3b9-2873">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-2873">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-2874">Use essa sobrecarga de método e suas sobrecargas associadas (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> e <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) para substituir a implementação padrão da <xref:System.Type.GetType%2A> método com implementações mais flexíveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2874">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="2c3b9-2875">Ao fornecer seus próprios métodos que resolvem nomes de tipo e os nomes dos assemblies que contêm-los, você pode fazer o seguinte:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2875">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="2c3b9-2876">Controle qual versão de um assembly de um tipo é carregado do.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2876">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="2c3b9-2877">Forneça outro local para procurar um nome de tipo que não inclua um nome de assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2877">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="2c3b9-2878">Carregar assemblies usando nomes de assembly parciais.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2878">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="2c3b9-2879">Retornar as subclasses de <xref:System.Type?displayProperty=nameWithType> que não são criados pelo common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2879">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="2c3b9-2880">Por exemplo, na serialização tolerantes à versão esse método permite que você pesquise um assembly de "melhor ajuste" usando um nome parcial.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2880">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="2c3b9-2881">Outras sobrecargas do <xref:System.Type.GetType%2A> método exigir um nome de tipo qualificado pelo assembly, que inclui o número de versão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2881">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="2c3b9-2882">Talvez seja necessário retornar subclasses de implementações alternativas do sistema de tipo <xref:System.Type?displayProperty=nameWithType> que não são criados pelo CLR; todos os tipos que são retornados por outras sobrecargas do <xref:System.Type.GetType%2A> método são tipos de tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2882">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="2c3b9-2883">Notas de uso</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2883">Usage Notes</span></span>  
 <span data-ttu-id="2c3b9-2884">Essa sobrecarga de método e suas sobrecargas associadas analisam `typeName` no nome de um tipo e o nome de um assembly e, em seguida, resolver os nomes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2884">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="2c3b9-2885">Resolução do nome do assembly ocorre antes da resolução do nome do tipo, porque um nome de tipo deve ser resolvido no contexto de um assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2885">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2886">Se você estiver familiarizado com o conceito de nomes de tipo qualificado pelo assembly, consulte o <xref:System.Type.AssemblyQualifiedName%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2886">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="2c3b9-2887">Se `typeName` não é um nome qualificado pelo assembly, resolução de assembly é ignorada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2887">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="2c3b9-2888">Nomes de tipo não qualificado podem ser resolvidos no contexto de mscorlib. dll ou o assembly em execução no momento ou, opcionalmente, você pode fornecer um assembly no `typeResolver` parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2888">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="2c3b9-2889">Os efeitos de incluir ou omitir o nome do assembly para tipos diferentes de resolução de nomes são exibidos como uma tabela na [resolução de nome misto](#mixed_name_resolution) seção.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2889">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="2c3b9-2890">Observações de uso geral:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2890">General usage notes:</span></span>  
  
-   <span data-ttu-id="2c3b9-2891">Não passe métodos a serem `assemblyResolver` ou `typeResolver` que elas venham de chamadores desconhecidos ou não confiáveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2891">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="2c3b9-2892">Use apenas métodos fornecidos por você ou com os quais esteja familiarizado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2892">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="2c3b9-2893">Usando métodos de chamadores desconhecidos ou não confiáveis pode resultar em elevação de privilégio de código mal-intencionado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2893">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="2c3b9-2894">Se você omitir a `assemblyResolver` e/ou `typeResolver` parâmetros, o valor da `throwOnError` parâmetro é passado para os métodos que realizam a resolução padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2894">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="2c3b9-2895">Se `throwOnError` está `true`, esse método lança uma <xref:System.TypeLoadException> quando `typeResolver` retorna `null`e uma <xref:System.IO.FileNotFoundException> quando `assemblyResolver` retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2895">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="2c3b9-2896">Esse método não capturará exceções geradas pelo `assemblyResolver` e `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2896">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="2c3b9-2897">Você é responsável por todas as exceções que são geradas pelos métodos resolvedor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2897">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="2c3b9-2898">Resolvendo assemblies</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2898">Resolving Assemblies</span></span>  
 <span data-ttu-id="2c3b9-2899">O `assemblyResolver` método recebe um <xref:System.Reflection.AssemblyName> objeto, que é produzido por analisar o nome do assembly de cadeia de caracteres que está incluído no `typeName`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2899">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="2c3b9-2900">Se `typeName` não contém um nome de assembly `assemblyResolver` não é chamado e `null` é passado para `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2900">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="2c3b9-2901">Se `assemblyResolver` não for fornecida, o padrão de montagem de investigação é usada para localizar o assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2901">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="2c3b9-2902">Se `assemblyResolver` for fornecido, o <xref:System.Type.GetType%2A> método não faz a investigação padrão; nesse caso, você deve garantir que seu `assemblyResolver` pode lidar com todos os assemblies que você passa para ele.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2902">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="2c3b9-2903">O `assemblyResolver` método deverá retornar `null` se o assembly não pode ser resolvido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2903">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="2c3b9-2904">Se `assemblyResolver` retorna `null`, `typeResolver` não é chamado e nenhum processamento adicional ocorre; Além disso, se `throwOnError` está `true`, um <xref:System.IO.FileNotFoundException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2904">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="2c3b9-2905">Se o <xref:System.Reflection.AssemblyName> que é passado para `assemblyResolver` é um parcial nome, uma ou mais das suas partes são `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2905">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="2c3b9-2906">Por exemplo, se ele não tem versão, o <xref:System.Reflection.AssemblyName.Version%2A> é de propriedade `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2906">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="2c3b9-2907">Se o <xref:System.Reflection.AssemblyName.Version%2A> propriedade, o <xref:System.Reflection.AssemblyName.CultureInfo%2A> propriedade e o <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> método retornam `null`, em seguida, apenas o nome simples do assembly foi fornecido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2907">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="2c3b9-2908">O `assemblyResolver` método pode usar ou ignorar todas as partes do nome do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2908">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="2c3b9-2909">Os efeitos das opções de resolução de assembly diferente são exibidos como uma tabela na [resolução de nome misto](#mixed_name_resolution) seção para nomes de tipo simples e qualificado por assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2909">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="2c3b9-2910">Resolvendo tipos</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2910">Resolving Types</span></span>  
 <span data-ttu-id="2c3b9-2911">Se `typeName` não especifica um nome de assembly, `typeResolver` sempre é chamado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2911">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="2c3b9-2912">Se `typeName` Especifica um nome de assembly, `typeResolver` é chamada somente quando o nome do assembly é resolvido com êxito.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2912">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="2c3b9-2913">Se `assemblyResolver` ou o assembly padrão investigação retorna `null`, `typeResolver` não é chamado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2913">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="2c3b9-2914">O `typeResolver` método recebe três argumentos:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2914">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="2c3b9-2915">O assembly para pesquisar ou `null` se `typeName` não contém um nome de assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2915">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="2c3b9-2916">O nome simples do tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2916">The simple name of the type.</span></span> <span data-ttu-id="2c3b9-2917">No caso de um tipo aninhado, esse é o tipo de recipiente mais externo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2917">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="2c3b9-2918">No caso de um tipo genérico, este é o nome simples do tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2918">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="2c3b9-2919">Um valor booliano que é `true` se o caso de nomes de tipo será ignorada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2919">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="2c3b9-2920">A implementação determina a maneira como esses argumentos são usados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2920">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="2c3b9-2921">O `typeResolver` método deverá retornar `null` se ele não puder resolver o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2921">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="2c3b9-2922">Se `typeResolver` retorna `null` e `throwOnError` é `true`, essa sobrecarga do <xref:System.Type.GetType%2A> lança um <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2922">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="2c3b9-2923">Os efeitos das opções de resolução de tipo diferentes são exibidos como uma tabela na [resolução de nome misto](#mixed_name_resolution) seção para nomes de tipo simples e qualificado por assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2923">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="2c3b9-2924">Resolvendo tipos aninhados</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2924">Resolving Nested Types</span></span>  
 <span data-ttu-id="2c3b9-2925">Se `typeName` é um tipo aninhado, somente o nome do mais externo que contém o tipo é passado para `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2925">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="2c3b9-2926">Quando `typeResolver` retorna esse tipo, o <xref:System.Type.GetNestedType%2A> método é chamado repetidamente até que o tipo aninhado interno foi resolvido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2926">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="2c3b9-2927">Resolvendo tipos genéricos</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2927">Resolving Generic Types</span></span>  
 <span data-ttu-id="2c3b9-2928">O <xref:System.Type.GetType%2A> é chamada recursivamente para resolver tipos genéricos: primeiro para resolver o tipo genérico em si e, em seguida, para resolver seus argumentos de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2928">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="2c3b9-2929">Se um argumento de tipo for genérico, <xref:System.Type.GetType%2A> é chamada recursivamente para resolver seus argumentos de tipo e assim por diante.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2929">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="2c3b9-2930">A combinação de `assemblyResolver` e `typeResolver` que você fornece deve ser capaz de resolver todos os níveis dessa recursão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2930">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="2c3b9-2931">Por exemplo, suponha que você fornecer um `assemblyResolver` que controla o carregamento de `MyAssembly`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2931">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="2c3b9-2932">Suponha que você deseja resolver o tipo genérico `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2932">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-2933">Você pode passar o nome de tipo genérico a seguir:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2933">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="2c3b9-2934">Observe que `MyType` é o argumento de tipo qualificado do assembly apenas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2934">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="2c3b9-2935">Os nomes dos <xref:System.Collections.Generic.Dictionary%602> e <xref:System.String> classes não são qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2935">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="2c3b9-2936">Sua `typeResolver` deve ser capaz de identificador de um assembly ou `null`, pois ela receberá `null` para <xref:System.Collections.Generic.Dictionary%602> e <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2936">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="2c3b9-2937">Ele pode lidar com esse caso, chamando uma sobrecarga da <xref:System.Type.GetType%2A> método que usa uma cadeia de caracteres, como os dois nomes de tipo não qualificados são em mscorlib. dll:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2937">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="2c3b9-2938">O `assemblyResolver` método não é chamado para o tipo de dicionário e o tipo de cadeia de caracteres, porque esses nomes de tipo não são qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2938">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="2c3b9-2939">Agora suponha que, em vez de `System.String`, é o primeiro tipo de argumento genérico `YourType`, de `YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2939">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="2c3b9-2940">Como este assembly é nem mscorlib. dll, nem o assembly em execução no momento, não é possível resolver `YourType` sem um nome qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2940">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="2c3b9-2941">Porque seu `assemblyResolve` será chamada recursivamente, deve ser capaz de lidar com isso.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2941">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="2c3b9-2942">Em vez de retornar `null` para assemblies diferente `MyAssembly`, ele agora executa um carregamento de assembly usando o <xref:System.Reflection.AssemblyName> objeto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2942">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="2c3b9-2943">Voltar ao [Observações sobre uso](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2943">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="2c3b9-2944">Resolvendo nomes de tipo com caracteres especiais</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2944">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="2c3b9-2945">Determinados caracteres têm significados especiais em nomes qualificados pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2945">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="2c3b9-2946">Se um nome de tipo simples contém esses caracteres, os caracteres causam erros de análise quando o nome simples faz parte de um nome qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2946">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="2c3b9-2947">Para evitar os erros de análise, você deve escapar os caracteres especiais com uma barra invertida antes de você pode passar o nome qualificado do assembly para o <xref:System.Type.GetType%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2947">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="2c3b9-2948">Por exemplo, se um tipo é nomeado `Strange]Type`, o caractere de escape deve ser adicionado à frente o colchete quadrado da seguinte maneira: `Strange\]Type`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2948">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-2949">Nomes com caracteres especiais, não podem ser criados no Visual Basic ou c#, mas podem ser criados usando o Microsoft intermediate language (MSIL) ou emitindo assemblies dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2949">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="2c3b9-2950">A tabela a seguir mostra os caracteres especiais para nomes de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2950">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="2c3b9-2951">Caractere</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2951">Character</span></span>|<span data-ttu-id="2c3b9-2952">Significado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2952">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="2c3b9-2953">`,` (vírgula)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2953">`,` (comma)</span></span>|<span data-ttu-id="2c3b9-2954">Delimitador de nomes qualificados pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2954">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="2c3b9-2955">`[]` (os colchetes)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2955">`[]` (square brackets)</span></span>|<span data-ttu-id="2c3b9-2956">Como um par de sufixo, indica um tipo de matriz; como um par de delimitadores, inclui listas de argumentos genéricos e nomes qualificados pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2956">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="2c3b9-2957">`&` (e comercial)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2957">`&` (ampersand)</span></span>|<span data-ttu-id="2c3b9-2958">Como um sufixo, indica que um tipo é um tipo de referência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2958">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="2c3b9-2959">`*` (asterisco)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2959">`*` (asterisk)</span></span>|<span data-ttu-id="2c3b9-2960">Como um sufixo, indica que um tipo é um tipo de ponteiro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2960">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="2c3b9-2961">`+` (adição)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2961">`+` (plus)</span></span>|<span data-ttu-id="2c3b9-2962">Delimitador de tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2962">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="2c3b9-2963">`\` (barra invertida)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2963">`\` (backslash)</span></span>|<span data-ttu-id="2c3b9-2964">Caractere de escape.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2964">Escape character.</span></span>|  
  
 <span data-ttu-id="2c3b9-2965">Propriedades, como <xref:System.Type.AssemblyQualifiedName%2A> retorno corretamente cadeias de caracteres de escape.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2965">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="2c3b9-2966">Você deve passar cadeias de caracteres de escapadas corretamente para o <xref:System.Type.GetType%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2966">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="2c3b9-2967">Por sua vez, o <xref:System.Type.GetType%2A> método passa os nomes de escape corretamente para `typeResolver` e para os métodos de resolução de tipo padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2967">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="2c3b9-2968">Se você precisa comparar um nome para um nome sem escape no `typeResolver`, você deve remover os caracteres de escape.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2968">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="2c3b9-2969">Voltar ao [Observações sobre uso](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2969">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="2c3b9-2970">Resolução de nome misto</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2970">Mixed Name Resolution</span></span>  
 <span data-ttu-id="2c3b9-2971">A tabela a seguir resume as interações entre `assemblyResolver`, `typeResolver`e a resolução de nomes padrão, para todas as combinações de nome de tipo e nome do assembly na `typeName`:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2971">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="2c3b9-2972">Conteúdo do nome do tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2972">Contents of type name</span></span>|<span data-ttu-id="2c3b9-2973">Método do resolvedor de assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2973">Assembly resolver method</span></span>|<span data-ttu-id="2c3b9-2974">Método do resolvedor de tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2974">Type resolver method</span></span>|<span data-ttu-id="2c3b9-2975">Resultado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2975">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="2c3b9-2976">tipo, assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2976">type, assembly</span></span>|<span data-ttu-id="2c3b9-2977">nulo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2977">null</span></span>|<span data-ttu-id="2c3b9-2978">nulo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2978">null</span></span>|<span data-ttu-id="2c3b9-2979">Equivalente a chamar o <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2979">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="2c3b9-2980">tipo, assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2980">type, assembly</span></span>|<span data-ttu-id="2c3b9-2981">fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2981">provided</span></span>|<span data-ttu-id="2c3b9-2982">nulo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2982">null</span></span>|<span data-ttu-id="2c3b9-2983">`assemblyResolver` Retorna o assembly ou `null` se ele não é possível resolver o assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2983">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="2c3b9-2984">Se o assembly for resolvido, o <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga do método é usada para carregar o tipo do assembly; caso contrário, não há nenhuma tentativa de resolver o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2984">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="2c3b9-2985">tipo, assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2985">type, assembly</span></span>|<span data-ttu-id="2c3b9-2986">nulo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2986">null</span></span>|<span data-ttu-id="2c3b9-2987">fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2987">provided</span></span>|<span data-ttu-id="2c3b9-2988">Equivalente a converter o nome do assembly para um <xref:System.Reflection.AssemblyName> objeto e chamar o <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> sobrecarga de método para obter o assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2988">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="2c3b9-2989">Se o assembly for resolvido, ele é passado para `typeResolver`; caso contrário, `typeResolver` não é chamado e não há nenhuma outra tentativa de resolver o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2989">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="2c3b9-2990">tipo, assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2990">type, assembly</span></span>|<span data-ttu-id="2c3b9-2991">fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2991">provided</span></span>|<span data-ttu-id="2c3b9-2992">fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2992">provided</span></span>|<span data-ttu-id="2c3b9-2993">`assemblyResolver` Retorna o assembly ou `null` se ele não é possível resolver o assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2993">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="2c3b9-2994">Se o assembly for resolvido, ele é passado para `typeResolver`; caso contrário, `typeResolver` não é chamado e não há nenhuma outra tentativa de resolver o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2994">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="2c3b9-2995">tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2995">type</span></span>|<span data-ttu-id="2c3b9-2996">nulo, fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2996">null, provided</span></span>|<span data-ttu-id="2c3b9-2997">nulo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2997">null</span></span>|<span data-ttu-id="2c3b9-2998">Equivalente a chamar o <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2998">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="2c3b9-2999">Porque o nome do assembly não for fornecido, apenas mscorlib. dll e o assembly em execução no momento são pesquisados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-2999">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="2c3b9-3000">Se `assemblyResolver` for fornecido, ele será ignorado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3000">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="2c3b9-3001">tipo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3001">type</span></span>|<span data-ttu-id="2c3b9-3002">nulo, fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3002">null, provided</span></span>|<span data-ttu-id="2c3b9-3003">fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3003">provided</span></span>|<span data-ttu-id="2c3b9-3004">`typeResolver` é chamado, e `null` é passado para o assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3004">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="2c3b9-3005">`typeResolver` pode fornecer um tipo de qualquer assembly, incluindo assemblies, que ele carrega o propósito.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3005">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="2c3b9-3006">Se `assemblyResolver` for fornecido, ele será ignorado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3006">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="2c3b9-3007">assembly</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3007">assembly</span></span>|<span data-ttu-id="2c3b9-3008">nulo, fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3008">null, provided</span></span>|<span data-ttu-id="2c3b9-3009">nulo, fornecido</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3009">null, provided</span></span>|<span data-ttu-id="2c3b9-3010">Um <xref:System.IO.FileLoadException> for gerada, porque o nome do assembly é analisado como se fosse um nome de tipo qualificado pelo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3010">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="2c3b9-3011">Isso resulta em um nome de assembly inválido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3011">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="2c3b9-3012">Para: [observações de uso](#usage_notes), [Resolvendo Assemblies](#resolving_assemblies), [Resolvendo tipos](#resolving_types).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3012">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-3013">
            <paramref name="typeName" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3013">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-3014">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3014">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-3015">
            <paramref name="throwOnError" /> é <see langword="true" /> e o tipo não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3015">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="2c3b9-3016">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3016">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3017">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém caracteres inválidos como, por exemplo, uma guia inserida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3017">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="2c3b9-3018">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3018">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3019">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> é uma cadeia de caracteres vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3019">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="2c3b9-3020">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3020">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3021">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> representa um tipo de matriz com um tamanho inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3021">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="2c3b9-3022">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3022">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3023">
            <paramref name="typeName" /> representa uma matriz de <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3023">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3024">Ocorre um erro quando <paramref name="typeName" /> é analisado em um nome de tipo e um nome de assembly (por exemplo, quando o nome do tipo simples inclui um caractere especial sem escape).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3024">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="2c3b9-3025">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3025">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3026">
            <paramref name="throwOnError" /> é <see langword="true" /> e <paramref name="typeName" /> contém sintaxe inválida (por exemplo, "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3026">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="2c3b9-3027">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3027">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3028">
            <paramref name="typeName" /> representa um tipo genérico que tenha um tipo de ponteiro, um tipo <see langword="ByRef" /> ou <see cref="T:System.Void" /> como um dos argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3028">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-3029">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3029">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3030">
            <paramref name="typeName" /> representa um tipo genérico que tem um número incorreto de argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3030">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-3031">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3031">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3032">
            <paramref name="typeName" /> representa um tipo genérico, e um dos argumentos de tipo não atende às restrições do parâmetro de tipo correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3032">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2c3b9-3033">
            <paramref name="throwOnError" /> é <see langword="true" /> e o assembly ou uma de suas dependências não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3033">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="2c3b9-3034">O assembly ou uma de suas dependências foi encontrado, mas não foi possível carregá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3034">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="2c3b9-3035">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3035">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3036">
            <paramref name="typeName" /> contém um nome de assembly inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3036">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="2c3b9-3037">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3037">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3038">
            <paramref name="typeName" /> é um nome de assembly válido sem um nome de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3038">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="2c3b9-3039">O assembly ou uma de suas dependências não é válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3039">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="2c3b9-3040">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3040">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3041">O assembly foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3041">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member GetTypeArray : obj[] -&gt; Type[]" Usage="System.Type.GetTypeArray args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="2c3b9-3042">Uma matriz de objetos cujos tipos devem ser determinados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3042">An array of objects whose types to determine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3043">Obtém os tipos dos objetos na matriz especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3043">Gets the types of the objects in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3044">Uma matriz de objetos <see cref="T:System.Type" /> que representa os tipos de elementos correspondentes em <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3044">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2c3b9-3045">O exemplo de código a seguir demonstra como usar o <xref:System.Type.GetTypeArray%2A> método para listar os tipos dos elementos de uma matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3045">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-3046">
            <paramref name="args" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3046">
              <paramref name="args" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3047">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3047">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3048">Um ou mais dos elementos no <paramref name="args" /> são <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3048">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-3049">Os inicializadores de classe são invocados e pelo menos um gera uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3049">The class initializers are invoked and at least one throws an exception.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : Type -&gt; TypeCode" Usage="System.Type.GetTypeCode type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="2c3b9-3050">O tipo cujo código de tipo subjacente será obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3050">The type whose underlying type code to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3051">Obtém o código de tipo subjacente do <see cref="T:System.Type" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3051">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3052">O código do tipo subjacente ou <see cref="F:System.TypeCode.Empty" /> se <paramref name="type" /> for <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3052">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3053">Quando você herda <xref:System.Type>, você pode alterar o comportamento desse método, substituindo o <xref:System.Type.GetTypeCodeImpl%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3053">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3054">O exemplo de código a seguir demonstra como o <xref:System.TypeCode> enumeração pode ser usada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3054">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="2c3b9-3055">Em um bloco de decisão dentro de `WriteObjectInfo` método, o <xref:System.TypeCode> de um <xref:System.Object> parâmetro é examinado e uma mensagem apropriada é gravada no console.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3055">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCodeImpl : unit -&gt; TypeCode&#xA;override this.GetTypeCodeImpl : unit -&gt; TypeCode" Usage="type.GetTypeCodeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3056">Retorna o código de tipo subjacente desta instância <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3056">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3057">O código de tipo do tipo subjacente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3057">The type code of the underlying type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3058">Esse método fornece a implementação para o `static` (em c#) ou `Shared` (no Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3058">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="2c3b9-3059">Quando você herda <xref:System.Type>, você pode substituir esse método para fornecer sua própria implementação de <xref:System.Type.GetTypeCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3059">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3060">Obtém o tipo associado ao identificador de classe especificado (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3060">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Type.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="2c3b9-3061">O CLSID do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3061">The CLSID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3062">Obtém o tipo associado ao identificador de classe especificado (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3062">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3063">
            <see langword="System.__ComObject" /> independentemente do CLSID ser válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3063">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3064">O <xref:System.Type.GetTypeFromCLSID%2A> método dá suporte ao acesso de associação tardia a objetos COM não gerenciados de aplicativos do .NET Framework quando você souber o identificador de classe do objeto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3064">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="2c3b9-3065">Classes COM o identificador de classe é definido na chave HKEY_CLASSES_ROOT\CLSID do registro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3065">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="2c3b9-3066">Você pode recuperar o valor da <xref:System.Type.IsCOMObject%2A> propriedade para determinar se o tipo retornado por esse método é um objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3066">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="2c3b9-3067">Você pode chamar o <xref:System.Type.GetTypeFromProgID%2A> método para acesso de associação tardia para COM objetos cujo identificador programático (ProgID) que você sabe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3067">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="2c3b9-3068">Criando uma instância de um objeto COM não gerenciado de sua CLSID é um processo em duas etapas:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3068">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="2c3b9-3069">Obter um <xref:System.Type> objeto que representa o`__ComObject` que corresponde ao CLSID chamando o <xref:System.Type.GetTypeFromCLSID%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3069">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="2c3b9-3070">Chamar o <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> método para instanciar o objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3070">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="2c3b9-3071">Consulte o exemplo para obter uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3071">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="2c3b9-3072">O <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> sobrecarga ignora qualquer exceção que pode ocorrer ao instanciar um <xref:System.Type> objeto com base no `clsid` argumento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3072">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="2c3b9-3073">Observe que nenhuma exceção é lançada se `clsid` não for encontrado no registro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3073">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3074">O exemplo a seguir usa o CLSID do Microsoft Word [objeto Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) para recuperar um tipo COM que representa o aplicativo Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3074">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="2c3b9-3075">Em seguida, cria uma instância do tipo chamando o <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> método e fecha-lo chamando o [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3075">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="2c3b9-3076">Esse método se destina para uso ao trabalhar com objetos COM, não com objetos do .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3076">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="2c3b9-3077">Todos os objetos gerenciados, incluindo aqueles que são visíveis no COM (ou seja, seus <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atributo é <see langword="true" />) tem um GUID que é retornado pelo <see cref="P:System.Type.GUID" /> propriedade.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3077">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="2c3b9-3078">Embora o método retorna um <see cref="T:System.Type" /> objetos do objeto que corresponde ao GUID para o .NET Framework, você não poderá usar esse <see cref="T:System.Type" /> objeto para criar uma instância do tipo chamando o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método, como mostra o exemplo a seguir.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3078">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="2c3b9-3079">[! código csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! código vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3079">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="2c3b9-3080">Em vez disso, o <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> só deve ser usado para recuperar o GUID de um objeto COM não gerenciado e resultante <see cref="T:System.Type" /> objeto é passado para o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método deve representar um objeto COM não gerenciado.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3080">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="2c3b9-3081">O CLSID do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3081">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-3082">
            <see langword="true" /> para lançar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3082">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="2c3b9-3083">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3083">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3084">
            <see langword="false" /> para ignorar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3084">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3085">Obtém o tipo associado ao CLSID (identificador de classe) especificado, especificando se deverá gerar uma exceção se ocorrer um erro ao carregar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3085">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3086">
            <see langword="System.__ComObject" /> independentemente do CLSID ser válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3086">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3087">O <xref:System.Type.GetTypeFromCLSID%2A> método dá suporte ao acesso de associação tardia a objetos COM não gerenciados de aplicativos do .NET Framework quando você souber o identificador de classe do objeto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3087">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="2c3b9-3088">Classes COM o identificador de classe é definido na chave HKEY_CLASSES_ROOT\CLSID do registro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3088">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="2c3b9-3089">Você pode recuperar o valor da <xref:System.Type.IsCOMObject%2A> propriedade para determinar se o tipo retornado por esse método é um objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3089">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="2c3b9-3090">Você pode chamar o <xref:System.Type.GetTypeFromProgID%2A> método para acesso de associação tardia para COM objetos cujo identificador programático (ProgID) que você sabe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3090">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="2c3b9-3091">Criando uma instância de um objeto COM não gerenciado de sua CLSID é um processo em duas etapas:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3091">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="2c3b9-3092">Obter um <xref:System.Type> objeto que representa o `__ComObject` que corresponde ao CLSID chamando o <xref:System.Type.GetTypeFromCLSID%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3092">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="2c3b9-3093">Chamar o <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> método para instanciar o objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3093">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="2c3b9-3094">Consulte o exemplo para obter uma ilustração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3094">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="2c3b9-3095">Exceções, como <xref:System.OutOfMemoryException> será gerada ao especificar `true` para `throwOnError`, mas não falhará para CLSIDs cancelados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3095">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3096">O exemplo a seguir usa o CLSID do Microsoft Word [objeto Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) para recuperar um tipo COM que representa o aplicativo Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3096">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="2c3b9-3097">Em seguida, cria uma instância do tipo chamando o <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> método e fecha-lo chamando o [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3097">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="2c3b9-3098">Uma exceção é lançada se ocorrer um erro ao carregar o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3098">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="2c3b9-3099">Esse método se destina para uso ao trabalhar com objetos COM, não com objetos do .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3099">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="2c3b9-3100">Todos os objetos gerenciados, incluindo aqueles que são visíveis no COM (ou seja, seus <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atributo é <see langword="true" />) tem um GUID que é retornado pelo <see cref="P:System.Type.GUID" /> propriedade.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3100">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="2c3b9-3101">Embora o método retorna um <see cref="T:System.Type" /> objetos do objeto que corresponde ao GUID para o .NET Framework, você não poderá usar esse <see cref="T:System.Type" /> objeto para criar uma instância do tipo chamando o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método, como mostra o exemplo a seguir.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3101">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="2c3b9-3102">[! código csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! código vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3102">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="2c3b9-3103">Em vez disso, o <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> só deve ser usado para recuperar o GUID de um objeto COM não gerenciado e resultante <see cref="T:System.Type" /> objeto é passado para o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método deve representar um objeto COM não gerenciado.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3103">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="2c3b9-3104">O CLSID do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3104">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="2c3b9-3105">O servidor do qual carregar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3105">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="2c3b9-3106">Caso o nome do servidor seja <see langword="null" />, este método retorna automaticamente para o computador local.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3106">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3107">Obtém o tipo associado ao CLSID (identificador de classe) especificado do servidor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3107">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3108">
            <see langword="System.__ComObject" /> independentemente do CLSID ser válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3108">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3109">O <xref:System.Type.GetTypeFromCLSID%2A> método dá suporte ao acesso de associação tardia a objetos COM não gerenciados de aplicativos do .NET Framework quando você souber o identificador de classe do objeto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3109">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="2c3b9-3110">Classes COM o identificador de classe é definido na chave HKEY_CLASSES_ROOT\CLSID do registro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3110">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="2c3b9-3111">Você pode recuperar o valor da <xref:System.Type.IsCOMObject%2A> propriedade para determinar se o tipo retornado por esse método é um objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3111">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="2c3b9-3112">Você pode chamar o <xref:System.Type.GetTypeFromProgID%2A> método para acesso de associação tardia para COM objetos cujo identificador programático (ProgID) que você sabe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3112">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="2c3b9-3113">Criando uma instância de um objeto COM não gerenciado de sua CLSID é um processo em duas etapas:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3113">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="2c3b9-3114">Obter um <xref:System.Type> objeto que representa o `__ComObject` que corresponde ao CLSID chamando o <xref:System.Type.GetTypeFromCLSID%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3114">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="2c3b9-3115">Chamar o <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> método para instanciar o objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3115">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3116">O exemplo a seguir usa o CLSID do Microsoft Word [objeto Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) para recuperar um tipo COM que representa o aplicativo Microsoft Word de um servidor chamado computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3116">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="2c3b9-3117">Em seguida, cria uma instância do tipo chamando o <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> método e fecha-lo chamando o [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3117">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="2c3b9-3118">Esse método se destina para uso ao trabalhar com objetos COM, não com objetos do .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3118">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="2c3b9-3119">Todos os objetos gerenciados, incluindo aqueles que são visíveis no COM (ou seja, seus <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atributo é <see langword="true" />) tem um GUID que é retornado pelo <see cref="P:System.Type.GUID" /> propriedade.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3119">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="2c3b9-3120">Embora o método retorna um <see cref="T:System.Type" /> objetos do objeto que corresponde ao GUID para o .NET Framework, você não poderá usar esse <see cref="T:System.Type" /> objeto para criar uma instância do tipo chamando o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método, como mostra o exemplo a seguir.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3120">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="2c3b9-3121">[! código csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! código vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3121">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="2c3b9-3122">Em vez disso, o <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> só deve ser usado para recuperar o GUID de um objeto COM não gerenciado e resultante <see cref="T:System.Type" /> objeto é passado para o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método deve representar um objeto COM não gerenciado.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3122">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="2c3b9-3123">O CLSID do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3123">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="2c3b9-3124">O servidor do qual carregar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3124">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="2c3b9-3125">Caso o nome do servidor seja <see langword="null" />, este método retorna automaticamente para o computador local.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3125">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-3126">
            <see langword="true" /> para lançar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3126">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="2c3b9-3127">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3127">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3128">
            <see langword="false" /> para ignorar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3128">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3129">Obtém o tipo associado ao CLSID (identificador de classe) especificado do servidor especificado, determinando se uma exceção deverá ser gerada se ocorrer um erro durante o carregamento do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3129">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3130">
            <see langword="System.__ComObject" /> independentemente do CLSID ser válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3130">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3131">O <xref:System.Type.GetTypeFromCLSID%2A> método dá suporte ao acesso de associação tardia a objetos COM não gerenciados de aplicativos do .NET Framework quando você souber o identificador de classe do objeto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3131">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="2c3b9-3132">Classes COM o identificador de classe é definido na chave HKEY_CLASSES_ROOT\CLSID do registro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3132">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="2c3b9-3133">Você pode recuperar o valor da <xref:System.Type.IsCOMObject%2A> propriedade para determinar se o tipo retornado por esse método é um objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3133">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="2c3b9-3134">Você pode chamar o <xref:System.Type.GetTypeFromProgID%2A> método para acesso de associação tardia para COM objetos cujo identificador programático (ProgID) que você sabe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3134">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="2c3b9-3135">Criando uma instância de um objeto COM não gerenciado de sua CLSID é um processo em duas etapas:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3135">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="2c3b9-3136">Obter um <xref:System.Type> objeto que representa o `__ComObject` que corresponde ao CLSID chamando o <xref:System.Type.GetTypeFromCLSID%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3136">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="2c3b9-3137">Chamar o <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> método para instanciar o objeto COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3137">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="2c3b9-3138">Exceções, como <xref:System.OutOfMemoryException> será gerada ao especificar `true` para `throwOnError`, mas não falhará para CLSIDs cancelados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3138">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3139">O exemplo a seguir usa o CLSID do Microsoft Word [objeto Application](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) para recuperar um tipo COM que representa o aplicativo Microsoft Word de um servidor chamado computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3139">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="2c3b9-3140">Em seguida, cria uma instância do tipo chamando o <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> método e fecha-lo chamando o [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3140">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="2c3b9-3141">Uma exceção é lançada se ocorrer um erro ao carregar o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3141">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="2c3b9-3142">Esse método se destina para uso ao trabalhar com objetos COM, não com objetos do .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3142">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="2c3b9-3143">Todos os objetos gerenciados, incluindo aqueles que são visíveis no COM (ou seja, seus <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atributo é <see langword="true" />) tem um GUID que é retornado pelo <see cref="P:System.Type.GUID" /> propriedade.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3143">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="2c3b9-3144">Embora o <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> método retorna um <see cref="T:System.Type" /> objeto que corresponde ao GUID de um determinado objeto gerenciado, você não poderá usar esse <see cref="T:System.Type" /> objeto para criar uma instância do tipo chamando o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método, como o exemplo a seguir programas.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3144">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="2c3b9-3145">[! código csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! código vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3145">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="2c3b9-3146">Em vez disso, o <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> só deve ser usado para recuperar o GUID de um objeto COM não gerenciado e resultante <see cref="T:System.Type" /> objeto é passado para o <see cref="M:System.Activator.CreateInstance(System.Type)" /> método deve representar um objeto COM não gerenciado.</span>
            <span class="sxs-lookup">
              <span data-stu-id="2c3b9-3146">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromHandle : RuntimeTypeHandle -&gt; Type" Usage="System.Type.GetTypeFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2c3b9-3147">O objeto que se refere ao tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3147">The object that refers to the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3148">Obtém o tipo referenciado pelo identificador do tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3148">Gets the type referenced by the specified type handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3149">O tipo referenciado pelo <see cref="T:System.RuntimeTypeHandle" /> especificado ou <see langword="null" />, se a propriedade <see cref="P:System.RuntimeTypeHandle.Value" /> de <paramref name="handle" /> for <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3149">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3150">Os identificadores são válidos somente no domínio do aplicativo no qual eles foram obtidos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3150">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3151">O exemplo a seguir usa o <xref:System.Type.GetTypeFromHandle%2A> método para obter uma <xref:System.Type> do objeto de uma <xref:System.RuntimeTypeHandle> fornecidos pelo <xref:System.Type.GetTypeHandle%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3151">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-3152">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3152">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3153">Obtém o tipo associado com o ProgID (identificador programático) especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3153">Gets the type associated with the specified program identifier (ProgID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string -&gt; Type" Usage="System.Type.GetTypeFromProgID progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="2c3b9-3154">O ProgID do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3154">The ProgID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3155">Obtém o tipo associado ao identificador de programa (ProgID) especificado, retornando null se for encontrado um erro ao carregar o <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3155">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3156">O tipo associado ao ProgID especificado, se <paramref name="progID" /> for uma entrada válida no Registro e um tipo for associado a ele; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3156">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3157">Este método é fornecido para suporte COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3157">This method is provided for COM support.</span></span> <span data-ttu-id="2c3b9-3158">ProgIDs não são usados no Microsoft .NET Framework porque eles têm foi substituídos pelo conceito de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3158">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3159">
            <paramref name="progID" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3159">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2c3b9-3160">Requer confiança total para o chamador imediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3160">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2c3b9-3161">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3161">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="2c3b9-3162">O ProgID do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3162">The ProgID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-3163">
            <see langword="true" /> para lançar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3163">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="2c3b9-3164">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3164">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3165">
            <see langword="false" /> para ignorar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3165">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3166">Obtém o tipo associado ao ProgID (identificador de programa) especificado, especificando se uma exceção deverá ser gerada se ocorrer um erro ao carregar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3166">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3167">O tipo associado ao ProgID (identificador de programa) especificado, se <paramref name="progID" /> for uma entrada válida no Registro e um tipo estiver associado a ele; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3167">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3168">Este método é fornecido para suporte COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3168">This method is provided for COM support.</span></span> <span data-ttu-id="2c3b9-3169">Identificações de programa não são usadas no Microsoft .NET Framework porque eles têm foi substituídos pelo conceito de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3169">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3170">O exemplo a seguir recupera um tipo, passando um ProgID, especificando se é necessário lançar uma exceção se o ProgID é inválido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3170">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="2c3b9-3171">O exemplo, em seguida, exibe ClassID relacionado a ProgID, juntamente com qualquer mensagem de exceção aplicável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3171">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3172">
            <paramref name="progID" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3172">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="2c3b9-3173">O ProgID especificado não está registrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3173">The specified ProgID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2c3b9-3174">Requer confiança total para o chamador imediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3174">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2c3b9-3175">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3175">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="2c3b9-3176">O progID do tipo a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3176">The progID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="2c3b9-3177">O servidor do qual carregar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3177">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="2c3b9-3178">Caso o nome do servidor seja <see langword="null" />, este método retorna automaticamente para o computador local.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3178">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3179">Obtém o tipo associado ao progID (identificador de programa) especificado do servidor especificado, retornando nulo caso seja encontrado algum erro ao carregar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3179">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3180">O tipo associado ao progID (identificador de programa) especificado, se o <paramref name="progID" /> for uma entrada válida no Registro e houver um tipo associado a ele, caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3180">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3181">Este método é fornecido para suporte COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3181">This method is provided for COM support.</span></span> <span data-ttu-id="2c3b9-3182">Identificações de programa não são usadas no Microsoft .NET Framework porque eles têm foi substituídos pelo conceito de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3182">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3183">O exemplo a seguir recupera um tipo, passando um nome de ProgID e o servidor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3183">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="2c3b9-3184">O exemplo exibe ClassID relacionado como o ProgID ou gera uma exceção se o ProgID ou o nome do servidor é inválido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3184">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3185">
            <paramref name="prodID" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3185">
              <paramref name="prodID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2c3b9-3186">Requer confiança total para o chamador imediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3186">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2c3b9-3187">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3187">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="2c3b9-3188">A progID do <see cref="T:System.Type" /> a ser obtida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3188">The progID of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="2c3b9-3189">O servidor do qual carregar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3189">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="2c3b9-3190">Caso o nome do servidor seja <see langword="null" />, este método retorna automaticamente para o computador local.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3190">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="2c3b9-3191">
            <see langword="true" /> para lançar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3191">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="2c3b9-3192">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3192">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3193">
            <see langword="false" /> para ignorar qualquer exceção que ocorra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3193">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3194">Obtém o tipo associado ao progID (identificador de programa) especificado do servidor especificado, especificando se uma exceção deverá ser gerada se ocorrer um erro durante o carregamento do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3194">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3195">O tipo associado ao progID (identificador de programa) especificado, se o <paramref name="progID" /> for uma entrada válida no Registro e houver um tipo associado a ele, caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3195">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3196">Este método é fornecido para suporte COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3196">This method is provided for COM support.</span></span> <span data-ttu-id="2c3b9-3197">Identificações de programa não são usadas no Microsoft .NET Framework porque eles têm foi substituídos pelo conceito de namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3197">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3198">O exemplo a seguir recupera um tipo, passando um nome de ProgID e o servidor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3198">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="2c3b9-3199">O exemplo, em seguida, exibe o ClassID relacionado a ProgID, especificando se é necessário lançar uma exceção se o ProgID ou o nome do servidor é inválido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3199">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3200">
            <paramref name="progID" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3200">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="2c3b9-3201">A progID especificada não está registrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3201">The specified progID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2c3b9-3202">Requer confiança total para o chamador imediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3202">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2c3b9-3203">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3203">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetTypeHandle : obj -&gt; RuntimeTypeHandle" Usage="System.Type.GetTypeHandle o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="2c3b9-3204">O objeto para o qual o identificador de tipo será obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3204">The object for which to get the type handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3205">Obtém o identificador para o <see cref="T:System.Type" /> de um objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3205">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3206">O identificador para o <see cref="T:System.Type" /> do <see cref="T:System.Object" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3206">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3207">Os identificadores são válidos somente no domínio do aplicativo no qual eles foram obtidos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3207">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3208">O exemplo a seguir define a classe `MyClass1`, obtém uma instância dele e recupera o identificador de tempo de execução do objeto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3208">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-3209">
            <paramref name="o" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3209">
              <paramref name="o" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Type.GUID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3210">Obtém o GUID associado ao <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3210">Gets the GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3211">O GUID associado ao <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3211">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3212">Um GUID é associado a um tipo usando o <xref:System.Runtime.InteropServices.GuidAttribute> atributo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3212">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3213">O exemplo a seguir cria a classe `MyClass1` com um método público, cria um `Type` objeto correspondente `MyClass1`e obtém os <xref:System.Guid> estrutura usando o `GUID` propriedade do `Type` classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3213">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Type.HasElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3214">Obtém um valor que indica se o <see cref="T:System.Type" /> atual abrange ou se refere a outro tipo; ou seja, se o <see cref="T:System.Type" /> atual é uma matriz, um ponteiro ou é passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3214">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3215">
            <see langword="true" /> se o <see cref="T:System.Type" /> for uma matriz ou um ponteiro ou se for passado por referência; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3215">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3216">Por exemplo, Type.GetType("Int32[]"). Retorna HasElementType `true`, mas Type.GetType("Int32"). Retorna HasElementType `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3216">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="2c3b9-3217">Também retorna HasElementType `true` para Int32 "\*" e "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3217">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="2c3b9-3218">Caso o <xref:System.Type> atual representa um tipo genérico ou um parâmetro de tipo na definição de um tipo genérico ou um método genérico esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3218">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3219">O exemplo a seguir retorna `true` ou `false` dependendo se o objeto é uma matriz, um tipo de referência ou um ponteiro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3219">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member HasElementTypeImpl : unit -&gt; bool" Usage="type.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3220">Quando substituído em uma classe derivada, implementa a propriedade <see cref="P:System.Type.HasElementType" /> e determina se o <see cref="T:System.Type" /> atual abrange ou se refere a outro tipo, ou seja, se o <see cref="T:System.Type" /> atual é uma matriz, um ponteiro ou é passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3220">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3221">
            <see langword="true" /> se o <see cref="T:System.Type" /> for uma matriz ou um ponteiro ou se for passado por referência; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3221">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3222">Por exemplo, Type.GetType("Int32[]"). Retorna HasElementTypeImpl `true`, mas Type.GetType("Int32"). Retorna HasElementTypeImpl `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3222">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="2c3b9-3223">Também retorna HasElementTypeImpl `true` para Int32 "\*" e "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3223">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3224">O exemplo a seguir define a classe `MyTypeDelegator`, que substitui o `HasElementTypeImpl` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3224">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="2c3b9-3225">Verifica se a classe principal para o `HasElementType` propriedade e exibe o elemento de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3225">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3226">Invoca um membro específico do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3226">Invokes a specific member of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-3227">A cadeia de caracteres que contém o nome do construtor, método, propriedade ou membro de campo a serem invocados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3227">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="2c3b9-3228">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3228">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3229">Uma cadeia de caracteres vazia ("") para invocar o membro padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3229">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="2c3b9-3230">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3230">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3231">Para membros <see langword="IDispatch" />, uma cadeia de caracteres que representa a DispID, por exemplo "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3231">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="2c3b9-3232">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3232">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-3233">O acesso pode ser um dos <see langword="BindingFlags" />, como <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e assim por diante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3233">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="2c3b9-3234">O tipo de pesquisa não precisa ser especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3234">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="2c3b9-3235">Se o tipo de pesquisa for omitido, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> serão usados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3235">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-3236">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3236">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-3237">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3237">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3238">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3238">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3239">Observe que a definição explícita de um objeto <see cref="T:System.Reflection.Binder" /> poderá ser necessária para invocar com êxito sobrecargas de método com argumentos de variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3239">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2c3b9-3240">O objeto no qual invocar o membro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3240">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2c3b9-3241">Uma matriz que contém os argumentos que serão passados para o membro a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3241">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3242">Invoca o membro especificado, usando as restrições de associação especificadas e fazendo a correspondência da lista de argumentos especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3242">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3243">Um objeto que representa o valor retornado do membro invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3243">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3244">Não é possível usar <xref:System.Type.InvokeMember%2A> para invocar um método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3244">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="2c3b9-3245">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais membros devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3245">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-3246">Especifique `BindingFlags.Public` para incluir membros públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3246">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-3247">Especifique `BindingFlags.NonPublic` para incluir membros não públicos (ou seja, membros particulares e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3247">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-3248">Especifique `BindingFlags.FlattenHierarchy` para incluir membros estáticos da hierarquia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3248">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="2c3b9-3249">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3249">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-3250">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3250">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3251">`BindingFlags.DeclaredOnly` para procurar apenas os membros declarados no <xref:System.Type>, e não os membros que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3251">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-3252">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de invocação podem ser usados para indicar qual ação tomar com o membro:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3252">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="2c3b9-3253">`CreateInstance` para invocar um construtor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3253">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="2c3b9-3254">`name` é ignorado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3254">`name` is ignored.</span></span> <span data-ttu-id="2c3b9-3255">Não é válido com outros sinalizadores de invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3255">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="2c3b9-3256">`InvokeMethod` para invocar um método, mas não um construtor ou um inicializador de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3256">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="2c3b9-3257">Não é válido com `SetField` ou `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3257">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="2c3b9-3258">Se `InvokeMethod` é especificado por si só, `BindingFlags.Public`, `BindingFlags.Instance`, e `BindingFlags.Static` são incluídos automaticamente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3258">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="2c3b9-3259">`GetField` Para obter o valor de um campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3259">`GetField` to get the value of a field.</span></span> <span data-ttu-id="2c3b9-3260">Não é válido com `SetField`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3260">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3261">`SetField` Para definir o valor de um campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3261">`SetField` to set the value of a field.</span></span> <span data-ttu-id="2c3b9-3262">Não é válido com `GetField`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3262">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3263">`GetProperty` Para obter uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3263">`GetProperty` to get a property.</span></span> <span data-ttu-id="2c3b9-3264">Não é válido com `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3264">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3265">`SetProperty` Para definir uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3265">`SetProperty` to set a property.</span></span> <span data-ttu-id="2c3b9-3266">Não é válido com `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3266">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="2c3b9-3267">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3267">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-3268">Um método será invocado se ambas as seguintes condições forem verdadeiras:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3268">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="2c3b9-3269">O número de parâmetros na declaração de método é igual ao número de argumentos na `args` matriz (a menos que os argumentos padrão são definidos no membro e `BindingFlags.OptionalParamBinding` for especificado).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3269">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="2c3b9-3270">O tipo de cada argumento pode ser convertido pelo associador para o tipo do parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3270">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="2c3b9-3271">O associador encontrará todos os métodos correspondentes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3271">The binder will find all of the matching methods.</span></span> <span data-ttu-id="2c3b9-3272">Esses métodos são encontrados com base no tipo de associação solicitada (<xref:System.Reflection.BindingFlags> valores `InvokeMethod`, `GetProperty`e assim por diante).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3272">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="2c3b9-3273">O conjunto de métodos é filtrado pelo nome, número de argumentos e um conjunto de modificadores de pesquisa definidos no associador.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3273">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="2c3b9-3274">Depois que o método é selecionado, ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3274">After the method is selected, it is invoked.</span></span> <span data-ttu-id="2c3b9-3275">Acessibilidade é verificada nesse momento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3275">Accessibility is checked at that point.</span></span> <span data-ttu-id="2c3b9-3276">A pesquisa pode controlar qual conjunto de métodos são pesquisados com base no atributo acessibilidade associado com o método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3276">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="2c3b9-3277">O <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> método da <xref:System.Reflection.Binder> classe é responsável por selecionar o método a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3277">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="2c3b9-3278">O associador padrão seleciona a correspondência mais específica.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3278">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="2c3b9-3279">Restrições de acesso são ignoradas em código totalmente confiável; ou seja, construtores particulares, métodos, campos e propriedades podem ser acessadas e invocadas por meio de <xref:System.Reflection> sempre que o código é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3279">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="2c3b9-3280">Você pode usar `Type.InvokeMember` para definir um campo para um valor específico, especificando <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3280">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2c3b9-3281">Por exemplo, se você quiser definir um campo de instância pública chamado F na classe C e F é um `String`, você pode usar código como:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3281">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="2c3b9-3282">Se F é um `String[]`, você pode usar código como:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3282">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="2c3b9-3283">que inicializará o campo F para essa nova matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3283">which will initialize the field F to this new array.</span></span> <span data-ttu-id="2c3b9-3284">Você também pode usar `Type.InvokeMember` para definir uma posição em uma matriz, fornecendo o índice do valor e, em seguida, o próximo valor usando código como o seguinte:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3284">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="2c3b9-3285">Isso irá alterar a cadeia de caracteres "z" na matriz que contém os F para a cadeia de caracteres "b".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3285">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="2c3b9-3286">Quando você invoca um `IDispatch` membro, você pode especificar o DispID em vez do nome de membro, usando o formato de cadeia de caracteres "[DISPID=3 = # #]".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3286">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="2c3b9-3287">Por exemplo, se o DispID de MyComMethod for 3, você pode especificar a cadeia de caracteres "[DISPID=3 = 3]", em vez de "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3287">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="2c3b9-3288">Invocar um membro DISPID é mais rápido do que pesquisar o membro por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3288">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="2c3b9-3289">Em cenários de agregação complexa, o DispID, às vezes, é a única maneira de invocar o membro desejado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3289">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3290">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3290">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="2c3b9-3291">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3291">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="2c3b9-3292">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3292">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3293">O exemplo a seguir usa `InvokeMember` para acessar membros de um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3293">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-3294">
            <paramref name="invokeAttr" /> não contém <see langword="CreateInstance" /> e <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3294">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3295">
            <paramref name="invokeAttr" /> não é um atributo <see cref="T:System.Reflection.BindingFlags" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3295">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="2c3b9-3296">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3296">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3297">
            <paramref name="invokeAttr" /> não contém um dos seguintes sinalizadores de associação: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3297">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3298">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3298">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3299">
            <paramref name="invokeAttr" /> contém <see langword="CreateInstance" /> combinado com <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3299">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3300">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3300">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3301">
            <paramref name="invokeAttr" /> contém <see langword="GetField" /> e <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3301">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3302">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3302">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3303">
            <paramref name="invokeAttr" /> contém <see langword="GetProperty" /> e <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3303">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3304">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3304">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3305">
            <paramref name="invokeAttr" /> contém <see langword="InvokeMethod" /> combinado com <see langword="SetField" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3305">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3306">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3306">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3307">
            <paramref name="invokeAttr" /> contém <see langword="SetField" /> e <paramref name="args" /> tem mais de um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3307">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="2c3b9-3308">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3308">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3309">Esse método é chamado em um objeto COM e um dos seguintes sinalizadores de associação não foi passado: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> ou <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3309">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3310">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3310">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3311">Uma das matrizes de parâmetro nomeadas contém uma cadeia de caracteres que é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3311">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="2c3b9-3312">O membro especificado é um inicializador de classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3312">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="2c3b9-3313">Não é possível encontrar o campo nem a propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3313">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="2c3b9-3314">Não é possível encontrar nenhum método que corresponde aos argumentos em <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3314">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3315">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3315">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3316">O atual objeto <see cref="T:System.Type" /> representa um tipo que contém os parâmetros de tipo aberto, ou seja, <see cref="P:System.Type.ContainsGenericParameters" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3316">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="2c3b9-3317">O membro especificado não pode ser invocado no <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3317">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-3318">Mais de um método corresponde aos critérios de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3318">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-3319">No momento, o .NET Compact Framework não dá suporte a esse método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3319">The .NET Compact Framework does not currently support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-3320">O método representado pelo <paramref name="name" /> tem um ou mais parâmetros de tipo genérico não especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3320">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="2c3b9-3321">Ou seja, a propriedade <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> do método retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3321">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="2c3b9-3322">para acessar membros não públicos independentemente do conjunto de concessões.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3322">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="2c3b9-3323">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3323">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2c3b9-3324">para chamar código não gerenciado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3324">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="2c3b9-3325">Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3325">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-3326">A cadeia de caracteres que contém o nome do construtor, método, propriedade ou membro de campo a serem invocados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3326">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="2c3b9-3327">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3327">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3328">Uma cadeia de caracteres vazia ("") para invocar o membro padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3328">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="2c3b9-3329">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3329">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3330">Para membros <see langword="IDispatch" />, uma cadeia de caracteres que representa a DispID, por exemplo "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3330">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="2c3b9-3331">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3331">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-3332">O acesso pode ser um dos <see langword="BindingFlags" />, como <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e assim por diante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3332">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="2c3b9-3333">O tipo de pesquisa não precisa ser especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3333">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="2c3b9-3334">Se o tipo de pesquisa for omitido, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> serão usados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3334">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-3335">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3335">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-3336">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3336">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3337">Uma referência nula (<see langword="Nothing" /> no Visual Basic), para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3337">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3338">Observe que a definição explícita de um objeto <see cref="T:System.Reflection.Binder" /> poderá ser necessária para invocar com êxito sobrecargas de método com argumentos de variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3338">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2c3b9-3339">O objeto no qual invocar o membro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3339">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2c3b9-3340">Uma matriz que contém os argumentos que serão passados para o membro a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3340">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="2c3b9-3341">O objeto que representa a localidade de globalização a ser usada, que pode ser necessária para realizar conversões específicas de localidade, como converter uma <see cref="T:System.String" /> numérica em uma <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3341">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3342">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3342">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3343">Uma referência nula (<see langword="Nothing" /> no Visual Basic) para usar o <see cref="T:System.Globalization.CultureInfo" /> do thread atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3343">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3344">Invoca o membro especificado, usando as restrições de associação especificadas e fazendo a correspondência da lista de argumentos e cultura especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3344">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3345">Um objeto que representa o valor retornado do membro invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3345">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3346">Embora o associador padrão não processe <xref:System.Globalization.CultureInfo> (o parâmetro `culture` ), é possível usar a classe abstrata <xref:System.Reflection.Binder?displayProperty=nameWithType> para gravar um associador personalizado que processa `culture`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3346">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3347">Não é possível usar <xref:System.Type.InvokeMember%2A> para invocar um método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3347">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="2c3b9-3348">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais membros devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3348">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-3349">Especifique `BindingFlags.Public` para incluir membros públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3349">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-3350">Especifique `BindingFlags.NonPublic` para incluir membros não públicos (ou seja, membros particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3350">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-3351">Especifique `BindingFlags.FlattenHierarchy` para incluir membros estáticos da hierarquia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3351">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="2c3b9-3352">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3352">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-3353">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3353">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3354">`BindingFlags.DeclaredOnly` para procurar apenas os membros declarados no <xref:System.Type>, e não os membros que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3354">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-3355">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de invocação podem ser usados para indicar qual ação tomar com o membro:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3355">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="2c3b9-3356">`CreateInstance` para invocar um construtor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3356">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="2c3b9-3357">`name` é ignorado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3357">`name` is ignored.</span></span> <span data-ttu-id="2c3b9-3358">Não é válido com outros sinalizadores de invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3358">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="2c3b9-3359">`InvokeMethod` para invocar um método, mas não um construtor ou um inicializador de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3359">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="2c3b9-3360">Não é válido com `SetField` ou `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3360">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="2c3b9-3361">Se `InvokeMethod` é especificado por si só, `BindingFlags.Public`, `BindingFlags.Instance`, e `BindingFlags.Static` são incluídos automaticamente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3361">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="2c3b9-3362">`GetField` Para obter o valor de um campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3362">`GetField` to get the value of a field.</span></span> <span data-ttu-id="2c3b9-3363">Não é válido com `SetField`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3363">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3364">`SetField` Para definir o valor de um campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3364">`SetField` to set the value of a field.</span></span> <span data-ttu-id="2c3b9-3365">Não é válido com `GetField`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3365">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3366">`GetProperty` Para obter uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3366">`GetProperty` to get a property.</span></span> <span data-ttu-id="2c3b9-3367">Não é válido com `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3367">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3368">`SetProperty` Para definir uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3368">`SetProperty` to set a property.</span></span> <span data-ttu-id="2c3b9-3369">Não é válido com `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3369">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="2c3b9-3370">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3370">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-3371">Um método será invocado se ambas as seguintes condições forem verdadeiras:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3371">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="2c3b9-3372">O número de parâmetros na declaração de método é igual ao número de argumentos na `args` matriz (a menos que os argumentos padrão são definidos no membro e `BindingFlags.OptionalParamBinding` for especificado).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3372">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="2c3b9-3373">O tipo de cada argumento pode ser convertido pelo associador para o tipo do parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3373">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="2c3b9-3374">O associador encontrará todos os métodos correspondentes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3374">The binder will find all of the matching methods.</span></span> <span data-ttu-id="2c3b9-3375">Esses métodos são encontrados com base no tipo de associação solicitada (<xref:System.Reflection.BindingFlags> valores `InvokeMethod`, `GetProperty`e assim por diante).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3375">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="2c3b9-3376">O conjunto de métodos é filtrado pelo nome, número de argumentos e um conjunto de modificadores de pesquisa definidos no associador.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3376">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="2c3b9-3377">Depois que o método é selecionado, ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3377">After the method is selected, it is invoked.</span></span> <span data-ttu-id="2c3b9-3378">Acessibilidade é verificada nesse momento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3378">Accessibility is checked at that point.</span></span> <span data-ttu-id="2c3b9-3379">A pesquisa pode controlar qual conjunto de métodos são pesquisados com base no atributo acessibilidade associado com o método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3379">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="2c3b9-3380">O <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> método da <xref:System.Reflection.Binder> classe é responsável por selecionar o método a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3380">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="2c3b9-3381">O associador padrão seleciona a correspondência mais específica.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3381">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="2c3b9-3382">Restrições de acesso são ignoradas em código totalmente confiável; ou seja, propriedades, métodos, campos e construtores privados podem ser acessadas e invocadas por meio de reflexão, sempre que o código é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3382">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="2c3b9-3383">Você pode usar `Type.InvokeMember` para definir um campo para um valor específico, especificando <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3383">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2c3b9-3384">Por exemplo, se você quiser definir um campo de instância pública chamado F na classe C e F é um `String` você pode usar código como:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3384">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="2c3b9-3385">Se F é um `String[]`, você pode usar código como:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3385">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="2c3b9-3386">que inicializará o campo F para essa nova matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3386">which will initialize the field F to this new array.</span></span> <span data-ttu-id="2c3b9-3387">Você também pode usar `Type.InvokeMember` para definir uma posição em uma matriz, fornecendo o índice do valor e, em seguida, o próximo valor usando código como o seguinte:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3387">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="2c3b9-3388">Isso irá alterar a cadeia de caracteres "z" na matriz que contém os F para a cadeia de caracteres "b".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3388">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="2c3b9-3389">Quando você invoca um `IDispatch` membro, você pode especificar o DispID em vez do nome de membro, usando o formato de cadeia de caracteres "[DISPID=3 = # #]".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3389">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="2c3b9-3390">Por exemplo, se o DispID de MyComMethod for 3, você pode especificar a cadeia de caracteres "[DISPID=3 = 3]", em vez de "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3390">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="2c3b9-3391">Invocar um membro DISPID é mais rápido do que pesquisar o membro por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3391">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="2c3b9-3392">Em cenários de agregação complexa, o DispID, às vezes, é a única maneira de invocar o membro desejado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3392">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3393">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3393">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="2c3b9-3394">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3394">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="2c3b9-3395">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3395">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-3396">
            <paramref name="invokeAttr" /> não contém <see langword="CreateInstance" /> e <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3396">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3397">
            <paramref name="invokeAttr" /> não é um atributo <see cref="T:System.Reflection.BindingFlags" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3397">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="2c3b9-3398">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3398">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3399">
            <paramref name="invokeAttr" /> não contém um dos seguintes sinalizadores de associação: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3399">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3400">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3400">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3401">
            <paramref name="invokeAttr" /> contém <see langword="CreateInstance" /> combinado com <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3401">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3402">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3402">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3403">
            <paramref name="invokeAttr" /> contém <see langword="GetField" /> e <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3403">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3404">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3404">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3405">
            <paramref name="invokeAttr" /> contém <see langword="GetProperty" /> e <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3405">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3406">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3406">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3407">
            <paramref name="invokeAttr" /> contém <see langword="InvokeMethod" /> combinado com <see langword="SetField" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3407">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3408">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3408">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3409">
            <paramref name="invokeAttr" /> contém <see langword="SetField" /> e <paramref name="args" /> tem mais de um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3409">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="2c3b9-3410">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3410">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3411">Esse método é chamado em um objeto COM e um dos seguintes sinalizadores de associação não foi passado: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> ou <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3411">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3412">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3412">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3413">Uma das matrizes de parâmetro nomeadas contém uma cadeia de caracteres que é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3413">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="2c3b9-3414">O membro especificado é um inicializador de classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3414">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="2c3b9-3415">Não é possível encontrar o campo nem a propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3415">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="2c3b9-3416">Não é possível encontrar nenhum método que corresponde aos argumentos em <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3416">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3417">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3417">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3418">O atual objeto <see cref="T:System.Type" /> representa um tipo que contém os parâmetros de tipo aberto, ou seja, <see cref="P:System.Type.ContainsGenericParameters" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3418">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="2c3b9-3419">O membro especificado não pode ser invocado no <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3419">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-3420">Mais de um método corresponde aos critérios de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3420">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-3421">O método representado pelo <paramref name="name" /> tem um ou mais parâmetros de tipo genérico não especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3421">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="2c3b9-3422">Ou seja, a propriedade <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> do método retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3422">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="2c3b9-3423">para acessar membros não públicos independentemente do conjunto de concessões.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3423">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="2c3b9-3424">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3424">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2c3b9-3425">para chamar código não gerenciado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3425">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="2c3b9-3426">Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3426">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2c3b9-3427">A cadeia de caracteres que contém o nome do construtor, método, propriedade ou membro de campo a serem invocados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3427">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="2c3b9-3428">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3428">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3429">Uma cadeia de caracteres vazia ("") para invocar o membro padrão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3429">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="2c3b9-3430">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3430">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3431">Para membros <see langword="IDispatch" />, uma cadeia de caracteres que representa a DispID, por exemplo "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3431">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="2c3b9-3432">Um bitmask composto de um ou mais <see cref="T:System.Reflection.BindingFlags" /> que especificam como a pesquisa é realizada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3432">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2c3b9-3433">O acesso pode ser um dos <see langword="BindingFlags" />, como <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e assim por diante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3433">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="2c3b9-3434">O tipo de pesquisa não precisa ser especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3434">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="2c3b9-3435">Se o tipo de pesquisa for omitido, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> serão usados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3435">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2c3b9-3436">Um objeto que define um conjunto de propriedades e habilita a associação, que pode envolver seleção de um método sobrecarregado, coerção de tipos de argumento e invocação de um membro por meio da reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3436">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2c3b9-3437">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3437">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3438">Uma referência nula (Nothing no Visual Basic) para usar o <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3438">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3439">Observe que a definição explícita de um objeto <see cref="T:System.Reflection.Binder" /> poderá ser necessária para invocar com êxito sobrecargas de método com argumentos de variável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3439">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2c3b9-3440">O objeto no qual invocar o membro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3440">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2c3b9-3441">Uma matriz que contém os argumentos que serão passados para o membro a ser invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3441">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2c3b9-3442">Uma matriz de objetos <see cref="T:System.Reflection.ParameterModifier" /> que representa os atributos associados ao elemento correspondente na matriz <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3442">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="2c3b9-3443">Os atributos associados ao parâmetro são armazenados na assinatura do membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3443">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="2c3b9-3444">O associador padrão processa este parâmetro somente ao chamar um componente COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3444">The default binder processes this parameter only when calling a COM component.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="2c3b9-3445">O objeto <see cref="T:System.Globalization.CultureInfo" /> que representa a localidade de globalização a ser usada, que pode ser necessária para realizar conversões específicas de localidade, como converter uma String numérica em uma Double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3445">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="2c3b9-3446">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3446">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3447">Uma referência nula (<see langword="Nothing" /> no Visual Basic) para usar o <see cref="T:System.Globalization.CultureInfo" /> do thread atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3447">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="2c3b9-3448">Uma matriz que contém os nomes dos parâmetros para os quais os valores na matriz <c>args</c> são passados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3448">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3449">Quando substituído em uma classe derivada, invoca o membro especificado usando as restrições de associação especificadas e correspondendo a cultura, modificadores e lista de argumentos especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3449">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3450">Um objeto que representa o valor retornado do membro invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3450">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3451">`InvokeMember` chama um membro do construtor ou um método, obtém ou define um membro de propriedade, obtém ou define um membro de campo de dados, ou obtém ou define um elemento de um membro da matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3451">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3452">Não é possível usar <xref:System.Type.InvokeMember%2A> para invocar um método genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3452">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="2c3b9-3453">Quando você invoca um `IDispatch` membro, você pode especificar o DispID em vez do nome de membro, usando o formato de cadeia de caracteres "[DISPID=3 = # #]".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3453">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="2c3b9-3454">Por exemplo, se o DispID de MyComMethod for 3, você pode especificar a cadeia de caracteres "[DISPID=3 = 3]", em vez de "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3454">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="2c3b9-3455">Invocar um membro DISPID é mais rápido do que pesquisar o membro por nome.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3455">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="2c3b9-3456">Em cenários de agregação complexa, o DispID, às vezes, é a única maneira de invocar o membro desejado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3456">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="2c3b9-3457">Embora o associador padrão não processa <xref:System.Reflection.ParameterModifier> ou <xref:System.Globalization.CultureInfo> (o `modifiers` e `culture` parâmetros), você pode usar o resumo <xref:System.Reflection.Binder?displayProperty=nameWithType> classe para gravar um associador personalizado que processam `modifiers` e `culture`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3457">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="2c3b9-3458">`ParameterModifier` só é usado durante a chamada por meio da interoperabilidade COM e apenas parâmetros passados por referência são identificados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3458">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="2c3b9-3459">Cada parâmetro na `namedParameters` matriz obtém o valor no elemento correspondente no `args` matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3459">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="2c3b9-3460">Se o comprimento da `args` é maior que o comprimento de `namedParameters`, os valores de argumento restantes são passados na ordem.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3460">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="2c3b9-3461">O `namedParameters` matriz pode ser usada para alterar a ordem dos argumentos em uma matriz de entrada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3461">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="2c3b9-3462">Por exemplo, considerando o método `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` no Visual Basic) e a matriz de entrada `{ 42, "x" }`, a matriz de entrada pode ser passada inalterada para `args` se a matriz `{ "b", "a" }` for fornecido para `namedParameters`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3462">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="2c3b9-3463">Os seguintes sinalizadores de filtro <xref:System.Reflection.BindingFlags> podem ser usados para definir quais membros devem ser incluídos na pesquisa:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3463">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="2c3b9-3464">Especifique `BindingFlags.Public` para incluir membros públicos na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3464">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-3465">Especifique `BindingFlags.NonPublic` para incluir membros não públicos (ou seja, membros particulares, internos e protegidos) na pesquisa.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3465">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="2c3b9-3466">Especifique `BindingFlags.FlattenHierarchy` para incluir membros estáticos da hierarquia.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3466">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="2c3b9-3467">Os seguintes sinalizadores de modificador <xref:System.Reflection.BindingFlags> podem ser usados para alterar como a pesquisa funciona:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3467">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="2c3b9-3468">`BindingFlags.IgnoreCase` para ignorar o caso de `name`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3468">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3469">`BindingFlags.DeclaredOnly` para procurar apenas os membros declarados no <xref:System.Type>, e não os membros que foram simplesmente herdados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3469">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="2c3b9-3470">O seguinte <xref:System.Reflection.BindingFlags> sinalizadores de invocação podem ser usados para indicar qual ação tomar com o membro:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3470">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="2c3b9-3471">`CreateInstance` para invocar um construtor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3471">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="2c3b9-3472">`name` é ignorado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3472">`name` is ignored.</span></span> <span data-ttu-id="2c3b9-3473">Não é válido com outros sinalizadores de invocação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3473">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="2c3b9-3474">`InvokeMethod` para invocar um método, mas não um construtor ou um inicializador de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3474">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="2c3b9-3475">Não é válido com `SetField` ou `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3475">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="2c3b9-3476">Se `InvokeMethod` é especificado por si só, `BindingFlags.Public`, `BindingFlags.Instance`, e `BindingFlags.Static` são incluídos automaticamente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3476">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="2c3b9-3477">`GetField` Para obter o valor de um campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3477">`GetField` to get the value of a field.</span></span> <span data-ttu-id="2c3b9-3478">Não é válido com `SetField`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3478">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3479">`SetField` Para definir o valor de um campo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3479">`SetField` to set the value of a field.</span></span> <span data-ttu-id="2c3b9-3480">Não é válido com `GetField`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3480">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3481">`GetProperty` Para obter uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3481">`GetProperty` to get a property.</span></span> <span data-ttu-id="2c3b9-3482">Não é válido com `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3482">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3483">`SetProperty` Para definir uma propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3483">`SetProperty` to set a property.</span></span> <span data-ttu-id="2c3b9-3484">Não é válido com `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3484">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="2c3b9-3485">Consulte <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> para obter mais informações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3485">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="2c3b9-3486">Um método será invocado se ambas as seguintes condições forem verdadeiras:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3486">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="2c3b9-3487">O número de parâmetros na declaração de método é igual ao número de argumentos na `args` matriz (a menos que os argumentos padrão são definidos no membro e `BindingFlags.OptionalParamBinding` for especificado).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3487">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="2c3b9-3488">O tipo de cada argumento pode ser convertido pelo associador para o tipo do parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3488">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="2c3b9-3489">O associador encontrará todos os métodos correspondentes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3489">The binder will find all of the matching methods.</span></span> <span data-ttu-id="2c3b9-3490">Esses métodos são encontrados com base no tipo de associação solicitada (<xref:System.Reflection.BindingFlags> valores `InvokeMethod`, `GetProperty`e assim por diante).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3490">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="2c3b9-3491">O conjunto de métodos é filtrado pelo nome, número de argumentos e um conjunto de modificadores de pesquisa definidos no associador.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3491">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="2c3b9-3492">Depois que o método é selecionado, ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3492">After the method is selected, it is invoked.</span></span> <span data-ttu-id="2c3b9-3493">Acessibilidade é verificada nesse momento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3493">Accessibility is checked at that point.</span></span> <span data-ttu-id="2c3b9-3494">A pesquisa pode controlar qual conjunto de métodos são pesquisados com base no atributo acessibilidade associado com o método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3494">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="2c3b9-3495">O <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> método da <xref:System.Reflection.Binder> classe é responsável por selecionar o método a ser invocado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3495">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="2c3b9-3496">O associador padrão seleciona a correspondência mais específica.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3496">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="2c3b9-3497">`InvokeMember` pode ser usado para invocar métodos com parâmetros que têm valores padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3497">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="2c3b9-3498">Para vincular a esses métodos, reflexão requer <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> seja especificado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3498">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="2c3b9-3499">Para um parâmetro que tem um valor padrão, você pode fornecer um valor diferente, ou fornecer <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> para usar o valor padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3499">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="2c3b9-3500">Por exemplo, considere um método como MyMethod (int x, y float = 2.0).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3500">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="2c3b9-3501">Para invocar esse método com somente o primeiro argumento MyMethod(4), passar um dos sinalizadores de associação acima e passar dois argumentos, ou seja, 4 para o primeiro argumento e `Missing.Value` para o segundo argumento.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3501">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="2c3b9-3502">A menos que você use `Missing.Value`, você não pode omitir parâmetros opcionais com o `Invoke` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3502">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="2c3b9-3503">Se você deve fazer isso, use `InvokeMember` em vez disso.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3503">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="2c3b9-3504">Restrições de acesso são ignoradas em código totalmente confiável; ou seja, construtores particulares, métodos, campos e propriedades podem ser acessadas e invocadas por meio de <xref:System.Reflection> sempre que o código é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3504">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="2c3b9-3505">Você pode usar `Type.InvokeMember` para definir um campo para um valor específico, especificando <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3505">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2c3b9-3506">Por exemplo, se você quiser definir um campo de instância pública chamado F na classe C e F é um `String`, você pode usar código como:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3506">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="2c3b9-3507">Se F é um `String[]`, você pode usar código como:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3507">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="2c3b9-3508">que inicializará o campo F para essa nova matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3508">which will initialize the field F to this new array.</span></span> <span data-ttu-id="2c3b9-3509">Você também pode usar `Type.InvokeMember` para definir uma posição em uma matriz, fornecendo o índice do valor e, em seguida, o próximo valor usando código como o seguinte:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3509">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="2c3b9-3510">Isso irá alterar a cadeia de caracteres "z" na matriz que contém os F para a cadeia de caracteres "b".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3510">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3511">Começando por [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método pode ser usado para acessar membros não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos membros não públicos esteja restrito ao conjunto de concessões do chamador ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3511">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="2c3b9-3512">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3512">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="2c3b9-3513">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3513">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-3514">
            <paramref name="invokeAttr" /> não contém <see langword="CreateInstance" /> e <paramref name="name" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3514">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3515">
            <paramref name="args" /> e <paramref name="modifiers" /> não têm o mesmo tamanho.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3515">
              <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
          <span data-ttu-id="2c3b9-3516">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3516">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3517">
            <paramref name="invokeAttr" /> não é um atributo <see cref="T:System.Reflection.BindingFlags" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3517">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="2c3b9-3518">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3518">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3519">
            <paramref name="invokeAttr" /> não contém um dos seguintes sinalizadores de associação: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3519">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3520">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3520">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3521">
            <paramref name="invokeAttr" /> contém <see langword="CreateInstance" /> combinado com <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3521">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3522">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3522">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3523">
            <paramref name="invokeAttr" /> contém <see langword="GetField" /> e <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3523">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3524">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3524">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3525">
            <paramref name="invokeAttr" /> contém <see langword="GetProperty" /> e <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3525">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3526">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3526">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3527">
            <paramref name="invokeAttr" /> contém <see langword="InvokeMethod" /> combinado com <see langword="SetField" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3527">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3528">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3528">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3529">
            <paramref name="invokeAttr" /> contém <see langword="SetField" /> e <paramref name="args" /> tem mais de um elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3529">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="2c3b9-3530">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3530">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3531">A matriz de parâmetros nomeados é maior que a matriz de argumentos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3531">The named parameter array is larger than the argument array.</span>
          </span>
          <span data-ttu-id="2c3b9-3532">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3532">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3533">Esse método é chamado em um objeto COM e um dos seguintes sinalizadores de associação não foi passado: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> ou <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3533">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3534">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3534">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3535">Uma das matrizes de parâmetro nomeadas contém uma cadeia de caracteres que é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3535">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="2c3b9-3536">O membro especificado é um inicializador de classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3536">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="2c3b9-3537">Não é possível encontrar o campo nem a propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3537">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="2c3b9-3538">Não é possível encontrar nenhum método que corresponde aos argumentos em <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3538">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3539">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3539">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3540">Não foi possível encontrar nenhum membro com os nomes de argumentos fornecidos em <paramref name="namedParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3540">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3541">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3541">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-3542">O atual objeto <see cref="T:System.Type" /> representa um tipo que contém os parâmetros de tipo aberto, ou seja, <see cref="P:System.Type.ContainsGenericParameters" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3542">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="2c3b9-3543">O membro especificado não pode ser invocado no <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3543">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="2c3b9-3544">Mais de um método corresponde aos critérios de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3544">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-3545">O método representado pelo <paramref name="name" /> tem um ou mais parâmetros de tipo genérico não especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3545">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="2c3b9-3546">Ou seja, a propriedade <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> do método retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3546">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="2c3b9-3547">para acessar membros não públicos independentemente do conjunto de concessões.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3547">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="2c3b9-3548">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3548">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2c3b9-3549">para chamar código não gerenciado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3549">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="2c3b9-3550">Enumeração associada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3550">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3551">Obtém um valor que indica se o <see cref="T:System.Type" /> é abstrato e deve ser substituído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3551">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3552">
            <see langword="true" /> se o <see cref="T:System.Type" /> for abstrato; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3552">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3553">O <xref:System.Type.IsAbstract%2A> propriedade retorna `true` nos seguintes casos:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3553">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="2c3b9-3554">O tipo atual for abstrato; ou seja, ele não pode ser instanciado, mas só pode servir como a classe base para classes derivadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3554">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="2c3b9-3555">No c#, as classes abstratas são marcadas com o [abstrata](~/docs/csharp/language-reference/keywords/abstract.md) palavra-chave; no Visual Basic, são marcados com o [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3555">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="2c3b9-3556">O tipo atual é uma interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3556">The current type is an interface.</span></span>  
  
 <span data-ttu-id="2c3b9-3557">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3557">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3558">O exemplo a seguir cria uma matriz de <xref:System.Type> objetos que representam os seguintes tipos: contém retornos de tipo `true` se o objeto especificado for `abstract`; caso contrário, ele retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3558">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3559">`AbstractClass`, uma classe abstrata (uma classe marcada como `abstract` em c# e `MustInherit` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3559">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="2c3b9-3560">`DerivedClass`, uma classe que herda de `AbstractClass`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3560">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="2c3b9-3561">`SingleClass`, uma classe não herdável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3561">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="2c3b9-3562">Ele é definido como `sealed` em c# e `NotInheritable` no Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3562">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="2c3b9-3563">`ITypeInfo`, uma interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3563">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="2c3b9-3564">`ImplementingClass`, uma classe que implementa o `ITypeInfo` interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3564">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="2c3b9-3565">O método retornará `true` apenas para `AbstractClass`, a classe abstrata, e `ITypeInfo`, a interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3565">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3566">Obtém um valor que indica se o atributo de formato da cadeia de caracteres <see langword="AnsiClass" /> está selecionado para o <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3566">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3567">
            <see langword="true" /> se o atributo de formato da cadeia de caracteres <see langword="AnsiClass" /> estiver selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3567">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3568">O <xref:System.Reflection.TypeAttributes.StringFormatMask> seleciona os atributos de formato de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3568">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="2c3b9-3569">Os atributos de formato de cadeia de caracteres melhorar a interoperabilidade, definindo como cadeias de caracteres devem ser interpretadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3569">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="2c3b9-3570">Se o atual <xref:System.Type> representa um tipo genérico, essa propriedade se refere à definição de tipo genérico do qual o tipo foi criado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3570">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3571">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3571">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-3572">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3572">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3573">O exemplo a seguir obtém as informações de campo e verifica o `AnsiClass` atributo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3573">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Type.IsArray" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3574">Obtém um valor que indica se o tipo é uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3574">Gets a value that indicates whether the type is an array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3575">
            <see langword="true" /> se o tipo atual for uma matriz; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3575">
              <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3576">O <xref:System.Type.IsArray%2A> propriedade retorna `false` para o <xref:System.Array> classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3576">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="2c3b9-3577">Ele também retorna `false` se a instância atual é um <xref:System.Type> objeto que representa um tipo de coleção ou uma interface projetada para trabalhar com coleções, como <xref:System.Collections.IEnumerable> ou <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3577">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="2c3b9-3578">Para verificar se há uma matriz, use códigos como:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3578">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="2c3b9-3579">Se o tipo atual representa um tipo genérico ou um parâmetro de tipo na definição de um tipo genérico ou método genérico, essa propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3579">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3580">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3580">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3581">O exemplo a seguir demonstra como usar o <xref:System.Type.IsArray%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3581">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsArrayImpl : unit -&gt; bool" Usage="type.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3582">Quando substituído em uma classe derivada, implementa a propriedade <see cref="P:System.Type.IsArray" /> e determina se o <see cref="T:System.Type" /> é uma matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3582">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3583">
            <see langword="true" /> se <see cref="T:System.Type" /> for uma matriz. Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3583">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3584">Uma instância das <xref:System.Array> deve retornar a classe `false` porque ele é um objeto, não é uma matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3584">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3585">O exemplo a seguir substitui o `IsArrayImpl` método no `MyTypeDelegator` classe verifica se uma variável é uma matriz e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3585">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool&#xA;override this.IsAssignableFrom : Type -&gt; bool" Usage="type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="2c3b9-3586">O tipo a ser comparado com o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3586">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3587">Determina se uma instância de um tipo especificado pode ser atribuída a uma instância do tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3587">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3588">
            <see langword="true" /> se qualquer uma das seguintes condições for verdadeira:</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3588">
              <see langword="true" /> if any of the following conditions is true:</span>
          </span>
          <span data-ttu-id="2c3b9-3589">
-   <paramref name="c" /> e a instância atual representam o mesmo tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3589">
-   <paramref name="c" /> and the current instance represent the same type.</span>
          </span>
          <span data-ttu-id="2c3b9-3590">
-   <paramref name="c" /> é derivado direta ou indiretamente da instância atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3590">
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span>
          </span>
          <span data-ttu-id="2c3b9-3591">
            <paramref name="c" /> será derivado diretamente da instância atual se herdar da instância atual; <paramref name="c" /> será derivado indiretamente da instância atual se herdar de uma sucessão de uma ou mais classes que herdam da instância atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3591">
              <paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span>
          </span>
          <span data-ttu-id="2c3b9-3592">-   A instância atual é uma interface implementada por <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3592">-   The current instance is an interface that <paramref name="c" /> implements.</span>
          </span>
          <span data-ttu-id="2c3b9-3593">
-   <paramref name="c" /> é um parâmetro de tipo genérico, e a instância atual representa uma das restrições de <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3593">
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3594">No exemplo a seguir, a instância atual é um objeto <see cref="T:System.Type" /> que representa a classe <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3594">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span>
          </span>
          <span data-ttu-id="2c3b9-3595">
            <c>GenericWithConstraint</c> é um tipo genérico cujo parâmetro de tipo genérico deve ser do tipo <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3595">
              <c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3596">Passar o parâmetro de tipo genérico para o <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indica que uma instância do parâmetro de tipo genérico pode ser atribuída a um objeto <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3596">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span>
          </span>
          <span data-ttu-id="2c3b9-3597">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3597">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span>
          </span>
          <span data-ttu-id="2c3b9-3598">
-   <paramref name="c" /> representa um tipo de valor e a instância atual representa <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3598">
-   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span>
          </span>
          <span data-ttu-id="2c3b9-3599">
            <see langword="false" /> se nenhuma dessas condições for verdadeira, ou se <paramref name="c" /> for <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3599">
              <see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3600">O <xref:System.Type.IsAssignableFrom%2A> método pode ser usado para determinar se uma instância de `c` pode ser atribuído a uma instância do tipo atual, o método é mais útil quando você estiver tratando objetos cujos tipos não são conhecidos em tempo de design e permite condicional atribuição, como o exemplo a seguir mostra.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3600">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="2c3b9-3601">Esse método, assim, garante que uma linha de código, como a seguir executará em tempo de execução sem gerar uma <xref:System.InvalidCastException> exceção ou uma exceção semelhante:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3601">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="2c3b9-3602">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3602">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3603">Uma definição de tipo genérico não é atribuível de um tipo construído fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3603">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="2c3b9-3604">Ou seja, você não é possível atribuir o tipo construído fechado `MyGenericList<int>` (`MyGenericList(Of Integer)` no Visual Basic) a uma variável do tipo `MyGenericList<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3604">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-3605">Se o `c` parâmetro é do tipo <xref:System.Reflection.Emit.TypeBuilder>, o resultado é baseado no tipo que deve ser criada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3605">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="2c3b9-3606">O exemplo de código a seguir demonstra isso usando um tipo interno chamado `B`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3606">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3607">O exemplo a seguir demonstra o `IsAssignableFrom` usando o método definido em classes, matrizes de inteiros e genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3607">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3608">Obtém um valor que indica se o atributo de formato da cadeia de caracteres <see langword="AutoClass" /> está selecionado para o <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3608">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3609">
            <see langword="true" /> se o atributo de formato da cadeia de caracteres <see langword="AutoClass" /> estiver selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3609">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3610">O <xref:System.Reflection.TypeAttributes.StringFormatMask> seleciona os atributos de formato de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3610">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="2c3b9-3611">Os atributos de formato de cadeia de caracteres melhorar a interoperabilidade, definindo como cadeias de caracteres devem ser interpretadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3611">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="2c3b9-3612">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3612">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3613">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3613">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-3614">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3614">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3615">Obtém um valor que indica se os campos do tipo atual são apresentados automaticamente pelo Common Language Runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3615">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3616">
            <see langword="true" /> Se o <see cref="P:System.Type.Attributes" /> propriedade do tipo atual inclui <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3616">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3617">Esta propriedade é fornecida como uma conveniência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3617">This property is provided as a convenience.</span></span> <span data-ttu-id="2c3b9-3618">Como alternativa, você pode usar o <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> valor de enumeração para selecionar os atributos de tipo de layout e, em seguida, teste se <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> está definido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3618">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="2c3b9-3619">O <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, e <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valores de enumeração indicam a maneira como os campos do tipo são dispostos na memória.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3619">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="2c3b9-3620">Para tipos dinâmicos, você pode especificar <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> quando você cria o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3620">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="2c3b9-3621">No código, aplicar a <xref:System.Runtime.InteropServices.StructLayoutAttribute> do atributo com o <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> valor de enumeração para o tipo, para permitir que o tempo de execução determinar a maneira apropriada para dispor a classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3621">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3622">Não é possível usar o <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> método para determinar se o <xref:System.Runtime.InteropServices.StructLayoutAttribute> foi aplicado a um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3622">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="2c3b9-3623">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3623">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3624">Por exemplo, se o atual <xref:System.Type> representa `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade é determinado pelo `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3624">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="2c3b9-3625">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3625">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3626">O exemplo a seguir cria uma instância do tipo e exibe o <xref:System.Type.IsAutoLayout%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3626">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="2c3b9-3627">Metadados e componentes autodescritivos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3627">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Type.IsByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3628">Obtém um valor que indica se o <see cref="T:System.Type" /> é aprovado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3628">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3629">
            <see langword="true" /> se o <see cref="T:System.Type" /> for aprovado por referência; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3629">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3630">Para obter o tipo real, desreferenciar o tipo que foi passado por referência e, em seguida, chamar <xref:System.Type.GetElementType%2A> nesse tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3630">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3631">O exemplo a seguir demonstra um uso do `IsByRef` propriedade para verificar se um tipo especificado é passado por referência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3631">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="2c3b9-3632">O exemplo define a classe `MyTypeDelegator`, que substitui o `HasElementTypeImpl` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3632">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="2c3b9-3633">Verifica se a classe principal para o `HasElementType` propriedade e exibe o elemento de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3633">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsByRefImpl : unit -&gt; bool" Usage="type.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3634">Quando substituído em uma classe derivada, implementa a propriedade <see cref="P:System.Type.IsByRef" /> e determina se o <see cref="T:System.Type" /> é passado por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3634">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3635">
            <see langword="true" /> se o <see cref="T:System.Type" /> for aprovado por referência; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3635">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Type.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Type.IsClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3636">Obtém um valor que indica se o <see cref="T:System.Type" /> é uma classe ou um delegado; ou seja, não um tipo de valor ou interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3636">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3637">
            <see langword="true" /> se o <see cref="T:System.Type" /> for uma classe; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3637">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3638">Essa propriedade retorna `true` para classes, bem como delegados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3638">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="2c3b9-3639">Ele retorna `false` para tipos de valor (para estruturas e enumerações), mesmo se eles são boxed.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3639">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="2c3b9-3640">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, essa propriedade sempre retorna `true`. Se o atual <xref:System.Type> representa um tipo genérico construído, essa propriedade retorna `true` se a definição de tipo genérico é uma definição de classe; ou seja, ele não define uma interface ou um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3640">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3641">Essa propriedade retornará `true` para `Type` instâncias que representam as <xref:System.Enum> e <xref:System.ValueType> classes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3641">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="2c3b9-3642">Essas duas classes são tipos de base para enumerações e tipos de valor, respectivamente, mas eles não são tipos de valor em si ou enumerações.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3642">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="2c3b9-3643">Para obter mais informações, consulte o <xref:System.Type.IsValueType%2A> e <xref:System.Type.IsEnum%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3643">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="2c3b9-3644">O <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> valor de enumeração distingue uma declaração de tipo como classe ou interface. No entanto, as classes e tipos de valor são marcados com o <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> atributo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3644">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="2c3b9-3645">Se você recuperar o valor da propriedade Attributes e uso de um tipo de <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> valor para determinar se um tipo é uma classe em vez de um tipo de valor, você também deve chamar o <xref:System.Type.IsValueType%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3645">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="2c3b9-3646">O exemplo para o <xref:System.Reflection.TypeAttributes> enumeração contém informações adicionais, bem como anexample.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3646">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="2c3b9-3647">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3647">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3648">O exemplo a seguir cria uma instância de um tipo e indica se o tipo é uma classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3648">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3649">Obtém um valor que indica se o <see cref="T:System.Type" /> é um objeto COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3649">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3650">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um objeto COM; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3650">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3651">Esse método retorna `false` para interfaces de COM, porque eles não são objetos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3651">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="2c3b9-3652">Interfaces COM podem ser implementadas por objetos do Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3652">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="2c3b9-3653">Você também pode carregar uma classe COM e obter um `Type` objeto dessa classe COM usando o [Tlbimp.exe (importador da biblioteca)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) ferramenta.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3653">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="2c3b9-3654">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3654">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3655">Por exemplo, se o atual <xref:System.Type> representa `MyGenericType<int`> (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade é determinado pelo `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3655">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-3656">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3656">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsCOMObjectImpl : unit -&gt; bool" Usage="type.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3657">Quando substituído em uma classe derivada, implementa a propriedade <see cref="P:System.Type.IsCOMObject" /> e determina se o <see cref="T:System.Type" /> é um objeto COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3657">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3658">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um objeto COM; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3658">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3659">Esse método retorna `false` para interfaces de COM, porque eles não são objetos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3659">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="2c3b9-3660">Interfaces COM podem ser implementadas por objetos do Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3660">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Type.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3661">Obtém um valor que indica se este objeto representa um tipo genérico construído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3661">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
          <span data-ttu-id="2c3b9-3662">Você pode criar instâncias de um tipo genérico construído.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3662">You can create instances of a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3663">
            <see langword="true" /> se este objeto representar um tipo genérico construído; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3663">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3664">Um tipo genérico construído teve tipos explícitos fornecidos para todos os seus parâmetros de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3664">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="2c3b9-3665">Ele também é chamado como um tipo genérico fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3665">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="2c3b9-3666">Quando essa propriedade é `true`, você pode criar instâncias do tipo atual; quando ele for `false`, não é possível.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3666">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Type.IsContextful" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3667">Obtém um valor que indica se o <see cref="T:System.Type" /> pode ser hospedado em um contexto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3667">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3668">
            <see langword="true" /> se o <see cref="T:System.Type" /> puder ser hospedado em um contexto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3668">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3669">Um contexto intercepta as chamadas para os membros da classe e impõe políticas que são aplicadas à classe, como sincronização.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3669">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="2c3b9-3670">Para obter mais informações sobre os contextos de comunicação remota, consulte <xref:System.Runtime.Remoting.Contexts.Context>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3670">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="2c3b9-3671">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3671">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3672">O exemplo a seguir demonstra a `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, e <xref:System.Type.IsPrimitive%2A> propriedades do <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3672">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="2c3b9-3673">Ele verifica se o tipo determinado pode ser hospedado no contexto, se ele pode ser empacotado por referência, e se o tipo é um tipo de dados primitivo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3673">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsContextfulImpl : unit -&gt; bool&#xA;override this.IsContextfulImpl : unit -&gt; bool" Usage="type.IsContextfulImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3674">Implementa a propriedade <see cref="P:System.Type.IsContextful" /> e determina se o <see cref="T:System.Type" /> pode ser hospedado em um contexto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3674">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3675">
            <see langword="true" /> se o <see cref="T:System.Type" /> puder ser hospedado em um contexto; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3675">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3676">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3676">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="2c3b9-3677">Um contexto intercepta as chamadas para os membros da classe e impor políticas que são aplicadas à classe, como sincronização.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3677">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3678">O exemplo a seguir demonstra um uso do `IsContextfulImpl` método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3678">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Type.IsEnum" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3679">Obtém um valor que indica se o <see cref="T:System.Type" /> atual representa uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3679">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3680">
            <see langword="true" /> se o <see cref="T:System.Type" /> atual representar uma enumeração; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3680">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3681">Essa propriedade retornará `true` para uma enumeração, mas não para o <xref:System.Enum> próprio tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3681">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="2c3b9-3682">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3682">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3683">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3683">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-3684">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3684">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3685">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3685">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3686">O exemplo a seguir demonstra como usar o `IsEnum` propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3686">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsEnumDefined : obj -&gt; bool&#xA;override this.IsEnumDefined : obj -&gt; bool" Usage="type.IsEnumDefined value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2c3b9-3687">O valor a ser testado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3687">The value to be tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3688">Retorna um valor que indica se o valor especificado existe no tipo de enumeração atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3688">Returns a value that indicates whether the specified value exists in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3689">
            <see langword="true" /> se o valor especificado for um membro do tipo de enumeração atual; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3689">
              <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-3690">O tipo atual não é uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3690">The current type is not an enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-3691">
            <paramref name="value" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3691">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-3692">
            <paramref name="value" /> é de um tipo que não pode ser o tipo subjacente de uma enumeração.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3692">
              <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsEquivalentTo : Type -&gt; bool&#xA;override this.IsEquivalentTo : Type -&gt; bool" Usage="type.IsEquivalentTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="2c3b9-3693">A equivalência do tipo de COM é testado em relação ao tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3693">The COM type that is tested for equivalence with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3694">Determina se dois tipos COM têm a mesma identidade e são elegíveis para equivalência de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3694">Determines whether two COM types have the same identity and are eligible for type equivalence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3695">
            <see langword="true" /> se os tipos COM forem equivalentes; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3695">
              <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2c3b9-3696">Esse método também retornará <see langword="false" />, se for um tipo for um assembly que é carregado para execução e o outro está em um assembly que é carregado no contexto de somente reflexão.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3696">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3697">Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], o common language runtime dá suporte à inserção de informações de tipo para tipos COM diretamente em assemblies gerenciados, em vez de exigir que os assemblies gerenciados obter informações de tipo para tipos COM de interoperabilidade assemblies.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3697">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="2c3b9-3698">Como as informações de tipo inserido incluem somente os tipos e os membros que são realmente usados por um assembly gerenciado, dois assemblies gerenciados podem ter exibições muito diferentes do mesmo tipo COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3698">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="2c3b9-3699">Cada assembly gerenciado tem um objeto <xref:System.Type> diferente para representar sua exibição do tipo COM.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3699">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="2c3b9-3700">O Common Language Runtime dá suporte à equivalência de tipo entre essas exibições diferentes para interfaces, estruturas, enumerações e representantes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3700">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="2c3b9-3701">Equivalência de tipo significa que um objeto COM que é passado de um assembly gerenciado para outro pode ser convertido no tipo gerenciado apropriado no assembly receptor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3701">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="2c3b9-3702">O <xref:System.Type.IsEquivalentTo%2A> método permite que um assembly determinar se um objeto COM obtido de outro assembly tem a mesma identidade COM um dos tipos de interoperabilidade do primeiro assembly próprio inserido e, portanto, pode ser convertido para esse tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3702">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="2c3b9-3703">Para obter mais informações, consulte [equivalência de tipo e tipos de interoperabilidade inseridos](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3703">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3704">Obtém um valor que indica se os campos do tipo atual são apresentados em deslocamentos explicitamente especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3704">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3705">
            <see langword="true" /> Se o <see cref="P:System.Type.Attributes" /> propriedade do tipo atual inclui <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3705">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3706">Esta propriedade é fornecida como uma conveniência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3706">This property is provided as a convenience.</span></span> <span data-ttu-id="2c3b9-3707">Como alternativa, você pode usar o <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> valor de enumeração para selecionar os atributos de tipo de layout e, em seguida, teste se <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> está definido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3707">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="2c3b9-3708">O <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, e <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valores de enumeração indicam a maneira como os campos do tipo são dispostos na memória.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3708">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="2c3b9-3709">Para tipos dinâmicos, você pode especificar <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> quando você cria o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3709">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="2c3b9-3710">No código, aplicar a <xref:System.Runtime.InteropServices.StructLayoutAttribute> do atributo com o <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> valor de enumeração para o tipo, para especificar que os deslocamentos na qual iniciar os campos são especificados explicitamente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3710">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3711">Não é possível usar o <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> método para determinar se o <xref:System.Runtime.InteropServices.StructLayoutAttribute> foi aplicado a um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3711">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="2c3b9-3712">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3712">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3713">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3713">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-3714">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3714">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3715">O exemplo a seguir cria uma instância de um tipo e exibe o valor da sua <xref:System.Type.IsExplicitLayout%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3715">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="2c3b9-3716">Ele usa o `MySystemTime` classe, que também está no código de exemplo para <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3716">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="2c3b9-3717">Metadados e componentes autodescritivos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3717">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Type.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Type.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3718">Obtém um valor que indica se o <see cref="T:System.Type" /> atual representa um parâmetro de tipo na definição de um tipo ou método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3718">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3719">
            <see langword="true" /> se o objeto <see cref="T:System.Type" /> representar um parâmetro de tipo de uma definição de tipo genérico ou de método genérico; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3719">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3720"><xref:System.Type> objetos que representam os parâmetros de tipo genérico podem ser obtidos chamando o <xref:System.Type.GetGenericArguments%2A> método de um <xref:System.Type> objeto que representa uma definição de tipo genérico, ou o <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> método de um <xref:System.Reflection.MethodInfo> objeto que representa um método genérico definição.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3720"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="2c3b9-3721">Para um tipo genérico ou definição de método, o <xref:System.Type.IsGenericParameter%2A> propriedade retorna `true` para cada elemento da matriz resultante.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3721">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="2c3b9-3722">Para um tipo construído fechado ou método, o <xref:System.Type.IsGenericParameter%2A> propriedade retorna `false` para cada elemento da matriz retornada pelo <xref:System.Type.GetGenericArguments%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3722">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="2c3b9-3723">Para um tipo construído aberto ou método, alguns elementos da matriz podem ser tipos específicos e outras podem ser parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3723">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="2c3b9-3724"><xref:System.Type.IsGenericParameter%2A> Retorna `false` para os tipos e `true` para os parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3724"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="2c3b9-3725">O exemplo de código para o <xref:System.Type.ContainsGenericParameters%2A> propriedade demonstra uma classe genérica com uma mistura de tipos e parâmetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3725">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="2c3b9-3726">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3726">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3727">O exemplo a seguir usa o <xref:System.Type.IsGenericParameter%2A> propriedade a ser testada para parâmetros de tipo genérico em um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3727">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-3728">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3728">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-3729">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3729">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Type.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3730">Obtém um valor que indica se o tipo atual é um tipo genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3730">Gets a value indicating whether the current type is a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3731">
            <see langword="true" /> Se o tipo atual é um tipo genérico; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3731">
              <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3732">Use o <xref:System.Type.IsGenericType%2A> propriedade para determinar se um <xref:System.Type> objeto representa um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3732">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="2c3b9-3733">Use o <xref:System.Type.ContainsGenericParameters%2A> propriedade para determinar se um <xref:System.Type> objeto representa um tipo construído aberto ou um tipo construído fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3733">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3734">O <xref:System.Type.IsGenericType%2A> propriedade retorna `false` se o tipo imediato não for genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3734">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="2c3b9-3735">Por exemplo, uma matriz cujos elementos são do tipo `A<int>` (`A(Of Integer)` no Visual Basic) é um tipo genérico, não em si.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3735">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="2c3b9-3736">A tabela a seguir resume as condições invariáveis para termos comuns usados na reflexão genérica.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3736">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="2c3b9-3737">Termo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3737">Term</span></span>|<span data-ttu-id="2c3b9-3738">Constante</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3738">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="2c3b9-3739">definição de tipo genérico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3739">generic type definition</span></span>|<span data-ttu-id="2c3b9-3740">A propriedade <xref:System.Type.IsGenericTypeDefinition%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3740">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3741">Define um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3741">Defines a generic type.</span></span> <span data-ttu-id="2c3b9-3742">Um tipo construído é criado chamando o <xref:System.Type.MakeGenericType%2A> método em um <xref:System.Type> objeto que representa uma definição de tipo genérico e especificando uma matriz de argumentos de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3742">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="2c3b9-3743"><xref:System.Type.MakeGenericType%2A> pode ser chamado apenas em definições de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3743"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="2c3b9-3744">Qualquer definição de tipo genérico é um tipo genérico (a <xref:System.Type.IsGenericType%2A> é de propriedade `true`), mas o inverso não é verdadeiro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3744">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="2c3b9-3745">tipo genérico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3745">generic type</span></span>|<span data-ttu-id="2c3b9-3746">A propriedade <xref:System.Type.IsGenericType%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3746">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3747">Pode ser uma definição de tipo genérico, um tipo construído aberto ou um tipo construído fechado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3747">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="2c3b9-3748">Observe que uma matriz cujo tipo de elemento de tipo é genérico não é propriamente um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3748">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="2c3b9-3749">O mesmo é verdadeiro para um <xref:System.Type> objeto que representa um ponteiro para um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3749">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="2c3b9-3750">Abra o tipo construído</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3750">open constructed type</span></span>|<span data-ttu-id="2c3b9-3751">A propriedade <xref:System.Type.ContainsGenericParameters%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3751">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3752">Os exemplos são um tipo genérico que tem não atribuídos a parâmetros de tipo, um tipo que está aninhado em uma definição de tipo genérico ou em um tipo construído aberto ou um tipo genérico que tem um argumento de tipo para o qual o <xref:System.Type.ContainsGenericParameters%2A> é de propriedade `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3752">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3753">Não é possível criar uma instância de um tipo construído aberto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3753">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="2c3b9-3754">Observe que os tipos construídos abertos não todos são genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3754">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="2c3b9-3755">Por exemplo, uma matriz cujo tipo de elemento é uma definição de tipo genérico não é genérica e um ponteiro para um tipo construído aberto não é genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3755">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="2c3b9-3756">tipo construído fechado</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3756">closed constructed type</span></span>|<span data-ttu-id="2c3b9-3757">A propriedade <xref:System.Type.ContainsGenericParameters%2A> é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3757">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3758">Quando o examinado recursivamente, o tipo não tem nenhum parâmetro genérico não atribuído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3758">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="2c3b9-3759">parâmetro de tipo genérico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3759">generic type parameter</span></span>|<span data-ttu-id="2c3b9-3760">A propriedade <xref:System.Type.IsGenericParameter%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3760">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3761">A propriedade <xref:System.Type.ContainsGenericParameters%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3761">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3762">Em uma definição de tipo genérico, um espaço reservado para um tipo que será atribuído posteriormente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3762">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="2c3b9-3763">argumento de tipo genérico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3763">generic type argument</span></span>|<span data-ttu-id="2c3b9-3764">Pode ser qualquer tipo, incluindo um parâmetro de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3764">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="2c3b9-3765">Argumentos de tipo são especificados como uma matriz de <xref:System.Type> os objetos passados para o <xref:System.Type.MakeGenericType%2A> método durante a criação de um tipo genérico construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3765">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="2c3b9-3766">Se as instâncias do tipo resultante devem ser criados, o <xref:System.Type.ContainsGenericParameters%2A> propriedade deve ser `false` para todos os argumentos de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3766">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="2c3b9-3767">O exemplo de código e a tabela a seguir ilustram alguns desses termos e as invariáveis.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3767">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="2c3b9-3768">O `Derived` classe é de particular interesse porque seu tipo base é um tipo construído que tem uma mistura de tipos e parâmetros de tipo na lista de argumentos de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3768">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="2c3b9-3769">A tabela a seguir exemplos de mostra que usam e de compilação nas classes `Base`, `Derived`, e `G`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3769">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="2c3b9-3770">Quando o código C++ e c# é o mesmo, é mostrada apenas uma entrada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3770">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="2c3b9-3771">Exemplo</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3771">Example</span></span>|<span data-ttu-id="2c3b9-3772">Invariáveis</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3772">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="2c3b9-3773">Para este tipo:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3773">For this type:</span></span><br /><br /> <span data-ttu-id="2c3b9-3774"><xref:System.Type.IsGenericType%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3774"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3775"><xref:System.Type.IsGenericTypeDefinition%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3775"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3776"><xref:System.Type.ContainsGenericParameters%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3776"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="2c3b9-3777">Para este tipo:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3777">For this type:</span></span><br /><br /> <span data-ttu-id="2c3b9-3778"><xref:System.Type.IsGenericType%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3778"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3779"><xref:System.Type.IsGenericTypeDefinition%2A> é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3779"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3780"><xref:System.Type.ContainsGenericParameters%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3780"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="2c3b9-3781">Para o tipo de variável `d`:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3781">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="2c3b9-3782"><xref:System.Type.IsGenericType%2A> está `false` porque `d` é uma matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3782"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="2c3b9-3783"><xref:System.Type.IsGenericTypeDefinition%2A> é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3783"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3784"><xref:System.Type.ContainsGenericParameters%2A> é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3784"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="2c3b9-3785">`T`, `U`, e `V` (em qualquer lugar que eles aparecem)</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3785">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="2c3b9-3786"><xref:System.Type.IsGenericParameter%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3786"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3787"><xref:System.Type.IsGenericType%2A> é `false` porque não há nenhuma maneira de restringir um parâmetro de tipo para tipos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3787"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="2c3b9-3788"><xref:System.Type.IsGenericTypeDefinition%2A> é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3788"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3789"><xref:System.Type.ContainsGenericParameters%2A> está `true` porque `T`, `U`, e `V` são parâmetros de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3789"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="2c3b9-3790">Isso não significa nada sobre os argumentos de tipo que são atribuídos a eles mais tarde.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3790">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="2c3b9-3791">O tipo de campo `F`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3791">The type of field `F`</span></span>|<span data-ttu-id="2c3b9-3792"><xref:System.Type.IsGenericType%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3792"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3793"><xref:System.Type.IsGenericTypeDefinition%2A> está `false` porque um tipo foi designado para o parâmetro de tipo `G`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3793"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="2c3b9-3794">Observe que isso é equivalente a ter chamado o <xref:System.Type.MakeGenericType%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3794">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="2c3b9-3795"><xref:System.Type.ContainsGenericParameters%2A> está `true` porque o tipo de campo `F` tem um argumento de tipo que é um tipo construído aberto.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3795"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="2c3b9-3796">O tipo construído é aberto porque seu argumento de tipo (ou seja, `Base`) é uma definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3796">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="2c3b9-3797">Isso ilustra a natureza recursiva do <xref:System.Type.IsGenericType%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3797">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="2c3b9-3798">A classe aninhada `Nested`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3798">The nested class `Nested`</span></span>|<span data-ttu-id="2c3b9-3799"><xref:System.Type.IsGenericType%2A> está `true`, mesmo que o `Nested` classe não tem nenhum parâmetro de tipo genérico de por conta própria, porque ela está aninhada em um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3799"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="2c3b9-3800"><xref:System.Type.IsGenericTypeDefinition%2A> é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3800"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="2c3b9-3801">Ou seja, você pode chamar o <xref:System.Type.MakeGenericType%2A> método e fornecer o parâmetro de tipo do tipo delimitador, `Derived`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3801">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="2c3b9-3802"><xref:System.Type.ContainsGenericParameters%2A> está `true` porque o tipo de circunscrição, `Derived`, tem parâmetros de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3802"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="2c3b9-3803">Isso ilustra a natureza recursiva do <xref:System.Type.ContainsGenericParameters%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3803">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3804">O exemplo de código a seguir exibe o valor da <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, e <xref:System.Type.ContainsGenericParameters%2A> propriedades para os tipos descritos na seção comentários.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3804">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="2c3b9-3805">Para obter explicações sobre os valores de propriedade, consulte a tabela que acompanha este artigo nos comentários.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3805">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-3806">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3806">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-3807">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3807">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Type.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3808">Obtém um valor que indica se o <see cref="T:System.Type" /> atual representa uma definição de tipo genérico, da qual outros tipos genéricos podem ser construídos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3808">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3809">
            <see langword="true" /> se o objeto <see cref="T:System.Type" /> representar uma definição de tipo genérico, caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3809">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3810">Uma definição de tipo genérico é um modelo do qual outros tipos podem ser construídos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3810">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="2c3b9-3811">Por exemplo, de definição de tipo genérico `G<T>` (expressa na sintaxe c#; `G(Of T)` no Visual Basic ou `generic <typename T> ref class G` em C++) você pode construir e criar uma instância do tipo `G<int>` (`G(Of Integer)` no Visual Basic), chamando o <xref:System.Type.MakeGenericType%2A> método com uma lista de argumento genérico que contém o <xref:System.Int32> tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3811">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="2c3b9-3812">Considerando um <xref:System.Type> construída de objeto que representa esse tipo, o <xref:System.Type.GetGenericTypeDefinition%2A> método obtém a definição de tipo genérico volta novamente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3812">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="2c3b9-3813">Use o <xref:System.Type.IsGenericTypeDefinition%2A> propriedade para determinar se você pode criar novos tipos do tipo atual.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3813">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="2c3b9-3814">Se o <xref:System.Type.IsGenericTypeDefinition%2A> propriedade retorna `true`, você pode chamar o <xref:System.Type.MakeGenericType%2A> método para criar novos tipos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3814">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="2c3b9-3815">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3815">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3816">O exemplo a seguir exibe informações sobre um tipo, incluindo se ele é uma definição de tipo genérico ou não.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3816">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="2c3b9-3817">Informações são exibidas para um tipo construído, sua definição de tipo genérico e um tipo comum.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3817">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-3818">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3818">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-3819">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3819">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Type.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Type.IsImport" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3820">Obtém um valor que indica se o <see cref="T:System.Type" /> tem um atributo <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> aplicado, indicando que ele foi importado de uma biblioteca de tipos COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3820">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3821">
            <see langword="true" /> Se o <see cref="T:System.Type" /> tem uma <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3821">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3822">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3822">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3823">Por exemplo, se o atual <xref:System.Type> representa `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade é determinado pelo `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3823">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="2c3b9-3824">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3824">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool&#xA;override this.IsInstanceOfType : obj -&gt; bool" Usage="type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="2c3b9-3825">O objeto a ser comparado com o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3825">The object to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-3826">Determina se o objeto especificado é uma instância do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3826">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3827">
            <see langword="true" /> se o <see langword="Type" /> atual estiver na hierarquia de herança do objeto representado pelo <paramref name="o" /> ou se o <see langword="Type" /> atual for uma interface implementada por <paramref name="o" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3827">
              <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span>
          </span>
          <span data-ttu-id="2c3b9-3828">
            <see langword="false" /> se nenhuma dessas condições for verdadeira, se <paramref name="o" /> for <see langword="null" /> ou se o <see langword="Type" /> atual for um tipo genérico aberto (ou seja, <see cref="P:System.Type.ContainsGenericParameters" /> retorna <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3828">
              <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3829">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3829">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3830">Um tipo construído não é uma instância de sua definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3830">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="2c3b9-3831">Ou seja, `MyGenericList<int>` (`MyGenericList(Of Integer)` no Visual Basic) não é uma instância de `MyGenericList<T>` (`MyGenericList(Of T)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3831">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3832">O exemplo a seguir demonstra o uso do método `IsInstanceOfType`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3832">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Type.IsInterface" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3833">Obtém um valor que indica se o <see cref="T:System.Type" /> é uma interface, ou seja, não é uma classe ou um tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3833">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3834">
            <see langword="true" /> se o <see cref="T:System.Type" /> é uma interface; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3834">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3835">O <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distingue uma declaração de tipo como tipo de classe, interface ou valor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3835">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="2c3b9-3836">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3836">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3837">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3837">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3838">O exemplo a seguir cria uma interface, verifica o tipo de interface e indica se uma classe tem o `IsInterface` conjunto de propriedades.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3838">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3839">Obtém um valor que indica se os campos do tipo atual são apresentados em sequência, na ordem em que foram definidos ou emitidos para os metadados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3839">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3840">
            <see langword="true" /> Se o <see cref="P:System.Type.Attributes" /> propriedade do tipo atual inclui <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3840">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3841">Esta propriedade é fornecida como uma conveniência.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3841">This property is provided as a convenience.</span></span> <span data-ttu-id="2c3b9-3842">Como alternativa, você pode usar o <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> valor de enumeração para selecionar os atributos de tipo de layout e, em seguida, teste se <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> está definido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3842">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="2c3b9-3843">O <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, e <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valores de enumeração indicam a maneira como os campos do tipo são dispostos na memória.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3843">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="2c3b9-3844">Para tipos dinâmicos, você pode especificar <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> quando você cria o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3844">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="2c3b9-3845">No código, aplicar a <xref:System.Runtime.InteropServices.StructLayoutAttribute> do atributo com o <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valor de enumeração para o tipo, para especificar que o layout é sequencial.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3845">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3846">Não é possível usar o <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> método para determinar se o <xref:System.Runtime.InteropServices.StructLayoutAttribute> foi aplicado a um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3846">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="2c3b9-3847">Para obter mais informações, consulte a seção 9.1.2 da especificação para a documentação do Common Language Infrastructure (CLI), "Partição II: Metadata Definition and Semantics".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3847">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="2c3b9-3848">A documentação está disponível online; confira [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212), no MSDN, e [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552), no site internacional da Ecma.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3848">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="2c3b9-3849">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3849">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-3850">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3850">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-3851">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3851">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3852">O exemplo a seguir cria uma instância de uma classe para o qual o <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valor de enumeração na <xref:System.Runtime.InteropServices.StructLayoutAttribute> classe tiver sido definida, verifica o <xref:System.Type.IsLayoutSequential%2A> propriedade e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3852">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="2c3b9-3853">Metadados e componentes autodescritivos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3853">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3854">Obtém um valor que indica se é realizado marshal no <see cref="T:System.Type" /> por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3854">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3855">
            <see langword="true" /> se for realizado marshal no <see cref="T:System.Type" /> por referência; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3855">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2c3b9-3856">O exemplo a seguir demonstra a `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, e <xref:System.Type.IsPrimitive%2A> propriedades do <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3856">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="2c3b9-3857">Ele verifica se o tipo determinado pode ser hospedado no contexto, se ele pode ser empacotado por referência, e se o tipo é um tipo de dados primitivo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3857">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsMarshalByRefImpl : unit -&gt; bool&#xA;override this.IsMarshalByRefImpl : unit -&gt; bool" Usage="type.IsMarshalByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3858">Implementa a propriedade <see cref="P:System.Type.IsMarshalByRef" /> e determina se é realizado marshal no <see cref="T:System.Type" /> por referência.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3858">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3859">
            <see langword="true" /> se for realizado marshal no <see cref="T:System.Type" /> por referência; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3859">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3860">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3860">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3861">O exemplo a seguir determina se o tipo fornecido é empacotado por referência e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3861">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Type.IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3862">Obtém um valor que indica se o objeto atual <see cref="T:System.Type" /> representa um tipo cuja definição está aninhada dentro da definição de outro tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3862">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3863">
            <see langword="true" /> se o <see cref="T:System.Type" /> está aninhado dentro de outro tipo; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3863">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3864">O <xref:System.Type.IsNested%2A> propriedade retorna `true` para todos os tipos, independentemente da visibilidade aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3864">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="2c3b9-3865">Para testar o aninhamento e visibilidade ao mesmo tempo, use as propriedades relacionadas <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, ou <xref:System.Type.IsNestedPublic%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3865">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3866">O <xref:System.Reflection.TypeAttributes.VisibilityMask> membro de enumeração seleciona os atributos de visibilidade para um tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3866">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3867">O exemplo a seguir cria uma classe externa com um número de classes aninhadas que têm vários tipos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3867">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="2c3b9-3868">Ele então recupera o valor de um número de relacionadas à visibilidade <xref:System.Type> propriedades para o tipo de pai e cada um dos seus tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3868">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3869">Obtém um valor que indica se o <see cref="T:System.Type" /> é aninhado e visível somente dentro de seu próprio assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3869">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3870">
            <see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visível somente dentro de seu próprio assembly; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3870">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3871">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3871">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3872"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> seleciona os atributos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3872"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3873">O exemplo a seguir cria uma classe externa com um número de classes aninhadas que têm vários tipos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3873">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="2c3b9-3874">Ele então recupera o valor de um número de relacionadas à visibilidade <xref:System.Type> propriedades para o tipo de pai e cada um dos seus tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3874">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3875">Obtém um valor que indica se o <see cref="T:System.Type" /> é aninhado e visíveis somente para classes que pertencem à sua própria família e ao seu próprio assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3875">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3876">
            <see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visíveis somente para classes que pertencem à sua própria família e seu próprio assembly; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3876">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3877">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3877">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> seleciona os atributos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-3879">As linguagens c# e Visual Basic não têm a semântica que permitem que você defina um tipo aninhado que é visível somente para tipos protegidos em seu próprio assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3879">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="2c3b9-3880">`protected internal` visibilidade em c# e `Protected Friend` visibilidade no Visual Basic define um tipo aninhado que é visível para tipos protegidos e a tipos no mesmo assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3880">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="2c3b9-3881">Um <xref:System.Type> família do objeto é definida como todos os objetos do mesmo <xref:System.Type> e de seus subtipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3881">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3882">O exemplo a seguir cria uma classe externa com um número de classes aninhadas que têm vários tipos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3882">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="2c3b9-3883">Ele então recupera o valor de um número de relacionadas à visibilidade <xref:System.Type> propriedades para o tipo de pai e cada um dos seus tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3883">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3884">Obtém um valor que indica se o <see cref="T:System.Type" /> é aninhado e visível somente dentro de sua própria família.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3884">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3885">
            <see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visível somente dentro de sua própria família; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3885">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3886">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3886">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3887"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> seleciona os atributos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3887"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="2c3b9-3888">Um <xref:System.Type> família do objeto é definida como todos os objetos da exato mesmo <xref:System.Type> e de seus subtipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3888">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3889">O exemplo a seguir cria uma classe externa com um número de classes aninhadas que têm vários tipos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3889">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="2c3b9-3890">Ele então recupera o valor de um número de relacionadas à visibilidade <xref:System.Type> propriedades para o tipo de pai e cada um dos seus tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3890">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3891">Obtém um valor que indica se o <see cref="T:System.Type" /> é aninhado e visíveis somente para classes que pertençam à sua própria família ou ao seu próprio assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3891">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3892">
            <see langword="true" /> Se o <see cref="T:System.Type" /> aninhado e visíveis somente para classes que pertencem à sua própria família ou ao seu próprio assembly; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3892">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3893">Se a visibilidade de um tipo é `protected internal` em c# ou `Protected Friend` no Visual Basic, o <xref:System.Type.IsNestedFamORAssem%2A> propriedade retorna `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3893">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="2c3b9-3894">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3894">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3895"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> seleciona os atributos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3895"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="2c3b9-3896">Um <xref:System.Type> família do objeto é definida como todos os objetos da exato mesmo <xref:System.Type> e de seus subtipos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3896">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3897">O exemplo a seguir cria uma classe externa com um número de classes aninhadas que têm vários tipos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3897">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="2c3b9-3898">Ele então recupera o valor de um número de relacionadas à visibilidade <xref:System.Type> propriedades para o tipo de pai e cada um dos seus tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3898">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3899">Obtém um valor que indica se o <see cref="T:System.Type" /> é aninhado e declarado privado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3899">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3900">
            <see langword="true" /> Se o <see cref="T:System.Type" /> é aninhado e declarado privado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3900">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3901">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3901">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3902"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> seleciona os atributos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3902"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3903">O exemplo a seguir cria uma classe externa com um número de classes aninhadas que têm vários tipos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3903">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="2c3b9-3904">Ele então recupera o valor de um número de relacionadas à visibilidade <xref:System.Type> propriedades para o tipo de pai e cada um dos seus tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3904">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3905">Obtém um valor que indica se uma classe é aninhada e declarada pública.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3905">Gets a value indicating whether a class is nested and declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3906">
            <see langword="true" /> Se a classe aninhada e declarada pública; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3906">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3907">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3907">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3908"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> seleciona os atributos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3908"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3909">O exemplo a seguir cria uma classe externa com um número de classes aninhadas que têm vários tipos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3909">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="2c3b9-3910">Ele então recupera o valor de um número de relacionadas à visibilidade <xref:System.Type> propriedades para o tipo de pai e cada um dos seus tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3910">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3911">Obtém um valor que indica se o <see cref="T:System.Type" /> não está declarado como público.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3911">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3912">
            <see langword="true" /> Se o <see cref="T:System.Type" /> não está declarado como público e não é um tipo aninhado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3912">
              <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3913">Não use essa propriedade com os tipos aninhados; Use o <xref:System.Type.IsNestedPublic%2A> propriedade em vez disso.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3913">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="2c3b9-3914">Se o atual <xref:System.Type> representa um parâmetro de tipo de um tipo genérico, essa propriedade retornará `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3914">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3915">Este usa os de exemplo `IsNotPublic` propriedade para obter a visibilidade do tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3915">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="2c3b9-3916">O exemplo de código a seguir demonstra por que não é possível usar `IsPublic` e `IsNotPublic` para classes aninhadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3916">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="2c3b9-3917">Para classes aninhadas, ignorar os resultados de `IsPublic` e `IsNotPublic` e preste atenção apenas aos resultados de `IsNestedPublic` e `IsNestedPrivate`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3917">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="2c3b9-3918">A saída de reflexão para este fragmento de código seria da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3918">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="2c3b9-3919">Classe</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3919">Class</span></span>|<span data-ttu-id="2c3b9-3920">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3920">IsNotPublic</span></span>|<span data-ttu-id="2c3b9-3921">IsPublic</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3921">IsPublic</span></span>|<span data-ttu-id="2c3b9-3922">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3922">IsNestedPublic</span></span>|<span data-ttu-id="2c3b9-3923">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3923">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="2c3b9-3924">Um</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3924">A</span></span>|<span data-ttu-id="2c3b9-3925">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3925">FALSE</span></span>|<span data-ttu-id="2c3b9-3926">TRUE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3926">TRUE</span></span>|<span data-ttu-id="2c3b9-3927">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3927">FALSE</span></span>|<span data-ttu-id="2c3b9-3928">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3928">FALSE</span></span>|  
|<span data-ttu-id="2c3b9-3929">B</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3929">B</span></span>|<span data-ttu-id="2c3b9-3930">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3930">FALSE</span></span>|<span data-ttu-id="2c3b9-3931">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3931">FALSE</span></span>|<span data-ttu-id="2c3b9-3932">TRUE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3932">TRUE</span></span>|<span data-ttu-id="2c3b9-3933">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3933">FALSE</span></span>|  
|<span data-ttu-id="2c3b9-3934">C</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3934">C</span></span>|<span data-ttu-id="2c3b9-3935">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3935">FALSE</span></span>|<span data-ttu-id="2c3b9-3936">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3936">FALSE</span></span>|<span data-ttu-id="2c3b9-3937">FALSE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3937">FALSE</span></span>|<span data-ttu-id="2c3b9-3938">TRUE</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3938">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Type.IsPointer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3939">Obtém um valor que indica se o <see cref="T:System.Type" /> é um ponteiro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3939">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3940">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um ponteiro; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3940">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3941">Caso o <xref:System.Type> atual representa um tipo genérico ou um parâmetro de tipo na definição de um tipo genérico ou um método genérico esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3941">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-3942">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3942">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3943">O exemplo a seguir mostra um uso do `IsPointer` propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3943">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPointerImpl : unit -&gt; bool" Usage="type.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3944">Quando substituído em uma classe derivada, implementa a propriedade <see cref="P:System.Type.IsPointer" /> e determina se o <see cref="T:System.Type" /> é um ponteiro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3944">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3945">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um ponteiro; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3945">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3946">Obtém um valor que indica se o <see cref="T:System.Type" /> é um dos tipos primitivos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3946">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3947">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um dos tipos primitivos; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3947">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3948">São os tipos primitivos <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, e <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3948">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="2c3b9-3949">Caso o <xref:System.Type> atual representa um tipo genérico ou um parâmetro de tipo na definição de um tipo genérico ou um método genérico esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3949">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3950">O exemplo a seguir demonstra a `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, e <xref:System.Type.IsPrimitive%2A> propriedades do <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3950">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="2c3b9-3951">Ele verifica se o tipo determinado pode ser hospedado no contexto, se ele pode ser empacotado por referência, e se o tipo é um tipo de dados primitivo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3951">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPrimitiveImpl : unit -&gt; bool" Usage="type.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3952">Quando substituído em uma classe derivada, implementa a propriedade <see cref="P:System.Type.IsPrimitive" /> e determina se o <see cref="T:System.Type" /> é um dos tipos primitivos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3952">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-3953">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um dos tipos primitivos; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3953">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3954">São os tipos primitivos <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, e <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3954">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3955">O exemplo a seguir determina se o tipo fornecido é um tipo primitivo e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3955">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Type.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3956">Obtém um valor que indica se o <see cref="T:System.Type" /> está declarado como público.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3956">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3957">
            <see langword="true" /> Se o <see cref="T:System.Type" /> está declarado como público e não é um tipo aninhado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3957">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3958">Não use com tipos aninhados; Use <xref:System.Type.IsNestedPublic%2A> em vez disso.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3958">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="2c3b9-3959">Se o atual <xref:System.Type> representa um parâmetro de tipo de um tipo genérico, essa propriedade retornará `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3959">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="2c3b9-3960"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> seleciona os atributos de visibilidade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3960"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3961">O exemplo a seguir cria uma instância do `MyTestClass`, verifica o `IsPublic` propriedade e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3961">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="2c3b9-3962">Para classes aninhadas, ignorar os resultados de `IsPublic` e `IsNotPublic` e preste atenção apenas aos resultados de <xref:System.Type.IsNestedPublic%2A> e <xref:System.Type.IsNestedPrivate%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3962">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Type.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3963">Obtém um valor que indica se o <see cref="T:System.Type" /> está declarado selado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3963">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3964">
            <see langword="true" /> Se o <see cref="T:System.Type" /> é declarado selado; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3964">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3965">Caso o <xref:System.Type> atual represente um parâmetro de tipo de um tipo genérico, esta propriedade sempre retorna `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3965">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-3966">O exemplo a seguir cria uma instância de um `sealed` classe procura o `IsSealed` propriedade e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3966">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Type.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3967">Obtém um valor que indica se o tipo atual é crítico para segurança ou crítico para segurança e disponível no código transparente no nível de confiança atual e, portanto, pode realizar operações críticas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3967">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3968">
            <see langword="true" /> Se o tipo atual é crítico para segurança ou segurança-seguro-crítica no nível de confiança atual; <see langword="false" /> se for transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3968">
              <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3969">O <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, e <xref:System.Type.IsSecurityTransparent%2A> propriedades relatam o nível de transparência do tipo em seu nível de confiança atual, conforme determinado pelo common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3969">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="2c3b9-3970">As combinações destas propriedades são mostradas na seguinte tabela:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3970">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="2c3b9-3971">Nível de segurança</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3971">Security level</span></span>|<span data-ttu-id="2c3b9-3972">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3972">IsSecurityCritical</span></span>|<span data-ttu-id="2c3b9-3973">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3973">IsSecuritySafeCritical</span></span>|<span data-ttu-id="2c3b9-3974">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3974">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="2c3b9-3975">Crítico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3975">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="2c3b9-3976">Segurança crítica</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3976">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="2c3b9-3977">Transparente</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3977">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="2c3b9-3978">Usar essas propriedade é muito mais simples que examinar as anotações de segurança de um assembly e seus tipos, verificando o nível de confiança atual e tentando duplicar as regras do tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3978">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c3b9-3979">Para assemblies de confiança parcial, o valor desta propriedade depende do nível de confiança atual do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3979">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="2c3b9-3980">Se o assembly for carregado em um domínio de aplicativo parcialmente confiável (por exemplo, em um domínio de aplicativo em área restrita), o tempo de execução irá ignorar as anotações de segurança do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3980">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="2c3b9-3981">O assembly e todos os tipos são tratados como transparentes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3981">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="2c3b9-3982">O tempo de execução só presta atenção nas anotações de segurança de um assembly de confiança parcial quando o assembly é carregado em um domínio de aplicativo totalmente confiável (por exemplo, no domínio de aplicativo padrão de um aplicativo da área de trabalho).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3982">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="2c3b9-3983">Por outro lado, um assembly confiável (ou seja, um assembly de nome forte que está instalado no cache de assembly global) é sempre carregado com confiança total, independentemente do nível de confiança do domínio do aplicativo, logo, o nível de confiança atual sempre é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3983">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="2c3b9-3984">É possível determinar os níveis de confiança atuais de assemblies e de domínios de aplicativo usando-se as propriedades <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> e <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3984">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="2c3b9-3985">Para obter mais informações sobre reflexão e transparência, consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3985">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="2c3b9-3986">Para obter informações sobre transparência, consulte [alterações de segurança](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3986">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="2c3b9-3987">Considerações sobre segurança relacionadas à reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3987">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="2c3b9-3988">Alterações na segurança do .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3988">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Type.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-3989">Obtém um valor que indica se o tipo é crítico para segurança e disponível no código transparente no nível de confiança atual, ou seja, se ele pode realizar operações críticas e ser acessado por código transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3989">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-3990">
            <see langword="true" /> Se o tipo atual é segurança-seguro-crítica no nível de confiança atual; <see langword="false" /> se ele é crítico para segurança ou transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-3990">
              <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-3991">O <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, e <xref:System.Type.IsSecurityTransparent%2A> propriedades relatam o nível de transparência do tipo em seu nível de confiança atual, conforme determinado pelo common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3991">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="2c3b9-3992">As combinações destas propriedades são mostradas na seguinte tabela:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3992">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="2c3b9-3993">Nível de segurança</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3993">Security level</span></span>|<span data-ttu-id="2c3b9-3994">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3994">IsSecurityCritical</span></span>|<span data-ttu-id="2c3b9-3995">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3995">IsSecuritySafeCritical</span></span>|<span data-ttu-id="2c3b9-3996">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3996">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="2c3b9-3997">Crítico</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3997">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="2c3b9-3998">Segurança crítica</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3998">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="2c3b9-3999">Transparente</span><span class="sxs-lookup"><span data-stu-id="2c3b9-3999">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="2c3b9-4000">Usar essas propriedade é muito mais simples que examinar as anotações de segurança de um assembly e seus tipos, verificando o nível de confiança atual e tentando duplicar as regras do tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4000">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c3b9-4001">Para assemblies de confiança parcial, o valor desta propriedade depende do nível de confiança atual do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4001">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="2c3b9-4002">Se o assembly for carregado em um domínio de aplicativo parcialmente confiável (por exemplo, em um domínio de aplicativo em área restrita), o tempo de execução irá ignorar as anotações de segurança do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4002">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="2c3b9-4003">O assembly e todos os tipos são tratados como transparentes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4003">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="2c3b9-4004">O tempo de execução só presta atenção nas anotações de segurança de um assembly de confiança parcial quando o assembly é carregado em um domínio de aplicativo totalmente confiável (por exemplo, no domínio de aplicativo padrão de um aplicativo da área de trabalho).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4004">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="2c3b9-4005">Por outro lado, um assembly confiável (ou seja, um assembly de nome forte que está instalado no cache de assembly global) é sempre carregado com confiança total, independentemente do nível de confiança do domínio do aplicativo, logo, o nível de confiança atual sempre é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4005">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="2c3b9-4006">É possível determinar os níveis de confiança atuais de assemblies e de domínios de aplicativo usando-se as propriedades <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> e <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4006">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="2c3b9-4007">Para obter mais informações sobre reflexão e transparência, consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4007">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="2c3b9-4008">Para obter informações sobre transparência, consulte [alterações de segurança](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4008">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="2c3b9-4009">Considerações sobre segurança relacionadas à reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4009">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="2c3b9-4010">Alterações na segurança do .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4010">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Type.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4011">Obtém um valor que indica que se o tipo atual é transparente no nível de confiança atual e, portanto, não pode realizar operações críticas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4011">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4012">
            <see langword="true" /> Se o tipo é transparente de segurança no nível de confiança atual; Caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4012">
              <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4013">Se essa propriedade retornará `true`, o <xref:System.Type.IsSecurityCritical%2A> e <xref:System.Type.IsSecuritySafeCritical%2A> retornam propriedades `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4013">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-4014">O <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, e <xref:System.Type.IsSecurityTransparent%2A> propriedades relatam o nível de transparência do tipo em seu nível de confiança atual, conforme determinado pelo common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4014">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="2c3b9-4015">Usar essas propriedade é muito mais simples que examinar as anotações de segurança de um assembly e seus tipos, verificando o nível de confiança atual e tentando duplicar as regras do tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4015">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c3b9-4016">Para assemblies de confiança parcial, o valor desta propriedade depende do nível de confiança atual do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4016">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="2c3b9-4017">Se o assembly for carregado em um domínio de aplicativo parcialmente confiável (por exemplo, em um domínio de aplicativo em área restrita), o tempo de execução irá ignorar as anotações de segurança do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4017">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="2c3b9-4018">O assembly e todos os tipos são tratados como transparentes.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4018">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="2c3b9-4019">O tempo de execução só presta atenção nas anotações de segurança de um assembly de confiança parcial quando o assembly é carregado em um domínio de aplicativo totalmente confiável (por exemplo, no domínio de aplicativo padrão de um aplicativo da área de trabalho).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4019">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="2c3b9-4020">Por outro lado, um assembly confiável (ou seja, um assembly de nome forte que está instalado no cache de assembly global) é sempre carregado com confiança total, independentemente do nível de confiança do domínio do aplicativo, logo, o nível de confiança atual sempre é totalmente confiável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4020">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="2c3b9-4021">É possível determinar os níveis de confiança atuais de assemblies e de domínios de aplicativo usando-se as propriedades <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> e <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4021">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="2c3b9-4022">Para obter mais informações sobre reflexão e transparência, consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4022">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="2c3b9-4023">Para obter informações sobre transparência, consulte [alterações de segurança](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4023">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="2c3b9-4024">Considerações sobre segurança relacionadas à reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4024">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="2c3b9-4025">Alterações na segurança do .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4025">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4026">Obtém um valor que indica se o <see cref="T:System.Type" /> é serializável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4026">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4027">
            <see langword="true" /> se o <see cref="T:System.Type" /> for serializável; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4027">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="2c3b9-4028">Tipos que são definidos no .NET Standard não são marcados com <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4028">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="2c3b9-4029">Em vez disso, cada implementação do .NET determina se um tipo é serializável.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4029">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="2c3b9-4030">Em tempo de execução, você pode usar o <xref:System.Type.IsSerializable%2A> propriedade para determinar se essa implementação dá suporte à serialização de uma instância do tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4030">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="2c3b9-4031">Para obter mais informações e um exemplo, consulte [como determinar se um objeto .NET padrão é serializável](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4031">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="2c3b9-4032">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4032">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-4033">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4033">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-4034">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4034">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4035">O exemplo a seguir cria uma instância do `MyTestClass` classe, define o atributo [Serializable] e verifica o `IsSerializable` propriedade `true` ou `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4035">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSignatureType : bool" Usage="System.Type.IsSignatureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4036">Obtém um valor que indica se o tipo tem um nome que exige tratamento especial.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4036">Gets a value indicating whether the type has a name that requires special handling.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4037">
            <see langword="true" /> se o tipo tiver um nome que exige tratamento especial; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4037">
              <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4038">Os nomes que começam com ou contenham um caractere de sublinhado (_), os acessadores de propriedade e métodos de sobrecarga de operador são exemplos de tipos que podem exigir tratamento especial por alguns compiladores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4038">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="2c3b9-4039">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4039">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-4040">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4040">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-4041">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4041">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool&#xA;override this.IsSubclassOf : Type -&gt; bool" Usage="type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="2c3b9-4042">O tipo a ser comparado com o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4042">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4043">Determina se o <see cref="T:System.Type" /> atual deriva do <see cref="T:System.Type" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4043">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4044">
            <see langword="true" /> se o <see langword="Type" /> atual derivar de <paramref name="c" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4044">
              <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4045">Esse método também retorna <see langword="false" /> se <paramref name="c" /> e o <see langword="Type" /> atual forem iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4045">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4046">Você pode chamar o <xref:System.Type.IsSubclassOf%2A> método para determinar qualquer um dos seguintes:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4046">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="2c3b9-4047">Se uma classe derivada de outra.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4047">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="2c3b9-4048">Se um tipo derivado de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4048">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="2c3b9-4049">No entanto, o <xref:System.Type.IsValueType%2A> é uma maneira mais eficiente para determinar se um tipo é um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4049">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="2c3b9-4050">Se um tipo derivado de <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4050">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="2c3b9-4051">No entanto, o <xref:System.Type.IsEnum%2A> método é uma maneira mais eficiente para determinar se um tipo é uma enumeração.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4051">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="2c3b9-4052">Se um tipo é um delegado, ou seja, se ele deriva de uma <xref:System.Delegate> ou <xref:System.MulticastDelegate>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4052">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="2c3b9-4053">O <xref:System.Type.IsSubclassOf%2A> método não pode ser usado para determinar se uma interface deriva de outra interface ou se uma classe implementa uma interface.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4053">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="2c3b9-4054">Use o <xref:System.Type.IsAssignableFrom%2A> método para essa finalidade, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4054">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="2c3b9-4055">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, ela deriva de sua restrição de classe ou de <xref:System.Object?displayProperty=nameWithType> se ele tiver nenhuma restrição de classe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4055">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-4056">Exceto quando usado com interfaces, <xref:System.Type.IsSubclassOf%2A> é o oposto de <xref:System.Type.IsAssignableFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4056">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="2c3b9-4057">Ou seja, se `t1.IsSubclassOf(t2)` está `true`, em seguida, `t2.IsAssignableFrom(t1)` também é `true`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4057">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="2c3b9-4058">Este método pode ser substituído por uma classe derivada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4058">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4059">O exemplo a seguir cria uma classe chamada `Class1` e uma classe derivada chamada `DerivedC1`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4059">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="2c3b9-4060">Ele chama o <xref:System.Type.IsSubclassOf%2A> método para mostrar que `DerivedC1` é uma subclasse de `Class1`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4060">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-4061">
            <paramref name="c" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4061">
              <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Type.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Type.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4062">Obtém um valor que indica se o atributo de formato da cadeia de caracteres <see langword="UnicodeClass" /> está selecionado para o <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4062">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4063">
            <see langword="true" /> se o atributo de formato da cadeia de caracteres <see langword="UnicodeClass" /> estiver selecionado para o <see cref="T:System.Type" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4063">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4064">O <xref:System.Reflection.TypeAttributes.StringFormatMask> é usado para selecionar os atributos de formato de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4064">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="2c3b9-4065">Os atributos de formato de cadeia de caracteres melhorar a interoperabilidade, definindo como cadeias de caracteres devem ser interpretadas.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4065">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="2c3b9-4066">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4066">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-4067">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4067">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-4068">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4068">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Type.IsValueType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4069">Obtém um valor que indica se o <see cref="T:System.Type" /> é um tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4069">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4070">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um tipo de valor; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4070">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4071">Tipos de valor são tipos que são representados como sequências de bits; tipos de valor não são classes ou interfaces.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4071">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="2c3b9-4072">Tipos de valor são chamados de "structs" em algumas linguagens de programação.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4072">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="2c3b9-4073">Enumerações são um caso especial de tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4073">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="2c3b9-4074">Essa propriedade retornará `false` para o <xref:System.ValueType> classe, pois <xref:System.ValueType> não é um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4074">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="2c3b9-4075">É a classe base para todos os tipos de valor e, portanto, qualquer tipo de valor pode ser atribuído a ele.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4075">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="2c3b9-4076">Isso não seria possível se <xref:System.ValueType> em si foi um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4076">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="2c3b9-4077">Tipos de valor são boxed quando eles forem atribuídos a um campo do tipo <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4077">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="2c3b9-4078">Essa propriedade retornará `true` para enumerações, mas não para o <xref:System.Enum> próprio tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4078">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="2c3b9-4079">Para obter um exemplo que demonstra esse comportamento, consulte <xref:System.Type.IsEnum%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4079">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="2c3b9-4080">Esta propriedade é somente para leitura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4080">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4081">O exemplo a seguir cria uma variável do tipo `MyEnum`, verifica o `IsValueType` propriedade e exibe o resultado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4081">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsValueTypeImpl : unit -&gt; bool&#xA;override this.IsValueTypeImpl : unit -&gt; bool" Usage="type.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4082">Implementa a propriedade <see cref="P:System.Type.IsValueType" /> e determina se o <see cref="T:System.Type" /> é um tipo de valor, ou seja, não é uma classe nem uma interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4082">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4083">
            <see langword="true" /> se o <see cref="T:System.Type" /> for um tipo de valor; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4083">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4084">Este método é fornecido para habilitar a implementação de sistemas de tipo alternativo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4084">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="2c3b9-4085">Ele não é geralmente usado no código do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4085">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Type.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Type.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4086">Obtém um valor que indica se <see cref="T:System.Type" /> pode ser acessado pelo código fora do assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4086">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4087">
            <see langword="true" /> se o <see cref="T:System.Type" /> atual é um tipo público ou um tipo público aninhado, de modo que todos os tipos de delimitadores são públicos; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4087">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4088">Use essa propriedade para determinar se um tipo é parte da interface pública de um assembly do componente.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4088">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4089">O exemplo de código a seguir testa as duas classes, apenas um deles é visível fora do assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4089">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4090">Retorna um objeto <see cref="T:System.Type" /> que representa uma matriz do tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4090">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : unit -&gt; Type&#xA;override this.MakeArrayType : unit -&gt; Type" Usage="type.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4091">Retorna um objeto <see cref="T:System.Type" /> que representa uma matriz unidimensional do tipo atual, com um limite inferior de zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4091">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4092">Um objeto <see cref="T:System.Type" /> que representa uma matriz unidimensional do tipo atual, com um limite inferior de zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4092">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4093">O <xref:System.Type.MakeArrayType%2A> método fornece uma maneira para gerar tipos de matriz cujos tipos de elemento são calculados em tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4093">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="2c3b9-4094">**Observação** o common language runtime faz uma distinção entre os vetores (ou seja, matrizes unidimensionais que sempre são baseados em zero) e matrizes multidimensionais.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4094">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="2c3b9-4095">Um vetor, que sempre tem apenas uma dimensão, não é o mesmo que uma matriz multidimensional que tem apenas uma dimensão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4095">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="2c3b9-4096">Essa sobrecarga de método só pode ser usada para criar tipos de vetor e é a única maneira de criar um tipo de vetor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4096">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="2c3b9-4097">Use o <xref:System.Type.MakeArrayType%28System.Int32%29> sobrecarga de método para criar tipos de matriz multidimensional.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4097">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4098">O exemplo de código a seguir cria a matriz, `ref` (`ByRef` no Visual Basic) e os tipos de ponteiro para a classe `Test`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4098">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-4099">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4099">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="2c3b9-4100">As classes derivadas devem fornecer uma implementação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4100">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-4101">O tipo atual é <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4101">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4102">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4102">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4103">O tipo atual é um tipo <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4103">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="2c3b9-4104">Ou seja, <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4104">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : int -&gt; Type&#xA;override this.MakeArrayType : int -&gt; Type" Usage="type.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="2c3b9-4105">O número de dimensões da matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4105">The number of dimensions for the array.</span>
          </span>
          <span data-ttu-id="2c3b9-4106">Esse número deve ser menor ou igual a 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4106">This number must be less than or equal to 32.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4107">Retorna um objeto <see cref="T:System.Type" /> que representa uma matriz do tipo atual, com o número de dimensões especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4107">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4108">Um objeto que representa uma matriz do tipo atual, com o número de dimensões especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4108">An object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4109">O <xref:System.Type.MakeArrayType%2A> método fornece uma maneira para gerar tipos de matriz cujos tipos de elemento são calculados em tempo de execução.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4109">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-4110">O common language runtime faz uma distinção entre os vetores (ou seja, matrizes unidimensionais que sempre são baseados em zero) e matrizes multidimensionais.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4110">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="2c3b9-4111">Um vetor, que sempre tem apenas uma dimensão, não é o mesmo que uma matriz multidimensional que tem apenas uma dimensão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4111">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="2c3b9-4112">Você não pode usar essa sobrecarga de método para criar um tipo de vetor; Se `rank` for 1, essa sobrecarga de método retorna um tipo de matriz multidimensional que acaba tendo uma dimensão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4112">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="2c3b9-4113">Use o <xref:System.Type.MakeArrayType> sobrecarga de método para criar tipos de vetor.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4113">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4114">O exemplo de código a seguir cria a matriz, `ref` (`ByRef` no Visual Basic) e os tipos de ponteiro para a classe `Test`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4114">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="2c3b9-4115">
            <paramref name="rank" /> é inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4115">
              <paramref name="rank" /> is invalid.</span>
          </span>
          <span data-ttu-id="2c3b9-4116">Por exemplo, 0 ou negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4116">For example, 0 or negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-4117">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4117">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-4118">O tipo atual é <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4118">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4119">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4119">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4120">O tipo atual é um tipo <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4120">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="2c3b9-4121">Ou seja, <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4121">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4122">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4122">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4123">
            <paramref name="rank" /> é maior que 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4123">
              <paramref name="rank" /> is greater than 32.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="abstract member MakeByRefType : unit -&gt; Type&#xA;override this.MakeByRefType : unit -&gt; Type" Usage="type.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4124">Retorna um objeto <see cref="T:System.Type" /> que representa o tipo atual quando passado como um parâmetro <see langword="ref" /> (parâmetro <see langword="ByRef" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4124">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4125">Um objeto <see cref="T:System.Type" /> que representa o tipo atual quando passado como um parâmetro <see langword="ref" /> (parâmetro <see langword="ByRef" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4125">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4126">O <xref:System.Type.MakeByRefType%2A> método fornece uma maneira de gerar `ref` tipos (`ByRef` no Visual Basic) para o parâmetro de lista.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4126">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="2c3b9-4127">Usando a sintaxe da Microsoft intermediate language (MSIL), se o atual <xref:System.Type> objeto representa <xref:System.Int32>, esse método retorna um <xref:System.Type> objeto representando `Int32&`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4127">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4128">O exemplo de código a seguir cria a matriz, `ref` (`ByRef` no Visual Basic) e os tipos de ponteiro para a classe `Test`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4128">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-4129">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4129">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-4130">O tipo atual é <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4130">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4131">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4131">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4132">O tipo atual é um tipo <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4132">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="2c3b9-4133">Ou seja, <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4133">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberSignature Language="F#" Value="static member MakeGenericMethodParameter : int -&gt; Type" Usage="System.Type.MakeGenericMethodParameter position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member MakeGenericType : Type[] -&gt; Type&#xA;override this.MakeGenericType : Type[] -&gt; Type" Usage="type.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="2c3b9-4134">Uma matriz de tipos a serem substituídos pelos parâmetros de tipo do tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4134">An array of types to be substituted for the type parameters of the current generic type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4135">Substitui os elementos de uma matriz de tipos pelos parâmetros de tipo da definição de tipo genérico atual e retorna um objeto <see cref="T:System.Type" /> que representa o tipo construído resultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4135">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4136">Um <see cref="T:System.Type" /> representando o tipo construído formado substituindo os elementos do <paramref name="typeArguments" /> pelos parâmetros de tipo do tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4136">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4137">O <xref:System.Type.MakeGenericType%2A> método permite que você escreva código que atribui tipos específicos para os parâmetros de tipo de uma definição de tipo genérico, criando assim um <xref:System.Type> objeto que representa um tipo construído específico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4137">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="2c3b9-4138">Você pode usar isso <xref:System.Type> objeto para criar instâncias de tempo de execução do tipo construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4138">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="2c3b9-4139">Tipos construídos com <xref:System.Type.MakeGenericType%2A> podem ser abertos, ou seja, alguns dos argumentos de tipo podem ser parâmetros de tipo de circunscrição tipos ou métodos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4139">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="2c3b9-4140">Você pode usar esses tipos construídos abertos quando você emite assemblies dinâmicos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4140">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="2c3b9-4141">Por exemplo, considere as classes `Base` e `Derived` no código a seguir.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4141">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="2c3b9-4142">Para gerar `Derived` em um assembly dinâmico, é necessário construir seu tipo base.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4142">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="2c3b9-4143">Para fazer isso, chame o <xref:System.Type.MakeGenericType%2A> método em um <xref:System.Type> que representa a classe de objeto `Base`, usando os argumentos de tipo genérico <xref:System.Int32> e o parâmetro de tipo `V` de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4143">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="2c3b9-4144">Como tipos e parâmetros de tipo genérico são representados por <xref:System.Type> objetos, uma matriz que contém ambos pode ser passada para o <xref:System.Type.MakeGenericType%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4144">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-4145">Um tipo construído, como `Base<int, V>` é útil para emitir o código, mas você não pode chamar o <xref:System.Type.MakeGenericType%2A> método neste tipo porque ele não é uma definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4145">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="2c3b9-4146">Para criar um tipo construído fechado que pode ser instanciado, primeiro chame o <xref:System.Type.GetGenericTypeDefinition%2A> método para obter uma <xref:System.Type> do objeto que representa a definição de tipo genérico e, em seguida, chamar <xref:System.Type.MakeGenericType%2A> com os argumentos de tipo desejado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4146">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="2c3b9-4147">O <xref:System.Type> objeto retornado por <xref:System.Type.MakeGenericType%2A> é o mesmo que o <xref:System.Type> obtido chamando o <xref:System.Object.GetType%2A> método resultantes construído tipo, ou o <xref:System.Object.GetType%2A> construído de método de qualquer tipo que foi criado da mesma genérico usando os mesmos argumentos de tipo de definição de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4147">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c3b9-4148">Uma matriz de tipos genéricos não é propriamente um tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4148">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="2c3b9-4149">Você não pode chamar <xref:System.Type.MakeGenericType%2A> em uma matriz de tipo como `C<T>[]` (`Dim ac() As C(Of T)` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4149">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="2c3b9-4150">Para construir um tipo genérico fechado de `C<T>[]`, chame <xref:System.Type.GetElementType%2A> para obter a definição de tipo genérico `C<T>`; chamar <xref:System.Type.MakeGenericType%2A> na definição de tipo genérico para criar o tipo construído; e, finalmente, chame o <xref:System.Type.MakeArrayType%2A> método em o tipo construído para criar o tipo de matriz.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4150">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="2c3b9-4151">O mesmo é verdadeiro de tipos de ponteiro e `ref` tipos (`ByRef` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4151">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="2c3b9-4152">Para obter uma lista das condições invariáveis para termos usados na reflexão genérica, consulte os comentários da propriedade <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4152">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="2c3b9-4153">Tipos aninhados</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4153">Nested Types</span></span>  
 <span data-ttu-id="2c3b9-4154">Se um tipo genérico é definido usando c#, C++ ou Visual Basic, seus tipos aninhados são todos genéricos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4154">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="2c3b9-4155">Isso é verdadeiro mesmo se os tipos aninhados não tem nenhum parâmetro de tipo próprios, porque todos os três linguagens incluem os parâmetros de tipo de tipos de delimitadores nas listas de parâmetros de tipo de tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4155">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="2c3b9-4156">Considere as seguintes classes:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4156">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="2c3b9-4157">Lista de parâmetros de tipo da classe aninhada `Inner` tem dois parâmetros de tipo `T` e `U`, o primeiro deles é o parâmetro de tipo de sua classe delimitadora.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4157">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="2c3b9-4158">Da mesma forma, a lista de parâmetros de tipo da classe aninhada `Innermost1` tem três parâmetros de tipo `T`, `U`, e `V`, com `T` e `U` provenientes de suas classes de delimitadores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4158">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="2c3b9-4159">A classe aninhada `Innermost2` tem dois parâmetros de tipo `T` e `U`, que vêm de suas classes de delimitadores.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4159">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="2c3b9-4160">Se a lista de parâmetros do tipo delimitador tem mais de um parâmetro de tipo, todos os parâmetros de tipo na ordem são incluídos na lista de parâmetros de tipo do tipo aninhado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4160">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="2c3b9-4161">Para construir um tipo genérico com base na definição de tipo genérico para um tipo aninhado, chame o <xref:System.Type.MakeGenericType%2A> método com a matriz formado pela concatenação de matrizes de argumento de tipo de todos os tipos de delimitador, começando com o tipo genérico mais externo e terminando com o tipo de matriz de argumentos do tipo aninhado em si, se ele tem parâmetros de tipo próprios.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4161">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="2c3b9-4162">Para criar uma instância do `Innermost1`, chame o <xref:System.Type.MakeGenericType%2A> método com uma matriz que contém três tipos, a ser atribuído ao T, U e V. Para criar uma instância do `Innermost2`, chame o <xref:System.Type.MakeGenericType%2A> método com uma matriz que contém dois tipos, a ser atribuído ao T e U.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4162">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="2c3b9-4163">Os idiomas propagam os parâmetros de tipo de tipos de delimitadores dessa maneira para que você pode usar os parâmetros de tipo de um tipo de delimitador para definir os campos de tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4163">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="2c3b9-4164">Caso contrário, os parâmetros de tipo não seria no escopo em que os corpos dos tipos aninhados.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4164">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="2c3b9-4165">É possível definir tipos aninhados sem propagar os parâmetros de tipo de tipos de delimitadores, pela emissão do código em assemblies dinâmicos ou usando o [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4165">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="2c3b9-4166">Considere o seguinte código para o assembler MSIL:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4166">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="2c3b9-4167">Neste exemplo, não é possível definir um campo do tipo `T` ou `U` na classe `Innermost`, porque esses parâmetros de tipo não estão no escopo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4167">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="2c3b9-4168">O seguinte código de assembler define classes aninhadas que se comportam da forma que fariam se definida em C++, Visual Basic e c#:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4168">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="2c3b9-4169">Você pode usar o [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) para examinar as classes aninhadas definidas em linguagens de alto nível e observar esse esquema de nomenclatura.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4169">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4170">O exemplo a seguir usa o <xref:System.Type.MakeGenericType%2A> método para criar um tipo construído da definição de tipo genérico para o <xref:System.Collections.Generic.Dictionary%602> tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4170">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="2c3b9-4171">Representa o tipo construído uma <xref:System.Collections.Generic.Dictionary%602> de `Test` objetos com chaves de cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4171">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c3b9-4172">O tipo atual não representa uma definição de tipo genérica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4172">The current type does not represent a generic type definition.</span>
          </span>
          <span data-ttu-id="2c3b9-4173">Ou seja, <see cref="P:System.Type.IsGenericTypeDefinition" /> retorna <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4173">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-4174">
            <paramref name="typeArguments" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4174">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4175">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4175">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4176">Qualquer elemento de <paramref name="typeArguments" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4176">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-4177">O número de elementos em <paramref name="typeArguments" /> não é igual ao número de parâmetros de tipo na definição de tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4177">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span>
          </span>
          <span data-ttu-id="2c3b9-4178">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4178">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4179">Nenhum elemento do <paramref name="typeArguments" /> satisfaz as restrições especificadas para o parâmetro de tipo correspondente do tipo genérico atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4179">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span>
          </span>
          <span data-ttu-id="2c3b9-4180">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4180">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4181">
            <paramref name="typeArguments" /> contém um elemento que é um tipo de ponteiro (<see cref="P:System.Type.IsPointer" /> retorna <see langword="true" />), um tipo by-ref (<see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />) ou <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4181">
              <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-4182">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4182">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="2c3b9-4183">As classes derivadas devem fornecer uma implementação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4183">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="2c3b9-4184">Reflexão e tipos genéricos</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4184">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="2c3b9-4185">Como examinar tipos genéricos e criar instâncias deles com a reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4185">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="abstract member MakePointerType : unit -&gt; Type&#xA;override this.MakePointerType : unit -&gt; Type" Usage="type.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4186">Retorna um objeto <see cref="T:System.Type" /> que representa um ponteiro para o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4186">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4187">Um objeto <see cref="T:System.Type" /> que representa um ponteiro para o tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4187">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4188">O <xref:System.Type.MakePointerType%2A> método fornece uma maneira para gerar tipos de ponteiro para listas de parâmetros.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4188">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="2c3b9-4189">Usando a sintaxe da Microsoft intermediate language (MSIL), se o atual <xref:System.Type> objeto representa <xref:System.Int32>, esse método retorna um <xref:System.Type> objeto representando `Int32*`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4189">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4190">O exemplo de código a seguir cria a matriz, `ref` (`ByRef` no Visual Basic) e os tipos de ponteiro para a classe `Test`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4190">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-4191">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4191">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-4192">O tipo atual é <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4192">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4193">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4193">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4194">O tipo atual é um tipo <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4194">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="2c3b9-4195">Ou seja, <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4195">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Type.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4196">Obtém um valor <see cref="T:System.Reflection.MemberTypes" /> que indica que esse membro é um tipo ou um tipo aninhado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4196">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4197">Um valor <see cref="T:System.Reflection.MemberTypes" /> que indica que esse membro é um tipo ou um tipo aninhado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4197">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4198">Esta propriedade substitui <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4198">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2c3b9-4199">Portanto, quando você examinar um conjunto de <xref:System.Reflection.MemberInfo> objetos — por exemplo, a matriz retornada por <xref:System.Type.GetMembers%2A>— a <xref:System.Reflection.MemberInfo.MemberType%2A> propriedade retorna <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> quando um determinado membro é um tipo aninhado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4199">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="2c3b9-4200">Caso o <xref:System.Type> atual represente um tipo genérico construído, esta propriedade aplica-se à definição de tipo genérico a partir da qual o tipo foi construído.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4200">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="2c3b9-4201">Por exemplo, se o <xref:System.Type> atual representar `MyGenericType<int>` (`MyGenericType(Of Integer)` no Visual Basic), o valor dessa propriedade será determinado por `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4201">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="2c3b9-4202">Caso o <xref:System.Type> atual represente um parâmetro de tipo na definição de um tipo genérico ou um método genérico, esta propriedade sempre retorna <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4202">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4203">O seguinte exemplo de código mostra a `MemberType` campo como um parâmetro para o `GetMember` método:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4203">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberSignature Language="F#" Value=" staticval mutable Missing : obj" Usage="System.Type.Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4204">Representa um valor ausente nas informações <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4204">Represents a missing value in the <see cref="T:System.Type" /> information.</span>
          </span>
          <span data-ttu-id="2c3b9-4205">Este campo é somente leitura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4205">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4206">Use o `Missing` field para invocação por meio de reflexão para obter o valor padrão de um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4206">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="2c3b9-4207">Se o `Missing` campo é passado para um valor de parâmetro e não há nenhum valor padrão para esse parâmetro, um <xref:System.ArgumentException> é gerada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4207">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4208">O exemplo de código a seguir mostra o uso do `Missing` campo para invocar um método com argumentos padrão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4208">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="2c3b9-4209">Esse código gera a seguinte saída:</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4209">This code produces the following output:</span></span>  
  
 <span data-ttu-id="2c3b9-4210">um = 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4210">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="2c3b9-4211">um = 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4211">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="2c3b9-4212">um = 10 b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4212">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Type.Module" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4213">Obtém o módulo (a DLL) no qual o <see cref="T:System.Type" /> atual está definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4213">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4214">O módulo no qual o <see cref="T:System.Type" /> atual está definido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4214">The module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4215">Se o atual <xref:System.Type> representa um tipo genérico construído, essa propriedade retorna o módulo no qual a definição de tipo genérico foi definida.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4215">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="2c3b9-4216">Por exemplo, se você criar uma instância do `MyGenericStack<int>`, o <xref:System.Type.Module%2A> propriedade para o tipo construído retorna o módulo no qual `MyGenericStack<T>` é definido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4216">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="2c3b9-4217">Da mesma forma, se o atual <xref:System.Type> representa um parâmetro genérico `T`, essa propriedade retorna o assembly que contém o tipo genérico que define `T`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4217">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4218">Este exemplo a seguir demonstra um uso do <xref:System.Type.Namespace%2A> e `Module` propriedades e o <xref:System.Type.ToString%2A> método <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4218">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Type.Namespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4219">Obtém o namespace do <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4219">Gets the namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4220">O namespace do <see cref="T:System.Type" />; <see langword="null" /> se a instância atual não tiver nenhum namespace ou representar um parâmetro genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4220">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4221">Um namespace é uma lógica de tempo de design nomenclatura conveniência, usada principalmente para definir o escopo em um aplicativo e organizar as classes e outros tipos em uma única estrutura hierárquica.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4221">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="2c3b9-4222">Do ponto de vista do tempo de execução, não há nenhum namespace.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4222">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="2c3b9-4223">Se o atual <xref:System.Type> representa um tipo genérico construído, essa propriedade retorna o namespace que contém a definição de tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4223">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="2c3b9-4224">Da mesma forma, se o atual <xref:System.Type> representa um parâmetro genérico `T`, essa propriedade retorna o namespace que contém a definição de tipo genérico que define `T`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4224">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="2c3b9-4225">Se o atual <xref:System.Type> objeto representa um parâmetro genérico, essa propriedade retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4225">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4226">Este exemplo a seguir demonstra um uso do `Namespace` e <xref:System.Type.Module%2A> propriedades e o <xref:System.Type.ToString%2A> método <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4226">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-4227">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4227">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Type * Type -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="2c3b9-4228">O primeiro objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4228">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="2c3b9-4229">O segundo objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4229">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4230">Indica se dois objetos <see cref="T:System.Type" /> são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4230">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4231">
            <see langword="true" /> se <paramref name="left" /> for igual a <paramref name="right" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4231">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Type * Type -&gt; bool" Usage="System.Type.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="2c3b9-4232">O primeiro objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4232">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="2c3b9-4233">O segundo objeto a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4233">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4234">Indica se dois objetos <see cref="T:System.Type" /> não são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4234">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4235">
            <see langword="true" /> se <paramref name="left" /> não for igual a <paramref name="right" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4235">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4236">Obtém o objeto de classe que foi usado para obter esse membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4236">Gets the class object that was used to obtain this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4237">O objeto <see langword="Type" /> por meio do qual este objeto <see cref="T:System.Type" /> foi obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4237">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4238">Para <xref:System.Type> objetos, o valor dessa propriedade é sempre o mesmo que o valor da <xref:System.Type.DeclaringType%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4238">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4239">Este exemplo exibe o tipo refletido de uma classe aninhada.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4239">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyGetType : string * bool * bool -&gt; Type" Usage="System.Type.ReflectionOnlyGetType (typeName, throwIfNotFound, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="2c3b9-4240">O nome qualificado pelo assembly do <see cref="T:System.Type" /> a ser obtido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4240">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="throwIfNotFound">
          <span data-ttu-id="2c3b9-4241">
            <see langword="true" /> para gerar uma <see cref="T:System.TypeLoadException" /> se não for possível encontrar o tipo, <see langword="false" /> para retornar <see langword="null" /> se não for possível encontrar o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4241">
              <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span>
          </span>
          <span data-ttu-id="2c3b9-4242">A especificação de <see langword="false" /> também suprime algumas condições de exceção, mas não todas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4242">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="2c3b9-4243">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4243">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="2c3b9-4244">
            <see langword="true" /> para executar uma pesquisa por <c>typeName</c> sem diferenciar maiúsculas de minúsculas, <see langword="false" /> para realizar uma pesquisa por <c>typeName</c> diferenciando maiúsculas de minúsculas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4244">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>; <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4245">Obtém o <see cref="T:System.Type" /> com o nome especificado, especificando se deverá realizar uma pesquisa que diferencia maiúsculas de minúsculas e se deverá gerar uma exceção se o tipo não for encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4245">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span>
          </span>
          <span data-ttu-id="2c3b9-4246">O tipo é carregado para reflexão apenas, não para execução.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4246">The type is loaded for reflection only, not for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4247">O tipo com o nome especificado, se for encontrado; caso contrário, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4247">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4248">Caso o tipo não seja encontrado, o parâmetro <paramref name="throwIfNotFound" /> especifica se <see langword="null" /> é retornado ou uma exceção é lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4248">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="2c3b9-4249">Em alguns casos, uma exceção é lançada independentemente do valor de <paramref name="throwIfNotFound" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4249">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span>
          </span>
          <span data-ttu-id="2c3b9-4250">Consulte a seção Exceções.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4250">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4251">Se o assembly que contém o tipo já não estiver carregado no contexto somente reflexão, usando o <xref:System.Type.ReflectionOnlyGetType%2A> método é equivalente ao primeiro carregar o assembly para reflexão apenas, usando o <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> método e, em seguida, carregar o tipo chamando o um assembly <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4251">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="2c3b9-4252">Para obter informações sobre nomes de assembly qualificado, consulte o <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4252">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2c3b9-4253">Para obter mais detalhes sobre como especificar nomes de tipo, consulte o <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4253">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="2c3b9-4254">Se o assembly já foi carregado para execução, outra cópia é carregada no contexto somente reflexão.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4254">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="2c3b9-4255">O `throwIfNotFound` parâmetro especifica o que acontece quando o tipo não for encontrado e também suprime determinadas condições de exceção, conforme descrito na seção exceções.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4255">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="2c3b9-4256">Algumas exceções são geradas, independentemente do valor de `throwIfNotFound`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4256">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="2c3b9-4257">Por exemplo, se o assembly não for válido, uma <xref:System.BadImageFormatException> é gerada, mesmo que `throwIfNotFound` é `false`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4257">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="2c3b9-4258">Para obter mais informações sobre como usar o contexto de somente reflexão, consulte [como: carregar Assemblies no contexto somente reflexão](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4258">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c3b9-4259">
            <paramref name="typeName" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4259">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="2c3b9-4260">Um inicializador de classe é invocado e lança uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4260">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c3b9-4261">
            <paramref name="throwIfNotFound" /> é <see langword="true" /> e o tipo não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4261">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="2c3b9-4262">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4262">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4263">
            <paramref name="throwIfNotFound" /> é <see langword="true" /> e <paramref name="typeName" /> contém caracteres inválidos como, por exemplo, uma guia inserida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4263">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="2c3b9-4264">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4264">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4265">
            <paramref name="throwIfNotFound" /> é <see langword="true" /> e <paramref name="typeName" /> é uma cadeia de caracteres vazia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4265">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="2c3b9-4266">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4266">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4267">
            <paramref name="throwIfNotFound" /> é <see langword="true" /> e <paramref name="typeName" /> representa um tipo de matriz com um tamanho inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4267">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="2c3b9-4268">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4268">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4269">
            <paramref name="typeName" /> representa uma matriz de objetos <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4269">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c3b9-4270">
            <paramref name="typeName" /> não inclui o nome do assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4270">
              <paramref name="typeName" /> does not include the assembly name.</span>
          </span>
          <span data-ttu-id="2c3b9-4271">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4271">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4272">
            <paramref name="throwIfNotFound" /> é <see langword="true" /> e <paramref name="typeName" /> contém sintaxe inválida, por exemplo, "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4272">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="2c3b9-4273">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4273">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4274">
            <paramref name="typeName" /> representa um tipo genérico que tenha um tipo de ponteiro, um tipo <see langword="ByRef" /> ou <see cref="T:System.Void" /> como um dos argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4274">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-4275">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4275">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4276">
            <paramref name="typeName" /> representa um tipo genérico que tem um número incorreto de argumentos de tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4276">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="2c3b9-4277">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4277">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4278">
            <paramref name="typeName" /> representa um tipo genérico, e um dos argumentos de tipo não atende às restrições do parâmetro de tipo correspondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4278">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2c3b9-4279">
            <paramref name="throwIfNotFound" /> é <see langword="true" /> e o assembly ou uma de suas dependências não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4279">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="2c3b9-4280">O assembly ou uma de suas dependências foi encontrado, mas não foi possível carregá-lo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4280">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="2c3b9-4281">O assembly ou uma de suas dependências não é válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4281">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="2c3b9-4282">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4282">-or-</span>
          </span>
          <span data-ttu-id="2c3b9-4283">O assembly foi compilado com uma versão posterior do Common Language Runtime do que a versão carregada atualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4283">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="2c3b9-4284">Especificando nomes de tipo totalmente qualificados</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4284">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md">
          <span data-ttu-id="2c3b9-4285">Como carregar assemblies no contexto de somente reflexão</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4285">How to: Load Assemblies into the Reflection-Only Context</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StructLayoutAttribute : System.Runtime.InteropServices.StructLayoutAttribute" Usage="System.Type.StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4286">Obtém um <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> que descreve o layout do tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4286">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4287">Obtém um <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> que descreve os recursos de layout bruto do tipo atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4287">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4288"><xref:System.Runtime.InteropServices.StructLayoutAttribute> não é retornado pelo <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4288"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="2c3b9-4289">Em vez disso, use essa propriedade para obtê-lo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4289">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4290">O exemplo de código a seguir primeiro define uma classe, uma estrutura e uma estrutura com atributos de layout especial (as estruturas são aninhadas dentro da classe).</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4290">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="2c3b9-4291">O exemplo usa o <xref:System.Type.StructLayoutAttribute%2A> propriedade para obter um <xref:System.Runtime.InteropServices.StructLayoutAttribute> para cada tipo e exibe as propriedades dos atributos.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4291">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-4292">O método chamado não é suportado na classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4292">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="2c3b9-4293">Reservado para uso futuro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4293">Reserved for future use.</span>
          </span>
          <span data-ttu-id="2c3b9-4294">Deve ser IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4294">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="2c3b9-4295">Matriz passada de nomes a serem mapeados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4295">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="2c3b9-4296">Contagem dos nomes a serem mapeados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4296">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2c3b9-4297">O contexto de localidade no qual interpretar os nomes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4297">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="2c3b9-4298">Matriz alocada pelo chamador que recebe os IDs correspondentes aos nomes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4298">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4299">Mapeia um conjunto de nomes para um conjunto correspondente de identificadores de expedição.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4299">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4300">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4300">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c3b9-4301">Para obter mais informações sobre `IDispatch::GetIDsOfNames`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4301">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c3b9-4302">Não há suporte para acesso com associação tardia usando a interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4302">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="2c3b9-4303">As informações de tipo a serem retornadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4303">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2c3b9-4304">O identificador de localidade das informações do tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4304">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="2c3b9-4305">Um ponteiro para o objeto de informações de tipo solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4305">A pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4306">Recupera as informações do tipo de um objeto, que podem ser usadas para obter informações de tipo para uma interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4306">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4307">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4307">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c3b9-4308">Para obter mais informações sobre `IDispatch::GetTypeInfo`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4308">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c3b9-4309">Não há suporte para acesso com associação tardia usando a interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4309">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="2c3b9-4310">Aponta para um local que recebe o número de interfaces de informações de tipo fornecido pelo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4310">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4311">Retorna o número de interfaces de informações do tipo que um objeto fornece (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4311">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4312">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4312">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c3b9-4313">Para obter mais informações sobre `IDispatch::GetTypeInfoCount`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4313">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c3b9-4314">Não há suporte para acesso com associação tardia usando a interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4314">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="2c3b9-4315">Identifica o membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4315">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="2c3b9-4316">Reservado para uso futuro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4316">Reserved for future use.</span>
          </span>
          <span data-ttu-id="2c3b9-4317">Deve ser IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4317">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2c3b9-4318">O contexto de localidade no qual interpretar argumentos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4318">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="2c3b9-4319">Sinalizadores que descrevem o contexto da chamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4319">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="2c3b9-4320">Ponteiro para uma estrutura contendo uma matriz de argumentos, uma matriz de DISPIDs de argumento para argumentos nomeados e contagens para o número de elementos nas matrizes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4320">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="2c3b9-4321">Ponteiro para o local onde o resultado deve ser armazenado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4321">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="2c3b9-4322">Ponteiro para uma estrutura que contém informações de exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4322">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="2c3b9-4323">O índice do primeiro argumento que tem um erro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4323">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c3b9-4324">Fornece acesso a propriedades e métodos expostos por um objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4324">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4325">Este método é para acesso a classes gerenciadas de código não gerenciado e não deve ser chamado em código gerenciado.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4325">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c3b9-4326">Para obter mais informações sobre `IDispatch::Invoke`, consulte a Biblioteca MSDN.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4326">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c3b9-4327">Não há suporte para acesso com associação tardia usando a interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4327">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="type.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4328">Retorna uma <see langword="String" /> que representa o nome da <see langword="Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4328">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c3b9-4329">Uma <see cref="T:System.String" /> que representa o nome da <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4329">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4330">Esse método retorna o nome para todos os tipos primitivos e totalmente qualificado namespace common language runtime.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4330">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="2c3b9-4331">Por exemplo, a c# instrução, `(long)0.Type().ToString()` retorna "System.Int64" em vez de simplesmente "Int64".</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4331">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="2c3b9-4332">Se o atual <xref:System.Type> representa um tipo genérico, o tipo e argumentos de tipo são qualificados por namespace e pelo tipo aninhado, mas não por assembly.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4332">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="2c3b9-4333">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, este método retorna o nome não qualificado do parâmetro de tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4333">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4334">Este exemplo a seguir demonstra um uso do <xref:System.Type.Namespace%2A> e <xref:System.Type.Module%2A> propriedades e o `ToString` método <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4334">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="2c3b9-4335">O exemplo a seguir compara as cadeias de caracteres retornadas pela <xref:System.Type.ToString%2A> método e o `Name`, <xref:System.Type.FullName%2A>, e <xref:System.Type.AssemblyQualifiedName%2A> propriedades.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4335">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4336">Obtém o identificador do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4336">Gets the handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4337">O identificador do <see cref="T:System.Type" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4337">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4338">`TypeHandle` encapsula um ponteiro para uma estrutura de dados interna que representa o tipo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4338">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="2c3b9-4339">Esse identificador é exclusivo durante o tempo de vida do processo.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4339">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="2c3b9-4340">O identificador é válido somente no domínio do aplicativo no qual ele foi obtido.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4340">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c3b9-4341">O exemplo a seguir retorna o identificador do tipo correspondente e transmite o identificador para um método que obtém o tipo do identificador e o exibe.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4341">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c3b9-4342">No momento, o .NET Compact Framework não dá suporte a essa propriedade.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4342">The .NET Compact Framework does not currently support this property.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4343">Obtém o inicializador para o tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4343">Gets the initializer for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4344">Um objeto que contém o nome do construtor da classe para o <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4344">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c3b9-4345">Inicializadores de classe também estão disponíveis por meio de <xref:System.Type.FindMembers%2A> método, ou por meio de sobrecargas do <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, e <xref:System.Type.GetConstructors%2A> métodos que usam <xref:System.Reflection.BindingFlags> como um parâmetro.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4345">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="2c3b9-4346">Se o atual <xref:System.Type> representa um parâmetro de tipo na definição de um tipo genérico ou método genérico, essa propriedade retornará `null`.</span><span class="sxs-lookup"><span data-stu-id="2c3b9-4346">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c3b9-4347">Indica o tipo fornecido pelo Common Language Runtime que representa esse tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4347">Indicates the type provided by the common language runtime that represents this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c3b9-4348">O tipo de sistema subjacente para o <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c3b9-4348">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>