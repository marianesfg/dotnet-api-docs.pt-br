<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e93909d2c823c996b099c481764f4950992421a9" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48646360" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8de53-101">Representa um delegado, que é uma estrutura de dados que se refere a um método estático ou a uma instância da classe e um método de instância dessa classe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8de53-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-102">O <xref:System.Delegate> é a classe base para tipos de delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="8de53-103">No entanto, somente o sistema e os compiladores podem derivar explicitamente o <xref:System.Delegate> classe ou a partir de <xref:System.MulticastDelegate> classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="8de53-104">Também não é permitido para derivar um novo tipo de um tipo de delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="8de53-105">O <xref:System.Delegate> classe não é considerado um tipo de delegado; é uma classe usada para derivar tipos de delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="8de53-106">Implementar a maioria das linguagens uma `delegate` palavra-chave e compiladores para essas linguagens são capazes de derivar o <xref:System.MulticastDelegate> classe; portanto, os usuários devem usar o `delegate` fornecido pela linguagem de palavra-chave.</span><span class="sxs-lookup"><span data-stu-id="8de53-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-107">O common language runtime fornece um `Invoke` método para cada tipo de delegado, com a mesma assinatura que o delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="8de53-108">Não é necessário chamar esse método explicitamente do c#, Visual Basic ou Visual C++, pois os compiladores de chamá-lo automaticamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="8de53-109">O `Invoke` método é útil na [reflexão](~/docs/framework/reflection-and-codedom/reflection.md) quando você deseja localizar a assinatura do tipo delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="8de53-110">O common language runtime fornece a cada tipo de delegado com `BeginInvoke` e `EndInvoke` métodos, para permitir a invocação assíncrona do delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="8de53-111">Para obter mais informações sobre esses métodos, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="8de53-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="8de53-112">A declaração de um tipo delegado estabelece um contrato que especifica a assinatura de um ou mais métodos.</span><span class="sxs-lookup"><span data-stu-id="8de53-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="8de53-113">Um delegado é uma instância de um tipo de delegado que possui referências a:</span><span class="sxs-lookup"><span data-stu-id="8de53-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="8de53-114">Um método de instância de um tipo e um objeto de destino pode ser atribuído a esse tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="8de53-115">Um método de instância de um tipo, com o oculto `this` parâmetro exposto na lista de parâmetros formais.</span><span class="sxs-lookup"><span data-stu-id="8de53-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="8de53-116">O delegado deve ser um representante de instância aberta.</span><span class="sxs-lookup"><span data-stu-id="8de53-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="8de53-117">Um método estático.</span><span class="sxs-lookup"><span data-stu-id="8de53-117">A static method.</span></span>  
  
-   <span data-ttu-id="8de53-118">Um método estático e um objeto de destino pode ser atribuído ao primeiro parâmetro do método.</span><span class="sxs-lookup"><span data-stu-id="8de53-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="8de53-119">O delegado deve ser fechado ao longo de seu primeiro argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="8de53-120">Para obter mais informações sobre associação de delegados, consulte o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8de53-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-121">Nas versões do .NET Framework 1.0 e 1.1, um delegado pode representar um método somente se a assinatura do método corresponde exatamente à assinatura especificada pelo tipo de delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="8de53-122">Assim, somente os primeiros e terceiro marcadores na lista acima têm suporte e o primeiro marcador requer uma correspondência de tipo exato.</span><span class="sxs-lookup"><span data-stu-id="8de53-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="8de53-123">Quando um delegado representa um método de instância fechado ao longo de seu primeiro argumento (o caso mais comum), o delegado armazena uma referência ao ponto de entrada do método e uma referência a um objeto, chamado destino, que é de um tipo atribuível ao tipo de definido o método.</span><span class="sxs-lookup"><span data-stu-id="8de53-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="8de53-124">Quando um delegado representa um método de instância aberto, ele armazena uma referência ao ponto de entrada do método.</span><span class="sxs-lookup"><span data-stu-id="8de53-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="8de53-125">A assinatura do delegado deve incluir o oculto `this` parâmetro na lista de parâmetros formais; nesse caso, o delegado não tem uma referência a um objeto de destino e um objeto de destino deve ser fornecido quando o delegado é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="8de53-126">Quando um delegado representa um método estático, o delegado armazena uma referência ao ponto de entrada do método.</span><span class="sxs-lookup"><span data-stu-id="8de53-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="8de53-127">Quando um delegado representa um método estático fechado ao longo de seu primeiro argumento, o delegado armazena uma referência ao ponto de entrada do método e uma referência a um objeto de destino pode ser atribuído para o tipo do primeiro argumento de um método.</span><span class="sxs-lookup"><span data-stu-id="8de53-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="8de53-128">Quando o delegado é invocado, o primeiro argumento do método estático recebe o objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="8de53-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="8de53-129">A lista de invocação de um delegado é um conjunto ordenado de delegados em que cada elemento da lista invoca exatamente um dos métodos representados pelo delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="8de53-130">Uma lista de invocação pode conter métodos duplicados.</span><span class="sxs-lookup"><span data-stu-id="8de53-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="8de53-131">Durante uma invocação, os métodos são chamados na ordem em que aparecem na lista de invocação.</span><span class="sxs-lookup"><span data-stu-id="8de53-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="8de53-132">Um delegado tenta chamar cada método em sua lista de invocação; as duplicatas são invocadas depois de cada vez que eles aparecem na lista de invocação.</span><span class="sxs-lookup"><span data-stu-id="8de53-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="8de53-133">Os delegados são imutáveis; Depois de criado, não altera a lista de invocação de um delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="8de53-134">Delegados são chamados como multicast, ou podem ser combinadas, pois pode invocar um ou mais métodos de um delegado e pode ser usado em combinação de operações.</span><span class="sxs-lookup"><span data-stu-id="8de53-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="8de53-135">Combinação de operações, como <xref:System.Delegate.Combine%2A> e <xref:System.Delegate.Remove%2A>, não alteram os delegados existentes.</span><span class="sxs-lookup"><span data-stu-id="8de53-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="8de53-136">Em vez disso, essa operação retorna um novo delegado que contém os resultados da operação, um delegado inalterado, ou `null`.</span><span class="sxs-lookup"><span data-stu-id="8de53-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="8de53-137">Retorna uma operação de combinação `null` quando o resultado da operação é um delegado que não faz referência a pelo menos um método.</span><span class="sxs-lookup"><span data-stu-id="8de53-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="8de53-138">Uma operação de combinação retorna um delegado inalterado quando a operação solicitada não tem nenhum efeito.</span><span class="sxs-lookup"><span data-stu-id="8de53-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-139">Os gerenciados usam linguagens a <xref:System.Delegate.Combine%2A> e <xref:System.Delegate.Remove%2A> métodos para implementar operações de delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="8de53-140">Os exemplos incluem o `AddHandler` e `RemoveHandler` instruções no Visual Basic e os operadores + = e -= no representante de tipos em c#.</span><span class="sxs-lookup"><span data-stu-id="8de53-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="8de53-141">Começando com o [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], tipos de delegado genérico podem ter parâmetros de tipo variantes.</span><span class="sxs-lookup"><span data-stu-id="8de53-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="8de53-142">Parâmetros de tipo Contravariantes podem ser usados como tipos de parâmetro do delegado e um parâmetro de tipo covariante pode ser usado como o tipo de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="8de53-143">Esse recurso permite que o delegado genérico tipos construídos da mesma definição de tipo genérico para ser compatíveis com a atribuição se seus argumentos de tipo são tipos de referência com uma relação de herança, conforme explicado em [covariância e A contravariância](~/docs/standard/generics/covariance-and-contravariance.md).</span><span class="sxs-lookup"><span data-stu-id="8de53-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-144">Delegados genéricos que são compatíveis com a atribuição devido à variação não são necessariamente podem ser combinadas.</span><span class="sxs-lookup"><span data-stu-id="8de53-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="8de53-145">Para ser combináveis, os tipos devem corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="8de53-146">Por exemplo, suponha que uma classe denominada `Derived` é derivado de uma classe chamada `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="8de53-147">Um delegado do tipo `Action<Base>` (`Action(Of Base)` no Visual Basic) pode ser atribuído a uma variável do tipo `Action<Derived>`, mas os dois delegados não podem ser combinados porque os tipos não correspondem exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="8de53-148">Se um método invocado gera uma exceção, o método interromperá a execução, a exceção é passada para o chamador do delegado e métodos restantes na lista de invocação não são invocados.</span><span class="sxs-lookup"><span data-stu-id="8de53-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="8de53-149">Capturar a exceção no chamador não altera esse comportamento.</span><span class="sxs-lookup"><span data-stu-id="8de53-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="8de53-150">Quando a assinatura dos métodos invocados por um delegado inclui um valor de retorno, o delegado retorna o valor retornado do último elemento na lista de invocação.</span><span class="sxs-lookup"><span data-stu-id="8de53-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="8de53-151">Quando a assinatura inclui um parâmetro que é passado por referência, o valor final do parâmetro é o resultado de cada método na lista de invocação, executar em sequência e atualizando o valor do parâmetro.</span><span class="sxs-lookup"><span data-stu-id="8de53-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="8de53-152">O equivalente mais próximo de um delegado em C ou C++ é um ponteiro de função.</span><span class="sxs-lookup"><span data-stu-id="8de53-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="8de53-153">Um delegado pode representar um método estático ou um método de instância.</span><span class="sxs-lookup"><span data-stu-id="8de53-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="8de53-154">Quando o delegado representa um método de instância, o delegado armazena não apenas uma referência ao ponto de entrada do método, mas também uma referência para a instância da classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="8de53-155">Ao contrário dos ponteiros de função, delegados são orientada a objeto e fortemente tipados.</span><span class="sxs-lookup"><span data-stu-id="8de53-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8de53-156">O exemplo a seguir mostra como definir um representante chamado `myMethodDelegate`.</span><span class="sxs-lookup"><span data-stu-id="8de53-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="8de53-157">São criadas instâncias desse delegado para um método de instância e um método estático do aninhada `mySampleClass` classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="8de53-158">O delegado para o método de instância requer uma instância de `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="8de53-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="8de53-159">O `mySampleClass` instância é salvo em uma variável chamada `mySC`.</span><span class="sxs-lookup"><span data-stu-id="8de53-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
    <related type="Article" href="http://msdn.microsoft.com/library/41972034-92ed-450a-9664-ab93fcc6f1fb">
      <span data-ttu-id="8de53-160">Chamando métodos síncronos de forma assíncrona</span>
      <span class="sxs-lookup">
        <span data-stu-id="8de53-160">Calling Synchronous Methods Asynchronously</span>
      </span>
    </related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">
      <span data-ttu-id="8de53-161">Delegados (Guia de Programação em C#)</span>
      <span class="sxs-lookup">
        <span data-stu-id="8de53-161">Delegates (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">
      <span data-ttu-id="8de53-162">Delegados (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="8de53-162">Delegates (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/1cdf3420-89c1-47c0-b796-aa984020e0f8">
      <span data-ttu-id="8de53-163">Como definir e usar delegados (C++/CLI)</span>
      <span class="sxs-lookup">
        <span data-stu-id="8de53-163">How to: Define and Use Delegates (C++/CLI)</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">
      <span data-ttu-id="8de53-164">Manipulando e acionando eventos</span>
      <span class="sxs-lookup">
        <span data-stu-id="8de53-164">Handling and Raising Events</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8de53-165">Inicializa um novo delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-165">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8de53-166">A instância da classe na qual o delegado invoca <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-166">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-167">O nome do método de instância que o delegado representa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-167">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-168">Inicializa um delegado que invoca o método de instância especificado na instância de classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-168">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-169">Este construtor não pode ser usado no código do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="8de53-169">This constructor cannot be used in application code.</span></span> <span data-ttu-id="8de53-170">Para criar um delegado, especificando o nome de um método de instância, use uma sobrecarga da <xref:System.Delegate.CreateDelegate%2A> método que especifica um nome de método e um objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="8de53-170">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="8de53-171">Por exemplo, o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> sobrecarga do método cria um delegado para um método de instância com um nome especificado.</span><span class="sxs-lookup"><span data-stu-id="8de53-171">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="8de53-172">Este construtor cria delegados por exemplo apenas métodos.</span><span class="sxs-lookup"><span data-stu-id="8de53-172">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="8de53-173">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-173">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-174">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-174">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-175">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-175">-or-</span>
          </span>
          <span data-ttu-id="8de53-176">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-176">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-177">Ocorreu um erro de associação ao método de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-177">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-178">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-178">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-179">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-179">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8de53-180">O <see cref="T:System.Type" /> que representa a classe que define <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-180">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-181">O nome do método estático que o delegado representa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-181">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-182">Inicializa um delegado que invoca o método estático especificado da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-182">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-183">Este construtor não pode ser usado no código do aplicativo.</span><span class="sxs-lookup"><span data-stu-id="8de53-183">This constructor cannot be used in application code.</span></span> <span data-ttu-id="8de53-184">Para criar um delegado, especificando o nome de um método estático, use uma sobrecarga da <xref:System.Delegate.CreateDelegate%2A> método que especifica um nome de método, mas não especifica um objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="8de53-184">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="8de53-185">Por exemplo, o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> sobrecarga do método cria um delegado de estático para um método com um nome especificado.</span><span class="sxs-lookup"><span data-stu-id="8de53-185">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="8de53-186">Este construtor cria delegados para apenas métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8de53-186">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="8de53-187">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-187">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-188">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-188">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-189">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-189">-or-</span>
          </span>
          <span data-ttu-id="8de53-190">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-190">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-191">
            <paramref name="target" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-191">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-192">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-192">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-193">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-193">-or-</span>
          </span>
          <span data-ttu-id="8de53-194">
            <paramref name="target" /> representa um tipo genérico aberto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-194">
              <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-195">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-195">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-196">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-196">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8de53-197">Cria uma cópia superficial do delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-197">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-198">Uma cópia superficial do delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-198">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-199">O clone tem o mesmo <xref:System.Type>, lista de destino, o método e a invocação do representante original.</span><span class="sxs-lookup"><span data-stu-id="8de53-199">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="8de53-200">Uma cópia superficial cria uma nova instância do mesmo tipo que o objeto original e, em seguida, copia os campos não estáticos do objeto original.</span><span class="sxs-lookup"><span data-stu-id="8de53-200">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="8de53-201">Se o campo é um tipo de valor, uma cópia de bit por bit do campo será executada.</span><span class="sxs-lookup"><span data-stu-id="8de53-201">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="8de53-202">Se o campo é um tipo de referência, a referência será copiada, mas o objeto referenciado é não; Portanto, a referência no objeto original e a referência do clone apontam para o mesmo objeto.</span><span class="sxs-lookup"><span data-stu-id="8de53-202">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="8de53-203">Em contraste, uma cópia em profundidade de um objeto duplica tudo direta ou indiretamente referenciado pelos campos no objeto.</span><span class="sxs-lookup"><span data-stu-id="8de53-203">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-204">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-204">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-205">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-205">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8de53-206">Concatena as listas de invocação dos delegados (combináveis) multicast especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-206">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="8de53-207">A matriz de delegados a ser combinada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-207">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-208">Concatena as listas de invocação de uma matriz de delegados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-208">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-209">Um novo delegado com uma lista de invocação que concatena as listas de invocação de delegados na matriz de <paramref name="delegates" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-209">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="8de53-210">Retornará <see langword="null" /> se <paramref name="delegates" /> for <see langword="null" />, se <paramref name="delegates" /> contiver zero elementos ou se cada entrada em <paramref name="delegates" /> for <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-210">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-211">Se o `delegates` matriz contém entradas que são `null`, essas entradas são ignoradas.</span><span class="sxs-lookup"><span data-stu-id="8de53-211">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="8de53-212">A lista de invocação pode conter entradas duplicadas; ou seja, as entradas que se referem ao mesmo método no mesmo objeto.</span><span class="sxs-lookup"><span data-stu-id="8de53-212">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-213">Delegados genéricos que são compatíveis com a atribuição devido à variação não são necessariamente podem ser combinadas.</span><span class="sxs-lookup"><span data-stu-id="8de53-213">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="8de53-214">Para ser combináveis, os tipos devem corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-214">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="8de53-215">Por exemplo, suponha que uma classe denominada `Derived` é derivado de uma classe chamada `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-215">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="8de53-216">Um delegado do tipo `Action<Base>` (`Action(Of Base)` no Visual Basic) pode ser atribuído a uma variável do tipo `Action<Derived>`, conforme explicado nas [covariância e contravariância](~/docs/standard/generics/covariance-and-contravariance.md), mas os dois delegados não podem ser combinados, porque os tipos de fazer não corresponde exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-216">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="8de53-217"><xref:System.Delegate.Combine%2A> é útil para a criação de manipuladores de eventos que ocorre um evento de tempo de vários métodos de chamada.</span><span class="sxs-lookup"><span data-stu-id="8de53-217"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-218">Nem todas as entradas não nulas em <paramref name="delegates" /> são instâncias do mesmo tipo de delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-218">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-219">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-219">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-220">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-220">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="8de53-221">O delegado cuja lista de invocação vem em primeiro lugar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-221">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="8de53-222">O delegado cuja lista de invocação vem em último lugar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-222">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-223">Concatena as listas de invocação de dois representantes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-223">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-224">Um novo delegado com uma lista de invocação que concatena as listas de invocação de <paramref name="a" /> e <paramref name="b" /> nessa ordem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-224">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="8de53-225">Retorna <paramref name="a" /> se <paramref name="b" /> for <see langword="null" />, retorna <paramref name="b" /> se <paramref name="a" /> for uma referência nula e retorna uma referência nula se <paramref name="a" /> e <paramref name="b" /> forem referências nulas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-225">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-226">A lista de invocação pode conter entradas duplicadas; ou seja, as entradas que se referem ao mesmo método no mesmo objeto.</span><span class="sxs-lookup"><span data-stu-id="8de53-226">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-227">Delegados genéricos que são compatíveis com a atribuição devido à variação não são necessariamente podem ser combinadas.</span><span class="sxs-lookup"><span data-stu-id="8de53-227">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="8de53-228">Para ser combináveis, os tipos devem corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-228">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="8de53-229">Por exemplo, suponha que uma classe denominada `Derived` é derivado de uma classe chamada `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-229">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="8de53-230">Um delegado do tipo `Action<Base>` (`Action(Of Base)` no Visual Basic) pode ser atribuído a uma variável do tipo `Action<Derived>`, conforme explicado nas [covariância e contravariância](~/docs/standard/generics/covariance-and-contravariance.md), mas os dois delegados não podem ser combinados, porque os tipos de fazer não corresponde exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-230">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="8de53-231"><xref:System.Delegate.Combine%2A> é útil para a criação de manipuladores de eventos que ocorre um evento de tempo de vários métodos de chamada.</span><span class="sxs-lookup"><span data-stu-id="8de53-231"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-232">
            <paramref name="a" /> e <paramref name="b" /> não são <see langword="null" />, enquanto <paramref name="a" /> e <paramref name="b" /> não são instâncias do mesmo tipo de delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-232">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-233">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-233">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-234">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-234">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="8de53-235">O delegado multicast (combinável) cuja lista de invocação acrescentar ao final da lista de invocação do delegado multicast atual (combinável).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-235">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-236">Concatena as listas de invocação do delegado (combinável) multicast especificado e do delegado (combinável) multicast atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-236">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-237">Um novo delegado (combinável) multicast com uma lista de invocação que concatena a lista de invocação do delegado (combinável) multicast atual e a lista de invocação de <paramref name="d" /> ou o delegado (combinável) multicast se <paramref name="d" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-237">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-238">Esse método se aplica somente se o delegado atual é difundida por multicast (Combinável).</span><span class="sxs-lookup"><span data-stu-id="8de53-238">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="8de53-239">A implementação atual simplesmente gera uma <xref:System.MulticastNotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="8de53-239">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="8de53-240">A lista de invocação pode conter entradas duplicadas; ou seja, as entradas que se referem ao mesmo método no mesmo objeto.</span><span class="sxs-lookup"><span data-stu-id="8de53-240">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="8de53-241">Sempre lançada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-241">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-242">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-242">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-243">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-243">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8de53-244">Cria um delegado do tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-244">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-245">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-245">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-246">O <see cref="T:System.Reflection.MethodInfo" /> que descreve o método estático ou de instância que o representante deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-246">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="8de53-247">Há suporte apenas para métodos estáticos no .NET Framework versão 1.0 e 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-247">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-248">Cria um delegado do tipo especificado para representar o método estático especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-248">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-249">Um delegado do tipo especificado para representar o método estático especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-249">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-250">Na versão 1.0 e 1.1 do .NET Framework, essa sobrecarga de método cria delegados para apenas métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8de53-250">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="8de53-251">No .NET Framework versão 2.0, essa sobrecarga de método também pode criar instância aberta delegados de método; ou seja, delegados que fornecem explicitamente o primeiro argumento oculto de métodos de instância.</span><span class="sxs-lookup"><span data-stu-id="8de53-251">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="8de53-252">Para obter uma explicação detalhada, consulte o mais geral <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> sobrecarga de método, que permite que você criar todas as combinações de delegados abertos ou fechados para métodos estáticos ou de instância e, opcionalmente, para especificar um primeiro argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-252">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-253">Essa sobrecarga de método deve ser usada quando o delegado não é fechado ao longo de seu primeiro argumento, porque ele é um pouco mais rápido, nesse caso.</span><span class="sxs-lookup"><span data-stu-id="8de53-253">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="8de53-254">Essa sobrecarga de método é equivalente a chamar o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga de método e especificando `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8de53-254">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-255">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-255">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-256">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-256">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-257">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-257">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8de53-258">Tipos de parâmetro compatíveis e tipo de retorno</span><span class="sxs-lookup"><span data-stu-id="8de53-258">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8de53-259">No .NET Framework versão 2.0, os tipos de parâmetro e o tipo de retorno de um delegado que foi criado usando essa sobrecarga de método devem ser compatíveis com os tipos de parâmetro e o tipo de retorno do método que o delegado representa; os tipos não precisam corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-259">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="8de53-260">Isso representa um relaxamento do comportamento de associação no .NET Framework versão 1.0 e 1.1, em que os tipos devem corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-260">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="8de53-261">Um parâmetro de um delegado será compatível com o parâmetro correspondente de um método se o tipo do parâmetro de delegado for mais restritivo do que o tipo do parâmetro de método, porque isso garante que um argumento passado para o delegado possa ser passado com segurança para o método.</span><span class="sxs-lookup"><span data-stu-id="8de53-261">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8de53-262">Da mesma forma, o tipo de retorno de um delegado será compatível com o tipo de retorno de um método se o tipo de retorno do método for mais restritivo do que o tipo de retorno do delegado, porque isso garante que o valor retornado do método possa ser convertido com segurança para o tipo retorno do delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-262">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-263">Por exemplo, um delegado com um parâmetro do tipo <xref:System.Collections.Hashtable> e um tipo de retorno <xref:System.Object> pode representar um método com um parâmetro do tipo <xref:System.Object> e um valor de retorno do tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8de53-263">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8de53-264">Esta seção contém dois exemplos de código.</span><span class="sxs-lookup"><span data-stu-id="8de53-264">This section contains two code examples.</span></span> <span data-ttu-id="8de53-265">O primeiro exemplo demonstra os dois tipos de delegados que podem ser criados com essa sobrecarga de método: Abra um método de instância e ao longo de um método estático.</span><span class="sxs-lookup"><span data-stu-id="8de53-265">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="8de53-266">O segundo exemplo de código demonstra tipos de parâmetro correspondentes e tipos de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-266">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8de53-267">**Exemplo 1**</span><span class="sxs-lookup"><span data-stu-id="8de53-267">**Example 1**</span></span>  
  
 <span data-ttu-id="8de53-268">O exemplo de código a seguir demonstra duas maneiras de um delegado pode ser criado usando essa sobrecarga da <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8de53-268">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-269">Há duas sobrecargas do <xref:System.Delegate.CreateDelegate%2A> método que especifica um <xref:System.Reflection.MethodInfo> , mas não é um primeiro argumento; sua funcionalidade é a mesma, exceto que um permite que você especifique se deve ser lançado na falha de associação e a outra lançar sempre.</span><span class="sxs-lookup"><span data-stu-id="8de53-269">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8de53-270">Este exemplo de código usa ambas as sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="8de53-270">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8de53-271">O exemplo declara uma classe `C` com um método estático `M2` e um método de instância `M1`, e dois tipos de delegado: `D1` leva a uma instância do `C` e uma cadeia de caracteres, e `D2` usa uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="8de53-271">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="8de53-272">Uma segunda classe chamada `Example` contém o código que cria os representantes.</span><span class="sxs-lookup"><span data-stu-id="8de53-272">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8de53-273">Um representante de tipo `D1`, representando um método de instância aberto, é criado para o método de instância `M1`.</span><span class="sxs-lookup"><span data-stu-id="8de53-273">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8de53-274">Uma instância deve ser passada quando o representante é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-274">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-275">Um representante de tipo `D2`, representando um método estático aberto, é criado para o método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="8de53-275">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8de53-276">**Exemplo 2**</span><span class="sxs-lookup"><span data-stu-id="8de53-276">**Example 2**</span></span>  
  
 <span data-ttu-id="8de53-277">O exemplo de código a seguir demonstra a compatibilidade dos tipos de parâmetro e de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-277">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="8de53-278">O exemplo de código define uma classe base chamada `Base` e uma classe chamada `Derived` derivada de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-278">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8de53-279">A classe derivada tem um método `static` (`Shared` no Visual Basic) chamado `MyMethod` com um parâmetro do tipo `Base` e um retorno do tipo de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8de53-279">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8de53-280">O exemplo de código também define um representante chamado `Example` que tem um parâmetro do tipo `Derived` e um tipo de retorno de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-280">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8de53-281">O exemplo de código demonstra que o representante chamado `Example` pode ser usado para representar o método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-281">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8de53-282">O método pode ser associado ao representante porque:</span><span class="sxs-lookup"><span data-stu-id="8de53-282">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8de53-283">O tipo de parâmetro do representante (`Derived`) é mais restritivo do que o tipo de parâmetro `MyMethod` (`Base`), logo, é sempre seguro passar o argumento do representante para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-283">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8de53-284">O tipo de retorno de `MyMethod` (`Derived`) é mais restritivo do que o tipo de parâmetro do representante (`Base`), logo, é sempre seguro converter o tipo de retorno do método no tipo de retorno do representante.</span><span class="sxs-lookup"><span data-stu-id="8de53-284">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-285">O exemplo de código não produz nenhuma saída.</span><span class="sxs-lookup"><span data-stu-id="8de53-285">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-286">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-286">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-287">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-287">-or-</span>
          </span>
          <span data-ttu-id="8de53-288">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-288">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-289">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-289">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-290">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-290">-or-</span>
          </span>
          <span data-ttu-id="8de53-291">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-291">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-292">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-292">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-293">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-293">-or-</span>
          </span>
          <span data-ttu-id="8de53-294">
            <paramref name="method" /> não é um método estático, e a versão do .NET Framework é 1.0 ou 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-294">
              <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="8de53-295">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-295">-or-</span>
          </span>
          <span data-ttu-id="8de53-296">
            <paramref name="method" /> não pode ser associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-296">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="8de53-297">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-297">-or-</span>
          </span>
          <span data-ttu-id="8de53-298">
            <paramref name="method" /> não é um <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-298">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="8de53-299">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-299">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-300">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-300">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-301">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-301">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-302">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-302">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-303">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-304">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-304">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="8de53-305">O objeto ao qual o delegado está associado ou <see langword="null" /> para tratar <c>method</c> como <see langword="static" /> (<see langword="Shared" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-305">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-306">O <see cref="T:System.Reflection.MethodInfo" /> que descreve o método estático ou de instância que o representante deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-306">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-307">Cria um delegado do tipo especificado que representa o método de instância ou estático especificado com o primeiro argumento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-307">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-308">Um delegado do tipo especificado que representa o método de instância ou estático especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-308">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-309">Chamar essa sobrecarga de método é equivalente a chamar o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga de método e especificando `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8de53-309">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="8de53-310">Essas duas sobrecargas fornecem a maneira mais flexível para criar delegados.</span><span class="sxs-lookup"><span data-stu-id="8de53-310">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="8de53-311">Você pode usá-los para criar delegados para estáticas ou métodos de instância e, opcionalmente, para especificar o primeiro argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-311">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-312">Se você não fornecer um primeiro argumento, use o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga de método para melhorar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="8de53-312">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="8de53-313">O tipo de delegado e o método devem ter tipos de retornados compatíveis.</span><span class="sxs-lookup"><span data-stu-id="8de53-313">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="8de53-314">Ou seja, o tipo de retorno `method` deve ser atribuível ao tipo de retorno de `type`.</span><span class="sxs-lookup"><span data-stu-id="8de53-314">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="8de53-315">Se `firstArgument` é fornecido, ele é passado para `method` sempre que o delegado é invocado; `firstArgument` deve ser associado ao representante, e o delegado deve ser fechado ao longo de seu primeiro argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-315">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="8de53-316">Se `method` está `static` (`Shared` no Visual Basic), a lista de argumentos fornecida ao invocar o delegado inclui todos os parâmetros, exceto o primeiro; se `method` é um método de instância, em seguida, `firstArgument` é passado para a instância oculta parâmetro (representado por `this` em c# ou por `Me` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8de53-316">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="8de53-317">Se `firstArgument` for fornecido, o primeiro parâmetro de `method` deve ser um tipo de referência, e `firstArgument` devem ser compatíveis com esse tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-317">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8de53-318">Se `method` está `static` (`Shared` no Visual Basic) e seu primeiro parâmetro é do tipo <xref:System.Object> ou <xref:System.ValueType>, em seguida, `firstArgument` pode ser um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="8de53-318">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="8de53-319">Nesse caso, `firstArgument` é automaticamente convertido.</span><span class="sxs-lookup"><span data-stu-id="8de53-319">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="8de53-320">Conversão boxing automática não ocorrerá para quaisquer outros argumentos, como seria em um c# ou Visual Basic função chamada.</span><span class="sxs-lookup"><span data-stu-id="8de53-320">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="8de53-321">Se `firstArgument` é uma referência nula e `method` é um método de instância, o resultado depende das assinaturas do tipo de delegado `type` e de `method`:</span><span class="sxs-lookup"><span data-stu-id="8de53-321">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8de53-322">Se a assinatura do `type` inclua explicitamente o primeiro parâmetro oculto de `method`, o delegado deve representar um método de instância aberta.</span><span class="sxs-lookup"><span data-stu-id="8de53-322">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="8de53-323">Quando o delegado é invocado, o primeiro argumento na lista de argumentos é passado para o parâmetro de instância oculta do `method`.</span><span class="sxs-lookup"><span data-stu-id="8de53-323">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="8de53-324">Se as assinaturas dos `method` e `type` corresponder (ou seja, todos os tipos de parâmetro são compatíveis), em seguida, o delegado deve ser fechado por uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-324">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8de53-325">Invocar o delegado é como chamar um método de instância em uma instância nula, o que não é uma coisa particularmente útil para fazer.</span><span class="sxs-lookup"><span data-stu-id="8de53-325">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="8de53-326">Se `firstArgument` é uma referência nula e `method` é estática, o resultado depende das assinaturas do tipo de delegado `type` e de `method`:</span><span class="sxs-lookup"><span data-stu-id="8de53-326">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8de53-327">Se a assinatura do `method` e `type` corresponder (ou seja, todos os tipos de parâmetro são compatíveis), o delegado deve representar um método estático aberto.</span><span class="sxs-lookup"><span data-stu-id="8de53-327">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="8de53-328">Isso é o caso mais comum para métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8de53-328">This is the most common case for static methods.</span></span> <span data-ttu-id="8de53-329">Nesse caso, você pode obter um desempenho ligeiramente melhor usando o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8de53-329">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="8de53-330">Se a assinatura do `type` começa com o segundo parâmetro do `method` e o restante dos tipos de parâmetro são compatíveis e, em seguida, o delegado deve ser fechado por uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-330">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8de53-331">Quando o delegado é invocado, uma referência nula é passada para o primeiro parâmetro de `method`.</span><span class="sxs-lookup"><span data-stu-id="8de53-331">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-332">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-332">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-333">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-333">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-334">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-334">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8de53-335">Tipos de parâmetro compatíveis e tipo de retorno</span><span class="sxs-lookup"><span data-stu-id="8de53-335">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8de53-336">Os tipos de parâmetro e o tipo de retorno de um delegado devem ser compatíveis com os tipos de parâmetro e o tipo de retorno do método que o delegado representa; os tipos não precisam corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-336">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-337">No .NET Framework versão 1.0 e 1.1, os tipos devem corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-337">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="8de53-338">Um parâmetro de um delegado será compatível com o parâmetro correspondente de um método se o tipo do parâmetro de delegado for mais restritivo do que o tipo do parâmetro de método, porque isso garante que um argumento passado para o delegado possa ser passado com segurança para o método.</span><span class="sxs-lookup"><span data-stu-id="8de53-338">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8de53-339">Da mesma forma, o tipo de retorno de um delegado será compatível com o tipo de retorno de um método se o tipo de retorno do método for mais restritivo do que o tipo de retorno do delegado, porque isso garante que o valor retornado do método possa ser convertido com segurança para o tipo retorno do delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-339">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-340">Por exemplo, um delegado com um parâmetro do tipo <xref:System.Collections.Hashtable> e um tipo de retorno <xref:System.Object> pode representar um método com um parâmetro do tipo <xref:System.Object> e um valor de retorno do tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8de53-340">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="8de53-341">Determinando os métodos que um delegado pode representar</span><span class="sxs-lookup"><span data-stu-id="8de53-341">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="8de53-342">Outra maneira útil para pensar a flexibilidade fornecida por essa sobrecarga de <xref:System.Delegate.CreateDelegate%2A> é que qualquer delegado pode representar quatro combinações diferentes de assinatura de método e o tipo de método (estático versus instância).</span><span class="sxs-lookup"><span data-stu-id="8de53-342">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="8de53-343">Considere um tipo de delegado `D` com um argumento do tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-343">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8de53-344">A seguir descreve os métodos `D` podem representar, ignorando o tipo de retorno, pois ele deve corresponder em todos os casos:</span><span class="sxs-lookup"><span data-stu-id="8de53-344">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="8de53-345">`D` pode representar qualquer método de instância que tem exatamente um argumento do tipo `C`, independentemente de qual pertence o método de instância de tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-345">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="8de53-346">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma instância do tipo `method` pertence, e o delegado resultante deve ser fechada por essa instância.</span><span class="sxs-lookup"><span data-stu-id="8de53-346">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="8de53-347">(Trivialmente, `D` também pode ser fechada ao longo de uma referência nula se `firstArgument` é uma referência nula.)</span><span class="sxs-lookup"><span data-stu-id="8de53-347">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="8de53-348">`D` pode representar um método de instância `C` que não tem argumentos.</span><span class="sxs-lookup"><span data-stu-id="8de53-348">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="8de53-349">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-349">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8de53-350">O delegado resultante representa um método de instância aberta e uma instância de `C` deve ser fornecido a cada vez que ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-350">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-351">`D` pode representar um método estático que aceita um argumento do tipo `C`, e que o método pode pertencer a qualquer tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-351">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="8de53-352">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-352">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8de53-353">O delegado resultante representa um método estático aberto e uma instância do `C` deve ser fornecido a cada vez que ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-353">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-354">`D` pode representar um método estático que pertence ao tipo `F` e tem dois argumentos de tipo `F` e digite `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-354">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="8de53-355">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma instância de `F`.</span><span class="sxs-lookup"><span data-stu-id="8de53-355">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="8de53-356">O delegado resultante representa um método estático que é fechado por essa instância do `F`.</span><span class="sxs-lookup"><span data-stu-id="8de53-356">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="8de53-357">Observe que, no caso em que `F` e `C` são do mesmo tipo, o método estático tem dois argumentos desse tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-357">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="8de53-358">(Nesse caso, `D` é fechado por uma referência nula se `firstArgument` é uma referência nula.)</span><span class="sxs-lookup"><span data-stu-id="8de53-358">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8de53-359">Esta seção contém três exemplos de código.</span><span class="sxs-lookup"><span data-stu-id="8de53-359">This section contains three code examples.</span></span> <span data-ttu-id="8de53-360">O primeiro exemplo demonstra os quatro tipos de delegados que podem ser criados: fechado ao longo de um método de instância, abra um método de instância, abra ao longo de um método estático e fechado ao longo de um método estático.</span><span class="sxs-lookup"><span data-stu-id="8de53-360">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="8de53-361">O segundo exemplo de código demonstra tipos de parâmetro correspondentes e tipos de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-361">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8de53-362">O terceiro exemplo de código define um tipo de delegado único e mostra todos os métodos que tipo de delegado podem representar.</span><span class="sxs-lookup"><span data-stu-id="8de53-362">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="8de53-363">**Exemplo 1**</span><span class="sxs-lookup"><span data-stu-id="8de53-363">**Example 1**</span></span>  
  
 <span data-ttu-id="8de53-364">O exemplo de código a seguir demonstra as quatro maneiras em que um delegado pode ser criado usando essa sobrecarga da <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8de53-364">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-365">Há duas sobrecargas do método <xref:System.Delegate.CreateDelegate%2A> que especificam `firstArgument` e <xref:System.Reflection.MethodInfo>; sua funcionalidade é a mesma, exceto por uma permitir especificar se é necessário lançar falha de associação e a outra lançar sempre.</span><span class="sxs-lookup"><span data-stu-id="8de53-365">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8de53-366">Este exemplo de código usa ambas as sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="8de53-366">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8de53-367">O exemplo declara uma classe `C` com um método estático `M2` e um método de instância `M1`, e três tipos de delegado: `D1` leva a uma instância do `C` e uma cadeia de caracteres, `D2` usa uma cadeia de caracteres e `D3`não tiver nenhum argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-367">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="8de53-368">Uma segunda classe chamada `Example` contém o código que cria os representantes.</span><span class="sxs-lookup"><span data-stu-id="8de53-368">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8de53-369">Um delegado do tipo `D2`, fechado em uma instância do `C`, é criado para o método de instância `M1`.</span><span class="sxs-lookup"><span data-stu-id="8de53-369">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="8de53-370">Ele é invocado com cadeias de caracteres diferentes, para mostrar que a instância associada do `C` sempre é usado.</span><span class="sxs-lookup"><span data-stu-id="8de53-370">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="8de53-371">Um representante de tipo `D1`, representando um método de instância aberto, é criado para o método de instância `M1`.</span><span class="sxs-lookup"><span data-stu-id="8de53-371">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8de53-372">Uma instância deve ser passada quando o representante é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-372">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-373">Um representante de tipo `D2`, representando um método estático aberto, é criado para o método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="8de53-373">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="8de53-374">Por fim, um delegado do tipo `D3`, fechado por uma cadeia de caracteres, que é criado para o método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="8de53-374">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="8de53-375">O método é invocado para mostrar que ele usa a cadeia de caracteres associada.</span><span class="sxs-lookup"><span data-stu-id="8de53-375">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8de53-376">**Exemplo 2**</span><span class="sxs-lookup"><span data-stu-id="8de53-376">**Example 2**</span></span>  
  
 <span data-ttu-id="8de53-377">O exemplo de código a seguir demonstra a compatibilidade dos tipos de parâmetro e de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-377">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-378">Este exemplo de código usa o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8de53-378">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="8de53-379">O uso das outras sobrecargas que aceitam <xref:System.Reflection.MethodInfo> é semelhante.</span><span class="sxs-lookup"><span data-stu-id="8de53-379">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="8de53-380">O exemplo de código define uma classe base chamada `Base` e uma classe chamada `Derived` derivada de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-380">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8de53-381">A classe derivada tem um método `static` (`Shared` no Visual Basic) chamado `MyMethod` com um parâmetro do tipo `Base` e um retorno do tipo de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8de53-381">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8de53-382">O exemplo de código também define um representante chamado `Example` que tem um parâmetro do tipo `Derived` e um tipo de retorno de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-382">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8de53-383">O exemplo de código demonstra que o representante chamado `Example` pode ser usado para representar o método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-383">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8de53-384">O método pode ser associado ao representante porque:</span><span class="sxs-lookup"><span data-stu-id="8de53-384">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8de53-385">O tipo de parâmetro do representante (`Derived`) é mais restritivo do que o tipo de parâmetro `MyMethod` (`Base`), logo, é sempre seguro passar o argumento do representante para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-385">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8de53-386">O tipo de retorno de `MyMethod` (`Derived`) é mais restritivo do que o tipo de parâmetro do representante (`Base`), logo, é sempre seguro converter o tipo de retorno do método no tipo de retorno do representante.</span><span class="sxs-lookup"><span data-stu-id="8de53-386">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-387">O exemplo de código não produz nenhuma saída.</span><span class="sxs-lookup"><span data-stu-id="8de53-387">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="8de53-388">**Exemplo 3**</span><span class="sxs-lookup"><span data-stu-id="8de53-388">**Example 3**</span></span>  
  
 <span data-ttu-id="8de53-389">O exemplo de código a seguir mostra todos os métodos pode representar um tipo de delegado único, usando o <xref:System.Delegate.CreateDelegate%2A> método para criar os delegados.</span><span class="sxs-lookup"><span data-stu-id="8de53-389">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-390">Há duas sobrecargas do método <xref:System.Delegate.CreateDelegate%2A> que especificam `firstArgument` e <xref:System.Reflection.MethodInfo>; sua funcionalidade é a mesma, exceto por uma permitir especificar se é necessário lançar falha de associação e a outra lançar sempre.</span><span class="sxs-lookup"><span data-stu-id="8de53-390">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8de53-391">Este exemplo de código usa ambas as sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="8de53-391">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8de53-392">O exemplo de código define duas classes, `C` e `F`e um tipo de delegado `D` com um argumento do tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-392">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8de53-393">As classes têm correspondência estáticos e métodos de instância `M1`, `M3`, e `M4`e a classe `C` também tem um método de instância `M2` que não tem argumentos.</span><span class="sxs-lookup"><span data-stu-id="8de53-393">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="8de53-394">Uma terceira classe denominada `Example` contém o código que cria os representantes.</span><span class="sxs-lookup"><span data-stu-id="8de53-394">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8de53-395">Delegados são criados por exemplo método `M1` do tipo `C` e digite `F`; cada um é fechada por uma instância do respectivo tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-395">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="8de53-396">Método `M1` do tipo `C` exibe o `ID` propriedades da instância associada do e do argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-396">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="8de53-397">Um delegado é criado para o método `M2` do tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-397">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="8de53-398">Esse é um delegado de instância aberta, na qual o argumento do delegado representa o primeiro argumento oculto no método de instância.</span><span class="sxs-lookup"><span data-stu-id="8de53-398">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="8de53-399">O método não tem outros argumentos.</span><span class="sxs-lookup"><span data-stu-id="8de53-399">The method has no other arguments.</span></span> <span data-ttu-id="8de53-400">Ele é chamado como se fosse um método estático.</span><span class="sxs-lookup"><span data-stu-id="8de53-400">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="8de53-401">Delegados são criados para o método estático `M3` do tipo `C` e digite `F`; esses são delegados estáticos abertos.</span><span class="sxs-lookup"><span data-stu-id="8de53-401">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="8de53-402">Por fim, os delegados são criados para o método estático `M4` do tipo `C` e digite `F`; cada método tem o tipo de declaração como seu primeiro argumento e uma instância do tipo for fornecida, portanto, os delegados são fechados em seus primeiros argumentos .</span><span class="sxs-lookup"><span data-stu-id="8de53-402">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="8de53-403">Método `M4` do tipo `C` exibe o `ID` propriedades da instância associada do e do argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-403">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-404">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-404">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-405">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-405">-or-</span>
          </span>
          <span data-ttu-id="8de53-406">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-406">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-407">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-407">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-408">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-408">-or-</span>
          </span>
          <span data-ttu-id="8de53-409">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-409">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-410">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-410">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-411">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-411">-or-</span>
          </span>
          <span data-ttu-id="8de53-412">
            <paramref name="method" /> não pode ser associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-412">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="8de53-413">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-413">-or-</span>
          </span>
          <span data-ttu-id="8de53-414">
            <paramref name="method" /> não é um <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-414">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="8de53-415">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-415">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-416">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-416">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-417">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-417">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-418">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-418">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-419">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-419">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-420">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-420">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8de53-421">A instância de classe na qual <c>method</c> é invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-421">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-422">O nome do método de instância que o delegado deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-422">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-423">Cria um delegado do tipo especificado que representa o método de instância especificado a ser invocado na instância da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-423">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-424">Um delegado do tipo especificado que representa o método de instância especificado a ser invocado na instância da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-424">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-425">Esse método cria delegados por exemplo apenas métodos.</span><span class="sxs-lookup"><span data-stu-id="8de53-425">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="8de53-426">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-426">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8de53-427">Essa sobrecarga de método é equivalente a chamar o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga do método, especificando `false` para `ignoreCase` e `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8de53-427">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-428">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-428">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-429">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-429">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-430">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-430">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-431">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-431">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-432">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-432">-or-</span>
          </span>
          <span data-ttu-id="8de53-433">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-433">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-434">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-434">-or-</span>
          </span>
          <span data-ttu-id="8de53-435">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-435">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-436">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-436">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-437">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-437">-or-</span>
          </span>
          <span data-ttu-id="8de53-438">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-438">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-439">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-439">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-440">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-440">-or-</span>
          </span>
          <span data-ttu-id="8de53-441">
            <paramref name="method" /> não é um método de instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-441">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="8de53-442">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-442">-or-</span>
          </span>
          <span data-ttu-id="8de53-443">O <paramref name="method" /> não pode ser associado, por exemplo, porque não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-443">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-444">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-444">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-445">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-445">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-446">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-446">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-447">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-447">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-448">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-448">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-449">O <see cref="T:System.Reflection.MethodInfo" /> que descreve o método estático ou de instância que o representante deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-449">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="8de53-450">
            <see langword="true" /> para lançar uma exceção caso <c>method</c> não possa ser associado; do contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-450">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-451">Cria um delegado do tipo especificado para representar o método estático especificado, com o comportamento em falhas especificado a ser associado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-451">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-452">Um delegado do tipo especificado para representar o método estático especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-452">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-453">Essa sobrecarga de método pode criar delegados de método estático aberto e abrir os delegados de método de instância — ou seja, os delegados que expõem o primeiro argumento oculto de métodos de instância.</span><span class="sxs-lookup"><span data-stu-id="8de53-453">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="8de53-454">Para obter uma explicação detalhada, consulte o mais geral <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> métodos estáticos ou sobrecarga de método, que permite que você criar todas as combinações de delegados abertos ou fechados, por exemplo.</span><span class="sxs-lookup"><span data-stu-id="8de53-454">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-455">Essa sobrecarga de método deve ser usada quando o delegado não é fechado ao longo de seu primeiro argumento, porque ele é um pouco mais rápido, nesse caso.</span><span class="sxs-lookup"><span data-stu-id="8de53-455">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-456">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-456">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-457">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-457">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-458">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-458">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8de53-459">Tipos de parâmetro compatíveis e tipo de retorno</span><span class="sxs-lookup"><span data-stu-id="8de53-459">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8de53-460">Os tipos de parâmetro e o tipo de retorno de um delegado devem ser compatíveis com os tipos de parâmetro e o tipo de retorno do método que o delegado representa; os tipos não precisam corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-460">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-461">No .NET Framework versão 1.0 e 1.1, os tipos devem corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-461">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="8de53-462">Um parâmetro de um delegado será compatível com o parâmetro correspondente de um método se o tipo do parâmetro de delegado for mais restritivo do que o tipo do parâmetro de método, porque isso garante que um argumento passado para o delegado possa ser passado com segurança para o método.</span><span class="sxs-lookup"><span data-stu-id="8de53-462">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8de53-463">Da mesma forma, o tipo de retorno de um delegado será compatível com o tipo de retorno de um método se o tipo de retorno do método for mais restritivo do que o tipo de retorno do delegado, porque isso garante que o valor retornado do método possa ser convertido com segurança para o tipo retorno do delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-463">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-464">Por exemplo, um delegado com um parâmetro do tipo <xref:System.Collections.Hashtable> e um tipo de retorno <xref:System.Object> pode representar um método com um parâmetro do tipo <xref:System.Object> e um valor de retorno do tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8de53-464">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8de53-465">Esta seção contém dois exemplos de código.</span><span class="sxs-lookup"><span data-stu-id="8de53-465">This section contains two code examples.</span></span> <span data-ttu-id="8de53-466">O primeiro exemplo demonstra os dois tipos de delegados que podem ser criados com essa sobrecarga de método: Abra um método de instância e ao longo de um método estático.</span><span class="sxs-lookup"><span data-stu-id="8de53-466">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="8de53-467">O segundo exemplo de código demonstra tipos de parâmetro correspondentes e tipos de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-467">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8de53-468">**Exemplo 1**</span><span class="sxs-lookup"><span data-stu-id="8de53-468">**Example 1**</span></span>  
  
 <span data-ttu-id="8de53-469">O exemplo de código a seguir demonstra duas maneiras de um delegado pode ser criado usando essa sobrecarga da <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8de53-469">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-470">Há duas sobrecargas do <xref:System.Delegate.CreateDelegate%2A> método que especifica um <xref:System.Reflection.MethodInfo> , mas não é um primeiro argumento; sua funcionalidade é a mesma, exceto que um permite que você especifique se deve ser lançado na falha de associação e a outra lançar sempre.</span><span class="sxs-lookup"><span data-stu-id="8de53-470">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8de53-471">Este exemplo de código usa ambas as sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="8de53-471">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8de53-472">O exemplo declara uma classe `C` com um método estático `M2` e um método de instância `M1`, e dois tipos de delegado: `D1` leva a uma instância do `C` e uma cadeia de caracteres, e `D2` usa uma cadeia de caracteres.</span><span class="sxs-lookup"><span data-stu-id="8de53-472">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="8de53-473">Uma segunda classe chamada `Example` contém o código que cria os representantes.</span><span class="sxs-lookup"><span data-stu-id="8de53-473">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8de53-474">Um representante de tipo `D1`, representando um método de instância aberto, é criado para o método de instância `M1`.</span><span class="sxs-lookup"><span data-stu-id="8de53-474">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8de53-475">Uma instância deve ser passada quando o representante é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-475">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-476">Um representante de tipo `D2`, representando um método estático aberto, é criado para o método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="8de53-476">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8de53-477">**Exemplo 2**</span><span class="sxs-lookup"><span data-stu-id="8de53-477">**Example 2**</span></span>  
  
 <span data-ttu-id="8de53-478">O exemplo de código a seguir demonstra a compatibilidade dos tipos de parâmetro e de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-478">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-479">Este exemplo de código usa o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8de53-479">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="8de53-480">O uso das outras sobrecargas que aceitam <xref:System.Reflection.MethodInfo> é semelhante.</span><span class="sxs-lookup"><span data-stu-id="8de53-480">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="8de53-481">O exemplo de código define uma classe base chamada `Base` e uma classe chamada `Derived` derivada de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-481">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8de53-482">A classe derivada tem um método `static` (`Shared` no Visual Basic) chamado `MyMethod` com um parâmetro do tipo `Base` e um retorno do tipo de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8de53-482">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8de53-483">O exemplo de código também define um representante chamado `Example` que tem um parâmetro do tipo `Derived` e um tipo de retorno de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-483">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8de53-484">O exemplo de código demonstra que o representante chamado `Example` pode ser usado para representar o método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-484">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8de53-485">O método pode ser associado ao representante porque:</span><span class="sxs-lookup"><span data-stu-id="8de53-485">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8de53-486">O tipo de parâmetro do representante (`Derived`) é mais restritivo do que o tipo de parâmetro `MyMethod` (`Base`), logo, é sempre seguro passar o argumento do representante para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-486">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8de53-487">O tipo de retorno de `MyMethod` (`Derived`) é mais restritivo do que o tipo de parâmetro do representante (`Base`), logo, é sempre seguro converter o tipo de retorno do método no tipo de retorno do representante.</span><span class="sxs-lookup"><span data-stu-id="8de53-487">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-488">O exemplo de código não produz nenhuma saída.</span><span class="sxs-lookup"><span data-stu-id="8de53-488">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-489">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-489">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-490">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-490">-or-</span>
          </span>
          <span data-ttu-id="8de53-491">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-491">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-492">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-492">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-493">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-493">-or-</span>
          </span>
          <span data-ttu-id="8de53-494">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-494">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-495">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-496">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-496">-or-</span>
          </span>
          <span data-ttu-id="8de53-497">
            <paramref name="method" /> não pode ser associado e <paramref name="throwOnBindFailure" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-497">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="8de53-498">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-498">-or-</span>
          </span>
          <span data-ttu-id="8de53-499">
            <paramref name="method" /> não é um <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-499">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="8de53-500">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-500">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-501">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-501">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-502">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-502">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-503">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-503">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-504">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-504">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-505">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-505">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8de53-506">O <see cref="T:System.Type" /> que representa a classe que implementa <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-506">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-507">O nome do método estático que o delegado deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-507">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-508">Cria um delegado do tipo especificado que representa o método estático especificado da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-508">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-509">Um delegado do tipo especificado que representa o método especificado estático da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-509">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-510">Esse método cria delegados para apenas métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8de53-510">This method creates delegates for static methods only.</span></span> <span data-ttu-id="8de53-511">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-511">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8de53-512">Essa sobrecarga de método é equivalente a chamar o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga do método, especificando `false` para `ignoreCase` e `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8de53-512">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-513">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-513">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-514">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-514">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-515">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-515">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-516">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-516">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-517">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-517">-or-</span>
          </span>
          <span data-ttu-id="8de53-518">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-518">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-519">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-519">-or-</span>
          </span>
          <span data-ttu-id="8de53-520">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-520">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-521">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-521">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-522">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-522">-or-</span>
          </span>
          <span data-ttu-id="8de53-523">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-523">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-524">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-524">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-525">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-525">-or-</span>
          </span>
          <span data-ttu-id="8de53-526">
            <paramref name="target" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-526">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-527">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-527">-or-</span>
          </span>
          <span data-ttu-id="8de53-528">
            <paramref name="target" /> é um tipo genérico aberto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-528">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="8de53-529">Ou seja, sua propriedade <see cref="P:System.Type.ContainsGenericParameters" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-529">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="8de53-530">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-530">-or-</span>
          </span>
          <span data-ttu-id="8de53-531">O <paramref name="method" /> não é um método <see langword="static" /> (método <see langword="Shared" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-531">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="8de53-532">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-532">-or-</span>
          </span>
          <span data-ttu-id="8de53-533">
            <paramref name="method" /> não pode ser associado, por exemplo, porque não foi encontrado e <paramref name="throwOnBindFailure" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-533">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-534">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-534">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-535">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-535">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-536">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-536">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-537">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-537">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-538">Um <see cref="T:System.Type" /> que representa o tipo de delegado a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-538">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="8de53-539">Um <see cref="T:System.Object" /> que é o primeiro argumento do método que o delegado representa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-539">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="8de53-540">Por exemplo, para métodos, ele deve ser compatível com o tipo de instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-540">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-541">O <see cref="T:System.Reflection.MethodInfo" /> que descreve o método estático ou de instância que o representante deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-541">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="8de53-542">
            <see langword="true" /> para lançar uma exceção caso <c>method</c> não possa ser associado; do contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-542">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-543">Cria um delegado do tipo especificado que representa o método de instância ou estático especificado, com o primeiro argumento especificado e o comportamento especificado na falha para associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-543">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-544">Um delegado do tipo especificado que representa o método de instância ou estático especificado ou <see langword="null" /> se <paramref name="throwOnBindFailure" /> é <see langword="false" /> e o delegado não pode ser associado a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-544">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-545">Essa sobrecarga de método e o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> sobrecarga de método, que sempre gera na falha de associação, fornecem a maneira mais flexível para criar delegados.</span><span class="sxs-lookup"><span data-stu-id="8de53-545">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="8de53-546">Você pode usá-los para criar delegados para estáticas ou métodos de instância, com ou sem um primeiro argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-546">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-547">Se você não fornecer um primeiro argumento, use o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga de método para melhorar o desempenho.</span><span class="sxs-lookup"><span data-stu-id="8de53-547">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="8de53-548">O tipo de delegado e o método devem ter tipos de retornados compatíveis.</span><span class="sxs-lookup"><span data-stu-id="8de53-548">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="8de53-549">Ou seja, o tipo de retorno `method` deve ser atribuível ao tipo de retorno de `type`.</span><span class="sxs-lookup"><span data-stu-id="8de53-549">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="8de53-550">Se `firstArgument` é fornecido, ele é passado para `method` sempre que o delegado é invocado; `firstArgument` deve ser associado ao representante, e o delegado deve ser fechado ao longo de seu primeiro argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-550">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="8de53-551">Se `method` está `static` (`Shared` no Visual Basic), a lista de argumentos fornecida ao invocar o delegado inclui todos os parâmetros, exceto o primeiro; se `method` é um método de instância, em seguida, `firstArgument` é passado para a instância oculta parâmetro (representado por `this` em c# ou por `Me` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8de53-551">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="8de53-552">Se `firstArgument` for fornecido, o primeiro parâmetro de `method` deve ser um tipo de referência, e `firstArgument` devem ser compatíveis com esse tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-552">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8de53-553">Se `method` está `static` (`Shared` no Visual Basic) e seu primeiro parâmetro é do tipo <xref:System.Object> ou <xref:System.ValueType>, em seguida, `firstArgument` pode ser um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="8de53-553">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="8de53-554">Nesse caso, `firstArgument` é automaticamente convertido.</span><span class="sxs-lookup"><span data-stu-id="8de53-554">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="8de53-555">Conversão boxing automática não ocorrerá para quaisquer outros argumentos, como seria em um c# ou Visual Basic função chamada.</span><span class="sxs-lookup"><span data-stu-id="8de53-555">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="8de53-556">Se `firstArgument` é uma referência nula e `method` é um método de instância, o resultado depende das assinaturas do tipo de delegado `type` e de `method`:</span><span class="sxs-lookup"><span data-stu-id="8de53-556">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8de53-557">Se a assinatura do `type` inclua explicitamente o primeiro parâmetro oculto de `method`, o delegado deve representar um método de instância aberta.</span><span class="sxs-lookup"><span data-stu-id="8de53-557">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="8de53-558">Quando o delegado é invocado, o primeiro argumento na lista de argumentos é passado para o parâmetro de instância oculta do `method`.</span><span class="sxs-lookup"><span data-stu-id="8de53-558">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="8de53-559">Se as assinaturas dos `method` e `type` corresponder (ou seja, todos os tipos de parâmetro são compatíveis), em seguida, o delegado deve ser fechado por uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-559">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8de53-560">Invocar o delegado é como chamar um método de instância em uma instância nula, o que não é uma coisa particularmente útil para fazer.</span><span class="sxs-lookup"><span data-stu-id="8de53-560">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="8de53-561">Se `firstArgument` é uma referência nula e `method` é estática, o resultado depende das assinaturas do tipo de delegado `type` e de `method`:</span><span class="sxs-lookup"><span data-stu-id="8de53-561">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8de53-562">Se a assinatura do `method` e `type` corresponder (ou seja, todos os tipos de parâmetro são compatíveis), o delegado deve representar um método estático aberto.</span><span class="sxs-lookup"><span data-stu-id="8de53-562">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="8de53-563">Isso é o caso mais comum para métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8de53-563">This is the most common case for static methods.</span></span> <span data-ttu-id="8de53-564">Nesse caso, você pode obter um desempenho ligeiramente melhor usando o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8de53-564">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="8de53-565">Se a assinatura do `type` começa com o segundo parâmetro do `method` e o restante dos tipos de parâmetro são compatíveis e, em seguida, o delegado deve ser fechado por uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-565">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8de53-566">Quando o delegado é invocado, uma referência nula é passada para o primeiro parâmetro de `method`.</span><span class="sxs-lookup"><span data-stu-id="8de53-566">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-567">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-567">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-568">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-568">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-569">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-569">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8de53-570">Tipos de parâmetro compatíveis e tipo de retorno</span><span class="sxs-lookup"><span data-stu-id="8de53-570">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8de53-571">Os tipos de parâmetro e o tipo de retorno de um delegado devem ser compatíveis com os tipos de parâmetro e o tipo de retorno do método que o delegado representa; os tipos não precisam corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-571">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-572">No .NET Framework versão 1.0 e 1.1 os tipos devem corresponder exatamente.</span><span class="sxs-lookup"><span data-stu-id="8de53-572">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="8de53-573">Um parâmetro de um delegado será compatível com o parâmetro correspondente de um método se o tipo do parâmetro de delegado for mais restritivo do que o tipo do parâmetro de método, porque isso garante que um argumento passado para o delegado possa ser passado com segurança para o método.</span><span class="sxs-lookup"><span data-stu-id="8de53-573">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8de53-574">Da mesma forma, o tipo de retorno de um delegado será compatível com o tipo de retorno de um método se o tipo de retorno do método for mais restritivo do que o tipo de retorno do delegado, porque isso garante que o valor retornado do método possa ser convertido com segurança para o tipo retorno do delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-574">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-575">Por exemplo, um delegado com um parâmetro do tipo <xref:System.Collections.Hashtable> e um tipo de retorno <xref:System.Object> pode representar um método com um parâmetro do tipo <xref:System.Object> e um valor de retorno do tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8de53-575">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="8de53-576">Determinando os métodos que um delegado pode representar</span><span class="sxs-lookup"><span data-stu-id="8de53-576">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="8de53-577">Outra maneira útil para pensar a flexibilidade fornecida por essa sobrecarga de <xref:System.Delegate.CreateDelegate%2A> é que qualquer delegado pode representar quatro combinações diferentes de assinatura de método e o tipo de método (estático versus instância).</span><span class="sxs-lookup"><span data-stu-id="8de53-577">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="8de53-578">Considere um tipo de delegado `D` com um argumento do tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-578">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8de53-579">A seguir descreve os métodos `D` podem representar, ignorando o tipo de retorno, pois ele deve corresponder em todos os casos:</span><span class="sxs-lookup"><span data-stu-id="8de53-579">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="8de53-580">`D` pode representar qualquer método de instância que tem exatamente um argumento do tipo `C`, independentemente de qual pertence o método de instância de tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-580">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="8de53-581">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma instância do tipo `method` pertence, e o delegado resultante deve ser fechada por essa instância.</span><span class="sxs-lookup"><span data-stu-id="8de53-581">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="8de53-582">(Trivialmente, `D` também pode ser fechada ao longo de uma referência nula se `firstArgument` é `null`.)</span><span class="sxs-lookup"><span data-stu-id="8de53-582">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="8de53-583">`D` pode representar um método de instância `C` que não tem argumentos.</span><span class="sxs-lookup"><span data-stu-id="8de53-583">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="8de53-584">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-584">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8de53-585">O delegado resultante representa um método de instância aberta e uma instância de `C` deve ser fornecido a cada vez que ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-585">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-586">`D` pode representar um método estático que aceita um argumento do tipo `C`, e que o método pode pertencer a qualquer tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-586">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="8de53-587">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma referência nula.</span><span class="sxs-lookup"><span data-stu-id="8de53-587">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8de53-588">O delegado resultante representa um método estático aberto e uma instância do `C` deve ser fornecido a cada vez que ele é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-588">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-589">`D` pode representar um método estático que pertence ao tipo `F` e tem dois argumentos de tipo `F` e digite `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-589">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="8de53-590">Quando <xref:System.Delegate.CreateDelegate%2A> é chamado, `firstArgument` é uma instância de `F`.</span><span class="sxs-lookup"><span data-stu-id="8de53-590">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="8de53-591">O delegado resultante representa um método estático que é fechado por essa instância do `F`.</span><span class="sxs-lookup"><span data-stu-id="8de53-591">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="8de53-592">Observe que, no caso em que `F` e `C` são do mesmo tipo, o método estático tem dois argumentos desse tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-592">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="8de53-593">(Nesse caso, `D` é fechado por uma referência nula se `firstArgument` é `null`.)</span><span class="sxs-lookup"><span data-stu-id="8de53-593">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8de53-594">Esta seção contém três exemplos de código.</span><span class="sxs-lookup"><span data-stu-id="8de53-594">This section contains three code examples.</span></span> <span data-ttu-id="8de53-595">O primeiro exemplo demonstra os quatro tipos de delegados que podem ser criados: fechado ao longo de um método de instância, abra um método de instância, abra ao longo de um método estático e fechado ao longo de um método estático.</span><span class="sxs-lookup"><span data-stu-id="8de53-595">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="8de53-596">O segundo exemplo de código demonstra tipos de parâmetro correspondentes e tipos de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-596">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8de53-597">O terceiro exemplo de código define um tipo de delegado único e mostra todos os métodos que tipo de delegado podem representar.</span><span class="sxs-lookup"><span data-stu-id="8de53-597">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="8de53-598">**Exemplo 1**</span><span class="sxs-lookup"><span data-stu-id="8de53-598">**Example 1**</span></span>  
  
 <span data-ttu-id="8de53-599">O exemplo de código a seguir demonstra as quatro maneiras em que um delegado pode ser criado usando essa sobrecarga da <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8de53-599">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-600">Há duas sobrecargas do método <xref:System.Delegate.CreateDelegate%2A> que especificam `firstArgument` e <xref:System.Reflection.MethodInfo>; sua funcionalidade é a mesma, exceto por uma permitir especificar se é necessário lançar falha de associação e a outra lançar sempre.</span><span class="sxs-lookup"><span data-stu-id="8de53-600">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8de53-601">Este exemplo de código usa ambas as sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="8de53-601">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8de53-602">O exemplo declara uma classe `C` com um método estático `M2` e um método de instância `M1`, e três tipos de delegado: `D1` leva a uma instância do `C` e uma cadeia de caracteres, `D2` usa uma cadeia de caracteres e `D3`não tiver nenhum argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-602">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="8de53-603">Uma segunda classe chamada `Example` contém o código que cria os representantes.</span><span class="sxs-lookup"><span data-stu-id="8de53-603">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8de53-604">Um delegado do tipo `D2`, fechado em uma instância do `C`, é criado para o método de instância `M1`.</span><span class="sxs-lookup"><span data-stu-id="8de53-604">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="8de53-605">Ele é invocado com cadeias de caracteres diferentes, para mostrar que a instância associada do `C` sempre é usado.</span><span class="sxs-lookup"><span data-stu-id="8de53-605">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="8de53-606">Um representante de tipo `D1`, representando um método de instância aberto, é criado para o método de instância `M1`.</span><span class="sxs-lookup"><span data-stu-id="8de53-606">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8de53-607">Uma instância deve ser passada quando o representante é invocado.</span><span class="sxs-lookup"><span data-stu-id="8de53-607">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8de53-608">Um representante de tipo `D2`, representando um método estático aberto, é criado para o método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="8de53-608">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="8de53-609">Por fim, um delegado do tipo `D3`, fechado por uma cadeia de caracteres, que é criado para o método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="8de53-609">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="8de53-610">O método é invocado para mostrar que ele usa a cadeia de caracteres associada.</span><span class="sxs-lookup"><span data-stu-id="8de53-610">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8de53-611">**Exemplo 2**</span><span class="sxs-lookup"><span data-stu-id="8de53-611">**Example 2**</span></span>  
  
 <span data-ttu-id="8de53-612">O exemplo de código a seguir demonstra a compatibilidade dos tipos de parâmetro e de retorno.</span><span class="sxs-lookup"><span data-stu-id="8de53-612">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-613">Este exemplo de código usa o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga de método.</span><span class="sxs-lookup"><span data-stu-id="8de53-613">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="8de53-614">O uso das outras sobrecargas que aceitam <xref:System.Reflection.MethodInfo> é semelhante.</span><span class="sxs-lookup"><span data-stu-id="8de53-614">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="8de53-615">O exemplo de código define uma classe base chamada `Base` e uma classe chamada `Derived` derivada de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-615">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8de53-616">A classe derivada tem um método `static` (`Shared` no Visual Basic) chamado `MyMethod` com um parâmetro do tipo `Base` e um retorno do tipo de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8de53-616">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8de53-617">O exemplo de código também define um representante chamado `Example` que tem um parâmetro do tipo `Derived` e um tipo de retorno de `Base`.</span><span class="sxs-lookup"><span data-stu-id="8de53-617">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8de53-618">O exemplo de código demonstra que o representante chamado `Example` pode ser usado para representar o método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-618">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8de53-619">O método pode ser associado ao representante porque:</span><span class="sxs-lookup"><span data-stu-id="8de53-619">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8de53-620">O tipo de parâmetro do representante (`Derived`) é mais restritivo do que o tipo de parâmetro `MyMethod` (`Base`), logo, é sempre seguro passar o argumento do representante para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="8de53-620">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8de53-621">O tipo de retorno de `MyMethod` (`Derived`) é mais restritivo do que o tipo de parâmetro do representante (`Base`), logo, é sempre seguro converter o tipo de retorno do método no tipo de retorno do representante.</span><span class="sxs-lookup"><span data-stu-id="8de53-621">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8de53-622">O exemplo de código não produz nenhuma saída.</span><span class="sxs-lookup"><span data-stu-id="8de53-622">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="8de53-623">**Exemplo 3**</span><span class="sxs-lookup"><span data-stu-id="8de53-623">**Example 3**</span></span>  
  
 <span data-ttu-id="8de53-624">O exemplo de código a seguir mostra todos os métodos de que um tipo de delegado única pode representar.</span><span class="sxs-lookup"><span data-stu-id="8de53-624">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-625">Há duas sobrecargas do método <xref:System.Delegate.CreateDelegate%2A> que especificam `firstArgument` e <xref:System.Reflection.MethodInfo>; sua funcionalidade é a mesma, exceto por uma permitir especificar se é necessário lançar falha de associação e a outra lançar sempre.</span><span class="sxs-lookup"><span data-stu-id="8de53-625">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8de53-626">Este exemplo de código usa ambas as sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="8de53-626">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8de53-627">O exemplo de código define duas classes, `C` e `F`e um tipo de delegado `D` com um argumento do tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-627">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8de53-628">As classes têm correspondência estáticos e métodos de instância `M1`, `M3`, e `M4`e a classe `C` também tem um método de instância `M2` que não tem argumentos.</span><span class="sxs-lookup"><span data-stu-id="8de53-628">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="8de53-629">Uma terceira classe denominada `Example` contém o código que cria os representantes.</span><span class="sxs-lookup"><span data-stu-id="8de53-629">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8de53-630">Delegados são criados por exemplo método `M1` do tipo `C` e digite `F`; cada um é fechada por uma instância do respectivo tipo.</span><span class="sxs-lookup"><span data-stu-id="8de53-630">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="8de53-631">Método `M1` do tipo `C` exibe o `ID` propriedades da instância associada do e do argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-631">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="8de53-632">Um delegado é criado para o método `M2` do tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="8de53-632">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="8de53-633">Esse é um delegado de instância aberta, na qual o argumento do delegado representa o primeiro argumento oculto no método de instância.</span><span class="sxs-lookup"><span data-stu-id="8de53-633">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="8de53-634">O método não tem outros argumentos.</span><span class="sxs-lookup"><span data-stu-id="8de53-634">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="8de53-635">Delegados são criados para o método estático `M3` do tipo `C` e digite `F`; esses são delegados estáticos abertos.</span><span class="sxs-lookup"><span data-stu-id="8de53-635">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="8de53-636">Por fim, os delegados são criados para o método estático `M4` do tipo `C` e digite `F`; cada método tem o tipo de declaração como seu primeiro argumento e uma instância do tipo for fornecida, portanto, os delegados são fechados em seus primeiros argumentos .</span><span class="sxs-lookup"><span data-stu-id="8de53-636">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="8de53-637">Método `M4` do tipo `C` exibe o `ID` propriedades da instância associada do e do argumento.</span><span class="sxs-lookup"><span data-stu-id="8de53-637">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-638">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-638">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-639">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-639">-or-</span>
          </span>
          <span data-ttu-id="8de53-640">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-640">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-641">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-641">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-642">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-642">-or-</span>
          </span>
          <span data-ttu-id="8de53-643">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-643">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-644">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-644">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-645">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-645">-or-</span>
          </span>
          <span data-ttu-id="8de53-646">
            <paramref name="method" /> não pode ser associado e <paramref name="throwOnBindFailure" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-646">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="8de53-647">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-647">-or-</span>
          </span>
          <span data-ttu-id="8de53-648">
            <paramref name="method" /> não é um <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-648">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="8de53-649">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-649">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-650">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-650">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-651">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-651">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-652">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-652">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-653">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-653">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-654">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-654">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8de53-655">A instância de classe na qual <c>method</c> é invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-655">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-656">O nome do método de instância que o delegado deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-656">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="8de53-657">Um booliano indicando se é necessário ignorar as maiúsculas durante a comparação do nome do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-657">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-658">Cria um delegado do tipo especificado que representa o método de instância especificado a ser invocado na instância da classe especificada, com a diferenciação de maiúsculas e minúsculas especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-658">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-659">Um delegado do tipo especificado que representa o método de instância especificado a ser invocado na instância da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-659">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-660">Esse método cria delegados por exemplo apenas métodos.</span><span class="sxs-lookup"><span data-stu-id="8de53-660">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="8de53-661">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-661">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8de53-662">Essa sobrecarga de método é equivalente a chamar o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga do método, especificando `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8de53-662">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-663">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-663">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-664">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-664">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-665">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-665">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-666">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-666">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-667">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-667">-or-</span>
          </span>
          <span data-ttu-id="8de53-668">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-668">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-669">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-669">-or-</span>
          </span>
          <span data-ttu-id="8de53-670">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-670">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-671">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-671">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-672">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-672">-or-</span>
          </span>
          <span data-ttu-id="8de53-673">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-673">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-674">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-674">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-675">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-675">-or-</span>
          </span>
          <span data-ttu-id="8de53-676">
            <paramref name="method" /> não é um método de instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-676">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="8de53-677">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-677">-or-</span>
          </span>
          <span data-ttu-id="8de53-678">O <paramref name="method" /> não pode ser associado, por exemplo, porque não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-678">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-679">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-679">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-680">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-680">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-681">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-681">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-682">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-682">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-683">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-683">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8de53-684">O <see cref="T:System.Type" /> que representa a classe que implementa <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-684">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-685">O nome do método estático que o delegado deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-685">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="8de53-686">Um booliano indicando se é necessário ignorar as maiúsculas durante a comparação do nome do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-686">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-687">Cria um delegado do tipo especificado que representa o método estático especificado da classe especificada, com a diferenciação de maiúsculas e minúsculas especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-687">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-688">Um delegado do tipo especificado que representa o método especificado estático da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-688">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-689">Esse método cria delegados para apenas métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8de53-689">This method creates delegates for static methods only.</span></span> <span data-ttu-id="8de53-690">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-690">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8de53-691">Essa sobrecarga de método é equivalente a chamar o <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga do método, especificando `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8de53-691">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-692">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-692">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-693">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-693">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-694">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-694">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-695">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-695">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-696">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-696">-or-</span>
          </span>
          <span data-ttu-id="8de53-697">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-697">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-698">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-698">-or-</span>
          </span>
          <span data-ttu-id="8de53-699">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-699">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-700">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-700">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-701">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-701">-or-</span>
          </span>
          <span data-ttu-id="8de53-702">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-702">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-703">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-703">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-704">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-704">-or-</span>
          </span>
          <span data-ttu-id="8de53-705">
            <paramref name="target" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-705">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-706">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-706">-or-</span>
          </span>
          <span data-ttu-id="8de53-707">
            <paramref name="target" /> é um tipo genérico aberto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-707">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="8de53-708">Ou seja, sua propriedade <see cref="P:System.Type.ContainsGenericParameters" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-708">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="8de53-709">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-709">-or-</span>
          </span>
          <span data-ttu-id="8de53-710">O <paramref name="method" /> não é um método <see langword="static" /> (método <see langword="Shared" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-710">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="8de53-711">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-711">-or-</span>
          </span>
          <span data-ttu-id="8de53-712">O <paramref name="method" /> não pode ser associado, por exemplo, porque não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-712">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-713">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-713">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-714">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-714">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-715">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-715">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-716">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-716">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-717">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-717">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8de53-718">A instância de classe na qual <c>method</c> é invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-718">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-719">O nome do método de instância que o delegado deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-719">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="8de53-720">Um booliano indicando se é necessário ignorar as maiúsculas durante a comparação do nome do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-720">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="8de53-721">
            <see langword="true" /> para lançar uma exceção caso <c>method</c> não possa ser associado; do contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-721">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-722">Cria um delegado do tipo especificado que representa o método de instância especificado a ser invocado na instância da classe especificada, com a diferenciação de maiúsculas e minúsculas especificada e o comportamento especificado na falha de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-722">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-723">Um delegado do tipo especificado que representa o método de instância especificado a ser invocado na instância da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-723">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-724">Esse método cria delegados por exemplo apenas métodos.</span><span class="sxs-lookup"><span data-stu-id="8de53-724">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="8de53-725">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-725">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-726">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-726">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-727">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-727">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-728">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-728">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-729">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-729">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-730">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-730">-or-</span>
          </span>
          <span data-ttu-id="8de53-731">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-731">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-732">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-732">-or-</span>
          </span>
          <span data-ttu-id="8de53-733">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-733">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-734">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-734">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-735">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-735">-or-</span>
          </span>
          <span data-ttu-id="8de53-736">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-736">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-737">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-737">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-738">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-738">-or-</span>
          </span>
          <span data-ttu-id="8de53-739">
            <paramref name="method" /> não é um método de instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-739">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="8de53-740">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-740">-or-</span>
          </span>
          <span data-ttu-id="8de53-741">
            <paramref name="method" /> não pode ser associado, por exemplo, porque não foi encontrado e <paramref name="throwOnBindFailure" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-741">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-742">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-742">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-743">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-743">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-744">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-744">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-745">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-745">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8de53-746">O <see cref="T:System.Type" /> do representante a ser criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-746">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8de53-747">O <see cref="T:System.Type" /> que representa a classe que implementa <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-747">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8de53-748">O nome do método estático que o delegado deve representar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-748">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="8de53-749">Um booliano indicando se é necessário ignorar as maiúsculas durante a comparação do nome do método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-749">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="8de53-750">
            <see langword="true" /> para lançar uma exceção caso <c>method</c> não possa ser associado; do contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-750">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-751">Cria um delegado do tipo especificado que representa o método estático especificado da classe especificada, com a diferenciação de maiúsculas e minúsculas especificada e o comportamento especificado na falha de associação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-751">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-752">Um delegado do tipo especificado que representa o método especificado estático da classe especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-752">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-753">Esse método cria delegados para apenas métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="8de53-753">This method creates delegates for static methods only.</span></span> <span data-ttu-id="8de53-754">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-754">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8de53-755">Começando pelo [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], esse método pode ser usado para acessar métodos não públicos caso o chamador tenha recebido <xref:System.Security.Permissions.ReflectionPermission> com o sinalizador <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> e caso o conjunto de concessões dos métodos não públicos seja restrito ao conjunto de concessões do chamador, ou um subconjunto dele.</span><span class="sxs-lookup"><span data-stu-id="8de53-755">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="8de53-756">(Consulte [considerações sobre segurança para reflexão](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8de53-756">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8de53-757">Para usar essa funcionalidade, seu aplicativo deve ser direcionado ao [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou posterior.</span><span class="sxs-lookup"><span data-stu-id="8de53-757">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8de53-758">
            <paramref name="type" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-758">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-759">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-759">-or-</span>
          </span>
          <span data-ttu-id="8de53-760">
            <paramref name="target" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-760">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-761">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-761">-or-</span>
          </span>
          <span data-ttu-id="8de53-762">
            <paramref name="method" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-762">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-763">
            <paramref name="type" /> não herda <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-763">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="8de53-764">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-764">-or-</span>
          </span>
          <span data-ttu-id="8de53-765">
            <paramref name="type" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-765">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-766">Consulte [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858) (Tipos de tempo de execução na reflexão).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-766">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="8de53-767">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-767">-or-</span>
          </span>
          <span data-ttu-id="8de53-768">
            <paramref name="target" /> não é um <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-768">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="8de53-769">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-769">-or-</span>
          </span>
          <span data-ttu-id="8de53-770">
            <paramref name="target" /> é um tipo genérico aberto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-770">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="8de53-771">Ou seja, sua propriedade <see cref="P:System.Type.ContainsGenericParameters" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-771">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="8de53-772">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-772">-or-</span>
          </span>
          <span data-ttu-id="8de53-773">O <paramref name="method" /> não é um método <see langword="static" /> (método <see langword="Shared" /> no Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-773">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="8de53-774">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-774">-or-</span>
          </span>
          <span data-ttu-id="8de53-775">
            <paramref name="method" /> não pode ser associado, por exemplo, porque não foi encontrado e <paramref name="throwOnBindFailure" /> é <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-775">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="8de53-776">O método <see langword="Invoke" /> de <paramref name="type" /> não foi encontrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-776">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="8de53-777">O chamador não tem as permissões necessárias para acessar <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-777">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-778">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-778">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-779">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-779">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="8de53-780">Uma matriz de objetos que são os argumentos a serem passados para o método representado pelo delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-780">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="8de53-781">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-781">-or-</span>
          </span>
          <span data-ttu-id="8de53-782">
            <see langword="null" /> se o método representado pelo delegado atual não exigir argumentos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-782">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-783">Invoca dinamicamente (associação tardia) o método representado pelo delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-783">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-784">O objeto retornado pelo método representado pelo delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-784">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-785">Este método chama o <xref:System.Delegate.DynamicInvokeImpl%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8de53-785">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-786">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-786">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="8de53-787">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-787">-or-</span>
          </span>
          <span data-ttu-id="8de53-788">O número, a ordem ou o tipo de parâmetros listados no <paramref name="args" /> é inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-788">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-789">O método representado pelo delegado é invocado em um objeto ou uma classe que não dá suporte a ele.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-789">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="8de53-790">O método representado pelo delegado é um método de instância e o objeto de destino é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-790">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-791">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-791">-or-</span>
          </span>
          <span data-ttu-id="8de53-792">Um dos métodos encapsulados gera uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-792">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-793">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-793">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-794">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-794">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="8de53-795">Uma matriz de objetos que são os argumentos a serem passados para o método representado pelo delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-795">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="8de53-796">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-796">-or-</span>
          </span>
          <span data-ttu-id="8de53-797">
            <see langword="null" /> se o método representado pelo delegado atual não exigir argumentos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-797">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-798">Invoca dinamicamente (associação tardia) o método representado pelo delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-798">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-799">O objeto retornado pelo método representado pelo delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-799">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-800">Este método implementa o método <xref:System.Delegate.DynamicInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8de53-800">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-801">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-801">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="8de53-802">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-802">-or-</span>
          </span>
          <span data-ttu-id="8de53-803">O número, a ordem ou o tipo de parâmetros listados no <paramref name="args" /> é inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-803">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-804">O método representado pelo delegado é invocado em um objeto ou uma classe que não dá suporte a ele.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-804">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="8de53-805">O método representado pelo delegado é um método de instância e o objeto de destino é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-805">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8de53-806">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-806">-or-</span>
          </span>
          <span data-ttu-id="8de53-807">Um dos métodos encapsulados gera uma exceção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-807">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-808">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-808">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-809">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-809">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8de53-810">O objeto a ser comparado com o delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-810">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-811">Determina se o objeto especificado e o delegado atual são do mesmo tipo e compartilham os mesmos destinos, métodos e lista de invocação.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-811">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-812">
            <see langword="true" /> se <paramref name="obj" /> e o delegado atual têm os mesmos destinos, métodos e lista de invocação; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-812">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-813">Se os dois delegados não são do mesmo tipo, eles não são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-813">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8de53-814">No .NET Framework versão 1.0 e 1.1, dois delegados foram considerados iguais se seus destinos, métodos e lista de invocação fossem iguais, mesmo que os delegados de tipos diferentes.</span><span class="sxs-lookup"><span data-stu-id="8de53-814">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="8de53-815">Os métodos e os destinos são comparados quanto à igualdade, da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="8de53-815">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="8de53-816">Se os dois métodos que estão sendo comparados são estáticos em são o mesmo método na mesma classe, os métodos são considerados iguais e os destinos também são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-816">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8de53-817">Se os dois métodos que estão sendo comparados são métodos de instância em o mesmo método no mesmo objeto, os métodos são considerados iguais e os destinos também são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-817">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8de53-818">Caso contrário, os métodos não são considerados iguais e os destinos também não são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-818">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="8de53-819">Duas listas de invocação serão consideradas idênticas somente se eles têm a mesma ordem e os elementos correspondentes das duas listas de representarem o mesmo método e o destino.</span><span class="sxs-lookup"><span data-stu-id="8de53-819">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-820">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-820">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-821">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-821">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-822">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-822">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8de53-823">Retorna um código hash para o delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-823">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-824">Um código hash para o delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-824">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-825">O valor de retorno desse método não deve ser persistido por dois motivos.</span><span class="sxs-lookup"><span data-stu-id="8de53-825">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="8de53-826">Em primeiro lugar, a função de hash de uma classe pode ser alterada para gerar uma distribuição melhor, renderização de todos os valores da função de hash antigo inútil.</span><span class="sxs-lookup"><span data-stu-id="8de53-826">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="8de53-827">Em segundo lugar, a implementação padrão dessa classe não garante que o mesmo valor será retornado por instâncias diferentes.</span><span class="sxs-lookup"><span data-stu-id="8de53-827">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-828">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-828">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-829">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-829">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8de53-830">Retorna a lista de invocação do delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-830">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-831">Uma matriz de delegados representando a lista de invocação do delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-831">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-832">Cada delegado na matriz representa exatamente um método.</span><span class="sxs-lookup"><span data-stu-id="8de53-832">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="8de53-833">A ordem dos delegados na matriz é a mesma ordem em que o delegado atual invoca os métodos que representam os delegados.</span><span class="sxs-lookup"><span data-stu-id="8de53-833">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8de53-834">O exemplo a seguir atribui a três métodos a um delegado.</span><span class="sxs-lookup"><span data-stu-id="8de53-834">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="8de53-835">Em seguida, ele chama o <xref:System.Delegate.GetInvocationList%2A> método para obter uma contagem total dos métodos atribuído ao delegado, para executar os delegados na ordem inversa, bem como executar os métodos cujo nome não incluem a subcadeia de caracteres "File".</span><span class="sxs-lookup"><span data-stu-id="8de53-835">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-836">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-836">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-837">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-837">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8de53-838">Obtém o método estático representado pelo delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-838">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-839">Um <see cref="T:System.Reflection.MethodInfo" /> que descreve o método estático representado pelo delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-839">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-840">Esse método se aplica somente se o delegado atual representa um método estático.</span><span class="sxs-lookup"><span data-stu-id="8de53-840">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-841">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-841">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-842">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-842">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-843">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-843">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="8de53-844">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-844">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="8de53-845">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-845">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-846">Sem suporte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-846">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8de53-847">Não há suporte para o método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-847">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8de53-848">Requer confiança total para o chamador imediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-848">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8de53-849">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-849">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8de53-850">Obtém o método representado pelo delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-850">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8de53-851">Uma <see cref="T:System.Reflection.MethodInfo" /> que descreve o método representado pelo delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-851">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-852">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-852">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-853">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-853">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-854">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-854">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="8de53-855">O primeiro delegado a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-855">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="8de53-856">O segundo delegado a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-856">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-857">Determina se os delegados especificados são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-857">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-858">
            <see langword="true" /> se <paramref name="d1" /> for igual a <paramref name="d2" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-858">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-859">Dois delegados do mesmo tipo com os mesmos destinos, métodos e listas de invocação são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-859">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="8de53-860">Se os dois delegados não são do mesmo tipo, eles não são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-860">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8de53-861">No .NET Framework versão 1.0 e 1.1, dois delegados foram considerados iguais se seus destinos, métodos e lista de invocação fossem iguais, mesmo que os delegados de tipos diferentes.</span><span class="sxs-lookup"><span data-stu-id="8de53-861">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="8de53-862">Os métodos e os destinos são comparados quanto à igualdade, da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="8de53-862">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="8de53-863">Se os dois métodos que estão sendo comparados são estáticos em são o mesmo método na mesma classe, os métodos são considerados iguais e os destinos também são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-863">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8de53-864">Se os dois métodos que estão sendo comparados são métodos de instância em o mesmo método no mesmo objeto, os métodos são considerados iguais e os destinos também são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-864">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8de53-865">Caso contrário, os métodos não são considerados iguais e os destinos também não são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-865">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="8de53-866">Duas listas de invocação serão consideradas idênticas se tiverem a mesma ordem e os elementos correspondentes de duas listas representarem o mesmo método e destino.</span><span class="sxs-lookup"><span data-stu-id="8de53-866">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="8de53-867">É o método equivalente para esse operador <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8de53-867">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-868">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-868">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-869">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-869">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="8de53-870">O primeiro delegado a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-870">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="8de53-871">O segundo delegado a ser comparado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-871">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-872">Determina se os delegados especificados não são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-872">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-873">
            <see langword="true" /> se <paramref name="d1" /> não for igual a <paramref name="d2" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-873">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-874">Dois delegados são considerados não iguais se forem de tipos diferentes, ou ter métodos diferentes, destinos diferentes ou listas de invocação diferente.</span><span class="sxs-lookup"><span data-stu-id="8de53-874">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="8de53-875">Se os dois delegados não são do mesmo tipo, eles não são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-875">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8de53-876">No .NET Framework versão 1.0 e 1.1, dois delegados são considerados iguais se seus destinos, métodos e lista de invocação fossem iguais, mesmo que os delegados de tipos diferentes.</span><span class="sxs-lookup"><span data-stu-id="8de53-876">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="8de53-877">Os métodos e os destinos são comparados quanto à igualdade, da seguinte maneira:</span><span class="sxs-lookup"><span data-stu-id="8de53-877">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="8de53-878">Se os dois métodos que estão sendo comparados são estáticos em são o mesmo método na mesma classe, os métodos são considerados iguais e os destinos também são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-878">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8de53-879">Se os dois métodos que estão sendo comparados são métodos de instância em o mesmo método no mesmo objeto, os métodos são considerados iguais e os destinos também são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-879">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8de53-880">Caso contrário, os métodos não são considerados iguais e os destinos também não são considerados iguais.</span><span class="sxs-lookup"><span data-stu-id="8de53-880">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="8de53-881">Duas listas de invocação não são iguais se eles tiverem tamanhos diferentes, se eles são ordenados de forma diferente, ou se pelo menos um elemento de uma lista representa um método ou o destino que é diferente daquele representado por seu elemento correspondente em outra lista.</span><span class="sxs-lookup"><span data-stu-id="8de53-881">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="8de53-882">É o método equivalente para esse operador <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8de53-882">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-883">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-883">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-884">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-884">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="8de53-885">O delegado do qual a lista de invocação de <c>value</c> será removida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-885">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8de53-886">O delegado que fornece a lista de invocação a ser removida da lista de invocação de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-886">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-887">Remove a última ocorrência da lista de invocação de um delegado da lista de invocação de outro delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-887">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-888">Um novo delegado com uma lista de invocação formada com o uso da lista de invocação de <paramref name="source" /> e a remoção da última ocorrência da lista de invocação de <paramref name="value" />, se a lista de invocação de <paramref name="value" /> for encontrada na lista de invocação de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-888">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="8de53-889">Retorna <paramref name="source" /> se <paramref name="value" /> for <see langword="null" /> ou se a lista de invocação de <paramref name="value" /> não for encontrada na lista de invocação de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-889">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="8de53-890">Retorna uma referência nula se a lista de invocação de <paramref name="value" /> for igual à lista de invocação de <paramref name="source" /> ou se <paramref name="source" /> for uma referência nula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-890">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-891">Se a lista de invocação `value` corresponde a um conjunto contíguo de elementos na lista de invocação de `source`, em seguida, a lista de invocação de `value` deve ocorrer na lista de invocação de `source`.</span><span class="sxs-lookup"><span data-stu-id="8de53-891">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="8de53-892">Se a lista de invocação `value` ocorre mais de uma vez na lista de invocação de `source`, a última ocorrência será removida.</span><span class="sxs-lookup"><span data-stu-id="8de53-892">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-893">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-893">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-894">Os tipos de delegado não são correspondentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-894">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-895">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-895">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-896">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-896">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="8de53-897">O delegado do qual a lista de invocação de <c>value</c> será removida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-897">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8de53-898">O delegado que fornece a lista de invocação a ser removida da lista de invocação de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-898">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-899">Remove todas as ocorrências da lista de invocação de um delegado da lista de invocação de outro delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-899">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-900">Um novo delegado com uma lista de invocação formada com o uso da lista de invocação de <paramref name="source" /> e remoção de todas as ocorrências da lista de invocação de <paramref name="value" />, se a lista de invocação de <paramref name="value" /> for encontrada na lista de invocação de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-900">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="8de53-901">Retorna <paramref name="source" /> se <paramref name="value" /> é <see langword="null" /> ou se a lista de invocação de <paramref name="value" /> não é encontrada na lista de invocação de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-901">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="8de53-902">Retorna uma referência nula se a lista de invocação de <paramref name="value" /> é igual à lista de invocação de <paramref name="source" />, se <paramref name="source" /> contém apenas uma série de listas de invocação que é igual à lista de invocação de <paramref name="value" /> ou se <paramref name="source" /> é uma referência nula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-902">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-903">Se a lista de invocação `value` corresponde a um conjunto contíguo de elementos na lista de invocação de `source`, em seguida, a lista de invocação de `value` deve ocorrer na lista de invocação de `source`.</span><span class="sxs-lookup"><span data-stu-id="8de53-903">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="8de53-904">Se a lista de invocação `value` ocorre mais de uma vez na lista de invocação de `source`, todas as ocorrências são removidas.</span><span class="sxs-lookup"><span data-stu-id="8de53-904">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-905">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-905">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8de53-906">Os tipos de delegado não são correspondentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-906">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-907">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-907">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-908">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-908">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="8de53-909">O delegado que fornece a lista de invocação a ser removida da lista de invocação do delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-909">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8de53-910">Remove a lista de invocação de um delegado da lista de invocação de outro delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-910">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8de53-911">Um novo delegado com uma lista de invocação formada tomando a lista de invocação do delegado atual e removendo a lista de invocação de <paramref name="value" />, se a lista de invocação de <paramref name="value" /> for encontrada na lista de invocação do delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-911">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="8de53-912">Retorna o delegado atual se <paramref name="value" /> for <see langword="null" /> ou se a lista de invocação de <paramref name="value" /> não for encontrada na lista de invocação do delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-912">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="8de53-913">Retorna <see langword="null" /> se a lista de invocação de <paramref name="value" /> é igual à lista de invocação do delegado atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-913">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-914">Se a lista de invocação `value` corresponde a um conjunto contíguo de elementos na lista de invocação do delegado atual e, em seguida, lista de invocação de `value` deve ocorrer na lista de invocação do delegado atual.</span><span class="sxs-lookup"><span data-stu-id="8de53-914">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="8de53-915">Se a lista de invocação de `value` ocorre mais de uma vez na lista de invocação do delegado atual, a última ocorrência será removida.</span><span class="sxs-lookup"><span data-stu-id="8de53-915">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8de53-916">O chamador não tem acesso ao método representado pelo representante (por exemplo, caso o método seja privado).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-916">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-917">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-917">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-918">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-918">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8de53-919">Obtém a instância da classe em que o delegado atual invoca o método de instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-919">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8de53-920">O objeto no qual o delegado atual invoca o método de instância, se o delegado representar um método de instância; <see langword="null" /> se o delegado representar um método estático.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-920">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8de53-921">Método de instância é um método associado a uma instância de uma classe; método estático é um método associado à própria classe.</span><span class="sxs-lookup"><span data-stu-id="8de53-921">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8de53-922">Se o delegado invoca um ou mais métodos de instância, essa propriedade retorna o destino do último método de instância na lista de invocação.</span><span class="sxs-lookup"><span data-stu-id="8de53-922">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8de53-923">quando invocado com associação tardia por meio de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-923">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="8de53-924">Enumeração associada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8de53-924">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>