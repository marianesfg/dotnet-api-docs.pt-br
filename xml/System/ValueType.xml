<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33378379d2e91ec17aa2980f5a53aa8e59d1b2bd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36427329" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9a0a4-101">Fornece a classe base para tipos de valor.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9a0a4-101">Provides the base class for value types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a0a4-102"><xref:System.ValueType> substitui os métodos virtuais de <xref:System.Object> com implementações mais apropriadas para tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="9a0a4-103">Consulte também <xref:System.Enum>, que herda de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="9a0a4-104">Tipos de dados são separados em tipos de valor e tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="9a0a4-105">Tipos de valor são alocadas de pilha ou alocados embutidos em uma estrutura.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="9a0a4-106">Tipos de referência são alocados no heap.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="9a0a4-107">Tipos de referência e valor são derivados da classe base definitiva <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="9a0a4-108">Em casos em que é necessário para um tipo de valor para que atue como um objeto, um wrapper que faz o tipo de valor pareça um objeto de referência é alocado no heap e valor do tipo de valor é copiado para ele.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="9a0a4-109">O wrapper está marcado para que o sistema Saiba que ele contém um tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="9a0a4-110">Esse processo é conhecido como conversão boxing e o processo inverso é conhecido como unboxing.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="9a0a4-111">Conversões boxing e unboxing permitem qualquer tipo deve ser tratado como um objeto.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="9a0a4-112">Embora <xref:System.ValueType> é a classe base implícita para tipos de valor, você não pode criar uma classe que herda de <xref:System.ValueType> diretamente.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="9a0a4-113">Em vez disso, os compiladores individuais fornecem uma palavra-chave do idioma ou construir (como `struct` em c# e `Structure`...`End Structure`</span><span class="sxs-lookup"><span data-stu-id="9a0a4-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="9a0a4-114">no Visual Basic) para dar suporte à criação de tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="9a0a4-115">Além de servir como a classe base para tipos de valor no .NET Framework, o <xref:System.ValueType> estrutura geralmente não é usada diretamente no código.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="9a0a4-116">No entanto, ele pode ser usado como um parâmetro em chamadas de método para restringir os argumentos possíveis para tipos de valor em vez de todos os objetos ou para permitir que um método para lidar com um número de tipos de valor diferentes.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="9a0a4-117">O exemplo a seguir ilustra como <xref:System.ValueType> impede que estão sendo transmitidos para métodos de tipos de referência.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="9a0a4-118">Define uma classe denominada `Utility` que contém quatro métodos: `IsNumeric`, que indica se o argumento é um número. `IsInteger`, que indica se o argumento é um número inteiro; `IsFloat`, que indica se o argumento é um número de ponto flutuante; e `Compare`, que indica a relação entre dois valores numéricos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="9a0a4-119">Em cada caso, os parâmetros de método são do tipo <xref:System.ValueType>, e os tipos de referência são impedidos de sendo passados para os métodos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="9a0a4-120">O exemplo a seguir ilustra chamadas para os métodos do `Utility` classe.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a0a4-121">Inicializa uma nova instância da classe <see cref="T:System.ValueType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="9a0a4-122">O objeto a ser comparado com a instância atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-122">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a0a4-123">Indica se essa instância e um objeto especificado são iguais.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-123">Indicates whether this instance and a specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a0a4-124">
            <see langword="true" /> se <paramref name="obj" /> e essa instância forem do mesmo tipo e representarem o mesmo valor; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-124">
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a0a4-125">O <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> substituições de método <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> e fornece a implementação padrão de igualdade de valor para todos os tipos de valor no .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="9a0a4-126">Se nenhum dos campos da instância atual e `obj` são tipos de referência, o <xref:System.ValueType.Equals%2A> método executa uma comparação byte por byte dos dois objetos na memória.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-126">If none of the fields of the current instance and `obj` are reference types, the <xref:System.ValueType.Equals%2A> method performs a byte-by-byte comparison of the two objects in memory.</span></span> <span data-ttu-id="9a0a4-127">Caso contrário, ele usa reflexão para comparar os campos correspondentes de `obj` e essa instância.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-127">Otherwise, it uses reflection to compare the corresponding fields of `obj` and this instance.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9a0a4-128">Especialmente se o tipo de valor contém campos que são tipos de referência, você deve substituir o <xref:System.ValueType.Equals%28System.Object%29> método.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-128">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="9a0a4-129">Isso pode melhorar o desempenho e permitem que você representam mais de perto o significado de igualdade para o tipo.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-129">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="9a0a4-130">Observações para o [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a0a4-130">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="9a0a4-131">Quando você chama o <xref:System.ValueType.Equals%2A> método em um [!INCLUDE[wrt](~/includes/wrt-md.md)] estrutura, ele fornece o comportamento padrão para tipos de valor não substituem <xref:System.ValueType.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-131">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="9a0a4-132">Isso faz parte do suporte fornecido pelo .NET Framework para o [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [.NET Framework oferecem suporte para aplicativos da Windows Store e tempo de execução do Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="9a0a4-132">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="9a0a4-133"> estruturas não podem substituir <xref:System.ValueType.Equals%2A>, mesmo que estão gravados com c# ou Visual Basic, porque eles não podem ter métodos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-133"> structures can’t override <xref:System.ValueType.Equals%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="9a0a4-134">(Além disso, estruturas de [!INCLUDE[wrt](~/includes/wrt-md.md)] em si não herdam <xref:System.ValueType>.) No entanto, eles parecerão ter <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> métodos quando usá-los em seu código c# ou Visual Basic e o .NET Framework fornece o comportamento padrão para esses métodos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-134">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a0a4-135">O exemplo a seguir demonstra como o <xref:System.ValueType.Equals%2A> método pode ser substituído por um tipo de valor derivado.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-135">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a0a4-136">Retorna o código hash para essa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-136">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a0a4-137">Um inteiro com sinal de 32 bits que é o código hash para esta instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-137">A 32-bit signed integer that is the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a0a4-138">O <xref:System.ValueType.GetHashCode%2A> método se aplica a tipos derivados de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-138">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="9a0a4-139">Um ou mais campos do tipo derivado é usada para calcular o valor de retorno.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-139">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="9a0a4-140">Se você chamar o tipo derivado `GetHashCode` método, o valor de retorno não é provável que seja adequada para uso como uma chave em uma tabela de hash.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-140">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="9a0a4-141">Além disso, se o valor de um ou mais desses campos for alterado, o valor de retorno pode se tornar inadequado para uso como uma chave em uma tabela de hash.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-141">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="9a0a4-142">Em ambos os casos, considere escrever sua própria implementação do <xref:System.ValueType.GetHashCode%2A> que melhor representa o conceito de um código hash para o tipo de método.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-142">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="9a0a4-143">Para obter mais informações, consulte <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> e <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-143">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="9a0a4-144">Observações para o [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a0a4-144">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="9a0a4-145">Quando você chama o <xref:System.ValueType.GetHashCode%2A> método em um [!INCLUDE[wrt](~/includes/wrt-md.md)] estrutura, ele fornece o comportamento padrão para tipos de valor não substituem <xref:System.ValueType.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-145">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="9a0a4-146">Isso faz parte do suporte fornecido pelo .NET Framework para o [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [.NET Framework oferecem suporte para aplicativos da Windows Store e tempo de execução do Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="9a0a4-146">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="9a0a4-147"> estruturas não podem substituir <xref:System.ValueType.GetHashCode%2A>, mesmo que estão gravados com c# ou Visual Basic, porque eles não podem ter métodos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-147"> structures can’t override <xref:System.ValueType.GetHashCode%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="9a0a4-148">(Além disso, estruturas de [!INCLUDE[wrt](~/includes/wrt-md.md)] em si não herdam <xref:System.ValueType>.) No entanto, eles parecerão ter <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> métodos quando usá-los em seu código c# ou Visual Basic e o .NET Framework fornece o comportamento padrão para esses métodos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-148">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a0a4-149">O exemplo a seguir demonstra como o <xref:System.ValueType.GetHashCode%2A> método pode ser substituído por um tipo de valor derivado.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-149">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a0a4-150">Retorna o nome do tipo totalmente qualificado dessa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-150">Returns the fully qualified type name of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a0a4-151">O nome de tipo totalmente qualificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a0a4-151">The fully qualified type name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a0a4-152">O <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> substituições de método de <xref:System.Object.ToString%2A?displayProperty=nameWithType> método e fornece a implementação padrão da `ToString` método para tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-152">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="9a0a4-153">(Tipos de valor são tipos definidos pelo `struct` palavra-chave no c# e o `Structure`... `End Structure` construir no Visual Basic.) Funcionalmente, no entanto, a implementação é que mesmo que <xref:System.Object.ToString%2A?displayProperty=nameWithType>: o método retorna o nome de tipo totalmente qualificado.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-153">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="9a0a4-154">Valor de tipos definidos pelo `struct` palavra-chave em c# e o `Structure`... `End Structure` construção no Visual Basic normalmente substituem o <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> método para fornecer uma representação de cadeia de caracteres mais significativa do tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-154">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="9a0a4-155">O exemplo a seguir ilustra a diferença.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-155">The following example illustrates the difference.</span></span> <span data-ttu-id="9a0a4-156">Ele define dois tipos de valor, `EmployeeA` e `EmployeeB`, cria uma instância de cada e chama seu `ToString` método.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-156">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="9a0a4-157">Porque o `EmployeeA` estrutura não substitui o <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> método, ele exibe apenas o nome de tipo totalmente qualificado.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-157">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="9a0a4-158">O `EmployeeB.ToString` método, por outro lado, fornece informações importantes sobre o objeto.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-158">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="9a0a4-159">Observe que, embora os tipos de enumeração também são tipos de valor, eles derivam de <xref:System.Enum> de classe que substitui <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-159">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="9a0a4-160">Observações para o tempo de execução do Windows</span><span class="sxs-lookup"><span data-stu-id="9a0a4-160">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="9a0a4-161">Quando você chama o <xref:System.ValueType.ToString%2A> método em um [!INCLUDE[wrt](~/includes/wrt-md.md)] estrutura, ele fornece o comportamento padrão para tipos de valor não substituem <xref:System.ValueType.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-161">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="9a0a4-162">Isso faz parte do suporte fornecido pelo .NET Framework para o [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [.NET Framework oferecem suporte para aplicativos da Windows Store e tempo de execução do Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="9a0a4-162">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="9a0a4-163"> estruturas não podem substituir <xref:System.ValueType.ToString%2A>, mesmo que estão gravados com c# ou Visual Basic, porque eles não podem ter métodos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-163"> structures can’t override <xref:System.ValueType.ToString%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="9a0a4-164">(Além disso, estruturas de [!INCLUDE[wrt](~/includes/wrt-md.md)] em si não herdam <xref:System.ValueType>.) No entanto, eles parecerão ter <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> métodos quando usá-los em seu código c# ou Visual Basic e o .NET Framework fornece o comportamento padrão para esses métodos.</span><span class="sxs-lookup"><span data-stu-id="9a0a4-164">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>