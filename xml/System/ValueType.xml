<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7961a45dd5c909be4d66d64972923c01c6ef84f" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52589160" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece a classe base para tipos de valor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> substitui os métodos virtuais de <xref:System.Object> com implementações mais apropriadas para tipos de valor. Consulte também <xref:System.Enum>, que herda de <xref:System.ValueType>.  
  
 Tipos de dados são separados em tipos de valor e tipos de referência. Tipos de valor são alocadas de pilha ou alocados embutida em uma estrutura. Tipos de referência são alocados no heap. Tipos de referência e valor são derivados da classe base ultimate <xref:System.Object>. Em casos em que é necessário para um tipo de valor se comportar como um objeto, um wrapper que faz o tipo de valor pareça um objeto de referência é alocado no heap e o valor do tipo de valor é copiado para ele. O wrapper está marcado para que o sistema sabe que ele contém um tipo de valor. Esse processo é conhecido como conversão boxing, e o processo inverso é conhecido como conversão unboxing. Conversões boxing e unboxing permitem que qualquer tipo a ser tratado como um objeto.  
  
 Embora <xref:System.ValueType> é a classe base implícita para tipos de valor, você não pode criar uma classe que herda de <xref:System.ValueType> diretamente. Em vez disso, os compiladores individuais fornecem uma palavra-chave de linguagem ou construir (como `struct` em c# e `Structure`...`End Structure` no Visual Basic) para suporte à criação de tipos de valor.  
  
 Além de servir como a classe base para tipos de valor no .NET Framework, o <xref:System.ValueType> estrutura geralmente não é usada diretamente no código. No entanto, ele pode ser usado como um parâmetro em chamadas de método para restringir os argumentos possíveis para tipos de valor em vez de todos os objetos, ou para permitir que um método para lidar com um número de tipos de valor diferentes. O exemplo a seguir ilustra como <xref:System.ValueType> impede que os tipos de referência que está sendo passado para métodos. Ele define uma classe chamada `Utility` que contém os quatro métodos: `IsNumeric`, que indica se o argumento é um número; `IsInteger`, que indica se o argumento for um inteiro; `IsFloat`, que indica se o argumento é um número de ponto flutuante; e `Compare`, que indica a relação entre dois valores numéricos. Em cada caso, os parâmetros do método são do tipo <xref:System.ValueType>, e os tipos de referência são impedidos de sendo passados para os métodos.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 O exemplo a seguir ilustra chamadas para os métodos do `Utility` classe.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ValueType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado com a instância atual.</param>
        <summary>Indica se essa instância e um objeto especificado são iguais.</summary>
        <returns><see langword="true" /> se <paramref name="obj" /> e essa instância forem do mesmo tipo e representarem o mesmo valor; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> substituições de método <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> e fornece a implementação padrão de igualdade de valor para todos os tipos de valor no .NET Framework.  
  
 Se nenhum dos campos da instância atual e `obj` são tipos de referência, o <xref:System.ValueType.Equals%2A> método executa uma comparação byte por byte dos dois objetos na memória. Caso contrário, ele usa a reflexão para comparar os campos correspondentes de `obj` e essa instância.  
  
> [!TIP]
>  Especialmente se o tipo de valor contém campos que são tipos de referência, você deve substituir o <xref:System.ValueType.Equals%28System.Object%29> método. Isso pode melhorar o desempenho e permitem que você representar mais de perto o significado de igualdade para o tipo.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Observações para o [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Quando você chama o <xref:System.ValueType.Equals%2A> método em um [!INCLUDE[wrt](~/includes/wrt-md.md)] estrutura, ele fornece o comportamento padrão para tipos de valor que não substituem <xref:System.ValueType.Equals%2A>. Isso faz parte do suporte fornecido pelo .NET Framework para o [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [tempo de execução do Windows e de aplicativos .NET Framework dão suporte para Windows Store](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] estruturas não podem substituir <xref:System.ValueType.Equals%2A>, mesmo se eles são escritos com C# ou Visual Basic, porque eles não podem ter métodos. (Além disso, as estruturas na [!INCLUDE[wrt](~/includes/wrt-md.md)] em si não herdam <xref:System.ValueType>.) No entanto, eles parecem ter <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> métodos quando usá-los em seu código c# ou Visual Basic e o .NET Framework fornece o comportamento padrão para esses métodos.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como o <xref:System.ValueType.Equals%2A> método pode ser substituído por um tipo de valor derivado.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o código hash para essa instância.</summary>
        <returns>Um inteiro com sinal de 32 bits que é o código hash para esta instância.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ValueType.GetHashCode%2A> o método se aplica a tipos derivados <xref:System.ValueType>. Um ou mais campos do tipo derivado é usada para calcular o valor de retorno. Se você chamar o tipo derivado `GetHashCode` método, o valor de retorno não é provável que seja adequado para uso como uma chave em uma tabela de hash. Além disso, se o valor de um ou mais desses campos for alterado, o valor de retorno pode se tornar inadequado para uso como uma chave em uma tabela de hash. Em ambos os casos, considere escrever sua própria implementação do <xref:System.ValueType.GetHashCode%2A> método que representa mais de perto o conceito de um código hash para o tipo.  
  
 Para obter mais informações, consulte <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> e <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Observações para o [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Quando você chama o <xref:System.ValueType.GetHashCode%2A> método em um [!INCLUDE[wrt](~/includes/wrt-md.md)] estrutura, ele fornece o comportamento padrão para tipos de valor que não substituem <xref:System.ValueType.GetHashCode%2A>. Isso faz parte do suporte fornecido pelo .NET Framework para o [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [tempo de execução do Windows e de aplicativos .NET Framework dão suporte para Windows Store](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] estruturas não podem substituir <xref:System.ValueType.GetHashCode%2A>, mesmo se eles são escritos com C# ou Visual Basic, porque eles não podem ter métodos. (Além disso, as estruturas na [!INCLUDE[wrt](~/includes/wrt-md.md)] em si não herdam <xref:System.ValueType>.) No entanto, eles parecem ter <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> métodos quando usá-los em seu código c# ou Visual Basic e o .NET Framework fornece o comportamento padrão para esses métodos.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como o <xref:System.ValueType.GetHashCode%2A> método pode ser substituído por um tipo de valor derivado.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o nome do tipo totalmente qualificado dessa instância.</summary>
        <returns>O nome de tipo totalmente qualificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> substituições de método de <xref:System.Object.ToString%2A?displayProperty=nameWithType> método e fornece a implementação padrão da `ToString` método para tipos de valor. (Tipos de valor são tipos definidos pelo `struct` palavra-chave em c# e pela `Structure`... `End Structure` construir no Visual Basic.) Funcionalmente, no entanto, a implementação é que mesmo de <xref:System.Object.ToString%2A?displayProperty=nameWithType>: o método retorna o nome de tipo totalmente qualificado.  
  
 Valor de tipos definidos pelo `struct` palavra-chave em c# e o `Structure`... `End Structure` construção no Visual Basic normalmente substitui o <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> método para fornecer uma representação de cadeia de caracteres mais significativa do tipo de valor. O exemplo a seguir ilustra a diferença. Ele define dois tipos de valor `EmployeeA` e `EmployeeB`, cria uma instância de cada e chama seu `ToString` método. Porque o `EmployeeA` estrutura não substitui o <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> método, ele exibe apenas o nome de tipo totalmente qualificado. O `EmployeeB.ToString` método, por outro lado, fornece informações significativas sobre o objeto.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Observe que, embora os tipos de enumeração também são tipos de valor, eles derivam de <xref:System.Enum> classe, que substitui <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Notas para o tempo de execução do Windows  
 Quando você chama o <xref:System.ValueType.ToString%2A> método em um [!INCLUDE[wrt](~/includes/wrt-md.md)] estrutura, ele fornece o comportamento padrão para tipos de valor que não substituem <xref:System.ValueType.ToString%2A>. Isso faz parte do suporte fornecido pelo .NET Framework para o [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [tempo de execução do Windows e de aplicativos .NET Framework dão suporte para Windows Store](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] estruturas não podem substituir <xref:System.ValueType.ToString%2A>, mesmo se eles são escritos com C# ou Visual Basic, porque eles não podem ter métodos. (Além disso, as estruturas na [!INCLUDE[wrt](~/includes/wrt-md.md)] em si não herdam <xref:System.ValueType>.) No entanto, eles parecem ter <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> métodos quando usá-los em seu código c# ou Visual Basic e o .NET Framework fornece o comportamento padrão para esses métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>