<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MarshalByRefObject.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac583acfa54440d5b5ba0c4eb247332f63cbe45d467.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83acfa54440d5b5ba0c4eb247332f63cbe45d467</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Enables access to objects across application domain boundaries in applications that support remoting.</source>
          <target state="translated">Permite acesso a objetos entre limites de domínio de aplicativo em aplicativos que dão suporte a comunicação remota.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>An application domain is a partition in an operating system process where one or more applications reside.</source>
          <target state="translated">Um domínio de aplicativo é uma partição em um processo de sistema operacional em um ou mais aplicativos residem.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in the same application domain communicate directly.</source>
          <target state="translated">Objetos no mesmo domínio do aplicativo se comunicam diretamente.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</source>
          <target state="translated">Objetos em diferentes domínios de aplicativos se comunicam por transporte cópias dos objetos nos limites do domínio de aplicativo ou usando um proxy para trocar mensagens.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> a classe base para objetos que se comunicam entre limites de domínio de aplicativo com troca de mensagens está usando um proxy.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects that do not inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> are implicitly marshal by value.</source>
          <target state="translated">Objetos que não herda de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> são implicitamente marshaling por valor.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</source>
          <target state="translated">Quando um aplicativo remoto faz referência a um pacote por objeto de valor, uma cópia do objeto é passada entre limites de domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objects are accessed directly within the boundaries of the local application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objetos são acessados diretamente dentro dos limites do domínio do aplicativo local.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first time an application in a remote application domain accesses a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, a proxy is passed to the remote application.</source>
          <target state="translated">Na primeira vez que um aplicativo em um controle remoto domínio de aplicativo acessa um <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, um proxy é passado para o aplicativo remoto.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</source>
          <target state="translated">Chamadas subsequentes no proxy são empacotadas de volta para o objeto que reside no domínio de aplicativo local.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Types must inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</source>
          <target state="translated">Tipos devem herdar de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> quando o tipo é usado além dos limites do domínio de aplicativo e o estado do objeto não deve ser copiado porque os membros do objeto não são utilizáveis fora do domínio de aplicativo onde eles foram criados.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When you derive an object from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</source>
          <target state="translated">Quando você deriva de um objeto de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> para uso nos limites do domínio de aplicativo, você não deve substituir qualquer um de seus membros, nem deve chamar seus métodos diretamente.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The runtime recognizes that classes derived from  <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> should be marshaled across app domain boundaries.</source>
          <target state="translated">O tempo de execução reconhece que as classes derivadas de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> devem ser empacotados em limites de domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>This section contains two code examples.</source>
          <target state="translated">Esta seção contém dois exemplos de código.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first code example shows how to create an instance of a class in another application domain.</source>
          <target state="translated">O primeiro exemplo de código mostra como criar uma instância de uma classe em outro domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The second code example shows a simple class that can be used for remoting.</source>
          <target state="translated">O segundo exemplo de código mostra uma classe simples que pode ser usada para comunicação remota.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemplo 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following code example shows the simplest way to execute code in another application domain.</source>
          <target state="translated">O exemplo de código a seguir mostra a maneira mais simples para executar código em outro domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example defines a class named <ph id="ph1">`Worker`</ph> that inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, with a method that displays the name of the application domain in which it is executing.</source>
          <target state="translated">O exemplo define uma classe denominada <ph id="ph1">`Worker`</ph> que herda <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, com um método que exibe o nome do domínio do aplicativo no qual ele está em execução.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example creates instances of <ph id="ph1">`Worker`</ph> in the default application domain and in a new application domain.</source>
          <target state="translated">O exemplo cria instâncias de <ph id="ph1">`Worker`</ph> no domínio de aplicativo padrão e em um novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The assembly that contains <ph id="ph1">`Worker`</ph> must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.</source>
          <target state="translated">O assembly que contém <ph id="ph1">`Worker`</ph> devem ser carregados em ambos os domínios de aplicativo, mas conseguiu carregar outros assemblies que deve existir somente no novo domínio de aplicativo.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemplo 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following example demonstrates a class derived from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> that is used later in remoting.</source>
          <target state="translated">O exemplo a seguir demonstra uma classe derivada de <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> comunicação remota que é usada posteriormente.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object that the new <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> will reference.</source>
          <target state="translated">O <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> do objeto a que o novo <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> fará referência.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</source>
          <target state="translated">Cria um objeto que contém todas as informações relevantes necessárias para gerar um proxy usado para se comunicar com um objeto remoto.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Information required to generate a proxy.</source>
          <target state="translated">Informações necessárias para gerar um proxy.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> method is called by remote object creation methods such as <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> método é chamado pelos métodos de criação do objeto remoto como <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>In most cases, there is no need to override this method.</source>
          <target state="translated">Na maioria dos casos, não é necessário substituir esse método.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This instance is not a valid remoting object.</source>
          <target state="translated">Esta instância não é um objeto remoto válido.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">O chamador imediato não tem permissão de infraestrutura.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</source>
          <target state="translated">Recupera o objeto de serviço de tempo de vida atual que controla a política de ciclo de vida para esta instância.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated">Um objeto do tipo <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> usado para controlar a política de tempo de vida para esta instância.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">Para obter mais informações sobre os serviços de tempo de vida, consulte o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">O chamador imediato não tem permissão de infraestrutura.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>Obtains a lifetime service object to control the lifetime policy for this instance.</source>
          <target state="translated">Obtém um objeto de serviço de tempo de vida para controlar a política de tempo de vida para essa instância.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated">Um objeto do tipo <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> usado para controlar a política de tempo de vida para esta instância.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph> property.</source>
          <target state="translated">Esse é o objeto de serviço de tempo de vida atual para essa instância se existir alguma; caso contrário, um novo objeto de serviço de tempo de vida inicializado para o valor da propriedade <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">Para obter mais informações sobre os serviços de tempo de vida, consulte o <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The following code example demonstrates creating a lease.</source>
          <target state="translated">O exemplo de código a seguir demonstra a criação de uma concessão.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">O chamador imediato não tem permissão de infraestrutura.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requer confiança total para o chamador imediato.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este membro não pode ser usado pelo código transparente ou parcialmente confiável.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Creates a shallow copy of the current object.</source>
          <target state="translated">Cria uma cópia superficial do objeto atual.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> to delete the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> para excluir a identidade do objeto <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> atual, o que fará com que o objeto seja atribuído a uma nova identidade quando ele passa por marshaling em um limite de comunicação remota.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A value of <ph id="ph1">&lt;see langword="false" /&gt;</ph> is usually appropriate.</source>
          <target state="translated">Um valor de <ph id="ph1">&lt;see langword="false" /&gt;</ph> geralmente é adequado.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to copy the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para copiar a identidade do objeto <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> atual para o clone, o que fará com que as chamadas de cliente de comunicação remota sejam roteados para o objeto do servidor remoto.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Creates a shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">Cria uma cópia superficial do objeto <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">Uma cópia superficial do objeto <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method creates a shallow copy by creating a new <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> object, and then copying the nonstatic fields of the current <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object to the new object.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> método cria uma cópia superficial, criando um novo <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> do objeto e, em seguida, copiando os campos não estáticos do atual <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> objeto para o novo objeto.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a value type, a bit-by-bit copy of the field is performed.</source>
          <target state="translated">Se um campo é um tipo de valor, uma cópia de bit a bit do campo será executada.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</source>
          <target state="translated">Se um campo é um tipo de referência, a referência é copiada, mas o objeto chamado é não; Portanto, o objeto original e seu clone se referem ao mesmo objeto.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>For example, consider a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> interface to perform a deep or shallow copy of an object.</source>
          <target state="translated">Por exemplo, considere um <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objeto chamado X que faz referência a objetos A e B. B do objeto, por sua vez, faz referência a objeto C. Uma cópia superficial de X cria um novo objeto X2 que também faz referência a objetos A e B. Em contraste, uma cópia profunda de X cria um novo objeto X2 que faz referência os novos objetos A2 e B2, que são cópias de um e B. B2, por sua vez, referencia o novo objeto C2, que é uma cópia C. Use uma classe que implementa o <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> para executar uma cópia superficial ou profunda de um objeto.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The identity of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object is defined as the remote server object that is the target of a remoting client call.</source>
          <target state="translated">A identidade de um <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objeto é definido como o objeto de servidor remoto que é o destino de uma chamada de cliente de comunicação remota.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>By default, the memberwise clone of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</source>
          <target state="translated">Por padrão, o clone memberwise de um <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objeto tem a mesma identidade que o objeto original, que normalmente não é o comportamento correto para clones de objetos do servidor que são empacotados em um limite de comunicação remota para o lado do cliente.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Specify <ph id="ph1">`false`</ph>, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or <ph id="ph2">`true`</ph> to cause the clone to retain the identity of the original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object.</source>
          <target state="translated">Especifique <ph id="ph1">`false`</ph>, que é geralmente apropriado, para excluir a identidade do clone e fazer com que uma nova identidade seja atribuído quando o clone é empacotado em um limite de comunicação remota, ou <ph id="ph2">`true`</ph> para fazer com que o clone reter a identidade do original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method is intended to be used by developers implementing remote server objects.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> método se destina a ser usado por desenvolvedores implementar objetos de servidor remoto.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>