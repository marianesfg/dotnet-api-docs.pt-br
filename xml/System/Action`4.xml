<Type Name="Action&lt;T1,T2,T3,T4&gt;" FullName="System.Action&lt;T1,T2,T3,T4&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="250b064e4110d03a2d0d35d90760cd4cc73d9306" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46632743" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`4&lt;- T1, - T2, - T3, - T4&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="9d039-101">O tipo do primeiro parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="9d039-102">O tipo do segundo parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="9d039-103">O tipo do terceiro parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T4"><span data-ttu-id="9d039-104">O tipo do quarto parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-104">The type of the fourth parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="9d039-105">O primeiro parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-105">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="9d039-106">O segundo parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-106">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="9d039-107">O terceiro parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-107">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg4"><span data-ttu-id="9d039-108">O quarto parâmetro do método encapsulado por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-108">The fourth parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="9d039-109">Encapsula um método que tem quatro parâmetros e não retorna um valor.</span><span class="sxs-lookup"><span data-stu-id="9d039-109">Encapsulates a method that has four parameters and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d039-110">Você pode usar o <xref:System.Action%604> delegado para passar um método como um parâmetro sem declarar explicitamente um delegado personalizado.</span><span class="sxs-lookup"><span data-stu-id="9d039-110">You can use the <xref:System.Action%604> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="9d039-111">O método encapsulado deve corresponder à assinatura do método que é definida por esse delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-111">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="9d039-112">Isso significa que o método encapsulado deve ter quatro parâmetros são todos passados a ele por valor, e ele não deve retornar um valor.</span><span class="sxs-lookup"><span data-stu-id="9d039-112">This means that the encapsulated method must have four parameters that are all passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="9d039-113">(No c#, o método deve retornar `void`.</span><span class="sxs-lookup"><span data-stu-id="9d039-113">(In C#, the method must return `void`.</span></span> <span data-ttu-id="9d039-114">No Visual Basic, ele deve ser definido pelo `Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="9d039-114">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="9d039-115">Construa.</span><span class="sxs-lookup"><span data-stu-id="9d039-115">construct.</span></span> <span data-ttu-id="9d039-116">Ele também pode ser um método que retorna um valor que será ignorado.) Normalmente, esse tipo de método é usado para executar uma operação.</span><span class="sxs-lookup"><span data-stu-id="9d039-116">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d039-117">Para fazer referência a um método que tem quatro parâmetros e retorna um valor, use o genérico <xref:System.Func%605> delegado em vez disso.</span><span class="sxs-lookup"><span data-stu-id="9d039-117">To reference a method that has four parameters and returns a value, use the generic <xref:System.Func%605> delegate instead.</span></span>  
  
 <span data-ttu-id="9d039-118">Quando você usa o <xref:System.Action%604> delegado, você não precisa definir explicitamente um delegado que encapsula um método com quatro parâmetros.</span><span class="sxs-lookup"><span data-stu-id="9d039-118">When you use the <xref:System.Action%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</span></span> <span data-ttu-id="9d039-119">Por exemplo, o código a seguir declara explicitamente um delegado chamado `StringCopy` e atribui uma referência para o `CopyStrings` método para sua instância do delegado.</span><span class="sxs-lookup"><span data-stu-id="9d039-119">For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Action~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Delegate.cs#1)]
 [!code-vb[System.Action~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="9d039-120">O exemplo a seguir simplifica esse código pela instanciação de <xref:System.Action%604> delegado em vez de explicitamente definindo um novo delegado e atribuí-lo um método nomeado.</span><span class="sxs-lookup"><span data-stu-id="9d039-120">The following example simplifies this code by instantiating the <xref:System.Action%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Action~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Action4.cs#2)]
 [!code-vb[System.Action~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Action4.vb#2)]  
  
 <span data-ttu-id="9d039-121">Você também pode usar o <xref:System.Action%604> delegar com métodos anônimos no c#, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="9d039-121">You can also use the <xref:System.Action%604> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="9d039-122">(Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="9d039-122">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Anon.cs#3)]  
  
 <span data-ttu-id="9d039-123">Você também pode atribuir uma expressão lambda para uma <xref:System.Action%604> delegar a instância, como mostra o exemplo a seguir.</span><span class="sxs-lookup"><span data-stu-id="9d039-123">You can also assign a lambda expression to an <xref:System.Action%604> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="9d039-124">(Para obter uma introdução às expressões lambda, consulte [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="9d039-124">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Lambda.cs#4)]
 [!code-vb[System.Action~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`5" />
  </Docs>
</Type>