<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f2183fb6e4009548ee3cd3573c2bc4d71b628b0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39745680" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="25d7b-101">O tipo de objeto que está sendo inicializado sem pressa.</span>
      <span class="sxs-lookup">
        <span data-stu-id="25d7b-101">The type of object that is being lazily initialized.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="25d7b-102">Dá suporte à inicialização lenta.</span>
      <span class="sxs-lookup">
        <span data-stu-id="25d7b-102">Provides support for lazy initialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-103">Use a inicialização lenta para adiar a criação de um objeto grande ou intensivo de recursos ou a execução de uma tarefa com uso intensivo de recursos, especialmente quando tal criação ou a execução não pode ocorrer durante o tempo de vida do programa.</span><span class="sxs-lookup"><span data-stu-id="25d7b-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="25d7b-104">Para preparar para a inicialização lenta, você pode criar uma instância de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="25d7b-105">O argumento de tipo do <xref:System.Lazy%601> objeto criado por você especifica o tipo do objeto que você deseja inicializar lentamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="25d7b-106">O construtor que você usa para criar o <xref:System.Lazy%601> objeto determina as características da inicialização.</span><span class="sxs-lookup"><span data-stu-id="25d7b-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="25d7b-107">A inicialização lenta ocorre na primeira vez que a propriedade <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> é acessada.</span><span class="sxs-lookup"><span data-stu-id="25d7b-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="25d7b-108">Na maioria dos casos, um construtor a escolha depende suas respostas às duas perguntas:</span><span class="sxs-lookup"><span data-stu-id="25d7b-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="25d7b-109">O objeto de inicialização ociosa será acessado de mais de um thread?</span><span class="sxs-lookup"><span data-stu-id="25d7b-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="25d7b-110">Nesse caso, o <xref:System.Lazy%601> objeto pode criá-lo em qualquer thread.</span><span class="sxs-lookup"><span data-stu-id="25d7b-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="25d7b-111">Você pode usar um dos construtores simples cujo comportamento padrão é criar um thread-safe <xref:System.Lazy%601> objeto, de modo que apenas uma instância do objeto instanciado lentamente for criada, independentemente de quantos threads tentam acessá-la.</span><span class="sxs-lookup"><span data-stu-id="25d7b-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="25d7b-112">Para criar um <xref:System.Lazy%601> objeto que não é thread-safe, você deve usar um construtor que permite que você não especifique nenhum thread-safe.</span><span class="sxs-lookup"><span data-stu-id="25d7b-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="25d7b-113">Tornando o <xref:System.Lazy%601> segura para thread objeto não protege o objeto inicializado lentamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="25d7b-114">Se vários threads podem acessar o objeto inicializado lentamente, você deve fazer suas propriedades e métodos seguros para acesso de vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="25d7b-115">Inicialização lenta exige muito código ou o objeto inicializado lentamente tem um construtor padrão que faz tudo o que precisa e não lança exceções?</span><span class="sxs-lookup"><span data-stu-id="25d7b-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="25d7b-116">Se você precisa escrever o código de inicialização ou se as exceções precisam ser manipulados, use um dos construtores que usa um método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="25d7b-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="25d7b-117">Escreva seu código de inicialização no método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="25d7b-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="25d7b-118">A tabela a seguir mostra qual construtor de escolha, com base nesses dois fatores:</span><span class="sxs-lookup"><span data-stu-id="25d7b-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="25d7b-119">Objeto será acessado por</span><span class="sxs-lookup"><span data-stu-id="25d7b-119">Object will be accessed by</span></span>|<span data-ttu-id="25d7b-120">Se nenhum código de inicialização é necessário (construtor de padrão), use</span><span class="sxs-lookup"><span data-stu-id="25d7b-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="25d7b-121">Se o código de inicialização for necessário, use</span><span class="sxs-lookup"><span data-stu-id="25d7b-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="25d7b-122">Vários threads</span><span class="sxs-lookup"><span data-stu-id="25d7b-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="25d7b-123">Um thread</span><span class="sxs-lookup"><span data-stu-id="25d7b-123">One thread</span></span>|<span data-ttu-id="25d7b-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> com o `isThreadSafe` definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="25d7b-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="25d7b-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> com o `isThreadSafe` definido como `false`.</span><span class="sxs-lookup"><span data-stu-id="25d7b-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="25d7b-126">Você pode usar uma expressão lambda para especificar o método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="25d7b-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="25d7b-127">Isso mantém o código de inicialização em um só lugar.</span><span class="sxs-lookup"><span data-stu-id="25d7b-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="25d7b-128">A expressão lambda captura o contexto, incluindo quaisquer argumentos passados para o construtor do objeto inicializados lentamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="25d7b-129">**Cache de exceção** quando você usa métodos de fábrica, as exceções são armazenadas em cache.</span><span class="sxs-lookup"><span data-stu-id="25d7b-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="25d7b-130">Ou seja, se o método de fábrica lançar um tempo de exceção primeiro um thread tenta acessar o <xref:System.Lazy%601.Value%2A> propriedade do <xref:System.Lazy%601> do objeto, a mesma exceção será lançada em cada tentativa subsequente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="25d7b-131">Isso garante que todas as chamadas para o <xref:System.Lazy%601.Value%2A> propriedade produz o mesmo resultado e evita erros sutis que podem surgir se diversos threads obtenham resultados diferentes.</span><span class="sxs-lookup"><span data-stu-id="25d7b-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="25d7b-132">O <xref:System.Lazy%601> significa um real `T` que caso contrário, seria ter sido inicializada em algum momento anterior, geralmente durante a inicialização.</span><span class="sxs-lookup"><span data-stu-id="25d7b-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="25d7b-133">Uma falha em que ponto anterior é geralmente fatal.</span><span class="sxs-lookup"><span data-stu-id="25d7b-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="25d7b-134">Se houver uma possibilidade de uma falha recuperável, é recomendável que você criar a lógica de repetição para a rotina de inicialização (nesse caso, o método de fábrica), exatamente como você faria se não estivesse usando a inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</span></span>  
  
 <span data-ttu-id="25d7b-135">**A alternativa ao bloqueio** em determinadas situações, talvez você queira evitar a sobrecarga da <xref:System.Lazy%601> objeto padrão de comportamento de bloqueio.</span><span class="sxs-lookup"><span data-stu-id="25d7b-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="25d7b-136">Em raras situações, pode haver uma grande possibilidade de deadlocks.</span><span class="sxs-lookup"><span data-stu-id="25d7b-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="25d7b-137">Nesses casos, você pode usar o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> ou <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> construtor e especifique <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="25d7b-138">Isso permite que o <xref:System.Lazy%601> objeto para criar uma cópia do objeto inicializado lentamente em cada um dos vários threads, se os threads de chamam o <xref:System.Lazy%601.Value%2A> propriedade simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="25d7b-139">O <xref:System.Lazy%601> objeto garante que todos os threads de usar a mesma instância do objeto inicializado lentamente e descarta as instâncias que não são usadas.</span><span class="sxs-lookup"><span data-stu-id="25d7b-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="25d7b-140">Portanto, o custo de reduzir a sobrecarga de bloqueio é que seu programa, às vezes, pode criar e descartar cópias adicionais de um objeto caro.</span><span class="sxs-lookup"><span data-stu-id="25d7b-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="25d7b-141">Na maioria dos casos, isso é improvável.</span><span class="sxs-lookup"><span data-stu-id="25d7b-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="25d7b-142">Os exemplos para o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> e <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> construtores demonstram esse comportamento.</span><span class="sxs-lookup"><span data-stu-id="25d7b-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="25d7b-143">Quando você especifica <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, as exceções são nunca armazenados em cache, mesmo se você especificar um método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="25d7b-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="25d7b-144">**Construtores equivalentes** além de habilitar o uso de <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> e <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> construtores podem duplicar a funcionalidade de outros construtores.</span><span class="sxs-lookup"><span data-stu-id="25d7b-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="25d7b-145">A tabela a seguir mostra os valores de parâmetro que produzem comportamento equivalente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="25d7b-146">Para criar um <xref:System.Lazy%601> objeto que é</span><span class="sxs-lookup"><span data-stu-id="25d7b-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="25d7b-147">Para construtores que têm uma `LazyThreadSafetyMode` `mode` conjunto de parâmetros, `mode` para</span><span class="sxs-lookup"><span data-stu-id="25d7b-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="25d7b-148">Para construtores que têm um valor booleano `isThreadSafe` conjunto de parâmetros, `isThreadSafe` para</span><span class="sxs-lookup"><span data-stu-id="25d7b-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="25d7b-149">Para construtores sem parâmetros de segurança do thread</span><span class="sxs-lookup"><span data-stu-id="25d7b-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="25d7b-150">Totalmente thread-safe; usa o bloqueio para garantir que apenas um thread inicializa o valor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="25d7b-151">Todos esses construtores são totalmente thread-safe.</span><span class="sxs-lookup"><span data-stu-id="25d7b-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="25d7b-152">Não thread-safe.</span><span class="sxs-lookup"><span data-stu-id="25d7b-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="25d7b-153">Não aplicável.</span><span class="sxs-lookup"><span data-stu-id="25d7b-153">Not applicable.</span></span>|  
|<span data-ttu-id="25d7b-154">Totalmente thread-safe; corrida de threads para inicializar o valor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="25d7b-155">Não aplicável.</span><span class="sxs-lookup"><span data-stu-id="25d7b-155">Not applicable.</span></span>|<span data-ttu-id="25d7b-156">Não aplicável.</span><span class="sxs-lookup"><span data-stu-id="25d7b-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="25d7b-157">**Outros recursos** para obter informações sobre o uso de <xref:System.Lazy%601> com campos de thread estático, ou como armazenamento de backup para as propriedades, consulte [inicialização lenta](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="25d7b-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25d7b-158">O exemplo a seguir demonstra o uso da <xref:System.Lazy%601> classe para fornecer a inicialização lenta com acesso de vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-159">O exemplo usa o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="25d7b-160">Ele também demonstra o uso do <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> construtor (especificando `true` para `isThreadSafe`) e o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> construtor (especificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="25d7b-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="25d7b-161">Para alternar para um construtor diferente, basta altere quais construtores são comentadas.</span><span class="sxs-lookup"><span data-stu-id="25d7b-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="25d7b-162">Para obter um exemplo que demonstra a exceção de armazenamento em cache usando os mesmos construtores, consulte o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="25d7b-163">O exemplo define uma classe `LargeObject` que será inicializada lentamente por um dos vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="25d7b-164">As quatro seções principais de código ilustram a criação de inicializador, o método de fábrica, a inicialização real e o construtor do `LargeObject` classe, que exibe uma mensagem quando o objeto é criado.</span><span class="sxs-lookup"><span data-stu-id="25d7b-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="25d7b-165">No início do método `Main`, o exemplo cria o inicializador thread-safe lento para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="25d7b-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="25d7b-166">O método de fábrica mostra a criação do objeto, com um espaço reservado para inicialização adicional:</span><span class="sxs-lookup"><span data-stu-id="25d7b-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="25d7b-167">Observe que as seções de código de duas primeiras poderiam ser combinadas usando uma função lambda, conforme mostrado aqui:</span><span class="sxs-lookup"><span data-stu-id="25d7b-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="25d7b-168">O exemplo faz uma pausa, para indicar que um período indeterminado pode decorrer antes que ocorra a inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="25d7b-169">Quando você pressiona o **Enter** chave, o exemplo cria e inicia três threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="25d7b-170">O `ThreadProc` método que é usado por todas as chamadas de threads de três a <xref:System.Lazy%601.Value%2A> propriedade.</span><span class="sxs-lookup"><span data-stu-id="25d7b-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="25d7b-171">Na primeira vez que isso acontece, o `LargeObject` instância é criada:</span><span class="sxs-lookup"><span data-stu-id="25d7b-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="25d7b-172">O construtor do `LargeObject` classe, que inclui a última seção principais do código, exibe uma mensagem e registra a identidade do thread de inicialização.</span><span class="sxs-lookup"><span data-stu-id="25d7b-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="25d7b-173">A saída do programa aparece no final da listagem de código completo.</span><span class="sxs-lookup"><span data-stu-id="25d7b-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-174">Para simplificar, este exemplo usa uma instância global de <xref:System.Lazy%601>, e todos os métodos são `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="25d7b-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="25d7b-175">Estes não são requisitos para o uso da inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="25d7b-176">Por padrão, todos os membros públicos e protegidos do <see cref="T:System.Lazy`1" /> classe são thread-safe e podem ser usados simultaneamente de vários threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="25d7b-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span>
      </span>
      <span data-ttu-id="25d7b-177">Essas garantias de segurança do thread podem ser removidas, opcionalmente e por instância, usando parâmetros para construtores do tipo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="25d7b-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="25d7b-178">Inicializa uma nova instância da classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-178">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="25d7b-179">Inicializa uma nova instância da classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="25d7b-180">Quando ocorre a inicialização lenta, o construtor padrão do tipo de destino é usado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-180">When lazy initialization occurs, the default constructor of the target type is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-181">Uma instância que é criada com esse construtor pode ser usada simultaneamente de vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-181">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="25d7b-182">O modo thread-safe de uma <xref:System.Lazy%601> instância é inicializada com esse construtor é <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-182">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="25d7b-183">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-183">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="25d7b-184">Um <xref:System.Lazy%601> instância que é criada com esse construtor não armazena em cache as exceções.</span><span class="sxs-lookup"><span data-stu-id="25d7b-184">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="25d7b-185">Para obter mais informações, consulte a classe <xref:System.Lazy%601> ou a enumeração <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-185">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25d7b-186">O exemplo a seguir demonstra o uso desse construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-186">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="25d7b-187">Ele também ilustra o uso do <xref:System.Lazy%601.%23ctor%28System.Boolean%29> construtor (especificando `true` para `isThreadSafe`) e o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> construtor (especificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="25d7b-187">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="25d7b-188">Para alternar para um construtor diferente, basta altere quais construtores são comentadas.</span><span class="sxs-lookup"><span data-stu-id="25d7b-188">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="25d7b-189">O exemplo define uma classe `LargeObject` que será inicializada lentamente por um dos vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-189">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="25d7b-190">As duas principais linhas de código neste exemplo são a criação de inicializador e inicialização real.</span><span class="sxs-lookup"><span data-stu-id="25d7b-190">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="25d7b-191">No início do método `Main`, o exemplo cria o inicializador thread-safe lento para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="25d7b-191">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="25d7b-192">O exemplo cria e inicia três threads bloqueiam em um <xref:System.Threading.ManualResetEvent> do objeto, para que o exemplo pode liberar os threads ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="25d7b-192">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="25d7b-193">O `ThreadProc` método que é usado por todas as chamadas de threads de três a <xref:System.Lazy%601.Value%2A> propriedade da qual obter o `LargeObject` instância:</span><span class="sxs-lookup"><span data-stu-id="25d7b-193">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="25d7b-194">O <xref:System.Lazy%601> classe fornece o bloqueio, para que apenas um thread tem permissão para criar o `LargeObject` instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-194">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="25d7b-195">O exemplo demonstra que os outros threads todos os obtenham a mesma instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-195">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-196">Para simplificar, este exemplo usa uma instância global de <xref:System.Lazy%601>, e todos os métodos são `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="25d7b-196">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="25d7b-197">Estes não são requisitos para o uso da inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-197">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="25d7b-198">
            <see langword="true" /> para tornar essa instância utilizável simultaneamente por vários threads; <see langword="false" /> para torná-la utilizável por apenas um thread por vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-198">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25d7b-199">Inicializa uma nova instância da classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-199">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="25d7b-200">Quando ocorre a inicialização lenta, o construtor padrão do tipo de destino e o modo de inicialização especificado são usados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-200">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-201">O modo thread-safe de uma <xref:System.Lazy%601> instância é inicializada com esse construtor é <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> se `isThreadSafe` é `true`; caso contrário, o modo é <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-201">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="25d7b-202">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-202">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="25d7b-203">Para especificar o <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> modo, use o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> ou <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-203">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="25d7b-204">Um <xref:System.Lazy%601> instância que é criada com esse construtor não armazena em cache as exceções.</span><span class="sxs-lookup"><span data-stu-id="25d7b-204">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="25d7b-205">Para obter mais informações, consulte a classe <xref:System.Lazy%601> ou a enumeração <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-205">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25d7b-206">O exemplo a seguir demonstra o uso desse construtor para criar um inicializador lento que não é thread-safe, para cenários em que todo o acesso ao objeto de inicialização ociosa ocorre no mesmo thread.</span><span class="sxs-lookup"><span data-stu-id="25d7b-206">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="25d7b-207">Ele também demonstra o uso do <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> construtor (especificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`.</span><span class="sxs-lookup"><span data-stu-id="25d7b-207">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="25d7b-208">Para alternar para um construtor diferente, basta altere qual construtor é comentado.</span><span class="sxs-lookup"><span data-stu-id="25d7b-208">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-209">Para o código que demonstra como usar esse construtor em cenários multithread (especificando `true` para `isThreadSafe`), consulte o exemplo para o <xref:System.Lazy%601.%23ctor> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-209">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="25d7b-210">O exemplo define um `LargeObject` classe será inicializada lentamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-210">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="25d7b-211">No `Main` método, o exemplo cria um <xref:System.Lazy%601> instância e, em seguida, pausa.</span><span class="sxs-lookup"><span data-stu-id="25d7b-211">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="25d7b-212">Quando você pressiona o **Enter** chave, o exemplo acessa as <xref:System.Lazy%601.Value%2A> propriedade do <xref:System.Lazy%601> instância, o que faz com que ocorra a inicialização.</span><span class="sxs-lookup"><span data-stu-id="25d7b-212">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="25d7b-213">O construtor do `LargeObject` classe exibe uma mensagem de console.</span><span class="sxs-lookup"><span data-stu-id="25d7b-213">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-214">Para simplificar, este exemplo usa uma instância global de <xref:System.Lazy%601>, e todos os métodos são `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="25d7b-214">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="25d7b-215">Estes não são requisitos para o uso da inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-215">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="25d7b-216">O delegado que é invocado para produzir o valor inicializado de forma lenta quando for necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-216">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25d7b-217">Inicializa uma nova instância da classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-217">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="25d7b-218">Quando ocorre uma inicialização lenta, a função de inicialização especificada é usada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-218">When lazy initialization occurs, the specified initialization function is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-219">Uma instância que é criada com esse construtor pode ser usada simultaneamente de vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-219">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="25d7b-220">O modo thread-safe de uma <xref:System.Lazy%601> instância é inicializada com esse construtor é <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-220">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="25d7b-221">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-221">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="25d7b-222">Exceções geradas pelo `valueFactory` são armazenados em cache.</span><span class="sxs-lookup"><span data-stu-id="25d7b-222">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="25d7b-223">Para obter mais informações, consulte a classe <xref:System.Lazy%601> ou a enumeração <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-223">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25d7b-224">O exemplo a seguir demonstra o uso desse construtor para fornecer a inicialização lenta com o cache de exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-224">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="25d7b-225">Ele também demonstra o uso do <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> construtor (especificando `true` para `isThreadSafe`) e o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> construtor (especificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="25d7b-225">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="25d7b-226">Para alternar para um construtor diferente, basta altere quais construtores são comentadas.</span><span class="sxs-lookup"><span data-stu-id="25d7b-226">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="25d7b-227">O exemplo define uma classe `LargeObject` que será inicializada lentamente por um dos vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-227">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="25d7b-228">As três seções principais de código ilustram a criação de inicializador, a inicialização real e o construtor do `LargeObject` classe, que demonstra o cache de exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-228">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="25d7b-229">No início do método `Main`, o exemplo cria o inicializador thread-safe lento para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="25d7b-229">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="25d7b-230">O exemplo cria e inicia três threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-230">The example creates and starts three threads.</span></span> <span data-ttu-id="25d7b-231">O `ThreadProc` método que é usado por todas as chamadas de threads de três a <xref:System.Lazy%601.Value%2A> propriedade da qual obter o `LargeObject` instância:</span><span class="sxs-lookup"><span data-stu-id="25d7b-231">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="25d7b-232">No construtor do `LargeObject` classe, a terceira seção chave de código gera uma exceção na primeira vez um `LargeObject` instância é criada, mas depois disso permite a criação da instância:</span><span class="sxs-lookup"><span data-stu-id="25d7b-232">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="25d7b-233">Quando o exemplo é executado, o primeiro thread que tenta criar uma instância de `LargeObject` falhará e a exceção é capturada.</span><span class="sxs-lookup"><span data-stu-id="25d7b-233">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="25d7b-234">Você pode esperar que o próximo segmento com êxito seria criar uma instância, mas o <xref:System.Lazy%601> objeto armazenou em cache a exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-234">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="25d7b-235">Por isso, todos os três threads lançar a exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-235">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-236">Para simplificar, este exemplo usa uma instância global de <xref:System.Lazy%601>, e todos os métodos são `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="25d7b-236">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="25d7b-237">Estes não são requisitos para o uso da inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-237">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="25d7b-238">
            <paramref name="valueFactory" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-238">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="25d7b-239">Um dos valores de enumeração que especifica o modo de acesso thread-safe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-239">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25d7b-240">Inicializa uma nova instância da classe <see cref="T:System.Lazy`1" /> que usa o construtor padrão de <paramref name="T" /> e o modo de acesso thread-safe especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-240">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-241">O modo thread-safe de uma <xref:System.Lazy%601> instância descreve o comportamento quando vários threads tentam inicializar o <xref:System.Lazy%601> instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-241">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="25d7b-242">Um <xref:System.Lazy%601> instância que é criada com esse construtor não armazena em cache as exceções.</span><span class="sxs-lookup"><span data-stu-id="25d7b-242">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="25d7b-243">Para obter mais informações, consulte a classe <xref:System.Lazy%601> ou a enumeração <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-243">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25d7b-244">O exemplo a seguir demonstra o uso desse construtor para criar um inicializador lento que permite que vários threads disputem para criar um objeto lentamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-244">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="25d7b-245">Vários threads, talvez seja bem-sucedida na criação de instâncias, mas todos os threads usam a instância que foi criada pela primeira vez.</span><span class="sxs-lookup"><span data-stu-id="25d7b-245">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-246">Para obter um exemplo que demonstra como usar esse construtor em cenários de single-thread (especificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`), consulte o <xref:System.Lazy%601.%23ctor%28System.Boolean%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-246">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="25d7b-247">Para obter um exemplo que demonstra como usar esse construtor para fornecer o bloqueio, em vez de condições de corrida em cenários multithread (especificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`), consulte o <xref:System.Lazy%601.%23ctor> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-247">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="25d7b-248">O exemplo define um `LargeObject` classe será inicializada lentamente por qualquer um dos vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-248">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="25d7b-249">As três seções principais de código ilustram a criação de inicializador, a inicialização real e o construtor e o finalizador do `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="25d7b-249">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="25d7b-250">No início do `Main` método, o exemplo cria o <xref:System.Lazy%601> objeto que executa a inicialização lenta do `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="25d7b-250">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="25d7b-251">O exemplo cria e inicia três threads bloqueiam em um <xref:System.Threading.ManualResetEvent> do objeto, para que o exemplo pode liberar os threads ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="25d7b-251">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="25d7b-252">No `ThreadProc` método que é usado por todos os três threads, chamando o <xref:System.Lazy%601.Value%2A> propriedade cria o `LargeObject` instância:</span><span class="sxs-lookup"><span data-stu-id="25d7b-252">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="25d7b-253">Porque o construtor para o <xref:System.Lazy%601> instância especificada <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, todos os três threads têm permissão para criar `LargeObject` instâncias.</span><span class="sxs-lookup"><span data-stu-id="25d7b-253">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="25d7b-254">O exemplo demonstra isso exibindo mensagens do console no construtor e no finalizador do `LargeObject` classe:</span><span class="sxs-lookup"><span data-stu-id="25d7b-254">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="25d7b-255">No entanto, o <xref:System.Lazy%601> objeto garante que apenas uma instância é usada por todos os threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-255">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="25d7b-256">A saída do exemplo mostra que todos os três threads de usarem a mesma instância e também mostra que as duas instâncias podem ser recuperadas pela coleta de lixo.</span><span class="sxs-lookup"><span data-stu-id="25d7b-256">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-257">Para simplificar, este exemplo usa uma instância global de <xref:System.Lazy%601>, e todos os métodos são `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="25d7b-257">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="25d7b-258">Estes não são requisitos para o uso da inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-258">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="25d7b-259">
            <paramref name="mode" /> contém um valor inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-259">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="25d7b-260">O delegado que é invocado para produzir o valor inicializado de forma lenta quando for necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-260">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="isThreadSafe">
          <span data-ttu-id="25d7b-261">
            <see langword="true" /> para tornar essa instância utilizável simultaneamente por vários threads; <see langword="false" /> para tornar essa instância utilizável por apenas um thread por vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-261">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25d7b-262">Inicializa uma nova instância da classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-262">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="25d7b-263">Quando ocorre a inicialização lenta, a função de inicialização especificada e o modo de inicialização são usados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-263">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-264">O modo thread-safe de uma <xref:System.Lazy%601> instância é inicializada com esse construtor é <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> se `isThreadSafe` é `true`; caso contrário, o modo é <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-264">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="25d7b-265">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-265">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="25d7b-266">Para especificar o <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> modo, use o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> ou <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-266">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="25d7b-267">Exceções geradas pelo `valueFactory` são armazenados em cache.</span><span class="sxs-lookup"><span data-stu-id="25d7b-267">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="25d7b-268">Para obter mais informações, consulte a classe <xref:System.Lazy%601> ou a enumeração <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-268">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25d7b-269">O exemplo a seguir demonstra o uso desse construtor para fornecer a inicialização lenta, com exceção de armazenamento em cache, em um cenário com um único thread.</span><span class="sxs-lookup"><span data-stu-id="25d7b-269">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="25d7b-270">Ele também demonstra o uso do <xref:System.Lazy%601.%23ctor%2A> construtor (especificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="25d7b-270">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="25d7b-271">Para alternar para esse construtor, basta altere qual construtor é comentado.</span><span class="sxs-lookup"><span data-stu-id="25d7b-271">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-272">Para o código que demonstra como usar esse construtor em cenários multithread (especificando `true` para `isThreadSafe`), consulte o exemplo para o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-272">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="25d7b-273">O exemplo define uma classe `LargeObject` que será inicializada lentamente por um dos vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-273">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="25d7b-274">As três seções principais de código ilustram a criação de inicializador, a inicialização real e o construtor do `LargeObject` classe, que demonstra o cache de exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-274">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="25d7b-275">No início do método `Main`, o exemplo cria o inicializador thread-safe lento para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="25d7b-275">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="25d7b-276">Na chamada ao construtor, o `isThreadSafe` parâmetro é `false`, então o <xref:System.Lazy%601> não é thread-safe.</span><span class="sxs-lookup"><span data-stu-id="25d7b-276">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="25d7b-277">Porque ele não é thread-safe, o exemplo chama o <xref:System.Lazy%601.Value%2A> propriedade três vezes no mesmo thread:</span><span class="sxs-lookup"><span data-stu-id="25d7b-277">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="25d7b-278">No construtor do `LargeObject` classe, a terceira seção chave de código gera uma exceção na primeira vez um `LargeObject` instância é criada, mas depois disso permite a criação da instância:</span><span class="sxs-lookup"><span data-stu-id="25d7b-278">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="25d7b-279">Quando o exemplo é executado, a primeira tentativa de criar uma instância de `LargeObject` falhará e a exceção é capturada.</span><span class="sxs-lookup"><span data-stu-id="25d7b-279">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="25d7b-280">Você pode esperar que a próxima tentativa teria êxito, mas o <xref:System.Lazy%601> objeto armazenou em cache a exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-280">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="25d7b-281">Por isso, todos os três tentativas lançar a exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-281">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-282">Para simplificar, este exemplo usa uma instância global de <xref:System.Lazy%601>, e todos os métodos são `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="25d7b-282">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="25d7b-283">Estes não são requisitos para o uso da inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-283">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="25d7b-284">
            <paramref name="valueFactory" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-284">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="25d7b-285">O delegado que é invocado para produzir o valor inicializado de forma lenta quando for necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-285">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="25d7b-286">Um dos valores de enumeração que especifica o modo de acesso thread-safe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-286">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25d7b-287">Inicializa uma nova instância da classe <see cref="T:System.Lazy`1" /> que usa a função de inicialização especificada e o modo de segurança do thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-287">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-288">O modo thread-safe de uma <xref:System.Lazy%601> instância descreve o comportamento quando vários threads tentam inicializar o <xref:System.Lazy%601> instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-288">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="25d7b-289">Exceções geradas pelo `valueFactory` são armazenadas em cache, a menos que `mode` é <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-289">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="25d7b-290">Para obter mais informações, consulte a classe <xref:System.Lazy%601> ou a enumeração <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="25d7b-290">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25d7b-291">O exemplo a seguir demonstra o uso desse construtor para criar um inicializador lento que permite que vários threads disputem para criar um objeto lentamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-291">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="25d7b-292">Vários threads, talvez seja bem-sucedida na criação de instâncias, mas todos os threads usam a instância que foi criada pela primeira vez.</span><span class="sxs-lookup"><span data-stu-id="25d7b-292">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="25d7b-293">Além disso, o exemplo demonstra que as exceções são nunca armazenados em cache quando você especificar <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, mesmo se a inicialização é executada por uma função em vez de pelo construtor padrão do tipo criado lentamente.</span><span class="sxs-lookup"><span data-stu-id="25d7b-293">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-294">Para obter um exemplo que demonstra como usar esse construtor em cenários de single-thread (especificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`), consulte o <xref:System.Lazy%601.%23ctor%28System.Boolean%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-294">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="25d7b-295">Para obter um exemplo que demonstra como usar esse construtor para fornecer o bloqueio, em vez de condições de corrida em cenários multithread (especificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`), consulte o <xref:System.Lazy%601.%23ctor> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-295">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="25d7b-296">O exemplo define um `LargeObject` classe será inicializada lentamente por qualquer um dos vários threads.</span><span class="sxs-lookup"><span data-stu-id="25d7b-296">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="25d7b-297">As quatro seções principais de código ilustram a criação de inicializador, a inicialização real, a função de inicialização e o construtor e o finalizador do `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="25d7b-297">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="25d7b-298">No início do `Main` método, o exemplo cria o <xref:System.Lazy%601> objeto que executa a inicialização lenta do `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="25d7b-298">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="25d7b-299">O inicializador lento usa uma função para executar a inicialização.</span><span class="sxs-lookup"><span data-stu-id="25d7b-299">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="25d7b-300">Nesse caso, uma função é necessária porque não há nenhum construtor padrão para o `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="25d7b-300">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="25d7b-301">O exemplo cria e inicia três threads bloqueiam em um <xref:System.Threading.ManualResetEvent> do objeto, para que o exemplo pode liberar os threads ao mesmo tempo.</span><span class="sxs-lookup"><span data-stu-id="25d7b-301">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="25d7b-302">No `ThreadProc` método que é usado por todos os três threads, chamando o <xref:System.Lazy%601.Value%2A> propriedade cria o `LargeObject` instância:</span><span class="sxs-lookup"><span data-stu-id="25d7b-302">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="25d7b-303">Na terceira seção chave de código, a função de inicialização lenta é chamada para criar o `LargeObject` instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-303">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="25d7b-304">A função lançará um tempo de exceção a primeira que é chamada:</span><span class="sxs-lookup"><span data-stu-id="25d7b-304">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="25d7b-305">Com qualquer outro <xref:System.Threading.LazyThreadSafetyMode> configuração, uma exceção sem tratamento na função de inicialização deve ser armazenado em cache.</span><span class="sxs-lookup"><span data-stu-id="25d7b-305">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="25d7b-306">No entanto, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suprime o cache de exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-306">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="25d7b-307">A saída do exemplo demonstra que uma tentativa subsequente para inicializar o objeto tenha êxito.</span><span class="sxs-lookup"><span data-stu-id="25d7b-307">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-308">A mensagem de exceção normalmente aparece depois mensagens indicando que outros threads têm o objeto inicializado com êxito.</span><span class="sxs-lookup"><span data-stu-id="25d7b-308">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="25d7b-309">Isso é devido ao atraso introduzido pela geração e captura a exceção.</span><span class="sxs-lookup"><span data-stu-id="25d7b-309">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="25d7b-310">Porque o construtor para o <xref:System.Lazy%601> instância especificada <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, todos os três threads têm permissão para criar `LargeObject` instâncias.</span><span class="sxs-lookup"><span data-stu-id="25d7b-310">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="25d7b-311">O exemplo demonstra isso exibindo mensagens do console no construtor e no finalizador do `LargeObject` classe:</span><span class="sxs-lookup"><span data-stu-id="25d7b-311">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="25d7b-312">O <xref:System.Lazy%601> objeto garante que apenas uma instância é usada por todos os threads (exceto o thread em que a função de inicialização lança uma exceção).</span><span class="sxs-lookup"><span data-stu-id="25d7b-312">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="25d7b-313">A saída do exemplo mostra isso.</span><span class="sxs-lookup"><span data-stu-id="25d7b-313">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25d7b-314">Para simplificar, este exemplo usa uma instância global de <xref:System.Lazy%601>, e todos os métodos são `static` (`Shared` no Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="25d7b-314">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="25d7b-315">Estes não são requisitos para o uso da inicialização lenta.</span><span class="sxs-lookup"><span data-stu-id="25d7b-315">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="25d7b-316">
            <paramref name="mode" /> contém um valor inválido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-316">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="25d7b-317">
            <paramref name="valueFactory" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-317">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25d7b-318">Obtém um valor que indica se um valor foi criado para essa instância <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-318">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25d7b-319">
            <see langword="true" /> se um valor foi criado para essa instância <see cref="T:System.Lazy`1" />; caso contrário, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-319">
              <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-320">Quando ocorre a inicialização lenta para um <xref:System.Lazy%601> instância, isso pode resultar em um valor que está sendo criada ou uma exceção sendo lançada.</span><span class="sxs-lookup"><span data-stu-id="25d7b-320">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="25d7b-321">Se uma exceção for lançado, as próximas comportamento da <xref:System.Lazy%601> instância depende se o cache de exceção está em vigor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-321">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="25d7b-322">Se o <xref:System.Lazy%601> instância foi criada usando um construtor que não especifica uma função de inicialização e, em seguida, cache de exceção não estiver em vigor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-322">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="25d7b-323">Uma tentativa subsequente para inicializar o <xref:System.Lazy%601> talvez seja bem-sucedida e após a inicialização bem-sucedida a <xref:System.Lazy%601.IsValueCreated%2A> propriedade retorna `true`.</span><span class="sxs-lookup"><span data-stu-id="25d7b-323">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="25d7b-324">Se o <xref:System.Lazy%601> instância foi criada com uma função de inicialização (especificado pelo `valueFactory` parâmetro do <xref:System.Lazy%601> construtor), em seguida, o cache de exceção é controlado pelo modo de segurança de thread.</span><span class="sxs-lookup"><span data-stu-id="25d7b-324">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="25d7b-325">Se o modo for <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> ou <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, não há nenhuma segunda chance para inicializar o <xref:System.Lazy%601> instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-325">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="25d7b-326">Se uma exceção ocorre e é sem tratamento na função de inicialização, essa exceção é armazenada em cache e gerada novamente nos acessos subsequentes do <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriedade.</span><span class="sxs-lookup"><span data-stu-id="25d7b-326">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="25d7b-327">Nenhum valor é criado se uma exceção for lançada, portanto, em tais casos <xref:System.Lazy%601.IsValueCreated%2A> retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="25d7b-327">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="25d7b-328">Se o modo for <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, o primeiro thread que foi bem-sucedido no executando a função de inicialização (ou o construtor padrão) cria o valor para o <xref:System.Lazy%601> instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-328">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="25d7b-329">Se a função de inicialização lança uma exceção em um thread, outros threads ainda podem tentar inicializar o <xref:System.Lazy%601> instância.</span><span class="sxs-lookup"><span data-stu-id="25d7b-329">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="25d7b-330">Até que o valor é criado, o <xref:System.Lazy%601.IsValueCreated%2A> propriedade retorna `false`.</span><span class="sxs-lookup"><span data-stu-id="25d7b-330">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="25d7b-331">Cria e retorna uma representação de cadeia de caracteres da propriedade <see cref="P:System.Lazy`1.Value" /> para esta instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-331">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="25d7b-332">O resultado da chamada do método <see cref="M:System.Object.ToString" /> na propriedade <see cref="P:System.Lazy`1.Value" /> para essa instância, se o valor tiver sido criado (ou seja, se a propriedade <see cref="P:System.Lazy`1.IsValueCreated" /> retornar <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-332">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span>
          </span>
          <span data-ttu-id="25d7b-333">Caso contrário, uma cadeia de caracteres que indica que o valor não foi criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-333">Otherwise, a string indicating that the value has not been created.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-334">Chamar esse método não faz com que a inicialização.</span><span class="sxs-lookup"><span data-stu-id="25d7b-334">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="25d7b-335">O <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriedade pode ser `null` após a inicialização lenta, se o método de fábrica que foi especificado para o `valueFactory` parâmetro do <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, ou <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> construtor retorna `null`.</span><span class="sxs-lookup"><span data-stu-id="25d7b-335">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="25d7b-336">A propriedade <see cref="P:System.Lazy`1.Value" /> é <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-336">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25d7b-337">Obtém o valor de inicialização ociosa da instância <see cref="T:System.Lazy`1" /> atual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-337">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25d7b-338">O valor inicializado lentamente atual <see cref="T:System.Lazy`1" /> instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-338">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25d7b-339">Se o <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> é de propriedade `false`, o acesso a <xref:System.Lazy%601.Value%2A> propriedade força a inicialização.</span><span class="sxs-lookup"><span data-stu-id="25d7b-339">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="25d7b-340">Além de exceções que são listadas, o <xref:System.Lazy%601.Value%2A> propriedade pode gerar qualquer exceção sem tratamento que é lançada pelo método de fábrica que foi passado para o `valueFactory` parâmetro do <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, ou <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> construtor.</span><span class="sxs-lookup"><span data-stu-id="25d7b-340">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="25d7b-341">A instância <see cref="T:System.Lazy`1" /> é inicializada para usar o construtor padrão do tipo que está sendo inicializado lentamente e as permissões para acessar o construtor estão ausentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-341">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="25d7b-342">A instância <see cref="T:System.Lazy`1" /> é inicializada para usar o construtor padrão do tipo que está sendo inicializado lentamente e esse tipo não tem um construtor público sem parâmetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-342">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="25d7b-343">A função de inicialização tenta acessar <see cref="P:System.Lazy`1.Value" /> nessa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25d7b-343">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>