<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Lazy`1.xml" source-language="en-US" target-language="pt-BR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The type of object that is being lazily initialized.</source>
          <target state="translated">O tipo de objeto que está sendo inicializado sem pressa.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Lazy`1">
          <source>Provides support for lazy initialization.</source>
          <target state="translated">Dá suporte à inicialização lenta.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</source>
          <target state="translated">Use a inicialização lenta para adiar a criação de um objeto grande ou de uso intensivo de recursos ou a execução de uma tarefa de uso intensivo de recursos, especialmente quando a criação ou execução não pode ocorrer durante o tempo de vida do programa.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To prepare for lazy initialization, you create an instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">Para preparar para inicialização lenta, você cria uma instância de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The type argument of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that you create specifies the type of the object that you want to initialize lazily.</source>
          <target state="translated">O argumento de tipo do <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto criado por você especifica o tipo do objeto que você deseja inicializar lentamente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The constructor that you use to create the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object determines the characteristics of the initialization.</source>
          <target state="translated">O construtor que você usa para criar o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto determina as características da inicialização.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Lazy initialization occurs the first time the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property is accessed.</source>
          <target state="translated">A inicialização lenta ocorre na primeira vez que a propriedade <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> é acessada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In most cases, choosing a constructor depends on your answers to two questions:</source>
          <target state="translated">Na maioria dos casos, escolher um construtor depende de suas respostas às duas perguntas:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Will the lazily initialized object be accessed from more than one thread?</source>
          <target state="translated">O objeto inicializado lentamente será acessado de mais de um thread?</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If so, the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object might create it on any thread.</source>
          <target state="translated">Nesse caso, o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto pode criá-lo em qualquer thread.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>You can use one of the simple constructors whose default behavior is to create a thread-safe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</source>
          <target state="translated">Você pode usar um dos construtores simples cujo comportamento padrão é criar um thread-safe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> do objeto, para que apenas uma instância do objeto instanciado lentamente é criada, independentemente de quantos threads tentarem acessá-lo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</source>
          <target state="translated">Para criar um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto que não é thread-safe, você deve usar um construtor que permite que você não especifique nenhum acesso thread-safe.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Making the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object thread safe does not protect the lazily initialized object.</source>
          <target state="translated">Tornando o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> segura para thread objeto não protege o objeto inicializado lentamente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</source>
          <target state="translated">Se vários threads podem acessar o objeto inicializado lentamente, você deve fazer suas propriedades e métodos seguros para acesso multi-threaded.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</source>
          <target state="translated">Inicialização lenta exige muito código ou o objeto inicializado lentamente tem um construtor padrão que faz tudo o que você precisa e não lançam exceções?</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</source>
          <target state="translated">Se você precisar escrever o código de inicialização ou se as exceções precisam ser manipulados, use um dos construtores que usa um método de fábrica.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Write your initialization code in the factory method.</source>
          <target state="translated">Escreva o código de inicialização no método de fábrica.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following table shows which constructor to choose, based on these two factors:</source>
          <target state="translated">A tabela a seguir mostra quais construtor para escolha, com base nesses dois fatores:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Object will be accessed by</source>
          <target state="translated">Objeto será acessado por</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If no initialization code is required (default constructor), use</source>
          <target state="translated">Se nenhum código de inicialização é necessário (construtor padrão), use</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If initialization code is required, use</source>
          <target state="translated">Se o código de inicialização for necessário, use</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Multiple threads</source>
          <target state="translated">Vários threads</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>One thread</source>
          <target state="translated">Um thread</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> com <ph id="ph2">`isThreadSafe`</ph> definido como <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> com <ph id="ph2">`isThreadSafe`</ph> definido como <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>You can use a lambda expression to specify the factory method.</source>
          <target state="translated">Você pode usar uma expressão lambda para especificar o método de fábrica.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This keeps all the initialization code in one place.</source>
          <target state="translated">Isso mantém todo o código de inicialização em um único local.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</source>
          <target state="translated">A expressão lambda captura o contexto, incluindo quaisquer argumentos que você passa para o construtor do objeto inicializado lentamente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Exception caching<ept id="p1">**</ept> When you use factory methods, exceptions are cached.</source>
          <target state="translated"><bpt id="p1">**</bpt>Exceção cache<ept id="p1">**</ept> quando você usar métodos de fábrica, exceções são armazenados em cache.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>That is, if the factory method throws an exception the first time a thread tries to access the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object, the same exception is thrown on every subsequent attempt.</source>
          <target state="translated">Ou seja, se o método de fábrica gera um tempo de exceção primeiro um thread tenta acessar o <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade o <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> do objeto, a mesma exceção será lançada em todas as tentativas subsequentes.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This ensures that every call to the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property produces the same result and avoids subtle errors that might arise if different threads get different results.</source>
          <target state="translated">Isso garante que todas as chamadas para o <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade produz o mesmo resultado e evita erros sutis que podem surgir se threads diferentes obtenham resultados diferentes.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> stands in for an actual <ph id="ph2">`T`</ph> that otherwise would have been initialized at some earlier point, usually during startup.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> significa um real <ph id="ph2">`T`</ph> que outra forma seria foram inicializados em algum momento anterior, geralmente durante a inicialização.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>A failure at that earlier point is usually fatal.</source>
          <target state="translated">Uma falha em que ponto anterior é geralmente fatal.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</source>
          <target state="translated">Se houver uma possibilidade de uma falha recuperável, recomendamos que você crie a lógica de repetição para a rotina de inicialização (nesse caso, o método de fábrica), exatamente como você faria se estivéssemos usando inicialização lenta.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Alternative to locking<ept id="p1">**</ept> In certain situations, you might want to avoid the overhead of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object's default locking behavior.</source>
          <target state="translated"><bpt id="p1">**</bpt>Alternativa para bloqueio<ept id="p1">**</ept> em determinadas situações, você talvez queira evitar a sobrecarga do <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto padrão de comportamento de bloqueio.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In rare situations, there might be a potential for deadlocks.</source>
          <target state="translated">Em situações raras, pode haver um potencial para deadlocks.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In such cases, you can use the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor, and specify <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Nesses casos, você pode usar o <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> ou <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> construtor e especifique <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This enables the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object to create a copy of the lazily initialized object on each of several threads if the threads call the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property simultaneously.</source>
          <target state="translated">Isso permite que o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto para criar uma cópia do objeto inicializado lentamente em cada um dos vários threads, se os threads de chamam o <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade simultaneamente.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto garante que todos os threads de usar a mesma instância do objeto inicializado lentamente e descarta as instâncias que não são usadas.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</source>
          <target state="translated">Assim, o custo de reduzir a sobrecarga de bloqueio é seu programa, às vezes, pode criar e descartar cópias adicionais de um objeto caro.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In most cases, this is unlikely.</source>
          <target state="translated">Na maioria dos casos, isso é improvável.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The examples for the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors demonstrate this behavior.</source>
          <target state="translated">Os exemplos para o <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> construtores demonstram esse comportamento.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>When you specify <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, exceptions are never cached, even if you specify a factory method.</source>
          <target state="translated">Quando você especificar <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, exceções são nunca armazenados em cache, mesmo se você especificar um método de fábrica.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Equivalent constructors<ept id="p1">**</ept> In addition to enabling the use of <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors can duplicate the functionality of the other constructors.</source>
          <target state="translated"><bpt id="p1">**</bpt>Construtores equivalentes<ept id="p1">**</ept> além de habilitar o uso de <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, o <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> e <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> construtores podem duplicar a funcionalidade de outros construtores.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following table shows the parameter values that produce equivalent behavior.</source>
          <target state="translated">A tabela a seguir mostra os valores de parâmetro que produzem um comportamento equivalente.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is</source>
          <target state="translated">Para criar um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors that have a <ph id="ph1">`LazyThreadSafetyMode`</ph> <ph id="ph2">`mode`</ph> parameter, set <ph id="ph3">`mode`</ph> to</source>
          <target state="translated">Para construtores que têm um <ph id="ph1">`LazyThreadSafetyMode`</ph> <ph id="ph2">`mode`</ph> parâmetro, defina <ph id="ph3">`mode`</ph> para</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors that have a Boolean <ph id="ph1">`isThreadSafe`</ph> parameter, set <ph id="ph2">`isThreadSafe`</ph> to</source>
          <target state="translated">Para construtores que têm um valor booleano <ph id="ph1">`isThreadSafe`</ph> parâmetro, defina <ph id="ph2">`isThreadSafe`</ph> para</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors with no thread safety parameters</source>
          <target state="translated">Para construtores sem parâmetros de segurança de thread</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Fully thread safe; uses locking to ensure that only one thread initializes the value.</source>
          <target state="translated">Totalmente thread-safe; usa bloqueio para garantir que apenas um thread inicializa o valor.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>All such constructors are fully thread safe.</source>
          <target state="translated">Todos os construtores de tais totalmente são thread-safe.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not thread safe.</source>
          <target state="translated">Não thread-safe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">Não aplicável.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Fully thread safe; threads race to initialize the value.</source>
          <target state="translated">Totalmente thread-safe; corrida de threads para inicializar o valor.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">Não aplicável.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">Não aplicável.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Other capabilities<ept id="p1">**</ept> For information about the use of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> with thread-static fields, or as the backing store for properties, see <bpt id="p2">[</bpt>Lazy Initialization<ept id="p2">](~/docs/framework/performance/lazy-initialization.md)</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Outros recursos<ept id="p1">**</ept> para obter informações sobre o uso de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> com campos de thread estático, ou como o repositório de backup para as propriedades, consulte <bpt id="p2">[</bpt>inicialização lenta<ept id="p2">](~/docs/framework/performance/lazy-initialization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class to provide lazy initialization with access from multiple threads.</source>
          <target state="translated">O exemplo a seguir demonstra o uso da <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> classe para fornecer a inicialização lenta com acesso de vários threads.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">O exemplo usa o <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">Ele também demonstra o uso do <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> construtor (especificando <ph id="ph2">`true`</ph> para <ph id="ph3">`isThreadSafe`</ph>) e o <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> construtor (especificando <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> para <ph id="ph6">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">Para alternar para um construtor diferente, basta altere quais construtores são comentadas.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For an example that demonstrates exception caching using the same constructors, see the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Para obter um exemplo que demonstra a exceção de cache usando os mesmo construtores, consulte o <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">O exemplo define uma classe <ph id="ph1">`LargeObject`</ph> que será inicializada lentamente por um dos vários threads.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which displays a message when the object is created.</source>
          <target state="translated">As quatro seções principais de código ilustram a criação de inicializador, o método de fábrica, a inicialização real e o construtor do <ph id="ph1">`LargeObject`</ph> classe, que exibe uma mensagem quando o objeto é criado.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">No início do método <ph id="ph1">`Main`</ph>, o exemplo cria o inicializador thread-safe lento para <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The factory method shows the creation of the object, with a placeholder for further initialization:</source>
          <target state="translated">O método de fábrica mostra a criação do objeto, com um espaço reservado para inicialização adicional:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Note that the first two code sections could be combined by using a lambda function, as shown here:</source>
          <target state="translated">Observe que as seções de duas primeiras código poderiam ser combinadas usando uma função lambda, conforme mostrado aqui:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</source>
          <target state="translated">O exemplo faz uma pausa, para indicar que um período indeterminado pode decorrer antes da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>When you press the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example creates and starts three threads.</source>
          <target state="translated">Quando você pressiona o <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> chave, o exemplo cria e inicia três threads.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property.</source>
          <target state="translated">O <ph id="ph1">`ThreadProc`</ph> método que é usado por todas as chamadas de três threads a <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The first time this happens, the <ph id="ph1">`LargeObject`</ph> instance is created:</source>
          <target state="translated">Na primeira vez que isso acontecer, o <ph id="ph1">`LargeObject`</ph> instância é criada:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The constructor of the <ph id="ph1">`LargeObject`</ph> class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</source>
          <target state="translated">O construtor do <ph id="ph1">`LargeObject`</ph> classe, que inclui a última seção chave do código, exibe uma mensagem e registra a identidade do thread de inicialização.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The output from the program appears at the end of the full code listing.</source>
          <target state="translated">A saída do programa é exibido no final da listagem de código completo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Para simplificar, este exemplo usa uma instância global de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, e todos os métodos são <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Estes não são requisitos para o uso da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>By default, all public and protected members of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class are thread safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Por padrão, todos os membros protegidos e públicos do <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> classe é thread-safe e podem ser usados simultaneamente em vários threads.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</source>
          <target state="translated">Essas garantias de segurança do thread podem ser removidas, opcionalmente e por instância, usando parâmetros para construtores de tipo.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Lazy`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor">
          <source>When lazy initialization occurs, the default constructor of the target type is used.</source>
          <target state="translated">Quando ocorre a inicialização lenta, o construtor padrão do tipo de destino é usado.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
          <target state="translated">Uma instância que é criada com esse construtor pode ser usada simultaneamente de vários threads.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O modo de segurança do thread de um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância é inicializada com esse construtor é <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância que é criada com esse construtor não armazena em cache exceções.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Para obter mais informações, consulte a classe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> ou a enumeração <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The following example demonstrates the use of this constructor.</source>
          <target state="translated">O exemplo a seguir demonstra o uso desse construtor.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>It also illustrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">Ele também ilustra o uso do <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> construtor (especificando <ph id="ph2">`true`</ph> para <ph id="ph3">`isThreadSafe`</ph>) e o <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> construtor (especificando <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> para <ph id="ph6">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">Para alternar para um construtor diferente, basta altere quais construtores são comentadas.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">O exemplo define uma classe <ph id="ph1">`LargeObject`</ph> que será inicializada lentamente por um dos vários threads.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The two key lines of code in this example are the creation of the initializer and the actual initialization.</source>
          <target state="translated">As duas linhas de chave de código neste exemplo são a criação de inicializador e a inicialização real.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">No início do método <ph id="ph1">`Main`</ph>, o exemplo cria o inicializador thread-safe lento para <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">O exemplo cria e inicia três threads bloqueiam um <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do objeto, para que o exemplo pode liberar os threads ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property to get the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated">O <ph id="ph1">`ThreadProc`</ph> método que é usado por todas as chamadas de três threads a <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade para obter o <ph id="ph3">`LargeObject`</ph> instância:</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class provides locking, so that only one thread is allowed to create the <ph id="ph2">`LargeObject`</ph> instance.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> classe fornece o bloqueio, para que apenas um thread tem permissão para criar o <ph id="ph2">`LargeObject`</ph> instância.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example demonstrates that the other threads all get the same instance.</source>
          <target state="translated">O exemplo demonstra que os threads todos obtenham a mesma instância.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Para simplificar, este exemplo usa uma instância global de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, e todos os métodos são <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Estes não são requisitos para o uso da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make the instance usable by only one thread at a time.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para tornar essa instância utilizável simultaneamente por vários threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para torná-la utilizável por apenas um thread por vez.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</source>
          <target state="translated">Quando ocorre a inicialização lenta, o construtor padrão do tipo de destino e o modo de inicialização especificado são usados.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O modo de segurança do thread de um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância é inicializada com esse construtor é <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> se <ph id="ph3">`isThreadSafe`</ph> é <ph id="ph4">`true`</ph>; caso contrário, o modo é <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
          <target state="translated">Para especificar o <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> modo, use o <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> ou <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância que é criada com esse construtor não armazena em cache exceções.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Para obter mais informações, consulte a classe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> ou a enumeração <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</source>
          <target state="translated">O exemplo a seguir demonstra o uso desse construtor para criar um inicializador lento que não é thread-safe, para cenários em que todo o acesso ao objeto inicializado lentamente ocorre no mesmo thread.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph3">`mode`</ph>.</source>
          <target state="translated">Ele também demonstra o uso do <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> construtor (especificando <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> para <ph id="ph3">`mode`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>To switch to a different constructor, just change which constructor is commented out.</source>
          <target state="translated">Para alternar para um construtor diferente, basta altere qual construtor é comentada.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`isThreadSafe`</ph>), see the example for the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">Para o código que demonstra como usar o construtor em cenários com vários segmentos (especificando <ph id="ph1">`true`</ph> para <ph id="ph2">`isThreadSafe`</ph>), consulte o exemplo para o <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily.</source>
          <target state="translated">O exemplo define um <ph id="ph1">`LargeObject`</ph> classe será inicializado lentamente.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>In the <ph id="ph1">`Main`</ph> method, the example creates a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance and then pauses.</source>
          <target state="translated">No <ph id="ph1">`Main`</ph> método, o exemplo cria um <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instância e, em seguida, pausa.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>When you press the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example accesses the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance, which causes initialization to occur.</source>
          <target state="translated">Quando você pressiona o <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> chave, o exemplo acessa o <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade o <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instância, o que faz com que a inicialização ocorra.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The constructor of the <ph id="ph1">`LargeObject`</ph> class displays a console message.</source>
          <target state="translated">O construtor do <ph id="ph1">`LargeObject`</ph> classe exibe uma mensagem de console.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Para simplificar, este exemplo usa uma instância global de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, e todos os métodos são <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Estes não são requisitos para o uso da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">O delegado que é invocado para produzir o valor inicializado de forma lenta quando for necessário.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>When lazy initialization occurs, the specified initialization function is used.</source>
          <target state="translated">Quando ocorre uma inicialização lenta, a função de inicialização especificada é usada.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
          <target state="translated">Uma instância que é criada com esse construtor pode ser usada simultaneamente de vários threads.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O modo de segurança do thread de um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância é inicializada com esse construtor é <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
          <target state="translated">Exceções geradas por <ph id="ph1">`valueFactory`</ph> são armazenados em cache.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Para obter mais informações, consulte a classe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> ou a enumeração <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</source>
          <target state="translated">O exemplo a seguir demonstra o uso desse construtor para fornecer a inicialização lenta com o cache de exceção.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">Ele também demonstra o uso do <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> construtor (especificando <ph id="ph2">`true`</ph> para <ph id="ph3">`isThreadSafe`</ph>) e o <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> construtor (especificando <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> para <ph id="ph6">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">Para alternar para um construtor diferente, basta altere quais construtores são comentadas.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">O exemplo define uma classe <ph id="ph1">`LargeObject`</ph> que será inicializada lentamente por um dos vários threads.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which demonstrates exception caching.</source>
          <target state="translated">As três seções principais de código ilustram a criação de inicializador, a inicialização real e o construtor do <ph id="ph1">`LargeObject`</ph> classe, que demonstra o cache de exceções.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">No início do método <ph id="ph1">`Main`</ph>, o exemplo cria o inicializador thread-safe lento para <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The example creates and starts three threads.</source>
          <target state="translated">O exemplo cria e inicia três threads.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property to get the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated">O <ph id="ph1">`ThreadProc`</ph> método que é usado por todas as chamadas de três threads a <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade para obter o <ph id="ph3">`LargeObject`</ph> instância:</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>In the constructor of the <ph id="ph1">`LargeObject`</ph> class, the third key section of code throws an exception the first time a <ph id="ph2">`LargeObject`</ph> instance is created, but thereafter allows instance creation to occur:</source>
          <target state="translated">No construtor do <ph id="ph1">`LargeObject`</ph> classe, a terceira seção chave do código lança uma exceção na primeira vez um <ph id="ph2">`LargeObject`</ph> instância é criada, mas depois disso permite a criação da instância:</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>When the example is run, the first thread that tries to create an instance of <ph id="ph1">`LargeObject`</ph> fails, and the exception is caught.</source>
          <target state="translated">Quando o exemplo for executado, o primeiro thread que tenta criar uma instância de <ph id="ph1">`LargeObject`</ph> falhará e a exceção é capturado.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>You might expect that the next thread would successfully create an instance, but the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object has cached the exception.</source>
          <target state="translated">Você pode esperar que o próximo segmento seria criar com êxito uma instância, mas o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto armazenou em cache a exceção.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Because of this, all three threads throw the exception.</source>
          <target state="translated">Por isso, todos os três threads geram a exceção.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Para simplificar, este exemplo usa uma instância global de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, e todos os métodos são <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Estes não são requisitos para o uso da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
          <target state="translated">Um dos valores de enumeração que especifica o modo de acesso thread-safe.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class that uses the default constructor of <ph id="ph2">&lt;paramref name="T" /&gt;</ph> and the specified thread-safety mode.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> que usa o construtor padrão de <ph id="ph2">&lt;paramref name="T" /&gt;</ph> e o modo de acesso thread-safe especificado.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">O modo de segurança do thread de um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância descreve o comportamento quando vários threads tentarem inicializar o <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">Um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância que é criada com esse construtor não armazena em cache exceções.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Para obter mais informações, consulte a classe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> ou a enumeração <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</source>
          <target state="translated">O exemplo a seguir demonstra o uso desse construtor para criar um inicializador lento que permite que vários threads disputem para criar um objeto lentamente.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</source>
          <target state="translated">Vários threads podem ter êxito na criação de instâncias, mas todos os threads de usam a instância que foi criada pela primeira vez.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">Para obter um exemplo que demonstra como usar o construtor em cenários de thread único (especificando <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`mode`</ph>), consulte o <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">Para obter um exemplo que demonstra como usar o construtor para fornecer bloqueio em vez de condições de corrida em cenários com vários segmentos (especificando <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`mode`</ph>), consulte o <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by any of several threads.</source>
          <target state="translated">O exemplo define um <ph id="ph1">`LargeObject`</ph> classe será inicializado lentamente por qualquer um dos vários threads.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">As três seções principais de código ilustram a criação do inicializador, a inicialização real e o construtor e o finalizador do <ph id="ph1">`LargeObject`</ph> classe.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object that performs lazy initialization of the <ph id="ph3">`LargeObject`</ph>:</source>
          <target state="translated">No início do <ph id="ph1">`Main`</ph> método, o exemplo cria o <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> objeto que executa a inicialização lenta do <ph id="ph3">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">O exemplo cria e inicia três threads bloqueiam um <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do objeto, para que o exemplo pode liberar os threads ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>In the <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads, calling the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property creates the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated">No <ph id="ph1">`ThreadProc`</ph> método que é usado por todos os três threads, chamando o <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade cria o <ph id="ph3">`LargeObject`</ph> instância:</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Because the constructor for the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance specified <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, all three threads are allowed to create <ph id="ph3">`LargeObject`</ph> instances.</source>
          <target state="translated">Porque o construtor para o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância especificada <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, todos os três threads têm permissão para criar <ph id="ph3">`LargeObject`</ph> instâncias.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <ph id="ph1">`LargeObject`</ph> class:</source>
          <target state="translated">O exemplo demonstra isso exibindo mensagens de console no construtor e no finalizador do <ph id="ph1">`LargeObject`</ph> classe:</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>However, the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that only one instance is used by all threads.</source>
          <target state="translated">No entanto, o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto garante que apenas uma instância é usada por todos os threads.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</source>
          <target state="translated">A saída do exemplo mostra que todos os três threads usam a mesma instância e também mostra que as duas instâncias podem ser recuperadas pela coleta de lixo.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Para simplificar, este exemplo usa uma instância global de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, e todos os métodos são <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Estes não são requisitos para o uso da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contém um valor inválido.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">O delegado que é invocado para produzir o valor inicializado de forma lenta quando for necessário.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make this instance usable by only one thread at a time.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para tornar essa instância utilizável simultaneamente por vários threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para tornar essa instância utilizável por apenas um thread por vez.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>When lazy initialization occurs, the specified initialization function and initialization mode are used.</source>
          <target state="translated">Quando ocorre a inicialização lenta, a função de inicialização especificada e o modo de inicialização são usados.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">O modo de segurança do thread de um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância é inicializada com esse construtor é <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> se <ph id="ph3">`isThreadSafe`</ph> é <ph id="ph4">`true`</ph>; caso contrário, o modo é <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">O modo thread-safe descreve o comportamento quando vários threads tentam inicializar a instância de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
          <target state="translated">Para especificar o <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> modo, use o <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> ou <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
          <target state="translated">Exceções geradas por <ph id="ph1">`valueFactory`</ph> são armazenados em cache.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Para obter mais informações, consulte a classe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> ou a enumeração <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</source>
          <target state="translated">O exemplo a seguir demonstra o uso desse construtor para fornecer a inicialização lenta com a exceção de armazenamento em cache, em um cenário com um único thread.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>It also demonstrates the use of the  <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%2A&gt;</ph> constructor (specifying <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph3">`mode`</ph>).</source>
          <target state="translated">Ele também demonstra o uso do <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%2A&gt;</ph> construtor (especificando <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> para <ph id="ph3">`mode`</ph>).</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>To switch to that constructor, just change which constructor is commented out.</source>
          <target state="translated">Para alternar para esse construtor, basta altere qual construtor é comentada.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`isThreadSafe`</ph>), see the example for the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Para o código que demonstra como usar o construtor em cenários com vários segmentos (especificando <ph id="ph1">`true`</ph> para <ph id="ph2">`isThreadSafe`</ph>), consulte o exemplo para o <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">O exemplo define uma classe <ph id="ph1">`LargeObject`</ph> que será inicializada lentamente por um dos vários threads.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which demonstrates exception caching.</source>
          <target state="translated">As três seções principais de código ilustram a criação de inicializador, a inicialização real e o construtor do <ph id="ph1">`LargeObject`</ph> classe, que demonstra o cache de exceções.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated">No início do método <ph id="ph1">`Main`</ph>, o exemplo cria o inicializador thread-safe lento para <ph id="ph2">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>In the call to the constructor, the <ph id="ph1">`isThreadSafe`</ph> parameter is <ph id="ph2">`false`</ph>, so the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> is not thread safe.</source>
          <target state="translated">Na chamada para o construtor de <ph id="ph1">`isThreadSafe`</ph> parâmetro é <ph id="ph2">`false`</ph>, portanto, o <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> não é thread-safe.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Because it's not thread safe, the example calls the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property three times on the same thread:</source>
          <target state="translated">Porque ele não é thread-safe, o exemplo chama o <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade três vezes no mesmo thread:</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>In the constructor of the <ph id="ph1">`LargeObject`</ph> class, the third key section of code throws an exception the first time a <ph id="ph2">`LargeObject`</ph> instance is created, but thereafter allows instance creation to occur:</source>
          <target state="translated">No construtor do <ph id="ph1">`LargeObject`</ph> classe, a terceira seção chave do código lança uma exceção na primeira vez um <ph id="ph2">`LargeObject`</ph> instância é criada, mas depois disso permite a criação da instância:</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>When the example is run, the first attempt to create an instance of <ph id="ph1">`LargeObject`</ph> fails, and the exception is caught.</source>
          <target state="translated">Quando o exemplo for executado, a primeira tentativa de criar uma instância de <ph id="ph1">`LargeObject`</ph> falhará e a exceção é capturado.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>You might expect that the next attempt would succeed, but the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object has cached the exception.</source>
          <target state="translated">Você pode esperar que a próxima tentativa terá êxito, mas o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto armazenou em cache a exceção.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Because of this, all three attempts throw the exception.</source>
          <target state="translated">Por isso, todos os três tentativas lançam a exceção.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Para simplificar, este exemplo usa uma instância global de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, e todos os métodos são <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Estes não são requisitos para o uso da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">O delegado que é invocado para produzir o valor inicializado de forma lenta quando for necessário.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
          <target state="translated">Um dos valores de enumeração que especifica o modo de acesso thread-safe.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class that uses the specified initialization function and thread-safety mode.</source>
          <target state="translated">Inicializa uma nova instância da classe <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> que usa a função de inicialização especificada e o modo de segurança do thread.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">O modo de segurança do thread de um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância descreve o comportamento quando vários threads tentarem inicializar o <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached, unless <ph id="ph2">`mode`</ph> is <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Exceções geradas por <ph id="ph1">`valueFactory`</ph> são armazenados em cache, a menos que <ph id="ph2">`mode`</ph> é <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Para obter mais informações, consulte a classe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> ou a enumeração <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</source>
          <target state="translated">O exemplo a seguir demonstra o uso desse construtor para criar um inicializador lento que permite que vários threads disputem para criar um objeto lentamente.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</source>
          <target state="translated">Vários threads podem ter êxito na criação de instâncias, mas todos os threads de usam a instância que foi criada pela primeira vez.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In addition, the example demonstrates that exceptions are never cached when you specify <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</source>
          <target state="translated">Além disso, o exemplo demonstra que exceções são nunca armazenados em cache quando você especificar <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, mesmo se a inicialização é executada por uma função em vez de pelo construtor padrão do tipo lentamente criado.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">Para obter um exemplo que demonstra como usar o construtor em cenários de thread único (especificando <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`mode`</ph>), consulte o <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">Para obter um exemplo que demonstra como usar o construtor para fornecer bloqueio em vez de condições de corrida em cenários com vários segmentos (especificando <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`mode`</ph>), consulte o <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by any of several threads.</source>
          <target state="translated">O exemplo define um <ph id="ph1">`LargeObject`</ph> classe será inicializado lentamente por qualquer um dos vários threads.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">As quatro seções principais de código ilustram a criação do inicializador, a inicialização real, a função de inicialização e o construtor e o finalizador do <ph id="ph1">`LargeObject`</ph> classe.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object that performs lazy initialization of the <ph id="ph3">`LargeObject`</ph>:</source>
          <target state="translated">No início do <ph id="ph1">`Main`</ph> método, o exemplo cria o <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> objeto que executa a inicialização lenta do <ph id="ph3">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The lazy initializer uses a function to perform the initialization.</source>
          <target state="translated">O inicializador lento usa uma função para executar a inicialização.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In this case, a function is required because there is no default constructor for the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">Nesse caso, uma função é necessária porque não há nenhum construtor padrão para o <ph id="ph1">`LargeObject`</ph> classe.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">O exemplo cria e inicia três threads bloqueiam um <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do objeto, para que o exemplo pode liberar os threads ao mesmo tempo.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In the <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads, calling the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property creates the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated">No <ph id="ph1">`ThreadProc`</ph> método que é usado por todos os três threads, chamando o <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade cria o <ph id="ph3">`LargeObject`</ph> instância:</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In the third key section of code, the lazy initialization function is called to create the <ph id="ph1">`LargeObject`</ph> instance.</source>
          <target state="translated">Na seção terceira chave de código, a função de inicialização lenta é chamada para criar o <ph id="ph1">`LargeObject`</ph> instância.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The function throws an exception the first time it's called:</source>
          <target state="translated">A função gera um tempo de exceção na primeira chamada:</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>With any other <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode&gt;</ph> setting, an unhandled exception in the initialization function would be cached.</source>
          <target state="translated">Com qualquer outro <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode&gt;</ph> configuração, uma exceção sem tratamento na função de inicialização deve ser armazenado em cache.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>However, <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> suppresses exception caching.</source>
          <target state="translated">No entanto, <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> suprime o cache de exceções.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</source>
          <target state="translated">A saída do exemplo demonstra uma tentativa subsequente para inicializar o objeto for bem-sucedida.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The exception message usually appears after messages indicating that other threads have successfully initialized the object.</source>
          <target state="translated">A mensagem de exceção normalmente aparece depois mensagens indicando que outros threads tiveram inicializado com êxito o objeto.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>This is because of the delay introduced by throwing and catching the exception.</source>
          <target state="translated">Isso ocorre devido o atraso introduzido pela lançamento e captura a exceção.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Because the constructor for the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance specified <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, all three threads are allowed to create <ph id="ph3">`LargeObject`</ph> instances.</source>
          <target state="translated">Porque o construtor para o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância especificada <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, todos os três threads têm permissão para criar <ph id="ph3">`LargeObject`</ph> instâncias.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <ph id="ph1">`LargeObject`</ph> class:</source>
          <target state="translated">O exemplo demonstra isso exibindo mensagens de console no construtor e no finalizador do <ph id="ph1">`LargeObject`</ph> classe:</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> objeto garante que apenas uma instância é usada por todos os threads (exceto o thread em que a função de inicialização gera uma exceção).</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example shows this.</source>
          <target state="translated">A saída do exemplo mostra isso.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">Para simplificar, este exemplo usa uma instância global de <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, e todos os métodos são <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> no Visual Basic).</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">Estes não são requisitos para o uso da inicialização lenta.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contém um valor inválido.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.IsValueCreated">
          <source>Gets a value that indicates whether a value has been created for this <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">Obtém um valor que indica se um valor foi criado para essa instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a value has been created for this <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se um valor foi criado para essa instância <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>; caso contrário, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>When lazy initialization occurs for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, it may result in either a value being created or an exception being thrown.</source>
          <target state="translated">Quando a inicialização lenta ocorre para um <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância, ele pode resultar em um valor que está sendo criado ou uma exceção sendo lançada.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If an exception is thrown, subsequent behavior of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance depends on whether exception caching is in effect.</source>
          <target state="translated">Se uma exceção for lançado, subsequente comportamento da <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância depende se o cache de exceção está em vigor.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância foi criada usando um construtor que não especifica uma função de inicialização e cache de exceções não está em vigor.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>A subsequent attempt to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> might succeed, and after successful initialization the <ph id="ph2">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Uma tentativa subsequente para inicializar o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> pode ter êxito e depois da inicialização bem-sucedida do <ph id="ph2">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> propriedade retorna <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created with an initialization function (specified by the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> constructor), then exception caching is controlled by the thread safety mode.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância foi criada com uma função de inicialização (especificado pelo <ph id="ph2">`valueFactory`</ph> parâmetro do <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> construtor), e em seguida, o cache de exceção é controlado pelo modo de segurança de thread.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>, there is no second chance to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Se o modo for <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>, não há nenhuma possibilidade de segundo para inicializar o <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Se uma exceção ocorre e sem tratamento na função de inicialização, essa exceção é armazenado em cache e relançada em acessos subsequentes do <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> propriedade.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>No value is created if an exception is thrown, so in such cases <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Nenhum valor é criado se uma exceção for lançada, isso em tais casos <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> retorna <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Se o modo for <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, o primeiro thread êxito executando a função de inicialização (ou o construtor padrão) cria o valor para a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the initialization function throws an exception on one thread, other threads can still try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Se a função de inicialização lançar uma exceção em um thread, outros threads ainda podem tentar inicializar o <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>Until the value is created, the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Até que o valor é criado, o <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> propriedade retorna <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>Creates and returns a string representation of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property for this instance.</source>
          <target state="translated">Cria e retorna uma representação de cadeia de caracteres da propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> para esta instância.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>The result of calling the <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method on the <ph id="ph2">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property for this instance, if the value has been created (that is, if the <ph id="ph3">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>).</source>
          <target state="translated">O resultado da chamada do método <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> na propriedade <ph id="ph2">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> para essa instância, se o valor tiver sido criado (ou seja, se a propriedade <ph id="ph3">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> retornar <ph id="ph4">&lt;see langword="true" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>Otherwise, a string indicating that the value has not been created.</source>
          <target state="translated">Caso contrário, uma cadeia de caracteres que indica que o valor não foi criado.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.ToString">
          <source>Calling this method does not cause initialization.</source>
          <target state="translated">Chamar esse método não faz com que a inicialização.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property can be <ph id="ph2">`null`</ph> after lazy initialization if the factory method that was specified for the <ph id="ph3">`valueFactory`</ph> parameter of the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph6">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor returns <ph id="ph7">`null`</ph>.</source>
          <target state="translated">O <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> propriedade pode ser <ph id="ph2">`null`</ph> após a inicialização lenta se o método de fábrica que foi especificado para o <ph id="ph3">`valueFactory`</ph> parâmetro o <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, ou <ph id="ph6">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> construtor retorna <ph id="ph7">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>The <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">A propriedade <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> é <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>Gets the lazily initialized value of the current <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">Obtém o valor de inicialização ociosa da instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> atual.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>The lazily initialized value of the current <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">O valor de inicialização ociosa do atual <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instância.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType&gt;</ph> property is <ph id="ph2">`false`</ph>, accessing the <ph id="ph3">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property forces initialization.</source>
          <target state="translated">Se o <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType&gt;</ph> é de propriedade <ph id="ph2">`false`</ph>, acessando o <ph id="ph3">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade força a inicialização.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>In addition to the exceptions that are listed, the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property can throw any unhandled exception that is thrown by the factory method that was passed to the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">Além de exceções que são listadas, o <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> propriedade pode acionar qualquer exceção que é lançada pelo método de fábrica que foi passado para o <ph id="ph2">`valueFactory`</ph> parâmetro o <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, ou <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> construtor.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</source>
          <target state="translated">A instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> é inicializada para usar o construtor padrão do tipo que está sendo inicializado lentamente e as permissões para acessar o construtor estão ausentes.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</source>
          <target state="translated">A instância <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> é inicializada para usar o construtor padrão do tipo que está sendo inicializado lentamente e esse tipo não tem um construtor público sem parâmetros.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The initialization function tries to access <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> on this instance.</source>
          <target state="translated">A função de inicialização tenta acessar <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> nessa instância.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>