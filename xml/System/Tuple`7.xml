<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ff8c3596f37b00620da99feabf785f0647be74b2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729510" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`7&lt;T1, T2, T3, T4, T5, T6, T7&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`7" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">O tipo do primeiro componente da tupla.</typeparam>
    <typeparam name="T2">O tipo do segundo componente da tupla.</typeparam>
    <typeparam name="T3">O tipo do terceiro componente da tupla.</typeparam>
    <typeparam name="T4">O tipo do quarto componente da tupla.</typeparam>
    <typeparam name="T5">O tipo do quinto componente da tupla.</typeparam>
    <typeparam name="T6">O tipo do sexto componente da tupla.</typeparam>
    <typeparam name="T7">O tipo do sétimo componente da tupla.</typeparam>
    <summary>Representa uma tupla de 7 ou sétupla.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tupla é uma estrutura de dados que possui um número específico e uma sequência de valores. O <xref:System.Tuple%607> classe representa uma tupla de 7 ou sétupla, que é uma tupla que tem sete componentes.  
  
 Você pode instanciar uma <xref:System.Tuple%607> objeto chamando o <xref:System.Tuple%607.%23ctor%2A> ou estático <xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType> método. Você pode recuperar o valor dos componentes da tupla usando somente leitura <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, e <xref:System.Tuple%607.Item7%2A> propriedades da instância.  
  
 As tuplas costumam ser usadas de quatro maneiras diferentes:  
  
-   Para representar um único conjunto de dados. Por exemplo, uma tupla pode representar um registro de banco de dados, e seus componentes podem representar campos individuais do registro.  
  
-   Para fornecer acesso fácil a, e a manipulação de um conjunto de dados. O exemplo a seguir define uma <xref:System.Tuple%607> objeto que contém dados de população cidade de Nova York, para cada censo de 1950 até 2000. O sétupla é passada para o `ComputePopulationChange` método, que calcula a taxa de alteração entre censuses, bem como a taxa de alteração para o período do ano inteiro de 60 anual anual.  
  
     [!code-csharp[System.Tuple\`7.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`7.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.class/vb/example1.vb#1)]  
  
-   Para retornar vários valores de um método sem o uso de parâmetros `out` (no C#) ou de parâmetros `ByRef` (no Visual Basic). Por exemplo, o exemplo anterior retorna suas estatísticas computadas, juntamente com o nome da cidade, em um <xref:System.Tuple%607> objeto.  
  
-   Para passar vários valores para um método por meio de um parâmetro único. Por exemplo, o método <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> tem um único parâmetro que permite fornecer um valor ao método que o thread executa na inicialização. Se você fornecer uma <xref:System.Tuple%607> objeto como o argumento de método, você pode fornecer a rotina de inicialização do thread com sete itens de dados.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
      </Parameters>
      <Docs>
        <param name="item1">O valor do primeiro componente da tupla.</param>
        <param name="item2">O valor do segundo componente da tupla.</param>
        <param name="item3">O valor do terceiro componente da tupla.</param>
        <param name="item4">O valor do quarto componente da tupla</param>
        <param name="item5">O valor do quinto componente da tupla.</param>
        <param name="item6">O valor do sexto componente da tupla.</param>
        <param name="item7">O valor do sétimo componente da tupla.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Tuple`7" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o static <xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType> método para instanciar um objeto de tupla de 7 sem ter que especificar explicitamente os tipos de seus componentes. O exemplo a seguir usa o <xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType> método para instanciar uma tupla de 7 cujo primeiro componente é do tipo <xref:System.String> e cujos componentes restantes são do tipo <xref:System.Int32>.  
  
 [!code-csharp[System.Tuple.Create#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#13)]
 [!code-vb[System.Tuple.Create#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#13)]  
  
 Isso é equivalente à seguinte chamada para o <xref:System.Tuple%607.%23ctor%2A> construtor de classe.  
  
 [!code-csharp[System.Tuple.Create#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#14)]
 [!code-vb[System.Tuple.Create#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado com essa instância.</param>
        <summary>Retorna um valor que indica se o objeto <see cref="T:System.Tuple`7" /> atual é igual a um objeto especificado.</summary>
        <returns>
          <see langword="true" /> caso a instância atual seja igual ao objeto especificado; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O parâmetro `obj` deve ser considerado igual à instância atual nas seguintes circunstâncias:  
  
-   É um <xref:System.Tuple%607> objeto.  
  
-   Seus sete componentes são dos mesmos tipos da instância atual.  
  
-   Seus sete componentes são iguais da instância atual. A igualdade é determinada pela comparação de igualdade do objeto padrão para cada componente.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de sextuples que contêm dados de população para Los Angeles e Nova York de 1950 a 2000. O primeiro componente de cada sétupla identifica a cidade. Primeiro, terceiro e quarto septuples contêm dados de Nova York. A primeira sétupla é uma duplicata do quarto sétupla. O terceiro sétupla identifica a cidade como "New York City" em vez de "Nova Iorque". Como mostra o exemplo, somente o quarto sétupla é igual ao primeiro sétupla.  
  
 [!code-csharp[System.Tuple\`7.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`7.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o código hash para o objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do primeiro componente do objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <value>O valor do primeiro componente do objeto <see cref="T:System.Tuple`7" /> atual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%607.Item1%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%607.Item1%2A>.  
  
-   Recuperando o objeto <xref:System.Type> que representa o objeto <xref:System.Tuple%607> e recuperando o primeiro elemento da matriz que é retornada pelo método <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de <xref:System.Tuple%607> objetos cujos componentes contêm dados de população para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1950 até 2000. Em seguida, ele exibe em uma tabela que lista os dados. Para exibir o nome da cidade, ele recupera o valor de <xref:System.Tuple%607.Item1%2A> propriedade para cada <xref:System.Tuple%607> objeto.  
  
 [!code-csharp[System.Tuple\`7.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do segundo componente do objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <value>O valor atual <see cref="T:System.Tuple`7" /> segundo de componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%607.Item2%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%607.Item2%2A>.  
  
-   Recuperando o objeto <xref:System.Type> que representa o objeto <xref:System.Tuple%607> e recuperando o segundo elemento da matriz retornada pelo método <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de <xref:System.Tuple%607> objetos cujos componentes contêm dados de população para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1950 até 2000. Em seguida, ele exibe em uma tabela que lista os dados. Para exibir a população em 1950, ele recupera o valor da <xref:System.Tuple%607.Item2%2A> propriedade para cada <xref:System.Tuple%607> objeto.  
  
 [!code-csharp[System.Tuple\`7.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do terceiro componente do objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <value>O valor atual <see cref="T:System.Tuple`7" /> terceiro de componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%607.Item3%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%607.Item3%2A>.  
  
-   Recuperando o <xref:System.Type> objeto que representa o <xref:System.Tuple%607> de objeto e recuperar o terceiro elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de <xref:System.Tuple%607> objetos cujos componentes contêm dados de população para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1950 até 2000. Em seguida, ele exibe em uma tabela que lista os dados. Para exibir a população em 1960, ele recupera o valor da <xref:System.Tuple%607.Item3%2A> propriedade para cada <xref:System.Tuple%607> objeto.  
  
 [!code-csharp[System.Tuple\`7.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do quarto componente do objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <value>O valor atual <see cref="T:System.Tuple`7" /> quarto de componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%607.Item4%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%607.Item4%2A>.  
  
-   Recuperando o <xref:System.Type> objeto que representa o <xref:System.Tuple%607> de objeto e recuperar o quarto elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de <xref:System.Tuple%607> objetos cujos componentes contêm dados de população para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1950 até 2000. Em seguida, ele exibe em uma tabela que lista os dados. Para exibir a população em 1970, ele recupera o valor da <xref:System.Tuple%607.Item4%2A> propriedade para cada <xref:System.Tuple%607> objeto.  
  
 [!code-csharp[System.Tuple\`7.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do quinto componente do objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <value>O valor atual <see cref="T:System.Tuple`7" /> quinto de componente do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%607.Item5%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%607.Item5%2A>.  
  
-   Recuperando o <xref:System.Type> objeto que representa o <xref:System.Tuple%607> de objeto e recuperar o quinto elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de <xref:System.Tuple%607> objetos cujos componentes contêm dados de população para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1950 até 2000. Em seguida, ele exibe em uma tabela que lista os dados. Para exibir a população em 1980, ele recupera o valor da <xref:System.Tuple%607.Item5%2A> propriedade para cada <xref:System.Tuple%607> objeto.  
  
 [!code-csharp[System.Tuple\`7.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do sexto componente do objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <value>O valor atual <see cref="T:System.Tuple`7" /> componente sexto do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%607.Item6%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%607.Item6%2A>.  
  
-   Recuperando o <xref:System.Type> objeto que representa o <xref:System.Tuple%607> de objeto e recuperar o sexto elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de <xref:System.Tuple%607> objetos cujos componentes contêm dados de população para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1950 até 2000. Em seguida, ele exibe em uma tabela que lista os dados. Para exibir a população em 1990, ele recupera o valor da <xref:System.Tuple%607.Item6%2A> propriedade para cada <xref:System.Tuple%607> objeto.  
  
 [!code-csharp[System.Tuple\`7.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor do sétimo componente do objeto <see cref="T:System.Tuple`7" /> atual.</summary>
        <value>O valor atual <see cref="T:System.Tuple`7" /> componente sétimo do objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É possível determinar dinamicamente o tipo do componente <xref:System.Tuple%607.Item7%2A> de duas maneiras:  
  
-   Chamando o método `GetType` no valor retornado pela propriedade <xref:System.Tuple%607.Item7%2A>.  
  
-   Recuperando o <xref:System.Type> objeto que representa o <xref:System.Tuple%607> de objeto e recuperar o sétimo elemento da matriz que é retornado pelo seu <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 O exemplo a seguir define uma matriz de <xref:System.Tuple%607> objetos cujos componentes contêm dados de população para três cidades dos EUA (Nova York, Chicago e Los Angeles) de 1950 até 2000. Em seguida, ele exibe em uma tabela que lista os dados. Para exibir a população em 2000, ele recupera o valor da <xref:System.Tuple%607.Item7%2A> propriedade para cada <xref:System.Tuple%607> objeto.  
  
 [!code-csharp[System.Tuple\`7.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Um objeto a ser comparado com a instância atual.</param>
        <param name="comparer">Um objeto que fornece regras personalizadas para comparação.</param>
        <summary>Compara o objeto <see cref="T:System.Tuple`7" /> atual com um objeto especificado usando um comparador especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição do objeto especificado na ordem de classificação.</summary>
        <returns>Um inteiro assinado que indica a posição relativa dessa instância e <paramref name="other" /> na ordem de classificação, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term> Valor  
  
 </term><description> Descrição  
  
 </description></listheader><item><term> Um inteiro negativo  
  
 </term><description> Esta instância precede <paramref name="other" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> Esta instância e <paramref name="other" /> têm a mesma posição na ordem de classificação.  
  
 </description></item><item><term> Um inteiro positivo  
  
 </term><description> Esta instância segue <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%607> é convertida em uma interface de <xref:System.Collections.IStructuralComparable>.  
  
 Esse método permite que você defina as comparações personalizadas de <xref:System.Tuple%607> objetos. Por exemplo, você pode usar esse método para ordem <xref:System.Tuple%607> objetos com base no valor de um componente específico.  
  
 Embora possa ser chamado diretamente, esse método é mais comumente chamado pelos métodos de classificação de coleção que incluem parâmetros <xref:System.Collections.IComparer> para classificar os membros de uma coleção. Por exemplo, ele é chamado pelo método <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> e pelo método <xref:System.Collections.SortedList.Add%2A> de um objeto <xref:System.Collections.SortedList> que é instanciado usando-se o construtor <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType>.  
  
> [!CAUTION]
>  O <xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A> método destina-se ao uso em operações de classificação. Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais. Para determinar se dois objetos são iguais, chame o <xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir cria uma matriz de <xref:System.Tuple%607> objetos que contém dados de população para três cidades EUA 1950 a 2000. Primeiro componente do sétupla é o nome da cidade. Os cinco componentes restantes representam a população em intervalos de 10 anos de 1950 a 2000.  
  
 O `PopulationComparer` classe fornece um <xref:System.Collections.IComparer> implementação que permite que a matriz de septuples a ser classificada por qualquer um de seus componentes. Dois valores são fornecidos para o `PopulationComparer` classe em seu construtor: A posição do componente que define a ordem de classificação, e um <xref:System.Boolean> valor que indica se os objetos de tupla devem ser classificados em ordem crescente ou decrescente.  
  
 O exemplo, em seguida, exibe os elementos na matriz na ordem não classificado, classifica pelo terceiro componente (preenchimento 1960) e exibi-los, classifica pelo componente sexto (a população em 1990) e exibe-os.  
  
 [!code-csharp[System.Tuple\`7.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`7.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> não é um objeto <see cref="T:System.Tuple`7" />.</exception>
        <altmember cref="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">O objeto a ser comparado com essa instância.</param>
        <param name="comparer">Um objeto que define o método a ser usado para avaliar se dois objetos são iguais.</param>
        <summary>Retorna um valor que indica se o objeto <see cref="T:System.Tuple`7" /> atual é igual ao objeto especificado com base em um determinado método de comparação.</summary>
        <returns>
          <see langword="true" /> caso a instância atual seja igual ao objeto especificado; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%607> é convertida em uma interface de <xref:System.Collections.IStructuralEquatable>.  
  
 O <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementação é chamada somente se o outro não é `null`, e se ele pode ser com êxito cast (em c#) ou convertido (no Visual Basic) em um <xref:System.Tuple%607> cujos componentes são dos mesmos tipos da instância atual do objeto. O <xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> passa primeiro método de <xref:System.Tuple%607.Item1%2A> valores da <xref:System.Tuple%607> objetos a ser comparado com o <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementação. Se essa chamada de método retorna `true`, o método é chamado novamente e passado a <xref:System.Tuple%607.Item2%2A> valores dos dois <xref:System.Tuple%607> objetos. Isso continua até que a chamada do método retorna `false` quando ele se compara um par específico de `Item` valores ou os dois <xref:System.Tuple%607.Item7%2A> valores são passados para o método.  
  
   
  
## Examples  
 O exemplo a seguir define um `RateComparer` classe que executa um teste personalizado para fins de igualdade. Se os valores que são passados para o <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> método são do tipo <xref:System.Single> ou <xref:System.Double>, o método testa a igualdade usando até três dígitos fracionários. Caso contrário, ele simplesmente chama o `x` do parâmetro `Equals` método. O exemplo usa esse <xref:System.Collections.IEqualityComparer> implementação para determinar se quatro <xref:System.Tuple%607> objetos que contêm dados sobre a taxa de alteração de população entre 1950 e 2000 são iguais.  
  
 [!code-csharp[System.Tuple\`7.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`7.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Um objeto cujo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula o código hash do objeto <see cref="T:System.Tuple`7" /> atual.</param>
        <summary>Calcula o código hash para o objeto <see cref="T:System.Tuple`7" /> atual usando um método de computação especificado.</summary>
        <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%607> é convertida em uma interface de <xref:System.Collections.IStructuralEquatable>.  
  
 o método simplesmente encapsula uma chamada para o objeto de comparador <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementação.  
  
 O algoritmo usado para calcular o código hash deve retornar o mesmo código hash para duas <xref:System.Tuple%607> objetos que são considerados iguais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Um objeto a ser comparado com a instância atual.</param>
        <summary>Compara o objeto <see cref="T:System.Tuple`7" /> atual a um objeto especificado e retorna um inteiro que indica se o objeto atual está antes, depois ou na mesma posição que o objeto especificado na ordem de classificação.</summary>
        <returns>Um inteiro assinado que indica a posição relativa dessa instância e <paramref name="obj" /> na ordem de classificação, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term> Valor  
  
 </term><description> Descrição  
  
 </description></listheader><item><term> Um inteiro negativo  
  
 </term><description> Esta instância precede <paramref name="obj" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> Esta instância e <paramref name="obj" /> têm a mesma posição na ordem de classificação.  
  
 </description></item><item><term> Um inteiro positivo  
  
 </term><description> Esta instância segue <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Tuple%607> é convertida em uma interface de <xref:System.IComparable>.  
  
 Esse método fornece o <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementação para o <xref:System.Tuple%607> classe. Embora possa ser chamado diretamente, o método é mais comumente chamado pelas sobrecargas padrão de métodos de classificação da coleção, como <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> e <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, para classificar os membros de uma coleção.  
  
> [!CAUTION]
>  O <xref:System.Tuple%607.System%23IComparable%23CompareTo%2A> método destina-se ao uso em operações de classificação. Ele não deve ser usado quando a finalidade principal de uma comparação é determinar se dois objetos são iguais. Para determinar se dois objetos são iguais, chame o <xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=nameWithType> método.  
  
 Esse método usa o comparador de objeto padrão para comparar cada componente.  
  
   
  
## Examples  
 O exemplo a seguir cria uma matriz de <xref:System.Tuple%607> objetos que contêm dados de população para três cidades nos Estados Unidos de 1950 a 2000. Os componentes de sete consistem no nome da cidade seguido por população da cidade em intervalos de 10 anos de 1950 a 2000. O exemplo exibe os componentes de cada tupla no conjunto em ordem não classificado, classifica a matriz e, em seguida, chama o <xref:System.Tuple%607.ToString%2A> método para exibir cada tupla na ordem de classificação. A saída mostra que a matriz foi classificada por nome, que é o primeiro componente. Observe que o exemplo não chama diretamente o <xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29> método. Este método é chamado implicitamente pelo método <xref:System.Array.Sort%28System.Array%29> para cada elemento na matriz.  
  
 [!code-csharp[System.Tuple\`7.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`7.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> não é um objeto <see cref="T:System.Tuple`7" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice do elemento <see langword="Tuple" /> especificado. <c>índice</c> pode variar de 0 a 6.</param>
        <summary>Obtém o valor do elemento <see langword="Tuple" /> especificado.</summary>
        <value>O valor do elemento <see langword="Tuple" /> na posição especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> propriedade é uma implementação de interface explícita. Para chamá-lo, você deve lançar ou converter o <xref:System.Tuple%607> o objeto para um <xref:System.Runtime.CompilerServices.ITuple> objeto de interface.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> é menor que 0 ou maior que 6.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de elementos no <see langword="Tuple" />.</summary>
        <value>7, o número de elementos em um objeto <see cref="T:System.Tuple`7" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> propriedade é uma implementação de interface explícita. Para chamá-lo, você deve lançar ou converter o <xref:System.Tuple%607> o objeto para um <xref:System.Runtime.CompilerServices.ITuple> objeto de interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o valor desta instância <see cref="T:System.Tuple`7" />.</summary>
        <returns>A representação de cadeia de caracteres desse objeto <see cref="T:System.Tuple`7" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres retornada por este método assume a forma (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`), onde *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, *Item6*, e *Item7* representam os valores da <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, e <xref:System.Tuple%607.Item7%2A> propriedades, respectivamente. Caso seja `null`, qualquer um dos valores de propriedade é representado como <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 O exemplo a seguir define uma <xref:System.Tuple%607> objeto que contém dados de população cidade de Nova York, para cada censo de 1950 até 2000. Os componentes do sêxtupla são exibidos por uma chamada para o <xref:System.Tuple%607.ToString%2A> método.  
  
 [!code-csharp[System.Tuple\`7.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`7.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>