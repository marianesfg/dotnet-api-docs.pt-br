<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ad58bbe6f970c82a7de71ab2688204451e6b35b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37728017" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="be23e-101">O tipo de objeto a ser comparado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="be23e-101">The type of object to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="be23e-102">Define um método de comparação generalizado que implementa uma classe ou um tipo de valor para criar um método de comparação de tipo específico para ordenar ou classificar suas instâncias.</span>
      <span class="sxs-lookup">
        <span data-stu-id="be23e-102">Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be23e-103">Essa interface é implementada por tipos cujos valores podem ser ordenados ou classificados e fornece um método de comparação com rigidez de tipos para ordenar os membros de um objeto de coleção genérica.</span><span class="sxs-lookup"><span data-stu-id="be23e-103">This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="be23e-104">Por exemplo, um número pode ser maior que um segundo número e uma cadeia de caracteres pode aparecer em ordem alfabética antes da outra.</span><span class="sxs-lookup"><span data-stu-id="be23e-104">For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.</span></span> <span data-ttu-id="be23e-105">Ele requer que os tipos de implementação definem um único método, <xref:System.IComparable%601.CompareTo%28%600%29>, que indica se a posição da instância atual na ordem de classificação está antes, depois ou igual a um segundo objeto do mesmo tipo.</span><span class="sxs-lookup"><span data-stu-id="be23e-105">It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.</span></span> <span data-ttu-id="be23e-106">Normalmente, o método não é chamado diretamente do código do desenvolvedor.</span><span class="sxs-lookup"><span data-stu-id="be23e-106">Typically, the method is not called directly from developer code.</span></span> <span data-ttu-id="be23e-107">Em vez disso, ele é chamado automaticamente por métodos como <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> e <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span><span class="sxs-lookup"><span data-stu-id="be23e-107">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="be23e-108">Normalmente, os tipos que fornecem uma <xref:System.IComparable%601> implementação também implementar o <xref:System.IEquatable%601> interface.</span><span class="sxs-lookup"><span data-stu-id="be23e-108">Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="be23e-109">O <xref:System.IEquatable%601> interface define o <xref:System.IEquatable%601.Equals%2A> método, que determina a igualdade de instâncias do tipo de implementação.</span><span class="sxs-lookup"><span data-stu-id="be23e-109">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="be23e-110">A implementação de <xref:System.IComparable%601.CompareTo%28%600%29> método deve retornar um <xref:System.Int32> que tem um dos três valores, conforme mostrado na tabela a seguir.</span><span class="sxs-lookup"><span data-stu-id="be23e-110">The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.</span></span>  
  
|<span data-ttu-id="be23e-111">Valor</span><span class="sxs-lookup"><span data-stu-id="be23e-111">Value</span></span>|<span data-ttu-id="be23e-112">Significado</span><span class="sxs-lookup"><span data-stu-id="be23e-112">Meaning</span></span>|  
|-----------|-------------|  
|<span data-ttu-id="be23e-113">Menor que zero</span><span class="sxs-lookup"><span data-stu-id="be23e-113">Less than zero</span></span>|<span data-ttu-id="be23e-114">Esse objeto precede o objeto especificado pelo <xref:System.IComparable%601.CompareTo%2A> método na ordem de classificação.</span><span class="sxs-lookup"><span data-stu-id="be23e-114">This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.</span></span>|  
|<span data-ttu-id="be23e-115">Zero</span><span class="sxs-lookup"><span data-stu-id="be23e-115">Zero</span></span>|<span data-ttu-id="be23e-116">Esta instância atual ocorre na mesma posição na ordem de classificação que o objeto especificado pelo <xref:System.IComparable%601.CompareTo%2A> argumento do método.</span><span class="sxs-lookup"><span data-stu-id="be23e-116">This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.</span></span>|  
|<span data-ttu-id="be23e-117">Maior que zero</span><span class="sxs-lookup"><span data-stu-id="be23e-117">Greater than zero</span></span>|<span data-ttu-id="be23e-118">Esta instância atual segue o objeto especificado pelo <xref:System.IComparable%601.CompareTo%2A> argumento do método na ordem de classificação.</span><span class="sxs-lookup"><span data-stu-id="be23e-118">This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.</span></span>|  
  
 <span data-ttu-id="be23e-119">Todos os tipos numéricos (como <xref:System.Int32> e <xref:System.Double>) implementar <xref:System.IComparable%601>, como <xref:System.String>, <xref:System.Char>, e <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="be23e-119">All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>.</span></span> <span data-ttu-id="be23e-120">Tipos personalizados também devem fornecer sua própria implementação de <xref:System.IComparable%601> para habilitar as instâncias de objeto a ser classificada ou ordenada.</span><span class="sxs-lookup"><span data-stu-id="be23e-120">Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be23e-121">O exemplo de código a seguir ilustra a implementação <xref:System.IComparable%601> de um simples `Temperature` objeto.</span><span class="sxs-lookup"><span data-stu-id="be23e-121">The following code example illustrates the implementation of  <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="be23e-122">O exemplo cria um <xref:System.Collections.Generic.SortedList%602> coleção de cadeias de caracteres com `Temperature` chaves de objeto e adiciona vários pares de temperaturas e cadeias de caracteres à lista fora de sequência.</span><span class="sxs-lookup"><span data-stu-id="be23e-122">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="be23e-123">Na chamada para o <xref:System.Collections.Generic.SortedList%602.Add%2A> método, o <xref:System.Collections.Generic.SortedList%602> coleção usa o <xref:System.IComparable%601> implementação para classificar as entradas da lista, que são exibidas em ordem crescente de temperatura.</span><span class="sxs-lookup"><span data-stu-id="be23e-123">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="be23e-124">
        <para>Substitua o parâmetro de tipo a <see cref="T:System.IComparable`1" /> interface com o tipo que está implementando essa interface.  Se você implementar <see cref="T:System.IComparable`1" />, você deve sobrecarregar os <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, e <see langword="op_LessThanOrEqual" /> operadores para retornar valores que são consistentes com <see cref="M:System.IComparable`1.CompareTo(`0)" />. Além disso, você também deve implementar <see cref="T:System.IEquatable`1" />. Consulte o <see cref="T:System.IEquatable`1" /> artigo para obter informações completas.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="be23e-124">
          <para>Replace the type parameter of the <see cref="T:System.IComparable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IComparable`1" />, you should overload the <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, and <see langword="op_LessThanOrEqual" /> operators to return values that are consistent with <see cref="M:System.IComparable`1.CompareTo(`0)" />. In addition, you should also implement <see cref="T:System.IEquatable`1" />. See the <see cref="T:System.IEquatable`1" /> article for complete information.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="be23e-125">Um objeto a ser comparado com essa instância.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be23e-125">An object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be23e-126">Compara a instância atual com outro objeto do mesmo tipo e retorna um inteiro que indica se a instância atual precede, segue ou ocorre na mesma posição da ordem de classificação do outro objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be23e-126">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="be23e-127">Um valor que indica a ordem relativa dos objetos que estão sendo comparados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be23e-127">A value that indicates the relative order of the objects being compared.</span>
          </span>
          <span data-ttu-id="be23e-128">O valor retornado tem estes significados:</span>
          <span class="sxs-lookup">
            <span data-stu-id="be23e-128">The return value has these meanings:</span>
          </span>
          <span data-ttu-id="be23e-129">
            <list type="table">
              <listheader>
                <term> Valor </term>
                <description> Significado </description>
              </listheader>
              <item>
                <term> Menor que zero </term>
                <description> Essa instância precede <paramref name="other" /> na ordem de classificação.  </description>
              </item>
              <item>
                <term> Zero </term>
                <description> Essa instância ocorre na mesma posição de <paramref name="other" /> na ordem de classificação.  </description>
              </item>
              <item>
                <term> Maior que zero </term>
                <description> Essa instância segue <paramref name="other" /> na ordem de classificação. </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="be23e-129">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> This instance precedes <paramref name="other" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> This instance occurs in the same position in the sort order as <paramref name="other" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> This instance follows <paramref name="other" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be23e-130"><xref:System.IComparable%601.CompareTo%2A> Fornece um método de comparação com rigidez de tipos para ordenar os membros de um objeto de coleção genérica.</span><span class="sxs-lookup"><span data-stu-id="be23e-130"><xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="be23e-131">Por isso, ele geralmente não é chamado diretamente do código do desenvolvedor.</span><span class="sxs-lookup"><span data-stu-id="be23e-131">Because of this, it is usually not called directly from developer code.</span></span> <span data-ttu-id="be23e-132">Em vez disso, ele é chamado automaticamente por métodos como <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> e <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span><span class="sxs-lookup"><span data-stu-id="be23e-132">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="be23e-133">Esse método é apenas uma definição e deve ser implementado por um tipo específico de classe ou o valor tenha efeito.</span><span class="sxs-lookup"><span data-stu-id="be23e-133">This method is only a definition and must be implemented by a specific class or value type to have effect.</span></span> <span data-ttu-id="be23e-134">O significado das comparações especificados nos valores de retorno seção ("precede", "ocorre na mesma posição que" e "segue) depende da implementação específica.</span><span class="sxs-lookup"><span data-stu-id="be23e-134">The meaning of the comparisons specified in the Return Values section ("precedes", "occurs in the same position as", and "follows) depends on the particular implementation.</span></span>  
  
 <span data-ttu-id="be23e-135">Por definição, qualquer objeto compara maior `null`, e duas referências nulas forem comparados como iguais uns aos outros.</span><span class="sxs-lookup"><span data-stu-id="be23e-135">By definition, any object compares greater than `null`, and two null references compare equal to each other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be23e-136">O exemplo de código a seguir ilustra a implementação <xref:System.IComparable%601> de um simples `Temperature` objeto.</span><span class="sxs-lookup"><span data-stu-id="be23e-136">The following code example illustrates the implementation of <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="be23e-137">O exemplo cria um <xref:System.Collections.Generic.SortedList%602> coleção de cadeias de caracteres com `Temperature` chaves de objeto e adiciona vários pares de temperaturas e cadeias de caracteres à lista fora de sequência.</span><span class="sxs-lookup"><span data-stu-id="be23e-137">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="be23e-138">Na chamada para o <xref:System.Collections.Generic.SortedList%602.Add%2A> método, o <xref:System.Collections.Generic.SortedList%602> coleção usa o <xref:System.IComparable%601> implementação para classificar as entradas da lista, que são exibidas em ordem crescente de temperatura.</span><span class="sxs-lookup"><span data-stu-id="be23e-138">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="be23e-139">
            <para>Para objetos A, B e C, a seguir deve ser verdadeira: <c>A.CompareTo(A)</c> é necessário para retornar zero.  Se <c>A.CompareTo(B)</c> retorna zero, então <c>B.CompareTo(A)</c> é necessário para retornar zero.  Se <c>A.CompareTo(B)</c> retorna zero e <c>B.CompareTo(C)</c> retorna zero, em seguida, <c>A.CompareTo(C)</c> é necessário para retornar zero.  Se <c>A.CompareTo(B)</c> retorna um valor diferente de zero, então <c>B.CompareTo(A)</c> é necessário para retornar um valor do sinal oposto.  Se <c>A.CompareTo(B)</c> retorna um valor <paramref name="x" /> que não é igual a zero, e <c>B.CompareTo(C)</c> retorna um valor <paramref name="y" /> do mesmo sinal que <paramref name="x" />, em seguida, <c>A. CompareTo(C)</c> é necessária para o mesmo sinal que o valor de retorno <paramref name="x" /> e <paramref name="y" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="be23e-139">
              <para>For objects A, B, and C, the following must be true:  <c>A.CompareTo(A)</c> is required to return zero.  If <c>A.CompareTo(B)</c> returns zero, then <c>B.CompareTo(A)</c> is required to return zero.  If <c>A.CompareTo(B)</c> returns zero and <c>B.CompareTo(C)</c> returns zero, then <c>A.CompareTo(C)</c> is required to return zero.  If <c>A.CompareTo(B)</c> returns a value other than zero, then <c>B.CompareTo(A)</c> is required to return a value of the opposite sign.  If <c>A.CompareTo(B)</c> returns a value <paramref name="x" /> that is not equal to zero, and <c>B.CompareTo(C)</c> returns a value <paramref name="y" /> of the same sign as <paramref name="x" />, then <c>A.CompareTo(C)</c> is required to return a value of the same sign as <paramref name="x" /> and <paramref name="y" />.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="usage">
          <span data-ttu-id="be23e-140">
            <para>Use o <see cref="M:System.IComparable`1.CompareTo(`0)" /> método para determinar a ordem das instâncias de uma classe.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="be23e-140">
              <para>Use the <see cref="M:System.IComparable`1.CompareTo(`0)" /> method to determine the ordering of instances of a class.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>