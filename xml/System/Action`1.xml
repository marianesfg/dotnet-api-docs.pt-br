<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd092c3c61377edf68a48487d8fa19cd17b06d55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433881" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">O tipo do parâmetro do método encapsulado por esse delegado.</typeparam>
    <param name="obj">O parâmetro do método encapsulado por esse delegado.</param>
    <summary>Encapsula um método que tem um único parâmetro e não retorna um valor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Action%601> delegado para passar um método como um parâmetro sem declarar explicitamente um delegado personalizado. O método encapsulado deve corresponder à assinatura do método que é definida por este delegado. Isso significa que o método encapsulado deve ter um parâmetro que é passado por valor e ele não deve retornar um valor. (Em c#, o método deve retornar `void`. No Visual Basic, ele deverá ser definido pelo `Sub`...`End Sub` Construa. Ele também pode ser um método que retorna um valor que é ignorado.) Normalmente, esse é um método é usado para executar uma operação.  
  
> [!NOTE]
>  Para fazer referência a um método que tem um parâmetro e retorna um valor, use genérica <xref:System.Func%602> delegado em vez disso.  
  
 Quando você usa o <xref:System.Action%601> delegado, você não precisa definir explicitamente um delegado que encapsula um método com um único parâmetro. Por exemplo, o código a seguir declara explicitamente um delegado chamado `DisplayMessage` e atribui uma referência a um o <xref:System.Console.WriteLine%2A> método ou o `ShowWindowsMessage` método para sua instância de delegado.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 O exemplo a seguir simplifica esse código instanciando a <xref:System.Action%601> delegado em vez de definir um novo delegado explicitamente e atribuí-lo um método nomeado.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Você também pode usar o <xref:System.Action%601> delegar com métodos anônimos em c#, como mostra o exemplo a seguir. (Para obter uma introdução aos métodos anônimos, consulte [métodos anônimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Você também pode atribuir uma expressão lambda para uma <xref:System.Action%601> delegar a instância, como mostra o exemplo a seguir. (Para obter uma introdução a expressões lambda, consulte [expressões Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 O <xref:System.Collections.Generic.List%601.ForEach%2A> e <xref:System.Array.ForEach%2A> métodos cada levar uma <xref:System.Action%601> representante como um parâmetro. O método encapsulado pelo delegado permite que você execute uma ação em cada elemento da matriz ou lista. O exemplo usa o <xref:System.Collections.Generic.List%601.ForEach%2A> método para fornecer uma ilustração.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o uso do <xref:System.Action%601> delegado para imprimir o conteúdo de um <xref:System.Collections.Generic.List%601> objeto. Neste exemplo, o `Print` método é usado para exibir o conteúdo da lista para o console. Além disso, o exemplo c# também demonstra o uso de métodos anônimos para exibir o conteúdo para o console. Observe que o exemplo não declarar explicitamente um <xref:System.Action%601> variável. Em vez disso, ele passa uma referência a um método que usa um único parâmetro e que não retorna um valor para o <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> método, cujo único parâmetro é um <xref:System.Action%601> delegate. Da mesma forma, no c# exemplo, um <xref:System.Action%601> delegado não é instanciado explicitamente porque a assinatura do método anônimo corresponde à assinatura do <xref:System.Action%601> delegado é esperado pelo <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>