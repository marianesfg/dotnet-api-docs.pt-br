<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af8939f7e8a088eef165eb31b54cab1092f9abee" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52733207" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa o status de uma operação assíncrona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.IAsyncResult> interface é implementada por classes que contêm métodos que podem operar de forma assíncrona. É o tipo de retorno dos métodos que iniciam uma operação assíncrona, como <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, e ele é passado para métodos que concluir uma operação assíncrona, como <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> objetos também são passados aos métodos invocados pela <xref:System.AsyncCallback> delega quando uma operação assíncrona é concluída.  
  
 Um objeto que dá suporte a <xref:System.IAsyncResult> interface armazena informações de estado para uma operação assíncrona e fornece um objeto de sincronização para permitir que os threads a ser sinalizado quando a operação for concluída.  
  
> [!NOTE]
>  O <xref:System.Runtime.Remoting.Messaging.AsyncResult> classe é a implementação de <xref:System.IAsyncResult> que é retornado pelo `BeginInvoke` método quando você usa um delegado para chamar um método de forma assíncrona.  
  
 Para obter uma descrição detalhada de como o <xref:System.IAsyncResult> interface é usada, consulte o [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) tópico.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> propriedade para obter um <xref:System.Threading.WaitHandle>e como aguardar uma chamada assíncrona em um delegado. O <xref:System.Threading.WaitHandle> é sinalizado quando a chamada assíncrona é concluída, e você pode esperar por ele chamando o método <xref:System.Threading.WaitHandle.WaitOne%2A>.  
  
 O exemplo consiste em duas classes: a classe que contém o método que é chamado de forma assíncrona e a classe que contém o método `Main` que faz a chamada.  
  
 Para obter mais informações e mais exemplos de como chamar os métodos de forma assíncrona usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto definido pelo usuário que qualifica ou contém informações sobre uma operação assíncrona.</summary>
        <value>Um objeto definido pelo usuário que qualifica ou contém informações sobre uma operação assíncrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna o objeto que é o último parâmetro do método que inicia uma operação assíncrona.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como o <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> propriedade é usada para passar informações para um método de retorno de chamada. O último parâmetro do `BeginInvoke` chamada de método é uma cadeia de caracteres de formato que o método de retorno de chamada usa para formatar uma mensagem de saída.  
  
 O exemplo consiste em duas classes: a classe que contém o método que é chamado de forma assíncrona e a classe que contém o método `Main` que faz a chamada.  
  
 Para obter mais informações sobre como funciona a este exemplo de retorno de chamada e mais exemplos de como chamar os métodos de forma assíncrona usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implemente essa propriedade para permitir que o chamador de uma operação assíncrona obter um objeto definido pelo aplicativo especificado no início da operação.</para></block>
        <block subset="none" type="usage"><para>Esse objeto pode ser usado para passar informações de estado para a operação assíncrona para um <see cref="T:System.AsyncCallback" /> fornecida por você.</para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um <see cref="T:System.Threading.WaitHandle" /> que é usado para aguardar a conclusão de uma operação assíncrona.</summary>
        <value>Um <see cref="T:System.Threading.WaitHandle" /> que é usado para aguardar a conclusão de uma operação assíncrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno permite que o cliente Aguarde até que uma operação assíncrona seja concluída, em vez de sondagem <xref:System.IAsyncResult.IsCompleted%2A> até a conclusão da operação. O valor de retorno pode ser usado para executar uma <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, ou <xref:System.Threading.WaitHandle.WaitAll%2A> operação.  
  
 O common language runtime fornece um número de objetos de espera, como <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, e <xref:System.Threading.Mutex>, que espelham primitivos de sincronização do Win32.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar o <xref:System.IAsyncResult.AsyncWaitHandle%2A> propriedade para obter um <xref:System.Threading.WaitHandle>e como aguardar uma chamada assíncrona em um delegado. O <xref:System.Threading.WaitHandle> é sinalizado quando a chamada assíncrona é concluída, e você pode esperar por ele chamando o método <xref:System.Threading.WaitHandle.WaitOne%2A>.  
  
 O exemplo consiste em duas classes: a classe que contém o método que é chamado de forma assíncrona e a classe que contém o método `Main` que faz a chamada.  
  
 Para obter mais informações e mais exemplos de como chamar os métodos de forma assíncrona usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O objeto que implementa <see cref="T:System.IAsyncResult" /> não precisa criar as <see cref="T:System.Threading.WaitHandle" /> até que o <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> propriedade é lido. É a opção do <see cref="T:System.IAsyncResult" /> implementador. No entanto, se o implementador cria <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, é responsabilidade do implementador para sinalizar o <see cref="T:System.Threading.WaitHandle" /> que encerrará a espera no momento apropriado. Por exemplo, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> encerra o tempo de espera em nome do chamador quando um método invocado de forma assíncrona retorna. Depois de criada, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> devem ser mantidos ativos até que o usuário chama o método que conclui a operação assíncrona. Nessa ocasião, o objeto por trás <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> podem ser descartadas.</para></block>
        <block subset="none" type="usage"><para>Clientes que aguarde até que a operação seja concluída (em vez de sondagem) usam essa propriedade para obter um objeto de sincronização para aguardar.  
  
 <block subset="none" type="note"><para>  
 Quando você usa o <see langword="BeginInvoke" /> método de um delegado para chamar um método de forma assíncrona e obter um identificador de espera do resultante <see cref="T:System.IAsyncResult" />, é recomendável que você feche o identificador de espera assim que tiver terminado de usá-lo, chamando o <see cref="M:System.Threading.WaitHandle.Close" /> método. Se você simplesmente liberar todas as referências para o identificador de espera, os recursos do sistema são liberados quando a coleta de lixo recupera o identificador de espera, mas a coleta de lixo funciona com mais eficiência quando objetos descartáveis são explicitamente fechados ou descartados. Para obter mais informações, consulte a propriedade <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />.  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se a operação assíncrona foi concluída de forma síncrona.</summary>
        <value><see langword="true" /> se a operação assíncrona é concluída de forma síncrona; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a conclusão síncrona da chamada foi detectada no <xref:System.AsyncCallback> delegado, é provável que o thread que iniciou a operação assíncrona é o thread atual.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>A maioria dos implementadores do <see cref="T:System.IAsyncResult" /> interface não usará essa propriedade e deve retornar <see langword="false" />. Começando com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)], uma tarefa que é criada com o <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> método não será concluída se essa propriedade não está implementada corretamente. Ver [compatibilidade de aplicativos no 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para></block>
        <block subset="none" type="usage"><para>Use essa propriedade para determinar se a operação assíncrona concluída de forma síncrona. Por exemplo, essa propriedade pode retornar <see langword="true" /> para uma operação assíncrona de e/s se a solicitação de e/s era pequena.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se a operação assíncrona foi concluída.</summary>
        <value><see langword="true" /> se a operação for concluída; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando essa propriedade é `true`, você pode supor, é seguro descartar quaisquer recursos que você alocar para uso pela operação assíncrona.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o <xref:System.IAsyncResult.IsCompleted%2A> propriedade do <xref:System.IAsyncResult> para descobrir quando uma chamada assíncrona for concluída. Nesse caso, a chamada assíncrona é feita usando o `BeginInvoke` método de um delegado. Você pode usar o <xref:System.IAsyncResult.IsCompleted%2A> propriedade sondar para conclusão ao fazer a chamada assíncrona de um thread que a interface do usuário de serviços. A sondagem da conclusão permite que o thread de chamada continue em execução enquanto a chamada assíncrona é executada em um thread <xref:System.Threading.ThreadPool>.  
  
 O exemplo consiste em duas classes: a classe que contém o método que é chamado de forma assíncrona e a classe que contém o método `Main` que faz a chamada.  
  
 Para obter mais informações e mais exemplos de como chamar os métodos de forma assíncrona usando delegados, consulte [chamando métodos síncronos assincronamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Os implementadores normalmente retornará o valor de um campo particular ou teste internos como o valor dessa propriedade.</para></block>
        <block subset="none" type="usage"><para>Clientes que sondam o status da operação (em vez de aguardar um objeto de sincronização) usar essa propriedade para determinar o status da operação.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>